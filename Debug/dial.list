
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08009314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08009388  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  080093e8  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000134  08009448  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08009448  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037900  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e86  00000000  00000000  00057a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0005c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  0005e230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d967  00000000  00000000  0005fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4fe  00000000  00000000  0009d377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016f04d  00000000  00000000  000bc875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022b8c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d0  00000000  00000000  0022b918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000134 	.word	0x20000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009244 	.word	0x08009244

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000138 	.word	0x20000138
 80002dc:	08009244 	.word	0x08009244

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	705a      	strb	r2, [r3, #1]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	4608      	mov	r0, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	460b      	mov	r3, r1
 80006be:	70bb      	strb	r3, [r7, #2]
 80006c0:	4613      	mov	r3, r2
 80006c2:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	787a      	ldrb	r2, [r7, #1]
 80006c8:	705a      	strb	r2, [r3, #1]
   int m_dial_temp = 0; // Temporary location to collect dial displacement
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d105      	bne.n	80006e0 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x36>
 80006d4:	787b      	ldrb	r3, [r7, #1]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e005      	b.n	80006ec <_ZNSt4Dial14CalculateStepsE9Directionhh+0x42>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	787b      	ldrb	r3, [r7, #1]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da02      	bge.n	80006f8 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x4e>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3364      	adds	r3, #100	; 0x64
 80006f6:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 80006f8:	78ba      	ldrb	r2, [r7, #2]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	015b      	lsls	r3, r3, #5
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZNSt4Dial14UpdatePositionEh>:

void Dial::UpdatePosition(uint8_t new_position){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
   m_dial_location = new_position;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>:
#include "my_definitions.h"
#include "string.h"

namespace std {

Encoder::Encoder(I2C_HandleTypeDef *HI2Cx, int hyst_mode) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b08a      	sub	sp, #40	; 0x28
 800072e:	af04      	add	r7, sp, #16
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3304      	adds	r3, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3314      	adds	r3, #20
 8000748:	2264      	movs	r2, #100	; 0x64
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f008 f8ff 	bl	8008950 <memset>
 8000752:	68f9      	ldr	r1, [r7, #12]
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2204      	movs	r2, #4
 8000774:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
   m_hi2cx = HI2Cx;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	601a      	str	r2, [r3, #0]

   // Read magnet status
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 8000786:	22c8      	movs	r2, #200	; 0xc8
 8000788:	9202      	str	r2, [sp, #8]
 800078a:	2201      	movs	r2, #1
 800078c:	9201      	str	r2, [sp, #4]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	220b      	movs	r2, #11
 8000794:	216c      	movs	r1, #108	; 0x6c
 8000796:	f002 fa9f 	bl	8002cd8 <HAL_I2C_Mem_Read>
 800079a:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x8a>
      m_status = Read_Error;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2201      	movs	r2, #1
 80007ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80007b2:	e003      	b.n	80007bc <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x92>
   } else m_status = Ready;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

   // Parse magnet status
   if (m_status == Ready){
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d12b      	bne.n	800081e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
      // Mask off unnecessary bits
      char reg_status = (m_i2c_receive_buf[0] & (7UL << 3)); // Only bits [5:3] matter for now
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80007ce:	75fb      	strb	r3, [r7, #23]
      switch (reg_status) {
 80007d0:	7dfb      	ldrb	r3, [r7, #23]
 80007d2:	2b30      	cmp	r3, #48	; 0x30
 80007d4:	d014      	beq.n	8000800 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xd6>
 80007d6:	2b30      	cmp	r3, #48	; 0x30
 80007d8:	dc1c      	bgt.n	8000814 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 80007da:	2b28      	cmp	r3, #40	; 0x28
 80007dc:	d00b      	beq.n	80007f6 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xcc>
 80007de:	2b28      	cmp	r3, #40	; 0x28
 80007e0:	dc18      	bgt.n	8000814 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xc2>
 80007e6:	2b20      	cmp	r3, #32
 80007e8:	d00f      	beq.n	800080a <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xe0>
 80007ea:	e013      	b.n	8000814 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
         case 0:
            m_mag_status = Magnet_Missing;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2204      	movs	r2, #4
 80007f0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007f4:	e013      	b.n	800081e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 40:
            m_mag_status = Magnet_Too_Strong;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2205      	movs	r2, #5
 80007fa:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007fe:	e00e      	b.n	800081e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 48:
            m_mag_status = Magnet_Too_Weak;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2206      	movs	r2, #6
 8000804:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 8000808:	e009      	b.n	800081e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 32:
            m_mag_status = Magnet_OK;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2207      	movs	r2, #7
 800080e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 8000812:	e004      	b.n	800081e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         default:
            m_mag_status = Other_Error;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2203      	movs	r2, #3
 8000818:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 800081c:	bf00      	nop
      }
   } // End configuration write
*/

   // record starting angle.
   if (m_status == Ready) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000824:	2b00      	cmp	r3, #0
 8000826:	d120      	bne.n	800086a <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x140>
      // Get contents of angle register without converting to degrees.
      // This is to limit rounding error
      if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H, I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK){
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3304      	adds	r3, #4
 8000830:	22c8      	movs	r2, #200	; 0xc8
 8000832:	9202      	str	r2, [sp, #8]
 8000834:	2202      	movs	r2, #2
 8000836:	9201      	str	r2, [sp, #4]
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	220e      	movs	r2, #14
 800083e:	216c      	movs	r1, #108	; 0x6c
 8000840:	f002 fa4a 	bl	8002cd8 <HAL_I2C_Mem_Read>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x12e>
            Error_Handler();
 8000854:	f000 fddc 	bl	8001410 <Error_Handler>
         }
      m_starting_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	7952      	ldrb	r2, [r2, #5]
 8000862:	431a      	orrs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   } // End starting angle

} // End constructor
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0000      	movs	r0, r0
	...

08000878 <_ZNSt7Encoder11GetLocationEv>:

enum I2C_Status Encoder::GetStatus(){
   return m_status;
}

float Encoder::GetLocation() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af04      	add	r7, sp, #16
 800087e:	6078      	str	r0, [r7, #4]
   // Read angle register
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000888:	22c8      	movs	r2, #200	; 0xc8
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	2202      	movs	r2, #2
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	220e      	movs	r2, #14
 8000896:	216c      	movs	r1, #108	; 0x6c
 8000898:	f002 fa1e 	bl	8002cd8 <HAL_I2C_Mem_Read>
 800089c:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00a      	beq.n	80008c2 <_ZNSt7Encoder11GetLocationEv+0x4a>
      m_angle = -1;
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <_ZNSt7Encoder11GetLocationEv+0x100>)
 80008b4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
      m_status = Read_Error;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80008c0:	e00c      	b.n	80008dc <_ZNSt7Encoder11GetLocationEv+0x64>
   } else {
      m_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7952      	ldrb	r2, [r2, #5]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Subtract starting angle and then convert to degrees.
   m_angle = (m_angle - m_starting_angle) * ENCODER_DEGREES_PER_BIT;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008f4:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000960 <_ZNSt7Encoder11GetLocationEv+0xe8>
 80008f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

   // Corrected angle can be negative if starting>new
   if (m_angle < 0) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000908:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000910:	d509      	bpl.n	8000926 <_ZNSt7Encoder11GetLocationEv+0xae>
      m_angle += 360; // -60 degrees becomes +300 degrees
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000918:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000968 <_ZNSt7Encoder11GetLocationEv+0xf0>
 800091c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Convert angle to number on face of the dial
   // rounded to nearest tenth
   return (float)(round(10*m_angle/3.6)/10);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800092c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000934:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000970 <_ZNSt7Encoder11GetLocationEv+0xf8>
 8000938:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800093c:	eeb0 0b46 	vmov.f64	d0, d6
 8000940:	f007 ff86 	bl	8008850 <round>
 8000944:	eeb0 6b40 	vmov.f64	d6, d0
 8000948:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800094c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000950:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	00000000 	.word	0x00000000
 8000964:	3fb68000 	.word	0x3fb68000
 8000968:	00000000 	.word	0x00000000
 800096c:	40768000 	.word	0x40768000
 8000970:	cccccccd 	.word	0xcccccccd
 8000974:	400ccccc 	.word	0x400ccccc
 8000978:	bff00000 	.word	0xbff00000

0800097c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	711a      	strb	r2, [r3, #4]

}
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	715a      	strb	r2, [r3, #5]
   }
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]

}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2200      	movs	r2, #0
 8000a28:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
 8000a3a:	e001      	b.n	8000a40 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 8000a4a:	f002 f89b 	bl	8002b84 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f042 0201 	orr.w	r2, r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58020800 	.word	0x58020800

08000a74 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
   return m_status;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	795b      	ldrb	r3, [r3, #5]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ab2:	fef8 7a67 	vrinta.f32	s15, s15
 8000ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b0aa      	sub	sp, #168	; 0xa8
 8000ac8:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000aca:	f001 f8af 	bl	8001c2c <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 8000ace:	f000 f8cf 	bl	8000c70 <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000ad2:	f000 fb27 	bl	8001124 <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 8000ad6:	f000 f959 	bl	8000d8c <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 8000ada:	f000 fa8d 	bl	8000ff8 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 8000ade:	f000 faeb 	bl	80010b8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 8000ae2:	f000 f9f9 	bl	8000ed8 <_ZL12MX_TIM3_Initv>
   MX_I2C1_Init();
 8000ae6:	f000 f9a9 	bl	8000e3c <_ZL12MX_I2C1_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000aea:	2108      	movs	r1, #8
 8000aec:	4858      	ldr	r0, [pc, #352]	; (8000c50 <main+0x18c>)
 8000aee:	f005 f9b5 	bl	8005e5c <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 8000af2:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <main+0x190>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <main+0x190>)
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]

   // Control flow flags
   int move = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   int test_i2c = 1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   // Character buffers
   char msg[100] = { 0 };
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b12:	2260      	movs	r2, #96	; 0x60
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 ff1a 	bl	8008950 <memset>

   // Stepper
   int newnum = 90; // Next number to spin the dial to
 8000b1c:	235a      	movs	r3, #90	; 0x5a
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   enum Direction dir = CW; // Direction of dial rotation.
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

   // Encoder
   Encoder = new std::Encoder(&hi2c1, AS5600_HYSTERESIS_1LSB);
 8000b28:	2088      	movs	r0, #136	; 0x88
 8000b2a:	f007 fe77 	bl	800881c <_Znwj>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461c      	mov	r4, r3
 8000b32:	2204      	movs	r2, #4
 8000b34:	4948      	ldr	r1, [pc, #288]	; (8000c58 <main+0x194>)
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff fdf7 	bl	800072a <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>
 8000b3c:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <main+0x198>)
 8000b3e:	601c      	str	r4, [r3, #0]
   uint8_t i2c_receive_buf[2] = { 0 }; // Position data is 12 bits and requires two reads.
 8000b40:	2300      	movs	r3, #0
 8000b42:	84bb      	strh	r3, [r7, #36]	; 0x24
   uint8_t i2c_write_buf[2] = { 0 };
 8000b44:	2300      	movs	r3, #0
 8000b46:	843b      	strh	r3, [r7, #32]
   //uint16_t encoder_location = 0; //
   float encoder_location = 0;
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

#if DEBUG ==1
   uint8_t start_message[] = "\r\n\r\n..... Running .....\r\n";
 8000b50:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <main+0x19c>)
 8000b52:	1d3c      	adds	r4, r7, #4
 8000b54:	461d      	mov	r5, r3
 8000b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5e:	c403      	stmia	r4!, {r0, r1}
 8000b60:	8022      	strh	r2, [r4, #0]
   HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), 10);
 8000b62:	1d39      	adds	r1, r7, #4
 8000b64:	230a      	movs	r3, #10
 8000b66:	221a      	movs	r2, #26
 8000b68:	483e      	ldr	r0, [pc, #248]	; (8000c64 <main+0x1a0>)
 8000b6a:	f006 fb33 	bl	80071d4 <HAL_UART_Transmit>
   /* USER CODE BEGIN WHILE */

   while (1) {

// -------------------------------------------------------------------
      if (test_i2c == 1) {
 8000b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d147      	bne.n	8000c06 <main+0x142>
         enum I2C_Status ret;
         while (1) {


#ifdef GET_ANGLE
            encoder_location = Encoder->GetLocation();
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <main+0x198>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fe7c 	bl	8000878 <_ZNSt7Encoder11GetLocationEv>
 8000b80:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
            // Split floating point into two integers
            // Ex: 123.4567 becomes two variables: 123 and 4567
            float encoder_fraction = encoder_location - (int)encoder_location; // Get fraction
 8000b84:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8000b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8000b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b98:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            int tmpInt2 = round(encoder_fraction * 100)/10;  // Turn into integer, rounded to nearest 10th
 8000b9c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000ba0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000c68 <main+0x1a4>
 8000ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bac:	f7ff ff7a 	bl	8000aa4 <_ZSt5roundf>
 8000bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8000bb4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            sprintf(msg, "Encoder Location: %d.%01d\r\n", (int)encoder_location,tmpInt2);
 8000bc8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8000bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bd8:	ee17 2a90 	vmov	r2, s15
 8000bdc:	4923      	ldr	r1, [pc, #140]	; (8000c6c <main+0x1a8>)
 8000bde:	f007 ffbd 	bl	8008b5c <siprintf>

            // Serial print the result
            HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb7a 	bl	80002e0 <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	481b      	ldr	r0, [pc, #108]	; (8000c64 <main+0x1a0>)
 8000bf8:	f006 faec 	bl	80071d4 <HAL_UART_Transmit>
            HAL_Delay(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f001 f8a6 	bl	8001d50 <HAL_Delay>

            while(1);

#endif

         }
 8000c04:	e7b7      	b.n	8000b76 <main+0xb2>

      }

// -------------------------------------------------------------------
      if (move == 1) {
 8000c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1af      	bne.n	8000b6e <main+0xaa>
         // Routine to demo stepper control
         Move_Stepper(dir, 0, newnum);
 8000c0e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000c12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fbbf 	bl	800139c <_Z12Move_Stepper9Directionii>

         if (newnum > 0) {
 8000c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dd05      	ble.n	8000c32 <main+0x16e>
            newnum -= 10;
 8000c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c2a:	3b0a      	subs	r3, #10
 8000c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c30:	e79d      	b.n	8000b6e <main+0xaa>
         } else {
            newnum = 90;
 8000c32:	235a      	movs	r3, #90	; 0x5a
 8000c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            if (dir == CCW) {
 8000c38:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d103      	bne.n	8000c48 <main+0x184>
               dir = CW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8000c46:	e792      	b.n	8000b6e <main+0xaa>
            } else
               (dir = CCW);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
      } // End if move == 1

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
   } // End main loop
 8000c4e:	e78e      	b.n	8000b6e <main+0xaa>
 8000c50:	20000258 	.word	0x20000258
 8000c54:	40000400 	.word	0x40000400
 8000c58:	2000020c 	.word	0x2000020c
 8000c5c:	20000744 	.word	0x20000744
 8000c60:	08009278 	.word	0x08009278
 8000c64:	200002a4 	.word	0x200002a4
 8000c68:	42c80000 	.word	0x42c80000
 8000c6c:	0800925c 	.word	0x0800925c

08000c70 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b09c      	sub	sp, #112	; 0x70
 8000c74:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	224c      	movs	r2, #76	; 0x4c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f007 fe66 	bl	8008950 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2220      	movs	r2, #32
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fe60 	bl	8008950 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f002 fce3 	bl	800365c <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <_Z18SystemClock_Configv+0x114>)
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <_Z18SystemClock_Configv+0x114>)
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <_Z18SystemClock_Configv+0x114>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <_Z18SystemClock_Configv+0x118>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb8:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <_Z18SystemClock_Configv+0x118>)
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <_Z18SystemClock_Configv+0x118>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <_Z18SystemClock_Configv+0x118>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d000      	beq.n	8000ce6 <_Z18SystemClock_Configv+0x76>
 8000ce4:	e7f2      	b.n	8000ccc <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 8000d04:	2318      	movs	r3, #24
 8000d06:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d14:	230c      	movs	r3, #12
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fce3 	bl	80036f0 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 8000d3a:	f000 fb69 	bl	8001410 <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	; 0x3f
 8000d40:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 f8d4 	bl	8003f10 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2301      	movne	r3, #1
 8000d70:	2300      	moveq	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000d78:	f000 fb4a 	bl	8001410 <Error_Handler>
   }
}
 8000d7c:	bf00      	nop
 8000d7e:	3770      	adds	r7, #112	; 0x70
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58000400 	.word	0x58000400
 8000d88:	58024800 	.word	0x58024800

08000d8c <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <_ZL11MX_ETH_Initv+0xa0>)
 8000d94:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	3302      	adds	r3, #2
 8000dae:	22e1      	movs	r2, #225	; 0xe1
 8000db0:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	3303      	adds	r3, #3
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	3305      	adds	r3, #5
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dd8:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <_ZL11MX_ETH_Initv+0xa4>)
 8000dda:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <_ZL11MX_ETH_Initv+0xa8>)
 8000de0:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000de4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000de8:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <_ZL11MX_ETH_Initv+0x9c>)
 8000dec:	f001 f904 	bl	8001ff8 <HAL_ETH_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 8000e00:	f000 fb06 	bl	8001410 <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000e04:	2234      	movs	r2, #52	; 0x34
 8000e06:	2100      	movs	r1, #0
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <_ZL11MX_ETH_Initv+0xac>)
 8000e0a:	f007 fda1 	bl	8008950 <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <_ZL11MX_ETH_Initv+0xac>)
 8000e10:	2221      	movs	r2, #33	; 0x21
 8000e12:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_ZL11MX_ETH_Initv+0xac>)
 8000e16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1a:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <_ZL11MX_ETH_Initv+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000184 	.word	0x20000184
 8000e2c:	40028000 	.word	0x40028000
 8000e30:	200000d4 	.word	0x200000d4
 8000e34:	20000074 	.word	0x20000074
 8000e38:	20000150 	.word	0x20000150

08000e3c <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <_ZL12MX_I2C1_Initv+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
   hi2c1.Init.Timing = 0x10707DBC;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e48:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <_ZL12MX_I2C1_Initv+0x98>)
 8000e4a:	605a      	str	r2, [r3, #4]
   hi2c1.Init.OwnAddress1 = 0;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
   hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e76:	4815      	ldr	r0, [pc, #84]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e78:	f001 fe9e 	bl	8002bb8 <HAL_I2C_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf14      	ite	ne
 8000e82:	2301      	movne	r3, #1
 8000e84:	2300      	moveq	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <_ZL12MX_I2C1_Initv+0x54>
      Error_Handler();
 8000e8c:	f000 fac0 	bl	8001410 <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000e90:	2100      	movs	r1, #0
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000e94:	f002 fa02 	bl	800329c <HAL_I2CEx_ConfigAnalogFilter>
 8000e98:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <_ZL12MX_I2C1_Initv+0x70>
      Error_Handler();
 8000ea8:	f000 fab2 	bl	8001410 <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000eac:	2100      	movs	r1, #0
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <_ZL12MX_I2C1_Initv+0x90>)
 8000eb0:	f002 fa3f 	bl	8003332 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <_ZL12MX_I2C1_Initv+0x8c>
      Error_Handler();
 8000ec4:	f000 faa4 	bl	8001410 <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000020c 	.word	0x2000020c
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	10707dbc 	.word	0x10707dbc

08000ed8 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000f0a:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f0c:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <_ZL12MX_TIM3_Initv+0x11c>)
 8000f0e:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f12:	223f      	movs	r2, #63	; 0x3f
 8000f14:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f18:	2210      	movs	r2, #16
 8000f1a:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f1e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000f22:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000f30:	482f      	ldr	r0, [pc, #188]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f32:	f004 fedb 	bl	8005cec <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000f46:	f000 fa63 	bl	8001410 <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f58:	f005 fafe 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000f6c:	f000 fa50 	bl	8001410 <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f72:	f004 ff12 	bl	8005d9a <HAL_TIM_PWM_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2301      	movne	r3, #1
 8000f7e:	2300      	moveq	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000f86:	f000 fa43 	bl	8001410 <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000f9a:	f006 f825 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
         != HAL_OK) {
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000fae:	f000 fa2f 	bl	8001410 <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	2360      	movs	r3, #96	; 0x60
 8000fb4:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000fb6:	2328      	movs	r3, #40	; 0x28
 8000fb8:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000fca:	f005 f9b5 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000fde:	f000 fa17 	bl	8001410 <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <_ZL12MX_TIM3_Initv+0x118>)
 8000fe4:	f000 fbc4 	bl	8001770 <HAL_TIM_MspPostInit>

}
 8000fe8:	bf00      	nop
 8000fea:	3738      	adds	r7, #56	; 0x38
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000258 	.word	0x20000258
 8000ff4:	40000400 	.word	0x40000400

08000ff8 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ffe:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001000:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001040:	481b      	ldr	r0, [pc, #108]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001042:	f006 f877 	bl	8007134 <HAL_UART_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8001056:	f000 f9db 	bl	8001410 <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800105a:	2100      	movs	r1, #0
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800105e:	f007 f855 	bl	800810c <HAL_UARTEx_SetTxFifoThreshold>
 8001062:	4603      	mov	r3, r0
         != HAL_OK) {
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8001072:	f000 f9cd 	bl	8001410 <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001076:	2100      	movs	r1, #0
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800107a:	f007 f885 	bl	8008188 <HAL_UARTEx_SetRxFifoThreshold>
 800107e:	4603      	mov	r3, r0
         != HAL_OK) {
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 800108e:	f000 f9bf 	bl	8001410 <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001094:	f007 f801 	bl	800809a <HAL_UARTEx_DisableFifoMode>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 80010a8:	f000 f9b2 	bl	8001410 <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200002a4 	.word	0x200002a4
 80010b4:	40004800 	.word	0x40004800

080010b8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010c4:	2209      	movs	r2, #9
 80010c6:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001100:	f002 f963 	bl	80033ca <HAL_PCD_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8001114:	f000 f97c 	bl	8001410 <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000334 	.word	0x20000334
 8001120:	40080000 	.word	0x40080000

08001124 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b68      	ldr	r3, [pc, #416]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a63      	ldr	r2, [pc, #396]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b60      	ldr	r3, [pc, #384]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a54      	ldr	r2, [pc, #336]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b51      	ldr	r3, [pc, #324]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d0:	4b46      	ldr	r3, [pc, #280]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a45      	ldr	r2, [pc, #276]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b42      	ldr	r3, [pc, #264]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <_ZL12MX_GPIO_Initv+0x1c8>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001214:	f001 fcb6 	bl	8002b84 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121e:	4835      	ldr	r0, [pc, #212]	; (80012f4 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001220:	f001 fcb0 	bl	8002b84 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <_ZL12MX_GPIO_Initv+0x1d4>)
 800122c:	f001 fcaa 	bl	8002b84 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2102      	movs	r1, #2
 8001234:	4831      	ldr	r0, [pc, #196]	; (80012fc <_ZL12MX_GPIO_Initv+0x1d8>)
 8001236:	f001 fca5 	bl	8002b84 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <_ZL12MX_GPIO_Initv+0x1d4>)
 8001250:	f001 fae8 	bl	8002824 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8001254:	f244 0301 	movw	r3, #16385	; 0x4001
 8001258:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4820      	ldr	r0, [pc, #128]	; (80012f0 <_ZL12MX_GPIO_Initv+0x1cc>)
 800126e:	f001 fad9 	bl	8002824 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <_ZL12MX_GPIO_Initv+0x1d0>)
 800128c:	f001 faca 	bl	8002824 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <_ZL12MX_GPIO_Initv+0x1dc>)
 8001296:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <_ZL12MX_GPIO_Initv+0x1e0>)
 80012a4:	f001 fabe 	bl	8002824 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <_ZL12MX_GPIO_Initv+0x1d4>)
 80012c2:	f001 faaf 	bl	8002824 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <_ZL12MX_GPIO_Initv+0x1d8>)
 80012de:	f001 faa1 	bl	8002824 <HAL_GPIO_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3730      	adds	r7, #48	; 0x30
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020400 	.word	0x58020400
 80012f4:	58020c00 	.word	0x58020c00
 80012f8:	58020800 	.word	0x58020800
 80012fc:	58021000 	.word	0x58021000
 8001300:	11110000 	.word	0x11110000
 8001304:	58021800 	.word	0x58021800

08001308 <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 0201 	bic.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx) {
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

   // !! Only works now because TIM3 is the only PWM timer.
   // !! The complete solution is to check TIM status bits to see
   // !! who issued the interrupt.

   Stop_Timer(TIM3); // Freeze counter at zero
 8001350:	4810      	ldr	r0, [pc, #64]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001352:	f7ff ffd9 	bl	8001308 <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fb26 	bl	80009ac <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fb91 	bl	8000a8c <_ZNSt12StepperMotor12MoveCompleteEv>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fb2a 	bl	80009d8 <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 8001384:	e002      	b.n	800138c <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001388:	f7ff ffce 	bl	8001328 <_Z11Start_TimerP11TIM_TypeDef>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40000400 	.word	0x40000400
 8001398:	2000073c 	.word	0x2000073c

0800139c <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */

   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <_Z12Move_Stepper9Directionii+0x6c>)
 80013ac:	681c      	ldr	r4, [r3, #0]
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <_Z12Move_Stepper9Directionii+0x70>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	7bf9      	ldrb	r1, [r7, #15]
 80013bc:	f7ff f975 	bl	80006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>
 80013c0:	4601      	mov	r1, r0
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff fb22 	bl	8000a10 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <_Z12Move_Stepper9Directionii+0x6c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fb4f 	bl	8000a74 <_ZNSt12StepperMotor6StatusEv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <_Z12Move_Stepper9Directionii+0x4c>
 80013e6:	e7f1      	b.n	80013cc <_Z12Move_Stepper9Directionii+0x30>
   } // Wait for move to finish
   HAL_Delay(DELAY_MS); // Brief delay after move to allow mechanical settling.
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f000 fcb0 	bl	8001d50 <HAL_Delay>

   // [TODO] Compare expected and measured positions here.

   Dial->UpdatePosition(next_number); // Expected and measured are in agreement.
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <_Z12Move_Stepper9Directionii+0x70>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f986 	bl	800070c <_ZNSt4Dial14UpdatePositionEh>

}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	2000073c 	.word	0x2000073c
 800140c:	20000740 	.word	0x20000740

08001410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 8001418:	e7fe      	b.n	8001418 <Error_Handler+0x8>
	...

0800141c <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d119      	bne.n	8001460 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	4293      	cmp	r3, r2
 8001434:	d114      	bne.n	8001460 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 8001436:	200c      	movs	r0, #12
 8001438:	f007 f9f0 	bl	800881c <_Znwj>
 800143c:	4603      	mov	r3, r0
 800143e:	461c      	mov	r4, r3
 8001440:	4909      	ldr	r1, [pc, #36]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff fa9a 	bl	800097c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800144a:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 800144c:	2002      	movs	r0, #2
 800144e:	f007 f9e5 	bl	800881c <_Znwj>
 8001452:	4603      	mov	r3, r0
 8001454:	461c      	mov	r4, r3
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff f916 	bl	8000688 <_ZNSt4DialC1Ev>
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800145e:	601c      	str	r4, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	40000400 	.word	0x40000400
 800146c:	2000073c 	.word	0x2000073c
 8001470:	20000740 	.word	0x20000740

08001474 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
 8001478:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff ffcd 	bl	800141c <_Z41__static_initialization_and_destruction_0ii>
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_MspInit+0x30>)
 800148c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x30>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58024400 	.word	0x58024400

080014b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a59      	ldr	r2, [pc, #356]	; (800163c <HAL_ETH_MspInit+0x184>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f040 80ab 	bne.w	8001632 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_ETH_MspInit+0x188>)
 80014de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e2:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_ETH_MspInit+0x188>)
 80014e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <HAL_ETH_MspInit+0x188>)
 80014ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014fa:	4b51      	ldr	r3, [pc, #324]	; (8001640 <HAL_ETH_MspInit+0x188>)
 80014fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800150c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800151a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151e:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800152a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a40      	ldr	r2, [pc, #256]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a39      	ldr	r2, [pc, #228]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a31      	ldr	r2, [pc, #196]	; (8001640 <HAL_ETH_MspInit+0x188>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_ETH_MspInit+0x188>)
 8001598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_ETH_MspInit+0x188>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015ae:	2332      	movs	r3, #50	; 0x32
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015be:	230b      	movs	r3, #11
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	481e      	ldr	r0, [pc, #120]	; (8001644 <HAL_ETH_MspInit+0x18c>)
 80015ca:	f001 f92b 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015ce:	2386      	movs	r3, #134	; 0x86
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015de:	230b      	movs	r3, #11
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <HAL_ETH_MspInit+0x190>)
 80015ea:	f001 f91b 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001600:	230b      	movs	r3, #11
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <HAL_ETH_MspInit+0x194>)
 800160c:	f001 f90a 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001610:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001622:	230b      	movs	r3, #11
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <HAL_ETH_MspInit+0x198>)
 800162e:	f001 f8f9 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	; 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40028000 	.word	0x40028000
 8001640:	58024400 	.word	0x58024400
 8001644:	58020800 	.word	0x58020800
 8001648:	58020000 	.word	0x58020000
 800164c:	58020400 	.word	0x58020400
 8001650:	58021800 	.word	0x58021800

08001654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0b8      	sub	sp, #224	; 0xe0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	22bc      	movs	r2, #188	; 0xbc
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f007 f96b 	bl	8008950 <memset>
  if(hi2c->Instance==I2C1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_I2C_MspInit+0xc0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d142      	bne.n	800170a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001684:	2308      	movs	r3, #8
 8001686:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f002 ffc8 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800169e:	f7ff feb7 	bl	8001410 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c8:	2312      	movs	r3, #18
 80016ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016da:	2304      	movs	r3, #4
 80016dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <HAL_I2C_MspInit+0xc8>)
 80016e8:	f001 f89c 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_I2C_MspInit+0xc4>)
 80016fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	37e0      	adds	r7, #224	; 0xe0
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	58024400 	.word	0x58024400
 800171c:	58020400 	.word	0x58020400

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_TIM_Base_MspInit+0x48>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d116      	bne.n	8001760 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_Base_MspInit+0x4c>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <HAL_TIM_Base_MspInit+0x4c>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_TIM_Base_MspInit+0x4c>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	201d      	movs	r0, #29
 8001756:	f000 fc1a 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800175a:	201d      	movs	r0, #29
 800175c:	f000 fc31 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40000400 	.word	0x40000400
 800176c:	58024400 	.word	0x58024400

08001770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_TIM_MspPostInit+0x6c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11f      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_TIM_MspPostInit+0x70>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_TIM_MspPostInit+0x70>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_TIM_MspPostInit+0x70>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 80017b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_TIM_MspPostInit+0x74>)
 80017ce:	f001 f829 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000400 	.word	0x40000400
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020800 	.word	0x58020800

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b8      	sub	sp, #224	; 0xe0
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	22bc      	movs	r2, #188	; 0xbc
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f007 f8a1 	bl	8008950 <memset>
  if(huart->Instance==USART3)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <HAL_UART_MspInit+0xc0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d142      	bne.n	800189e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fefe 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001832:	f7ff fded 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_UART_MspInit+0xc4>)
 8001838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0xc4>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0xc4>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0xc4>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_UART_MspInit+0xc4>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0xc4>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0xc8>)
 800189a:	f000 ffc3 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	37e0      	adds	r7, #224	; 0xe0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40004800 	.word	0x40004800
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58020c00 	.word	0x58020c00

080018b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0b8      	sub	sp, #224	; 0xe0
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	22bc      	movs	r2, #188	; 0xbc
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 f83b 	bl	8008950 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_PCD_MspInit+0xe8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d156      	bne.n	8001992 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fe96 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001902:	f7ff fd85 	bl	8001410 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001906:	f001 fee3 	bl	80036d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001928:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800192c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001942:	230a      	movs	r3, #10
 8001944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800194c:	4619      	mov	r1, r3
 800194e:	4815      	ldr	r0, [pc, #84]	; (80019a4 <HAL_PCD_MspInit+0xf0>)
 8001950:	f000 ff68 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <HAL_PCD_MspInit+0xf0>)
 8001970:	f000 ff58 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 8001976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 800197c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001980:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_PCD_MspInit+0xec>)
 8001986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	37e0      	adds	r7, #224	; 0xe0
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40080000 	.word	0x40080000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f98c 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM3_IRQHandler+0x10>)
 8001a02:	f004 fb79 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000258 	.word	0x20000258

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	f006 ff5f 	bl	80088ec <__errno>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffe7 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a52:	e7fe      	b.n	8001a52 <_exit+0x12>

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f006 ff32 	bl	80088ec <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20020000 	.word	0x20020000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	20000748 	.word	0x20000748
 8001abc:	20000770 	.word	0x20000770

08001ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <SystemInit+0xec>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	4a38      	ldr	r2, [pc, #224]	; (8001bac <SystemInit+0xec>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <SystemInit+0xf0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	2b06      	cmp	r3, #6
 8001ade:	d807      	bhi.n	8001af0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <SystemInit+0xf0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 030f 	bic.w	r3, r3, #15
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <SystemInit+0xf0>)
 8001aea:	f043 0307 	orr.w	r3, r3, #7
 8001aee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001af0:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <SystemInit+0xf4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <SystemInit+0xf4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <SystemInit+0xf4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <SystemInit+0xf4>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <SystemInit+0xf4>)
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <SystemInit+0xf8>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <SystemInit+0xf0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <SystemInit+0xf0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 030f 	bic.w	r3, r3, #15
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <SystemInit+0xf0>)
 8001b24:	f043 0307 	orr.w	r3, r3, #7
 8001b28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <SystemInit+0xf4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <SystemInit+0xf4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <SystemInit+0xf4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <SystemInit+0xf4>)
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <SystemInit+0xfc>)
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <SystemInit+0xf4>)
 8001b44:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <SystemInit+0x100>)
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <SystemInit+0xf4>)
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <SystemInit+0x104>)
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <SystemInit+0xf4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <SystemInit+0xf4>)
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <SystemInit+0x104>)
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <SystemInit+0xf4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <SystemInit+0xf4>)
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <SystemInit+0x104>)
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <SystemInit+0xf4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <SystemInit+0xf4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <SystemInit+0xf4>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <SystemInit+0xf4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <SystemInit+0x108>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <SystemInit+0x10c>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8a:	d202      	bcs.n	8001b92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <SystemInit+0x110>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <SystemInit+0x114>)
 8001b94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b98:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SystemInit+0xec>)
 8001b9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	52002000 	.word	0x52002000
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bbc:	02020200 	.word	0x02020200
 8001bc0:	01ff0000 	.word	0x01ff0000
 8001bc4:	01010280 	.word	0x01010280
 8001bc8:	5c001000 	.word	0x5c001000
 8001bcc:	ffff0000 	.word	0xffff0000
 8001bd0:	51008108 	.word	0x51008108
 8001bd4:	52004000 	.word	0x52004000

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bdc:	f7ff ff70 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f006 fe77 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7fe ff5b 	bl	8000ac4 <main>
  bx  lr
 8001c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c1c:	08009314 	.word	0x08009314
  ldr r2, =_sbss
 8001c20:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001c24:	2000076c 	.word	0x2000076c

08001c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC3_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c32:	2003      	movs	r0, #3
 8001c34:	f000 f9a0 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c38:	f002 fb20 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_Init+0x68>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4913      	ldr	r1, [pc, #76]	; (8001c98 <HAL_Init+0x6c>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_Init+0x6c>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_Init+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_Init+0x74>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f814 	bl	8001ca4 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e002      	b.n	8001c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c86:	f7ff fbfd 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024400 	.word	0x58024400
 8001c98:	08009294 	.word	0x08009294
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e021      	b.n	8001cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_InitTick+0x64>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_InitTick+0x60>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f985 	bl	8001fde <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cec:	f000 f94f 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x68>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000758 	.word	0x20000758

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000758 	.word	0x20000758

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000000c 	.word	0x2000000c

08001d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetREVID+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0c1b      	lsrs	r3, r3, #16
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	5c001000 	.word	0x5c001000

08001db0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	58000400 	.word	0x58000400

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	05fa0000 	.word	0x05fa0000

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff40 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff90 	bl	8001ecc <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5f 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff33 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa4 	bl	8001f34 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0c6      	b.n	8002198 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fa50 	bl	80014b8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2223      	movs	r2, #35	; 0x23
 800201c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_ETH_Init+0x1a8>)
 8002020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002024:	4a5e      	ldr	r2, [pc, #376]	; (80021a0 <HAL_ETH_Init+0x1a8>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800202e:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HAL_ETH_Init+0x1a8>)
 8002030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7a1b      	ldrb	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff feb3 	bl	8001db0 <HAL_SYSCFG_ETHInterfaceSelect>
 800204a:	e003      	b.n	8002054 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800204c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002050:	f7ff feae 	bl	8001db0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800206c:	f7ff fe64 	bl	8001d38 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002072:	e00f      	b.n	8002094 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002074:	f7ff fe60 	bl	8001d38 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002082:	d907      	bls.n	8002094 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2204      	movs	r2, #4
 8002088:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	22e0      	movs	r2, #224	; 0xe0
 800208e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e081      	b.n	8002198 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e6      	bne.n	8002074 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fac0 	bl	800262c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020ac:	f002 fa60 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_ETH_Init+0x1ac>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	0c9a      	lsrs	r2, r3, #18
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3a01      	subs	r2, #1
 80020c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa13 	bl	80024f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020e4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22e0      	movs	r2, #224	; 0xe0
 80020fc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e04a      	b.n	8002198 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f241 1308 	movw	r3, #4360	; 0x1108
 800210a:	4413      	add	r3, r2
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_ETH_Init+0x1b0>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6952      	ldr	r2, [r2, #20]
 8002116:	0052      	lsls	r2, r2, #1
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	6809      	ldr	r1, [r1, #0]
 800211c:	431a      	orrs	r2, r3
 800211e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002122:	440b      	add	r3, r1
 8002124:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fad8 	bl	80026dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fb1c 	bl	800276a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	3305      	adds	r3, #5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	021a      	lsls	r2, r3, #8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	3303      	adds	r3, #3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	061a      	lsls	r2, r3, #24
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	3302      	adds	r3, #2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002170:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800217e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002180:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2210      	movs	r2, #16
 800218e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2210      	movs	r2, #16
 8002194:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	58024400 	.word	0x58024400
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	ffff8001 	.word	0xffff8001

080021ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80021be:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80021c6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7b1b      	ldrb	r3, [r3, #12]
 80021cc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021ce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7b5b      	ldrb	r3, [r3, #13]
 80021d4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021d6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7b9b      	ldrb	r3, [r3, #14]
 80021dc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80021de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	7bdb      	ldrb	r3, [r3, #15]
 80021e4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021e6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	7c12      	ldrb	r2, [r2, #16]
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d102      	bne.n	80021f6 <ETH_SetMACConfig+0x4a>
 80021f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021f4:	e000      	b.n	80021f8 <ETH_SetMACConfig+0x4c>
 80021f6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021f8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	7c52      	ldrb	r2, [r2, #17]
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d102      	bne.n	8002208 <ETH_SetMACConfig+0x5c>
 8002202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002206:	e000      	b.n	800220a <ETH_SetMACConfig+0x5e>
 8002208:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800220a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7c9b      	ldrb	r3, [r3, #18]
 8002210:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002212:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002218:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800221e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	7f1b      	ldrb	r3, [r3, #28]
 8002224:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002226:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7f5b      	ldrb	r3, [r3, #29]
 800222c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800222e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	7f92      	ldrb	r2, [r2, #30]
 8002234:	2a00      	cmp	r2, #0
 8002236:	d102      	bne.n	800223e <ETH_SetMACConfig+0x92>
 8002238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223c:	e000      	b.n	8002240 <ETH_SetMACConfig+0x94>
 800223e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002240:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7fdb      	ldrb	r3, [r3, #31]
 8002246:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002248:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002250:	2a00      	cmp	r2, #0
 8002252:	d102      	bne.n	800225a <ETH_SetMACConfig+0xae>
 8002254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002258:	e000      	b.n	800225c <ETH_SetMACConfig+0xb0>
 800225a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800225c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002262:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800226a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800226c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <ETH_SetMACConfig+0x22c>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	430b      	orrs	r3, r1
 8002288:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002296:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002298:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d102      	bne.n	80022be <ETH_SetMACConfig+0x112>
 80022b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0x114>
 80022be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4b42      	ldr	r3, [pc, #264]	; (80023dc <ETH_SetMACConfig+0x230>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	430b      	orrs	r3, r1
 80022dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <ETH_SetMACConfig+0x234>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002308:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800230e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002316:	2a00      	cmp	r2, #0
 8002318:	d101      	bne.n	800231e <ETH_SetMACConfig+0x172>
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	e000      	b.n	8002320 <ETH_SetMACConfig+0x174>
 800231e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002320:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002332:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	430b      	orrs	r3, r1
 8002340:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002348:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002350:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f023 0103 	bic.w	r1, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	430a      	orrs	r2, r1
 800236a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002376:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002392:	2a00      	cmp	r2, #0
 8002394:	d101      	bne.n	800239a <ETH_SetMACConfig+0x1ee>
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0x1f0>
 800239a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800239c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	00048083 	.word	0x00048083
 80023dc:	c0f88000 	.word	0xc0f88000
 80023e0:	fffffef0 	.word	0xfffffef0

080023e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <ETH_SetDMAConfig+0xf8>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	6809      	ldr	r1, [r1, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800240a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002416:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	7b1b      	ldrb	r3, [r3, #12]
 800241c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f241 0304 	movw	r3, #4100	; 0x1004
 800242a:	4413      	add	r3, r2
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <ETH_SetDMAConfig+0xfc>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	431a      	orrs	r2, r3
 800243a:	f241 0304 	movw	r3, #4100	; 0x1004
 800243e:	440b      	add	r3, r1
 8002440:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7b5b      	ldrb	r3, [r3, #13]
 8002446:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <ETH_SetDMAConfig+0x100>)
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	431a      	orrs	r2, r3
 8002466:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800246a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7d1b      	ldrb	r3, [r3, #20]
 8002474:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002476:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7f5b      	ldrb	r3, [r3, #29]
 800247c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f241 1304 	movw	r3, #4356	; 0x1104
 800248a:	4413      	add	r3, r2
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <ETH_SetDMAConfig+0x104>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6811      	ldr	r1, [r2, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	f241 1304 	movw	r3, #4356	; 0x1104
 800249e:	440b      	add	r3, r1
 80024a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	7f1b      	ldrb	r3, [r3, #28]
 80024a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80024b8:	4413      	add	r3, r2
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <ETH_SetDMAConfig+0x108>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6811      	ldr	r1, [r2, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80024cc:	440b      	add	r3, r1
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	ffff87fd 	.word	0xffff87fd
 80024e0:	ffff2ffe 	.word	0xffff2ffe
 80024e4:	fffec000 	.word	0xfffec000
 80024e8:	ffc0efef 	.word	0xffc0efef
 80024ec:	7fc0ffff 	.word	0x7fc0ffff

080024f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0a4      	sub	sp, #144	; 0x90
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024fe:	2300      	movs	r3, #0
 8002500:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800252c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002530:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002538:	2300      	movs	r3, #0
 800253a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002548:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800254c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800256a:	2300      	movs	r3, #0
 800256c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800256e:	2300      	movs	r3, #0
 8002570:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002572:	2300      	movs	r3, #0
 8002574:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002588:	2320      	movs	r3, #32
 800258a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800259a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80025ca:	2300      	movs	r3, #0
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fde6 	bl	80021ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002608:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002610:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fee1 	bl	80023e4 <ETH_SetDMAConfig>
}
 8002622:	bf00      	nop
 8002624:	3790      	adds	r7, #144	; 0x90
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800263c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002644:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002646:	f001 ff93 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 800264a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d908      	bls.n	8002666 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d804      	bhi.n	8002666 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e027      	b.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d908      	bls.n	8002680 <ETH_MAC_MDIO_ClkConfig+0x54>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d204      	bcs.n	8002680 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e01a      	b.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d303      	bcc.n	8002690 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d911      	bls.n	80026b4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d908      	bls.n	80026aa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d804      	bhi.n	80026aa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e005      	b.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e000      	b.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80026b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	01312cff 	.word	0x01312cff
 80026cc:	02160ebf 	.word	0x02160ebf
 80026d0:	03938700 	.word	0x03938700
 80026d4:	05f5e0ff 	.word	0x05f5e0ff
 80026d8:	08f0d17f 	.word	0x08f0d17f

080026dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e01d      	b.n	8002726 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	3206      	adds	r2, #6
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3301      	adds	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d9de      	bls.n	80026ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f241 132c 	movw	r3, #4396	; 0x112c
 800273a:	4413      	add	r3, r2
 800273c:	2203      	movs	r2, #3
 800273e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f241 1314 	movw	r3, #4372	; 0x1114
 800274c:	4413      	add	r3, r2
 800274e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e024      	b.n	80027c2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3310      	adds	r3, #16
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d9d7      	bls.n	8002778 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f241 1330 	movw	r3, #4400	; 0x1130
 80027ee:	4413      	add	r3, r2
 80027f0:	2203      	movs	r2, #3
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8002800:	4413      	add	r3, r2
 8002802:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f241 1328 	movw	r3, #4392	; 0x1128
 8002814:	4413      	add	r3, r2
 8002816:	6019      	str	r1, [r3, #0]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_GPIO_Init+0x234>)
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002836:	e194      	b.n	8002b62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8186 	beq.w	8002b5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d00b      	beq.n	8002870 <HAL_GPIO_Init+0x4c>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002864:	2b11      	cmp	r3, #17
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0201 	and.w	r2, r3, #1
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0xee>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b12      	cmp	r3, #18
 8002910:	d123      	bne.n	800295a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	08da      	lsrs	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3208      	adds	r2, #8
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	69b9      	ldr	r1, [r7, #24]
 8002956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80e0 	beq.w	8002b5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_GPIO_Init+0x238>)
 800299e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029a2:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_GPIO_Init+0x238>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_GPIO_Init+0x238>)
 80029ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <HAL_GPIO_Init+0x23c>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <HAL_GPIO_Init+0x240>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d052      	beq.n	8002a8c <HAL_GPIO_Init+0x268>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_GPIO_Init+0x244>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0x22e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_GPIO_Init+0x248>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x22a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_GPIO_Init+0x24c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x226>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_GPIO_Init+0x250>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x222>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x254>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x21e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x258>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x21a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_GPIO_Init+0x25c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x216>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_GPIO_Init+0x260>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x212>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_GPIO_Init+0x264>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x20e>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	e02d      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a32:	230a      	movs	r3, #10
 8002a34:	e02b      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e029      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e027      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e025      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e023      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e021      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e01f      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e01d      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e01b      	b.n	8002a8e <HAL_GPIO_Init+0x26a>
 8002a56:	bf00      	nop
 8002a58:	58000080 	.word	0x58000080
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	58000400 	.word	0x58000400
 8002a64:	58020000 	.word	0x58020000
 8002a68:	58020400 	.word	0x58020400
 8002a6c:	58020800 	.word	0x58020800
 8002a70:	58020c00 	.word	0x58020c00
 8002a74:	58021000 	.word	0x58021000
 8002a78:	58021400 	.word	0x58021400
 8002a7c:	58021800 	.word	0x58021800
 8002a80:	58021c00 	.word	0x58021c00
 8002a84:	58022000 	.word	0x58022000
 8002a88:	58022400 	.word	0x58022400
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9e:	4938      	ldr	r1, [pc, #224]	; (8002b80 <HAL_GPIO_Init+0x35c>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f ae63 	bne.w	8002838 <HAL_GPIO_Init+0x14>
  }
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	3724      	adds	r7, #36	; 0x24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	58000400 	.word	0x58000400

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fd38 	bl	8001654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d104      	bne.n	8002c52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_I2C_Init+0x11c>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	ea42 0103 	orr.w	r1, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	02008000 	.word	0x02008000

08002cd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	f040 80fd 	bne.w	8002efa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_I2C_Mem_Read+0x34>
 8002d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0f1      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x4e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0ea      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d2e:	f7ff f803 	bl	8001d38 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2319      	movs	r3, #25
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f95b 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d5      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2222      	movs	r2, #34	; 0x22
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d78:	88f8      	ldrh	r0, [r7, #6]
 8002d7a:	893a      	ldrh	r2, [r7, #8]
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4603      	mov	r3, r0
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f8bf 	bl	8002f0c <I2C_RequestMemoryRead>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0ad      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_I2C_Mem_Read+0x22c>)
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa3d 	bl	8003240 <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_I2C_Mem_Read+0x22c>)
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa2c 	bl	8003240 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2200      	movs	r2, #0
 8002df0:	2104      	movs	r1, #4
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f902 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07c      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d034      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d130      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f8d3 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04d      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d90e      	bls.n	8002e88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f9dd 	bl	8003240 <I2C_TransferConfig>
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f9cc 	bl	8003240 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d19a      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f920 	bl	80030fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e01a      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_I2C_Mem_Read+0x230>)
 8002eda:	400b      	ands	r3, r1
 8002edc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	80002400 	.word	0x80002400
 8002f08:	fe00e800 	.word	0xfe00e800

08002f0c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	8979      	ldrh	r1, [r7, #10]
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <I2C_RequestMemoryRead+0xa4>)
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2300      	movs	r3, #0
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f984 	bl	8003240 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f89d 	bl	800307c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e02c      	b.n	8002fa6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5c:	e015      	b.n	8002f8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5e:	893b      	ldrh	r3, [r7, #8]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f883 	bl	800307c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e012      	b.n	8002fa6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f831 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	80002000 	.word	0x80002000

08002fb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d103      	bne.n	8002fd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d007      	beq.n	8002ff0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	619a      	str	r2, [r3, #24]
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300c:	e022      	b.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003014:	d01e      	beq.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fe fe8f 	bl	8001d38 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d113      	bne.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e00f      	b.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4013      	ands	r3, r2
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	429a      	cmp	r2, r3
 8003070:	d0cd      	beq.n	800300e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003088:	e02c      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f870 	bl	8003174 <I2C_IsAcknowledgeFailed>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02a      	b.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a4:	d01e      	beq.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe fe47 	bl	8001d38 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d113      	bne.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d1cb      	bne.n	800308a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003108:	e028      	b.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f830 	bl	8003174 <I2C_IsAcknowledgeFailed>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e026      	b.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fe0b 	bl	8001d38 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d113      	bne.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d1cf      	bne.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b10      	cmp	r3, #16
 800318c:	d151      	bne.n	8003232 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318e:	e022      	b.n	80031d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003196:	d01e      	beq.n	80031d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	f7fe fdce 	bl	8001d38 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <I2C_IsAcknowledgeFailed+0x3a>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e02e      	b.n	8003234 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d1d5      	bne.n	8003190 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2210      	movs	r2, #16
 80031ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2220      	movs	r2, #32
 80031f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fedd 	bl	8002fb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <I2C_IsAcknowledgeFailed+0xc8>)
 8003206:	400b      	ands	r3, r1
 8003208:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	4613      	mov	r3, r2
 8003250:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	0d5b      	lsrs	r3, r3, #21
 800325c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <I2C_TransferConfig+0x58>)
 8003262:	430b      	orrs	r3, r1
 8003264:	43db      	mvns	r3, r3
 8003266:	ea02 0103 	and.w	r1, r2, r3
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003270:	7a7b      	ldrb	r3, [r7, #9]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	03ff63ff 	.word	0x03ff63ff

0800329c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d138      	bne.n	8003324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032bc:	2302      	movs	r3, #2
 80032be:	e032      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	d139      	bne.n	80033bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003352:	2302      	movs	r3, #2
 8003354:	e033      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	; 0x24
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033cc:	b08f      	sub	sp, #60	; 0x3c
 80033ce:	af0a      	add	r7, sp, #40	; 0x28
 80033d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e116      	b.n	800360a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fa5c 	bl	80018b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f004 ffae 	bl	800837c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	687e      	ldr	r6, [r7, #4]
 8003428:	466d      	mov	r5, sp
 800342a:	f106 0410 	add.w	r4, r6, #16
 800342e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343a:	e885 0003 	stmia.w	r5, {r0, r1}
 800343e:	1d33      	adds	r3, r6, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f004 ff2c 	bl	80082a0 <USB_CoreInit>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0d7      	b.n	800360a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f004 ff9c 	bl	800839e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e04a      	b.n	8003502 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333c      	adds	r3, #60	; 0x3c
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	b298      	uxth	r0, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3342      	adds	r3, #66	; 0x42
 80034a8:	4602      	mov	r2, r0
 80034aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	; 0x44
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3348      	adds	r3, #72	; 0x48
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3350      	adds	r3, #80	; 0x50
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3af      	bcc.n	800346c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e044      	b.n	800359c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3b5      	bcc.n	8003512 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	687e      	ldr	r6, [r7, #4]
 80035ae:	466d      	mov	r5, sp
 80035b0:	f106 0410 	add.w	r4, r6, #16
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c4:	1d33      	adds	r3, r6, #4
 80035c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f004 ff13 	bl	80083f4 <USB_DevInit>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e014      	b.n	800360a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f80b 	bl	8003614 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f005 f8b5 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003614 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_PCDEx_ActivateLPM+0x44>)
 8003644:	4313      	orrs	r3, r2
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	10000003 	.word	0x10000003

0800365c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_PWREx_ConfigSupply+0x70>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d00a      	beq.n	8003686 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_PWREx_ConfigSupply+0x70>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e01f      	b.n	80036c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e01d      	b.n	80036c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_PWREx_ConfigSupply+0x70>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	490f      	ldr	r1, [pc, #60]	; (80036cc <HAL_PWREx_ConfigSupply+0x70>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003696:	f7fe fb4f 	bl	8001d38 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800369c:	e009      	b.n	80036b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800369e:	f7fe fb4b 	bl	8001d38 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_PWREx_ConfigSupply+0x70>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d1ee      	bne.n	800369e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	58024800 	.word	0x58024800

080036d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	58024800 	.word	0x58024800

080036f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e3ff      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8087 	beq.w	800381e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003710:	4b99      	ldr	r3, [pc, #612]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800371a:	4b97      	ldr	r3, [pc, #604]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	2b10      	cmp	r3, #16
 8003724:	d007      	beq.n	8003736 <HAL_RCC_OscConfig+0x46>
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	2b18      	cmp	r3, #24
 800372a:	d110      	bne.n	800374e <HAL_RCC_OscConfig+0x5e>
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d10b      	bne.n	800374e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003736:	4b90      	ldr	r3, [pc, #576]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d06c      	beq.n	800381c <HAL_RCC_OscConfig+0x12c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d168      	bne.n	800381c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e3d9      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x76>
 8003758:	4b87      	ldr	r3, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a86      	ldr	r2, [pc, #536]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e02e      	b.n	80037c4 <HAL_RCC_OscConfig+0xd4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x98>
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a81      	ldr	r2, [pc, #516]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xd4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0xbc>
 8003792:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xd4>
 80037ac:	4b72      	ldr	r3, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a71      	ldr	r2, [pc, #452]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fab4 	bl	8001d38 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fab0 	bl	8001d38 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e38d      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037e6:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xe4>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe faa0 	bl	8001d38 <HAL_GetTick>
 80037f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe fa9c 	bl	8001d38 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e379      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800380e:	4b5a      	ldr	r3, [pc, #360]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x10c>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80ae 	beq.w	8003988 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382c:	4b52      	ldr	r3, [pc, #328]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003834:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_RCC_OscConfig+0x162>
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2b18      	cmp	r3, #24
 8003846:	d13a      	bne.n	80038be <HAL_RCC_OscConfig+0x1ce>
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d135      	bne.n	80038be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x17a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e34b      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	f7fe fa95 	bl	8001d98 <HAL_GetREVID>
 800386e:	4603      	mov	r3, r0
 8003870:	f241 0203 	movw	r2, #4099	; 0x1003
 8003874:	4293      	cmp	r3, r2
 8003876:	d817      	bhi.n	80038a8 <HAL_RCC_OscConfig+0x1b8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d108      	bne.n	8003892 <HAL_RCC_OscConfig+0x1a2>
 8003880:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003888:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003890:	e07a      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	031b      	lsls	r3, r3, #12
 80038a0:	4935      	ldr	r1, [pc, #212]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a6:	e06f      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	4930      	ldr	r1, [pc, #192]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	e064      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d045      	beq.n	8003952 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0219 	bic.w	r2, r3, #25
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4929      	ldr	r1, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fa2e 	bl	8001d38 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe fa2a 	bl	8001d38 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e307      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	f7fe fa4b 	bl	8001d98 <HAL_GetREVID>
 8003902:	4603      	mov	r3, r0
 8003904:	f241 0203 	movw	r2, #4099	; 0x1003
 8003908:	4293      	cmp	r3, r2
 800390a:	d817      	bhi.n	800393c <HAL_RCC_OscConfig+0x24c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d108      	bne.n	8003926 <HAL_RCC_OscConfig+0x236>
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800391e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	e030      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	031b      	lsls	r3, r3, #12
 8003934:	4910      	ldr	r1, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
 800393a:	e025      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	490b      	ldr	r1, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e01a      	b.n	8003988 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_RCC_OscConfig+0x288>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fe f9eb 	bl	8001d38 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003966:	f7fe f9e7 	bl	8001d38 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d903      	bls.n	800397c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e2c4      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
 8003978:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800397c:	4ba4      	ldr	r3, [pc, #656]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ee      	bne.n	8003966 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a9 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800399e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039a0:	4b9b      	ldr	r3, [pc, #620]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d007      	beq.n	80039bc <HAL_RCC_OscConfig+0x2cc>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b18      	cmp	r3, #24
 80039b0:	d13a      	bne.n	8003a28 <HAL_RCC_OscConfig+0x338>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d135      	bne.n	8003a28 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039bc:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2e4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b80      	cmp	r3, #128	; 0x80
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e296      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d4:	f7fe f9e0 	bl	8001d98 <HAL_GetREVID>
 80039d8:	4603      	mov	r3, r0
 80039da:	f241 0203 	movw	r2, #4099	; 0x1003
 80039de:	4293      	cmp	r3, r2
 80039e0:	d817      	bhi.n	8003a12 <HAL_RCC_OscConfig+0x322>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d108      	bne.n	80039fc <HAL_RCC_OscConfig+0x30c>
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039f2:	4a87      	ldr	r2, [pc, #540]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 80039f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fa:	e075      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039fc:	4b84      	ldr	r3, [pc, #528]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	069b      	lsls	r3, r3, #26
 8003a0a:	4981      	ldr	r1, [pc, #516]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a10:	e06a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	497b      	ldr	r1, [pc, #492]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a26:	e05f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d042      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a30:	4b77      	ldr	r3, [pc, #476]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a76      	ldr	r2, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f97c 	bl	8001d38 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a44:	f7fe f978 	bl	8001d38 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e255      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a56:	4b6e      	ldr	r3, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a62:	f7fe f999 	bl	8001d98 <HAL_GetREVID>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d817      	bhi.n	8003aa0 <HAL_RCC_OscConfig+0x3b0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d108      	bne.n	8003a8a <HAL_RCC_OscConfig+0x39a>
 8003a78:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a80:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	6053      	str	r3, [r2, #4]
 8003a88:	e02e      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
 8003a8a:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	069b      	lsls	r3, r3, #26
 8003a98:	495d      	ldr	r1, [pc, #372]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
 8003a9e:	e023      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
 8003aa0:	4b5b      	ldr	r3, [pc, #364]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	4958      	ldr	r1, [pc, #352]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
 8003ab4:	e018      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ab6:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a55      	ldr	r2, [pc, #340]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe f939 	bl	8001d38 <HAL_GetTick>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aca:	f7fe f935 	bl	8001d38 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e212      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003adc:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d036      	beq.n	8003b62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d019      	beq.n	8003b30 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afc:	4b44      	ldr	r3, [pc, #272]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b00:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f916 	bl	8001d38 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe f912 	bl	8001d38 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1ef      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x420>
 8003b2e:	e018      	b.n	8003b62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	4a36      	ldr	r2, [pc, #216]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe f8fc 	bl	8001d38 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe f8f8 	bl	8001d38 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1d5      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d036      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d019      	beq.n	8003baa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b82:	f7fe f8d9 	bl	8001d38 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b8a:	f7fe f8d5 	bl	8001d38 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1b2      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x49a>
 8003ba8:	e018      	b.n	8003bdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe f8bf 	bl	8001d38 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bbe:	f7fe f8bb 	bl	8001d38 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e198      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCC_OscConfig+0x520>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8085 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_RCC_OscConfig+0x524>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x524>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf6:	f7fe f89f 	bl	8001d38 <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	e00c      	b.n	8003c18 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fe f89b 	bl	8001d38 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d905      	bls.n	8003c18 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e178      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
 8003c10:	58024400 	.word	0x58024400
 8003c14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c18:	4b96      	ldr	r3, [pc, #600]	; (8003e74 <HAL_RCC_OscConfig+0x784>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ec      	beq.n	8003bfe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x54a>
 8003c2c:	4b92      	ldr	r3, [pc, #584]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a91      	ldr	r2, [pc, #580]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
 8003c38:	e02d      	b.n	8003c96 <HAL_RCC_OscConfig+0x5a6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x56c>
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a8c      	ldr	r2, [pc, #560]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a89      	ldr	r2, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	e01c      	b.n	8003c96 <HAL_RCC_OscConfig+0x5a6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCC_OscConfig+0x58e>
 8003c64:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a83      	ldr	r2, [pc, #524]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0x5a6>
 8003c7e:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	4b7b      	ldr	r3, [pc, #492]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a7a      	ldr	r2, [pc, #488]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d015      	beq.n	8003cca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe f84b 	bl	8001d38 <HAL_GetTick>
 8003ca2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe f847 	bl	8001d38 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e122      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cbc:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ee      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x5b6>
 8003cc8:	e014      	b.n	8003cf4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe f835 	bl	8001d38 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe f831 	bl	8001d38 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e10c      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ce8:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ee      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8101 	beq.w	8003f00 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cfe:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d06:	2b18      	cmp	r3, #24
 8003d08:	f000 80bc 	beq.w	8003e84 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 8095 	bne.w	8003e40 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe f809 	bl	8001d38 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe f805 	bl	8001d38 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0e2      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x78c>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d58:	0112      	lsls	r2, r2, #4
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	4946      	ldr	r1, [pc, #280]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	628b      	str	r3, [r1, #40]	; 0x28
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	3b01      	subs	r3, #1
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d92:	4939      	ldr	r1, [pc, #228]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d98:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da8:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <HAL_RCC_OscConfig+0x790>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003db0:	00d2      	lsls	r2, r2, #3
 8003db2:	4931      	ldr	r1, [pc, #196]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f023 020c 	bic.w	r2, r3, #12
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	492c      	ldr	r1, [pc, #176]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dca:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f023 0202 	bic.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4928      	ldr	r1, [pc, #160]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ddc:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003dfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd ff8e 	bl	8001d38 <HAL_GetTick>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd ff8a 	bl	8001d38 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x730>
 8003e3e:	e05f      	b.n	8003f00 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff74 	bl	8001d38 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd ff70 	bl	8001d38 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04d      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_OscConfig+0x788>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x764>
 8003e72:	e045      	b.n	8003f00 <HAL_RCC_OscConfig+0x810>
 8003e74:	58024800 	.word	0x58024800
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	fffffc0c 	.word	0xfffffc0c
 8003e80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_RCC_OscConfig+0x81c>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_OscConfig+0x81c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d031      	beq.n	8003efc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f003 0203 	and.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d12a      	bne.n	8003efc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d122      	bne.n	8003efc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d11a      	bne.n	8003efc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d111      	bne.n	8003efc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d108      	bne.n	8003efc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0e1b      	lsrs	r3, r3, #24
 8003eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3730      	adds	r7, #48	; 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400

08003f10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e19c      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b8a      	ldr	r3, [pc, #552]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d910      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b87      	ldr	r3, [pc, #540]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 020f 	bic.w	r2, r3, #15
 8003f3a:	4985      	ldr	r1, [pc, #532]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b83      	ldr	r3, [pc, #524]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e184      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	4b7b      	ldr	r3, [pc, #492]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d908      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f70:	4b78      	ldr	r3, [pc, #480]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4975      	ldr	r1, [pc, #468]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	4b70      	ldr	r3, [pc, #448]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d908      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	496a      	ldr	r1, [pc, #424]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d908      	bls.n	8003fde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fcc:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	495e      	ldr	r1, [pc, #376]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d908      	bls.n	800400c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ffa:	4b56      	ldr	r3, [pc, #344]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4953      	ldr	r1, [pc, #332]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004008:	4313      	orrs	r3, r2
 800400a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	429a      	cmp	r2, r3
 8004026:	d908      	bls.n	800403a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004028:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f023 020f 	bic.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4947      	ldr	r1, [pc, #284]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004036:	4313      	orrs	r3, r2
 8004038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d055      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004046:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4940      	ldr	r1, [pc, #256]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004054:	4313      	orrs	r3, r2
 8004056:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d107      	bne.n	8004070 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004060:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d121      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0f6      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d107      	bne.n	8004088 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004078:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d115      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0ea      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004090:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0de      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0d6      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f023 0207 	bic.w	r2, r3, #7
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4925      	ldr	r1, [pc, #148]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd fe39 	bl	8001d38 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ca:	f7fd fe35 	bl	8001d38 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0be      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e0:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d1eb      	bne.n	80040ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	429a      	cmp	r2, r3
 800410c:	d208      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f023 020f 	bic.w	r2, r3, #15
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	490e      	ldr	r1, [pc, #56]	; (8004154 <HAL_RCC_ClockConfig+0x244>)
 800411c:	4313      	orrs	r3, r2
 800411e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d214      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 020f 	bic.w	r2, r3, #15
 8004136:	4906      	ldr	r1, [pc, #24]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <HAL_RCC_ClockConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e086      	b.n	800425e <HAL_RCC_ClockConfig+0x34e>
 8004150:	52002000 	.word	0x52002000
 8004154:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004170:	429a      	cmp	r2, r3
 8004172:	d208      	bcs.n	8004186 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004174:	4b3c      	ldr	r3, [pc, #240]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	4939      	ldr	r1, [pc, #228]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004182:	4313      	orrs	r3, r2
 8004184:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d010      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b34      	ldr	r3, [pc, #208]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800419e:	429a      	cmp	r2, r3
 80041a0:	d208      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a2:	4b31      	ldr	r3, [pc, #196]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	492e      	ldr	r1, [pc, #184]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d208      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4922      	ldr	r1, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d208      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4917      	ldr	r1, [pc, #92]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004210:	f000 f834 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	4912      	ldr	r1, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x35c>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
 800422c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x358>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_RCC_ClockConfig+0x35c>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x360>)
 8004246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004248:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <HAL_RCC_ClockConfig+0x364>)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x368>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fd26 	bl	8001ca4 <HAL_InitTick>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	58024400 	.word	0x58024400
 800426c:	08009294 	.word	0x08009294
 8004270:	20000004 	.word	0x20000004
 8004274:	20000000 	.word	0x20000000
 8004278:	20000008 	.word	0x20000008

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004282:	4bb3      	ldr	r3, [pc, #716]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428a:	2b18      	cmp	r3, #24
 800428c:	f200 8155 	bhi.w	800453a <HAL_RCC_GetSysClockFreq+0x2be>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042fd 	.word	0x080042fd
 800429c:	0800453b 	.word	0x0800453b
 80042a0:	0800453b 	.word	0x0800453b
 80042a4:	0800453b 	.word	0x0800453b
 80042a8:	0800453b 	.word	0x0800453b
 80042ac:	0800453b 	.word	0x0800453b
 80042b0:	0800453b 	.word	0x0800453b
 80042b4:	0800453b 	.word	0x0800453b
 80042b8:	08004323 	.word	0x08004323
 80042bc:	0800453b 	.word	0x0800453b
 80042c0:	0800453b 	.word	0x0800453b
 80042c4:	0800453b 	.word	0x0800453b
 80042c8:	0800453b 	.word	0x0800453b
 80042cc:	0800453b 	.word	0x0800453b
 80042d0:	0800453b 	.word	0x0800453b
 80042d4:	0800453b 	.word	0x0800453b
 80042d8:	08004329 	.word	0x08004329
 80042dc:	0800453b 	.word	0x0800453b
 80042e0:	0800453b 	.word	0x0800453b
 80042e4:	0800453b 	.word	0x0800453b
 80042e8:	0800453b 	.word	0x0800453b
 80042ec:	0800453b 	.word	0x0800453b
 80042f0:	0800453b 	.word	0x0800453b
 80042f4:	0800453b 	.word	0x0800453b
 80042f8:	0800432f 	.word	0x0800432f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042fc:	4b94      	ldr	r3, [pc, #592]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004308:	4b91      	ldr	r3, [pc, #580]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a90      	ldr	r2, [pc, #576]	; (8004554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800431a:	e111      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800431c:	4b8d      	ldr	r3, [pc, #564]	; (8004554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800431e:	61bb      	str	r3, [r7, #24]
    break;
 8004320:	e10e      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004322:	4b8d      	ldr	r3, [pc, #564]	; (8004558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004324:	61bb      	str	r3, [r7, #24]
    break;
 8004326:	e10b      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004328:	4b8c      	ldr	r3, [pc, #560]	; (800455c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800432a:	61bb      	str	r3, [r7, #24]
    break;
 800432c:	e108      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800432e:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004338:	4b85      	ldr	r3, [pc, #532]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004342:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800434e:	4b80      	ldr	r3, [pc, #512]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	08db      	lsrs	r3, r3, #3
 8004354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80e1 	beq.w	8004534 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b02      	cmp	r3, #2
 8004376:	f000 8083 	beq.w	8004480 <HAL_RCC_GetSysClockFreq+0x204>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f200 80a1 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x248>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x114>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d056      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x1c0>
 800438e:	e099      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02d      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800439c:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	08db      	lsrs	r3, r3, #3
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	4a6b      	ldr	r2, [pc, #428]	; (8004554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b62      	ldr	r3, [pc, #392]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043f6:	e087      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004564 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b51      	ldr	r3, [pc, #324]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a02 	vldr	s12, [r7, #8]
 800441e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443a:	e065      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004568 <HAL_RCC_GetSysClockFreq+0x2ec>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004462:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447e:	e043      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800456c <HAL_RCC_GetSysClockFreq+0x2f0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	e021      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004568 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004506:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	0a5b      	lsrs	r3, r3, #9
 800450e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004512:	3301      	adds	r3, #1
 8004514:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004520:	edd7 6a07 	vldr	s13, [r7, #28]
 8004524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452c:	ee17 3a90 	vmov	r3, s15
 8004530:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004532:	e005      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    break;
 8004538:	e002      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800453c:	61bb      	str	r3, [r7, #24]
    break;
 800453e:	bf00      	nop
  }

  return sysclockfreq;
 8004540:	69bb      	ldr	r3, [r7, #24]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
 8004554:	03d09000 	.word	0x03d09000
 8004558:	003d0900 	.word	0x003d0900
 800455c:	007a1200 	.word	0x007a1200
 8004560:	46000000 	.word	0x46000000
 8004564:	4c742400 	.word	0x4c742400
 8004568:	4a742400 	.word	0x4a742400
 800456c:	4af42400 	.word	0x4af42400

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004576:	f7ff fe81 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490f      	ldr	r1, [pc, #60]	; (80045c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045b6:	681b      	ldr	r3, [r3, #0]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	58024400 	.word	0x58024400
 80045c4:	08009294 	.word	0x08009294
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000000 	.word	0x20000000

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045d4:	f7ff ffcc 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4904      	ldr	r1, [pc, #16]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	58024400 	.word	0x58024400
 80045f8:	08009294 	.word	0x08009294

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004600:	f7ff ffb6 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4904      	ldr	r1, [pc, #16]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58024400 	.word	0x58024400
 8004624:	08009294 	.word	0x08009294

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004634:	2300      	movs	r3, #0
 8004636:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03f      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800464c:	d02a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800464e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004652:	d824      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004658:	d018      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800465a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800465e:	d81e      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004668:	d007      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800466a:	e018      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466c:	4bab      	ldr	r3, [pc, #684]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4aaa      	ldr	r2, [pc, #680]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004678:	e015      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f9cf 	bl	8005a24 <RCCEx_PLL2_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f001 fa78 	bl	8005b88 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046ac:	4b9b      	ldr	r3, [pc, #620]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b8:	4998      	ldr	r1, [pc, #608]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	650b      	str	r3, [r1, #80]	; 0x50
 80046be:	e001      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03d      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d826      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f5 	.word	0x080046f5
 80046e4:	08004703 	.word	0x08004703
 80046e8:	08004715 	.word	0x08004715
 80046ec:	0800472d 	.word	0x0800472d
 80046f0:	0800472d 	.word	0x0800472d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b89      	ldr	r3, [pc, #548]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a88      	ldr	r2, [pc, #544]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004700:	e015      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f98b 	bl	8005a24 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004712:	e00c      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3324      	adds	r3, #36	; 0x24
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fa34 	bl	8005b88 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800472c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004734:	4b79      	ldr	r3, [pc, #484]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	f023 0207 	bic.w	r2, r3, #7
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	4976      	ldr	r1, [pc, #472]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	650b      	str	r3, [r1, #80]	; 0x50
 8004746:	e001      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004754:	2b00      	cmp	r3, #0
 8004756:	d042      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d02b      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d825      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004768:	2bc0      	cmp	r3, #192	; 0xc0
 800476a:	d028      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800476c:	2bc0      	cmp	r3, #192	; 0xc0
 800476e:	d821      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d016      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d81d      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d007      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004780:	e018      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004782:	4b66      	ldr	r3, [pc, #408]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4a65      	ldr	r2, [pc, #404]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800478e:	e017      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f944 	bl	8005a24 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047a0:	e00e      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3324      	adds	r3, #36	; 0x24
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f9ed 	bl	8005b88 <RCCEx_PLL3_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	75fb      	strb	r3, [r7, #23]
      break;
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047c6:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	4952      	ldr	r1, [pc, #328]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	650b      	str	r3, [r1, #80]	; 0x50
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d049      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047f4:	d030      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80047f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047fa:	d82a      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004800:	d02c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004802:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004806:	d824      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480c:	d018      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800480e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004812:	d81e      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481c:	d007      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800481e:	e018      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4a3d      	ldr	r2, [pc, #244]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800482c:	e017      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f001 f8f5 	bl	8005a24 <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800483e:	e00e      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3324      	adds	r3, #36	; 0x24
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f99e 	bl	8005b88 <RCCEx_PLL3_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
      break;
 8004856:	e002      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004872:	492a      	ldr	r1, [pc, #168]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	658b      	str	r3, [r1, #88]	; 0x58
 8004878:	e001      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04c      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004894:	d030      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800489a:	d82a      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800489c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048a0:	d02c      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80048a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048a6:	d824      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ac:	d018      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80048ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b2:	d81e      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048bc:	d007      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80048be:	e018      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048cc:	e017      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f8a5 	bl	8005a24 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048de:	e00e      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f94e 	bl	8005b88 <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f0:	e005      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80048fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004912:	4902      	ldr	r1, [pc, #8]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	658b      	str	r3, [r1, #88]	; 0x58
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d032      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d01c      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d817      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d00c      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d813      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d016      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d10f      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4baf      	ldr	r3, [pc, #700]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4aae      	ldr	r2, [pc, #696]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004958:	e00e      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	2102      	movs	r1, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f85f 	bl	8005a24 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800496a:	e005      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800497e:	4ba3      	ldr	r3, [pc, #652]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	49a0      	ldr	r1, [pc, #640]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004990:	e001      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d047      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d030      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b0:	d82a      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80049b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049b6:	d02c      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80049b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049bc:	d824      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d018      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d81e      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d007      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80049d4:	e018      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d6:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a8c      	ldr	r2, [pc, #560]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049e2:	e017      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f81a 	bl	8005a24 <RCCEx_PLL2_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049f4:	e00e      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3324      	adds	r3, #36	; 0x24
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 f8c3 	bl	8005b88 <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a1a:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	4979      	ldr	r1, [pc, #484]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	650b      	str	r3, [r1, #80]	; 0x50
 8004a2c:	e001      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d049      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a46:	d02e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d828      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a52:	d02a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004a54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a58:	d822      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a5e:	d026      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004a60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a64:	d81c      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a70:	d816      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01d      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d111      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 ffce 	bl	8005a24 <RCCEx_PLL2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a8c:	e012      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 f877 	bl	8005b88 <RCCEx_PLL3_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a9e:	e009      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004aba:	4b54      	ldr	r3, [pc, #336]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac6:	4951      	ldr	r1, [pc, #324]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	650b      	str	r3, [r1, #80]	; 0x50
 8004acc:	e001      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ae8:	d02e      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aee:	d828      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d02a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d822      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b00:	d026      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b06:	d81c      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b12:	d816      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1c:	d111      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 ff7d 	bl	8005a24 <RCCEx_PLL2_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e012      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f826 	bl	8005b88 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b40:	e009      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b6a:	4928      	ldr	r1, [pc, #160]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b70:	e001      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d02f      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8a:	d00e      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b90:	d814      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d015      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9a:	d10f      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 ff37 	bl	8005a24 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	490d      	ldr	r1, [pc, #52]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	650b      	str	r3, [r1, #80]	; 0x50
 8004bdc:	e001      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d033      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d81c      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c37 	.word	0x08004c37
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c1f 	.word	0x08004c1f
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4bb8      	ldr	r3, [pc, #736]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4ab7      	ldr	r2, [pc, #732]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fefd 	bl	8005a24 <RCCEx_PLL2_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c3e:	4bad      	ldr	r3, [pc, #692]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	49aa      	ldr	r1, [pc, #680]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c50:	e001      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8086 	beq.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c64:	4ba4      	ldr	r3, [pc, #656]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4aa3      	ldr	r2, [pc, #652]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c70:	f7fd f862 	bl	8001d38 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fd f85e 	bl	8001d38 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d902      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	75fb      	strb	r3, [r7, #23]
        break;
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8c:	4b9a      	ldr	r3, [pc, #616]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ef      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d166      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c9e:	4b95      	ldr	r3, [pc, #596]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ca8:	4053      	eors	r3, r2
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d013      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb2:	4b90      	ldr	r3, [pc, #576]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cbc:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a8c      	ldr	r2, [pc, #560]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a89      	ldr	r2, [pc, #548]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cd4:	4a87      	ldr	r2, [pc, #540]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce4:	d115      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd f827 	bl	8001d38 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cec:	e00b      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd f823 	bl	8001d38 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d902      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	75fb      	strb	r3, [r7, #23]
            break;
 8004d04:	e005      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d06:	4b7b      	ldr	r3, [pc, #492]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ed      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d126      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d10d      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004d28:	4b72      	ldr	r3, [pc, #456]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d36:	0919      	lsrs	r1, r3, #4
 8004d38:	4b70      	ldr	r3, [pc, #448]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004d3a:	400b      	ands	r3, r1
 8004d3c:	496d      	ldr	r1, [pc, #436]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004d44:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	4a6a      	ldr	r2, [pc, #424]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d4e:	6113      	str	r3, [r2, #16]
 8004d50:	4b68      	ldr	r3, [pc, #416]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5e:	4965      	ldr	r1, [pc, #404]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	670b      	str	r3, [r1, #112]	; 0x70
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	75bb      	strb	r3, [r7, #22]
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d07e      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d80:	2b28      	cmp	r3, #40	; 0x28
 8004d82:	d867      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004e5b 	.word	0x08004e5b
 8004d90:	08004e55 	.word	0x08004e55
 8004d94:	08004e55 	.word	0x08004e55
 8004d98:	08004e55 	.word	0x08004e55
 8004d9c:	08004e55 	.word	0x08004e55
 8004da0:	08004e55 	.word	0x08004e55
 8004da4:	08004e55 	.word	0x08004e55
 8004da8:	08004e55 	.word	0x08004e55
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e55 	.word	0x08004e55
 8004db4:	08004e55 	.word	0x08004e55
 8004db8:	08004e55 	.word	0x08004e55
 8004dbc:	08004e55 	.word	0x08004e55
 8004dc0:	08004e55 	.word	0x08004e55
 8004dc4:	08004e55 	.word	0x08004e55
 8004dc8:	08004e55 	.word	0x08004e55
 8004dcc:	08004e43 	.word	0x08004e43
 8004dd0:	08004e55 	.word	0x08004e55
 8004dd4:	08004e55 	.word	0x08004e55
 8004dd8:	08004e55 	.word	0x08004e55
 8004ddc:	08004e55 	.word	0x08004e55
 8004de0:	08004e55 	.word	0x08004e55
 8004de4:	08004e55 	.word	0x08004e55
 8004de8:	08004e55 	.word	0x08004e55
 8004dec:	08004e5b 	.word	0x08004e5b
 8004df0:	08004e55 	.word	0x08004e55
 8004df4:	08004e55 	.word	0x08004e55
 8004df8:	08004e55 	.word	0x08004e55
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e5b 	.word	0x08004e5b
 8004e10:	08004e55 	.word	0x08004e55
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	08004e55 	.word	0x08004e55
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e5b 	.word	0x08004e5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	2101      	movs	r1, #1
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fdf4 	bl	8005a24 <RCCEx_PLL2_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e40:	e00c      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3324      	adds	r3, #36	; 0x24
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fe9d 	bl	8005b88 <RCCEx_PLL3_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e6e:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	654b      	str	r3, [r1, #84]	; 0x54
 8004e74:	e001      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d03e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d820      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004e8e:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ed7 	.word	0x08004ed7
 8004e98:	08004ead 	.word	0x08004ead
 8004e9c:	08004ebf 	.word	0x08004ebf
 8004ea0:	08004ed7 	.word	0x08004ed7
 8004ea4:	08004ed7 	.word	0x08004ed7
 8004ea8:	08004ed7 	.word	0x08004ed7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fdb6 	bl	8005a24 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3324      	adds	r3, #36	; 0x24
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fe5f 	bl	8005b88 <RCCEx_PLL3_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d110      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eea:	4902      	ldr	r1, [pc, #8]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef0:	e008      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004ef2:	bf00      	nop
 8004ef4:	58024400 	.word	0x58024400
 8004ef8:	58024800 	.word	0x58024800
 8004efc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d039      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d820      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f63 	.word	0x08004f63
 8004f24:	08004f39 	.word	0x08004f39
 8004f28:	08004f4b 	.word	0x08004f4b
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd70 	bl	8005a24 <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f48:	e00c      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	2101      	movs	r1, #1
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fe19 	bl	8005b88 <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f6a:	4bb7      	ldr	r3, [pc, #732]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	49b3      	ldr	r1, [pc, #716]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d04b      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f9a:	d02e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fa0:	d828      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d02a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d822      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fb2:	d026      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fb8:	d81c      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbe:	d010      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc4:	d816      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01d      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fce:	d111      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fd24 	bl	8005a24 <RCCEx_PLL2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fe0:	e012      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fdcd 	bl	8005b88 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ff2:	e009      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e004      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ffe:	bf00      	nop
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b8e      	ldr	r3, [pc, #568]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501c:	498a      	ldr	r1, [pc, #552]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800501e:	4313      	orrs	r3, r2
 8005020:	654b      	str	r3, [r1, #84]	; 0x54
 8005022:	e001      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d04b      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800503a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800503e:	d02e      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005040:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005044:	d828      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	d02a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005050:	d822      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005052:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005056:	d026      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d81c      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d010      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d816      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01d      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005072:	d111      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fcd2 	bl	8005a24 <RCCEx_PLL2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005084:	e012      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd7b 	bl	8005b88 <RCCEx_PLL3_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005096:	e009      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
      break;
 800509c:	e006      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800509e:	bf00      	nop
 80050a0:	e004      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80050aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c0:	4961      	ldr	r1, [pc, #388]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	658b      	str	r3, [r1, #88]	; 0x58
 80050c6:	e001      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d04b      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050e2:	d02e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80050e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050e8:	d828      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80050ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ee:	d02a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f4:	d822      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80050f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050fa:	d026      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80050fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005100:	d81c      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005106:	d010      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d816      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01d      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005116:	d111      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fc80 	bl	8005a24 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005128:	e012      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3324      	adds	r3, #36	; 0x24
 800512e:	2102      	movs	r1, #2
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fd29 	bl	8005b88 <RCCEx_PLL3_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800513a:	e009      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	75fb      	strb	r3, [r7, #23]
      break;
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800514e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005156:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005164:	4938      	ldr	r1, [pc, #224]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005166:	4313      	orrs	r3, r2
 8005168:	658b      	str	r3, [r1, #88]	; 0x58
 800516a:	e001      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	d10a      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fcfa 	bl	8005b88 <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800519e:	4b2a      	ldr	r3, [pc, #168]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ac:	4926      	ldr	r1, [pc, #152]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c8:	d10a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2102      	movs	r1, #2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fcd9 	bl	8005b88 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ee:	4916      	ldr	r1, [pc, #88]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d036      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800520a:	d01f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800520c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005210:	d817      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d009      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800521c:	e011      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fbfd 	bl	8005a24 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800522e:	e00e      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	2102      	movs	r1, #2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fca6 	bl	8005b88 <RCCEx_PLL3_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005240:	e005      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
      break;
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005248:	58024400 	.word	0x58024400
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005254:	4b93      	ldr	r3, [pc, #588]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005262:	4990      	ldr	r1, [pc, #576]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	658b      	str	r3, [r1, #88]	; 0x58
 8005268:	e001      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d033      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005284:	d01c      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800528a:	d816      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800528c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005296:	d007      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005298:	e00f      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800529a:	4b82      	ldr	r3, [pc, #520]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a81      	ldr	r2, [pc, #516]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80052a6:	e00c      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3324      	adds	r3, #36	; 0x24
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fc6a 	bl	8005b88 <RCCEx_PLL3_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052b8:	e003      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
      break;
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80052c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c8:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d6:	4973      	ldr	r1, [pc, #460]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	654b      	str	r3, [r1, #84]	; 0x54
 80052dc:	e001      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d029      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d007      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80052fc:	e00f      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fe:	4b69      	ldr	r3, [pc, #420]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	4a68      	ldr	r2, [pc, #416]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005308:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800530a:	e00b      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	2102      	movs	r1, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fb86 	bl	8005a24 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800532a:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	495b      	ldr	r1, [pc, #364]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800533c:	e001      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3324      	adds	r3, #36	; 0x24
 8005352:	2102      	movs	r1, #2
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fc17 	bl	8005b88 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d030      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005378:	d017      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800537a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537e:	d811      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005384:	d013      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	d80b      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005394:	d106      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005396:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80053a2:	e007      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
      break;
 80053a8:	e004      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80053b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ba:	4b3a      	ldr	r3, [pc, #232]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c6:	4937      	ldr	r1, [pc, #220]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	654b      	str	r3, [r1, #84]	; 0x54
 80053cc:	e001      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	492e      	ldr	r1, [pc, #184]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053fc:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800540a:	4926      	ldr	r1, [pc, #152]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005428:	491e      	ldr	r1, [pc, #120]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800543a:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005444:	6113      	str	r3, [r2, #16]
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005450:	4914      	ldr	r1, [pc, #80]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	da08      	bge.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	490e      	ldr	r1, [pc, #56]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800546c:	4313      	orrs	r3, r2
 800546e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4906      	ldr	r1, [pc, #24]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005490:	7dbb      	ldrb	r3, [r7, #22]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58024400 	.word	0x58024400

080054a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80054ac:	f7ff f860 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	58024400 	.word	0x58024400
 80054d0:	08009294 	.word	0x08009294

080054d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054dc:	4ba1      	ldr	r3, [pc, #644]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054e6:	4b9f      	ldr	r3, [pc, #636]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	0b1b      	lsrs	r3, r3, #12
 80054ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054f2:	4b9c      	ldr	r3, [pc, #624]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054fe:	4b99      	ldr	r3, [pc, #612]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	08db      	lsrs	r3, r3, #3
 8005504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8111 	beq.w	8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b02      	cmp	r3, #2
 8005526:	f000 8083 	beq.w	8005630 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b02      	cmp	r3, #2
 800552e:	f200 80a1 	bhi.w	8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d056      	beq.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800553e:	e099      	b.n	8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005540:	4b88      	ldr	r3, [pc, #544]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02d      	beq.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800554c:	4b85      	ldr	r3, [pc, #532]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	4a84      	ldr	r2, [pc, #528]	; (8005768 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b7b      	ldr	r3, [pc, #492]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800576c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055a6:	e087      	b.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b6a      	ldr	r3, [pc, #424]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800576c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ea:	e065      	b.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fe:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005612:	eddf 5a56 	vldr	s11, [pc, #344]	; 800576c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800562e:	e043      	b.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800563e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005642:	4b48      	ldr	r3, [pc, #288]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005652:	ed97 6a03 	vldr	s12, [r7, #12]
 8005656:	eddf 5a45 	vldr	s11, [pc, #276]	; 800576c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800565a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005672:	e021      	b.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005696:	ed97 6a03 	vldr	s12, [r7, #12]
 800569a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800576c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800569e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	0a5b      	lsrs	r3, r3, #9
 80056be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056de:	ee17 2a90 	vmov	r2, s15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056e6:	4b1f      	ldr	r3, [pc, #124]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005700:	edd7 6a07 	vldr	s13, [r7, #28]
 8005704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800570c:	ee17 2a90 	vmov	r2, s15
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800572a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800572e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573a:	ee17 2a90 	vmov	r2, s15
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
}
 8005756:	bf00      	nop
 8005758:	3724      	adds	r7, #36	; 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	58024400 	.word	0x58024400
 8005768:	03d09000 	.word	0x03d09000
 800576c:	46000000 	.word	0x46000000
 8005770:	4c742400 	.word	0x4c742400
 8005774:	4a742400 	.word	0x4a742400
 8005778:	4af42400 	.word	0x4af42400

0800577c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005784:	4ba1      	ldr	r3, [pc, #644]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800578e:	4b9f      	ldr	r3, [pc, #636]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	0d1b      	lsrs	r3, r3, #20
 8005794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005798:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800579a:	4b9c      	ldr	r3, [pc, #624]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80057a6:	4b99      	ldr	r3, [pc, #612]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8111 	beq.w	80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	f000 8083 	beq.w	80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f200 80a1 	bhi.w	800591c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d056      	beq.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057e6:	e099      	b.n	800591c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e8:	4b88      	ldr	r3, [pc, #544]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02d      	beq.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057f4:	4b85      	ldr	r3, [pc, #532]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	4a84      	ldr	r2, [pc, #528]	; (8005a10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b7b      	ldr	r3, [pc, #492]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005832:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800584e:	e087      	b.n	8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b6a      	ldr	r3, [pc, #424]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a03 	vldr	s12, [r7, #12]
 8005876:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005892:	e065      	b.n	8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058d6:	e043      	b.n	8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ea:	4b48      	ldr	r3, [pc, #288]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800591a:	e021      	b.n	8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b37      	ldr	r3, [pc, #220]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005942:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800595e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005960:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	0a5b      	lsrs	r3, r3, #9
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800597a:	edd7 6a07 	vldr	s13, [r7, #28]
 800597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 2a90 	vmov	r2, s15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800598e:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b4:	ee17 2a90 	vmov	r2, s15
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e2:	ee17 2a90 	vmov	r2, s15
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059ea:	e008      	b.n	80059fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
}
 80059fe:	bf00      	nop
 8005a00:	3724      	adds	r7, #36	; 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	03d09000 	.word	0x03d09000
 8005a14:	46000000 	.word	0x46000000
 8005a18:	4c742400 	.word	0x4c742400
 8005a1c:	4a742400 	.word	0x4a742400
 8005a20:	4af42400 	.word	0x4af42400

08005a24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a32:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d101      	bne.n	8005a42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e099      	b.n	8005b76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a42:	4b4f      	ldr	r3, [pc, #316]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4e:	f7fc f973 	bl	8001d38 <HAL_GetTick>
 8005a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a56:	f7fc f96f 	bl	8001d38 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e086      	b.n	8005b76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a68:	4b45      	ldr	r3, [pc, #276]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f0      	bne.n	8005a56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a74:	4b42      	ldr	r3, [pc, #264]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	031b      	lsls	r3, r3, #12
 8005a82:	493f      	ldr	r1, [pc, #252]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	628b      	str	r3, [r1, #40]	; 0x28
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	025b      	lsls	r3, r3, #9
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	061b      	lsls	r3, r3, #24
 8005ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ab8:	4931      	ldr	r1, [pc, #196]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005abe:	4b30      	ldr	r3, [pc, #192]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	492d      	ldr	r1, [pc, #180]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f023 0220 	bic.w	r2, r3, #32
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	4928      	ldr	r1, [pc, #160]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ae2:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
 8005aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <RCCEx_PLL2_Config+0x160>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	69d2      	ldr	r2, [r2, #28]
 8005afa:	00d2      	lsls	r2, r2, #3
 8005afc:	4920      	ldr	r1, [pc, #128]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b02:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f043 0310 	orr.w	r3, r3, #16
 8005b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b20:	e00f      	b.n	8005b42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b28:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b34:	e005      	b.n	8005b42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a11      	ldr	r2, [pc, #68]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fc f8f3 	bl	8001d38 <HAL_GetTick>
 8005b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b56:	f7fc f8ef 	bl	8001d38 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <RCCEx_PLL2_Config+0x15c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	58024400 	.word	0x58024400
 8005b84:	ffff0007 	.word	0xffff0007

08005b88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b96:	4b53      	ldr	r3, [pc, #332]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d101      	bne.n	8005ba6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e099      	b.n	8005cda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ba6:	4b4f      	ldr	r3, [pc, #316]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a4e      	ldr	r2, [pc, #312]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb2:	f7fc f8c1 	bl	8001d38 <HAL_GetTick>
 8005bb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb8:	e008      	b.n	8005bcc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bba:	f7fc f8bd 	bl	8001d38 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e086      	b.n	8005cda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bcc:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bd8:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	051b      	lsls	r3, r3, #20
 8005be6:	493f      	ldr	r1, [pc, #252]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	628b      	str	r3, [r1, #40]	; 0x28
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	025b      	lsls	r3, r3, #9
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c1c:	4931      	ldr	r1, [pc, #196]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c22:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	492d      	ldr	r1, [pc, #180]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c34:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4928      	ldr	r1, [pc, #160]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	4a26      	ldr	r2, [pc, #152]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <RCCEx_PLL3_Config+0x160>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	69d2      	ldr	r2, [r2, #28]
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	4920      	ldr	r1, [pc, #128]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c84:	e00f      	b.n	8005ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d106      	bne.n	8005c9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c98:	e005      	b.n	8005ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a11      	ldr	r2, [pc, #68]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a0e      	ldr	r2, [pc, #56]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb2:	f7fc f841 	bl	8001d38 <HAL_GetTick>
 8005cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb8:	e008      	b.n	8005ccc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cba:	f7fc f83d 	bl	8001d38 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <RCCEx_PLL3_Config+0x15c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	ffff0007 	.word	0xffff0007

08005cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e049      	b.n	8005d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fd04 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f000 fd30 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e049      	b.n	8005e40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f841 	bl	8005e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 fcd9 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_TIM_PWM_Start_IT+0x24>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e03c      	b.n	8005efa <HAL_TIM_PWM_Start_IT+0x9e>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d109      	bne.n	8005e9a <HAL_TIM_PWM_Start_IT+0x3e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	2300      	moveq	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	e02f      	b.n	8005efa <HAL_TIM_PWM_Start_IT+0x9e>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d109      	bne.n	8005eb4 <HAL_TIM_PWM_Start_IT+0x58>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	e022      	b.n	8005efa <HAL_TIM_PWM_Start_IT+0x9e>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d109      	bne.n	8005ece <HAL_TIM_PWM_Start_IT+0x72>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	bf14      	ite	ne
 8005ec6:	2301      	movne	r3, #1
 8005ec8:	2300      	moveq	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e015      	b.n	8005efa <HAL_TIM_PWM_Start_IT+0x9e>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d109      	bne.n	8005ee8 <HAL_TIM_PWM_Start_IT+0x8c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e008      	b.n	8005efa <HAL_TIM_PWM_Start_IT+0x9e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf14      	ite	ne
 8005ef4:	2301      	movne	r3, #1
 8005ef6:	2300      	moveq	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e0e2      	b.n	80060c8 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_PWM_Start_IT+0xb6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f10:	e023      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0xfe>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_PWM_Start_IT+0xc6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f20:	e01b      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0xfe>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start_IT+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f30:	e013      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0xfe>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start_IT+0xe6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f40:	e00b      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0xfe>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start_IT+0xf6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f50:	e003      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0xfe>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	d841      	bhi.n	8005fe4 <HAL_TIM_PWM_Start_IT+0x188>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fe5 	.word	0x08005fe5
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fd3 	.word	0x08005fd3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0202 	orr.w	r2, r2, #2
 8005faa:	60da      	str	r2, [r3, #12]
      break;
 8005fac:	e01b      	b.n	8005fe6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0204 	orr.w	r2, r2, #4
 8005fbc:	60da      	str	r2, [r3, #12]
      break;
 8005fbe:	e012      	b.n	8005fe6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0208 	orr.w	r2, r2, #8
 8005fce:	60da      	str	r2, [r3, #12]
      break;
 8005fd0:	e009      	b.n	8005fe6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0210 	orr.w	r2, r2, #16
 8005fe0:	60da      	str	r2, [r3, #12]
      break;
 8005fe2:	e000      	b.n	8005fe6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8005fe4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 ffd4 	bl	8006f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a35      	ldr	r2, [pc, #212]	; (80060d0 <HAL_TIM_PWM_Start_IT+0x274>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_TIM_PWM_Start_IT+0x278>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a32      	ldr	r2, [pc, #200]	; (80060d8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a31      	ldr	r2, [pc, #196]	; (80060dc <HAL_TIM_PWM_Start_IT+0x280>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIM_PWM_Start_IT+0x1ca>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2f      	ldr	r2, [pc, #188]	; (80060e0 <HAL_TIM_PWM_Start_IT+0x284>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_Start_IT+0x1ce>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_TIM_PWM_Start_IT+0x1d0>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_TIM_PWM_Start_IT+0x274>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d018      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <HAL_TIM_PWM_Start_IT+0x288>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a21      	ldr	r2, [pc, #132]	; (80060e8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <HAL_TIM_PWM_Start_IT+0x290>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <HAL_TIM_PWM_Start_IT+0x278>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIM_PWM_Start_IT+0x22a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIM_PWM_Start_IT+0x294>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d115      	bne.n	80060b2 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_TIM_PWM_Start_IT+0x298>)
 800608e:	4013      	ands	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d015      	beq.n	80060c4 <HAL_TIM_PWM_Start_IT+0x268>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609e:	d011      	beq.n	80060c4 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	e008      	b.n	80060c4 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e000      	b.n	80060c6 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40001800 	.word	0x40001800
 80060f4:	00010007 	.word	0x00010007

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb14 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb06 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb f8fd 	bl	8001348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0204 	mvn.w	r2, #4
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 faea 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fadc 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb f8d3 	bl	8001348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fac0 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fab2 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fb f8a9 	bl	8001348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b10      	cmp	r3, #16
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa96 	bl	8006768 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa88 	bl	8006754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb f87f 	bl	8001348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10e      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0201 	mvn.w	r2, #1
 8006274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa62 	bl	8006740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d10e      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d107      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 ff32 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d10e      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d107      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 ff25 	bl	8007120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d10e      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d107      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa3d 	bl	800677c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b20      	cmp	r3, #32
 800630e:	d10e      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d107      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0220 	mvn.w	r2, #32
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fee5 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800634e:	2302      	movs	r3, #2
 8006350:	e0fd      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b14      	cmp	r3, #20
 800635e:	f200 80f0 	bhi.w	8006542 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006543 	.word	0x08006543
 8006370:	08006543 	.word	0x08006543
 8006374:	08006543 	.word	0x08006543
 8006378:	080063fd 	.word	0x080063fd
 800637c:	08006543 	.word	0x08006543
 8006380:	08006543 	.word	0x08006543
 8006384:	08006543 	.word	0x08006543
 8006388:	0800643f 	.word	0x0800643f
 800638c:	08006543 	.word	0x08006543
 8006390:	08006543 	.word	0x08006543
 8006394:	08006543 	.word	0x08006543
 8006398:	0800647f 	.word	0x0800647f
 800639c:	08006543 	.word	0x08006543
 80063a0:	08006543 	.word	0x08006543
 80063a4:	08006543 	.word	0x08006543
 80063a8:	080064c1 	.word	0x080064c1
 80063ac:	08006543 	.word	0x08006543
 80063b0:	08006543 	.word	0x08006543
 80063b4:	08006543 	.word	0x08006543
 80063b8:	08006501 	.word	0x08006501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa7e 	bl	80068c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
      break;
 80063fa:	e0a3      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 faee 	bl	80069e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	619a      	str	r2, [r3, #24]
      break;
 800643c:	e082      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb57 	bl	8006af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0208 	orr.w	r2, r2, #8
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0204 	bic.w	r2, r2, #4
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	61da      	str	r2, [r3, #28]
      break;
 800647c:	e062      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fbbd 	bl	8006c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	021a      	lsls	r2, r3, #8
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	61da      	str	r2, [r3, #28]
      break;
 80064be:	e041      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fc04 	bl	8006cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064fe:	e021      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fc46 	bl	8006d98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006540:	e000      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIM_ConfigClockSource+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e0db      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1d0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4b69      	ldr	r3, [pc, #420]	; (8006730 <HAL_TIM_ConfigClockSource+0x1d8>)
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a63      	ldr	r2, [pc, #396]	; (8006734 <HAL_TIM_ConfigClockSource+0x1dc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f000 80a9 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 80065ac:	4a61      	ldr	r2, [pc, #388]	; (8006734 <HAL_TIM_ConfigClockSource+0x1dc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f200 80ae 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 80065b4:	4a60      	ldr	r2, [pc, #384]	; (8006738 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f000 80a1 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 80065bc:	4a5e      	ldr	r2, [pc, #376]	; (8006738 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f200 80a6 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 80065c4:	4a5d      	ldr	r2, [pc, #372]	; (800673c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	f000 8099 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 80065cc:	4a5b      	ldr	r2, [pc, #364]	; (800673c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	f200 809e 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 80065d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065d8:	f000 8091 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 80065dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065e0:	f200 8096 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 80065e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e8:	f000 8089 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 80065ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f0:	f200 808e 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d03e      	beq.n	8006678 <HAL_TIM_ConfigClockSource+0x120>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	f200 8087 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	f000 8085 	beq.w	8006714 <HAL_TIM_ConfigClockSource+0x1bc>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d87f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006610:	2b70      	cmp	r3, #112	; 0x70
 8006612:	d01a      	beq.n	800664a <HAL_TIM_ConfigClockSource+0xf2>
 8006614:	2b70      	cmp	r3, #112	; 0x70
 8006616:	d87b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006618:	2b60      	cmp	r3, #96	; 0x60
 800661a:	d050      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x166>
 800661c:	2b60      	cmp	r3, #96	; 0x60
 800661e:	d877      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006620:	2b50      	cmp	r3, #80	; 0x50
 8006622:	d03c      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x146>
 8006624:	2b50      	cmp	r3, #80	; 0x50
 8006626:	d873      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d058      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x186>
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d86f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006630:	2b30      	cmp	r3, #48	; 0x30
 8006632:	d064      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 8006634:	2b30      	cmp	r3, #48	; 0x30
 8006636:	d86b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006638:	2b20      	cmp	r3, #32
 800663a:	d060      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 800663c:	2b20      	cmp	r3, #32
 800663e:	d867      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05c      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
 8006644:	2b10      	cmp	r3, #16
 8006646:	d05a      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006648:	e062      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f000 fc7f 	bl	8006f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800666c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	609a      	str	r2, [r3, #8]
      break;
 8006676:	e04e      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	6899      	ldr	r1, [r3, #8]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f000 fc68 	bl	8006f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800669a:	609a      	str	r2, [r3, #8]
      break;
 800669c:	e03b      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fbd8 	bl	8006e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2150      	movs	r1, #80	; 0x50
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc32 	bl	8006f20 <TIM_ITRx_SetConfig>
      break;
 80066bc:	e02b      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fbf7 	bl	8006ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2160      	movs	r1, #96	; 0x60
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fc22 	bl	8006f20 <TIM_ITRx_SetConfig>
      break;
 80066dc:	e01b      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 fbb8 	bl	8006e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fc12 	bl	8006f20 <TIM_ITRx_SetConfig>
      break;
 80066fc:	e00b      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f000 fc09 	bl	8006f20 <TIM_ITRx_SetConfig>
        break;
 800670e:	e002      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	ffceff88 	.word	0xffceff88
 8006734:	00100040 	.word	0x00100040
 8006738:	00100030 	.word	0x00100030
 800673c:	00100020 	.word	0x00100020

08006740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a40      	ldr	r2, [pc, #256]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ae:	d00f      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3d      	ldr	r2, [pc, #244]	; (80068a8 <TIM_Base_SetConfig+0x118>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <TIM_Base_SetConfig+0x11c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3b      	ldr	r2, [pc, #236]	; (80068b0 <TIM_Base_SetConfig+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3a      	ldr	r2, [pc, #232]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d108      	bne.n	80067e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <TIM_Base_SetConfig+0x118>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <TIM_Base_SetConfig+0x11c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <TIM_Base_SetConfig+0x120>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <TIM_Base_SetConfig+0x128>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <TIM_Base_SetConfig+0x128>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d103      	bne.n	8006890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	615a      	str	r2, [r3, #20]
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <TIM_OC1_SetConfig+0x108>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0302 	bic.w	r3, r3, #2
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a2d      	ldr	r2, [pc, #180]	; (80069d0 <TIM_OC1_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <TIM_OC1_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <TIM_OC1_SetConfig+0x114>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <TIM_OC1_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x7c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <TIM_OC1_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <TIM_OC1_SetConfig+0x10c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <TIM_OC1_SetConfig+0x110>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <TIM_OC1_SetConfig+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <TIM_OC1_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC1_SetConfig+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <TIM_OC1_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	fffeff8f 	.word	0xfffeff8f
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0210 	bic.w	r2, r3, #16
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <TIM_OC2_SetConfig+0xfc>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0320 	bic.w	r3, r3, #32
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <TIM_OC2_SetConfig+0x100>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC2_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <TIM_OC2_SetConfig+0x104>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d10d      	bne.n	8006a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <TIM_OC2_SetConfig+0x100>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <TIM_OC2_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <TIM_OC2_SetConfig+0x108>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <TIM_OC2_SetConfig+0x10c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC2_SetConfig+0xac>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <TIM_OC2_SetConfig+0x110>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	feff8fff 	.word	0xfeff8fff
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800

08006af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <TIM_OC3_SetConfig+0xf8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC3_SetConfig+0x66>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a26      	ldr	r2, [pc, #152]	; (8006bf4 <TIM_OC3_SetConfig+0xfc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <TIM_OC3_SetConfig+0xf8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <TIM_OC3_SetConfig+0xfc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <TIM_OC3_SetConfig+0x100>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <TIM_OC3_SetConfig+0x104>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xaa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <TIM_OC3_SetConfig+0x108>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d113      	bne.n	8006bca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800

08006c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <TIM_OC4_SetConfig+0xbc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00f      	beq.n	8006c84 <TIM_OC4_SetConfig+0x80>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <TIM_OC4_SetConfig+0xc0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_OC4_SetConfig+0x80>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <TIM_OC4_SetConfig+0xc4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_OC4_SetConfig+0x80>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <TIM_OC4_SetConfig+0xc8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC4_SetConfig+0x80>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <TIM_OC4_SetConfig+0xcc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d109      	bne.n	8006c98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a17      	ldr	r2, [pc, #92]	; (8006d84 <TIM_OC5_SetConfig+0xb0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00f      	beq.n	8006d4a <TIM_OC5_SetConfig+0x76>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <TIM_OC5_SetConfig+0xb4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_OC5_SetConfig+0x76>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <TIM_OC5_SetConfig+0xb8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_OC5_SetConfig+0x76>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <TIM_OC5_SetConfig+0xbc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC5_SetConfig+0x76>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <TIM_OC5_SetConfig+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d109      	bne.n	8006d5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800

08006d98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	051b      	lsls	r3, r3, #20
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <TIM_OC6_SetConfig+0xb4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00f      	beq.n	8006e10 <TIM_OC6_SetConfig+0x78>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <TIM_OC6_SetConfig+0xb8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_OC6_SetConfig+0x78>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <TIM_OC6_SetConfig+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d007      	beq.n	8006e10 <TIM_OC6_SetConfig+0x78>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <TIM_OC6_SetConfig+0xc0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC6_SetConfig+0x78>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <TIM_OC6_SetConfig+0xc4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d109      	bne.n	8006e24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800

08006e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 030a 	bic.w	r3, r3, #10
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b087      	sub	sp, #28
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f023 0210 	bic.w	r2, r3, #16
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	031b      	lsls	r3, r3, #12
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <TIM_ITRx_SetConfig+0x38>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f043 0307 	orr.w	r3, r3, #7
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	609a      	str	r2, [r3, #8]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	ffcfff8f 	.word	0xffcfff8f

08006f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	021a      	lsls	r2, r3, #8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2201      	movs	r2, #1
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e068      	b.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2e      	ldr	r2, [pc, #184]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d108      	bne.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800703a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01d      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007072:	d018      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d10c      	bne.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40010400 	.word	0x40010400
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40001800 	.word	0x40001800

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e042      	b.n	80071cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fa fb45 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8c2 	bl	8007300 <UART_SetConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e022      	b.n	80071cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fe16 	bl	8007dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fe9d 	bl	8007f04 <UART_CheckIdleState>
 80071ca:	4603      	mov	r3, r0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	f040 8083 	bne.w	80072f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_UART_Transmit+0x28>
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e07b      	b.n	80072f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UART_Transmit+0x3a>
 800720a:	2302      	movs	r3, #2
 800720c:	e074      	b.n	80072f8 <HAL_UART_Transmit+0x124>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2221      	movs	r2, #33	; 0x21
 8007222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007226:	f7fa fd87 	bl	8001d38 <HAL_GetTick>
 800722a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d108      	bne.n	8007258 <HAL_UART_Transmit+0x84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	e003      	b.n	8007260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007268:	e02c      	b.n	80072c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fe90 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e039      	b.n	80072f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	3302      	adds	r3, #2
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	e007      	b.n	80072b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	3301      	adds	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1cc      	bne.n	800726a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	2140      	movs	r1, #64	; 0x40
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fe5d 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e006      	b.n	80072f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007300:	b5b0      	push	{r4, r5, r7, lr}
 8007302:	b08e      	sub	sp, #56	; 0x38
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4bbf      	ldr	r3, [pc, #764]	; (800762c <UART_SetConfig+0x32c>)
 800732e:	4013      	ands	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007336:	430b      	orrs	r3, r1
 8007338:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4ab5      	ldr	r2, [pc, #724]	; (8007630 <UART_SetConfig+0x330>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007366:	4313      	orrs	r3, r2
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	4bb0      	ldr	r3, [pc, #704]	; (8007634 <UART_SetConfig+0x334>)
 8007372:	4013      	ands	r3, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800737a:	430b      	orrs	r3, r1
 800737c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f023 010f 	bic.w	r1, r3, #15
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4aa7      	ldr	r2, [pc, #668]	; (8007638 <UART_SetConfig+0x338>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d176      	bne.n	800748c <UART_SetConfig+0x18c>
 800739e:	4ba7      	ldr	r3, [pc, #668]	; (800763c <UART_SetConfig+0x33c>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a6:	2b28      	cmp	r3, #40	; 0x28
 80073a8:	d86c      	bhi.n	8007484 <UART_SetConfig+0x184>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0xb0>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	08007455 	.word	0x08007455
 80073b4:	08007485 	.word	0x08007485
 80073b8:	08007485 	.word	0x08007485
 80073bc:	08007485 	.word	0x08007485
 80073c0:	08007485 	.word	0x08007485
 80073c4:	08007485 	.word	0x08007485
 80073c8:	08007485 	.word	0x08007485
 80073cc:	08007485 	.word	0x08007485
 80073d0:	0800745d 	.word	0x0800745d
 80073d4:	08007485 	.word	0x08007485
 80073d8:	08007485 	.word	0x08007485
 80073dc:	08007485 	.word	0x08007485
 80073e0:	08007485 	.word	0x08007485
 80073e4:	08007485 	.word	0x08007485
 80073e8:	08007485 	.word	0x08007485
 80073ec:	08007485 	.word	0x08007485
 80073f0:	08007465 	.word	0x08007465
 80073f4:	08007485 	.word	0x08007485
 80073f8:	08007485 	.word	0x08007485
 80073fc:	08007485 	.word	0x08007485
 8007400:	08007485 	.word	0x08007485
 8007404:	08007485 	.word	0x08007485
 8007408:	08007485 	.word	0x08007485
 800740c:	08007485 	.word	0x08007485
 8007410:	0800746d 	.word	0x0800746d
 8007414:	08007485 	.word	0x08007485
 8007418:	08007485 	.word	0x08007485
 800741c:	08007485 	.word	0x08007485
 8007420:	08007485 	.word	0x08007485
 8007424:	08007485 	.word	0x08007485
 8007428:	08007485 	.word	0x08007485
 800742c:	08007485 	.word	0x08007485
 8007430:	08007475 	.word	0x08007475
 8007434:	08007485 	.word	0x08007485
 8007438:	08007485 	.word	0x08007485
 800743c:	08007485 	.word	0x08007485
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007485 	.word	0x08007485
 800744c:	08007485 	.word	0x08007485
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e222      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e21e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e21a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007472:	e216      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e212      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e20e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e20a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6b      	ldr	r2, [pc, #428]	; (8007640 <UART_SetConfig+0x340>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d130      	bne.n	80074f8 <UART_SetConfig+0x1f8>
 8007496:	4b69      	ldr	r3, [pc, #420]	; (800763c <UART_SetConfig+0x33c>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d826      	bhi.n	80074f0 <UART_SetConfig+0x1f0>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x1a8>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e1ec      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e1e8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e1e4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074de:	e1e0      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074e0:	2320      	movs	r3, #32
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e1dc      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e1d8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e1d4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a51      	ldr	r2, [pc, #324]	; (8007644 <UART_SetConfig+0x344>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d130      	bne.n	8007564 <UART_SetConfig+0x264>
 8007502:	4b4e      	ldr	r3, [pc, #312]	; (800763c <UART_SetConfig+0x33c>)
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b05      	cmp	r3, #5
 800750c:	d826      	bhi.n	800755c <UART_SetConfig+0x25c>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x214>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	0800752d 	.word	0x0800752d
 8007518:	08007535 	.word	0x08007535
 800751c:	0800753d 	.word	0x0800753d
 8007520:	08007545 	.word	0x08007545
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007555 	.word	0x08007555
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007532:	e1b6      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e1b2      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	e1ae      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754a:	e1aa      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800754c:	2320      	movs	r3, #32
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e1a6      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e1a2      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e19e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a37      	ldr	r2, [pc, #220]	; (8007648 <UART_SetConfig+0x348>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d130      	bne.n	80075d0 <UART_SetConfig+0x2d0>
 800756e:	4b33      	ldr	r3, [pc, #204]	; (800763c <UART_SetConfig+0x33c>)
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	2b05      	cmp	r3, #5
 8007578:	d826      	bhi.n	80075c8 <UART_SetConfig+0x2c8>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x280>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	08007599 	.word	0x08007599
 8007584:	080075a1 	.word	0x080075a1
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075c1 	.word	0x080075c1
 8007598:	2300      	movs	r3, #0
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759e:	e180      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e17c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075a8:	2308      	movs	r3, #8
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	e178      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b6:	e174      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075b8:	2320      	movs	r3, #32
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e170      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c6:	e16c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ce:	e168      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <UART_SetConfig+0x34c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d142      	bne.n	8007660 <UART_SetConfig+0x360>
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <UART_SetConfig+0x33c>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d838      	bhi.n	8007658 <UART_SetConfig+0x358>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <UART_SetConfig+0x2ec>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007605 	.word	0x08007605
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007615 	.word	0x08007615
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	08007625 	.word	0x08007625
 8007600:	08007651 	.word	0x08007651
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	e14a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800760c:	2304      	movs	r3, #4
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e146      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007614:	2308      	movs	r3, #8
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e142      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800761c:	2310      	movs	r3, #16
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e13e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007624:	2320      	movs	r3, #32
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e13a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800762c:	cfff69f3 	.word	0xcfff69f3
 8007630:	58000c00 	.word	0x58000c00
 8007634:	11fff4ff 	.word	0x11fff4ff
 8007638:	40011000 	.word	0x40011000
 800763c:	58024400 	.word	0x58024400
 8007640:	40004400 	.word	0x40004400
 8007644:	40004800 	.word	0x40004800
 8007648:	40004c00 	.word	0x40004c00
 800764c:	40005000 	.word	0x40005000
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007656:	e124      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765e:	e120      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4acc      	ldr	r2, [pc, #816]	; (8007998 <UART_SetConfig+0x698>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d176      	bne.n	8007758 <UART_SetConfig+0x458>
 800766a:	4bcc      	ldr	r3, [pc, #816]	; (800799c <UART_SetConfig+0x69c>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007672:	2b28      	cmp	r3, #40	; 0x28
 8007674:	d86c      	bhi.n	8007750 <UART_SetConfig+0x450>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0x37c>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007721 	.word	0x08007721
 8007680:	08007751 	.word	0x08007751
 8007684:	08007751 	.word	0x08007751
 8007688:	08007751 	.word	0x08007751
 800768c:	08007751 	.word	0x08007751
 8007690:	08007751 	.word	0x08007751
 8007694:	08007751 	.word	0x08007751
 8007698:	08007751 	.word	0x08007751
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007751 	.word	0x08007751
 80076a4:	08007751 	.word	0x08007751
 80076a8:	08007751 	.word	0x08007751
 80076ac:	08007751 	.word	0x08007751
 80076b0:	08007751 	.word	0x08007751
 80076b4:	08007751 	.word	0x08007751
 80076b8:	08007751 	.word	0x08007751
 80076bc:	08007731 	.word	0x08007731
 80076c0:	08007751 	.word	0x08007751
 80076c4:	08007751 	.word	0x08007751
 80076c8:	08007751 	.word	0x08007751
 80076cc:	08007751 	.word	0x08007751
 80076d0:	08007751 	.word	0x08007751
 80076d4:	08007751 	.word	0x08007751
 80076d8:	08007751 	.word	0x08007751
 80076dc:	08007739 	.word	0x08007739
 80076e0:	08007751 	.word	0x08007751
 80076e4:	08007751 	.word	0x08007751
 80076e8:	08007751 	.word	0x08007751
 80076ec:	08007751 	.word	0x08007751
 80076f0:	08007751 	.word	0x08007751
 80076f4:	08007751 	.word	0x08007751
 80076f8:	08007751 	.word	0x08007751
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007751 	.word	0x08007751
 8007704:	08007751 	.word	0x08007751
 8007708:	08007751 	.word	0x08007751
 800770c:	08007751 	.word	0x08007751
 8007710:	08007751 	.word	0x08007751
 8007714:	08007751 	.word	0x08007751
 8007718:	08007751 	.word	0x08007751
 800771c:	08007749 	.word	0x08007749
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e0bc      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007728:	2304      	movs	r3, #4
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e0b8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007730:	2308      	movs	r3, #8
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e0b4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007738:	2310      	movs	r3, #16
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e0b0      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e0ac      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e0a8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007756:	e0a4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a90      	ldr	r2, [pc, #576]	; (80079a0 <UART_SetConfig+0x6a0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d130      	bne.n	80077c4 <UART_SetConfig+0x4c4>
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <UART_SetConfig+0x69c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b05      	cmp	r3, #5
 800776c:	d826      	bhi.n	80077bc <UART_SetConfig+0x4bc>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x474>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	0800778d 	.word	0x0800778d
 8007778:	08007795 	.word	0x08007795
 800777c:	0800779d 	.word	0x0800779d
 8007780:	080077a5 	.word	0x080077a5
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077b5 	.word	0x080077b5
 800778c:	2300      	movs	r3, #0
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e086      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007794:	2304      	movs	r3, #4
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e082      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800779c:	2308      	movs	r3, #8
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e07e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077a4:	2310      	movs	r3, #16
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e07a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077ac:	2320      	movs	r3, #32
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e076      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e072      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e06e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a76      	ldr	r2, [pc, #472]	; (80079a4 <UART_SetConfig+0x6a4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d130      	bne.n	8007830 <UART_SetConfig+0x530>
 80077ce:	4b73      	ldr	r3, [pc, #460]	; (800799c <UART_SetConfig+0x69c>)
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d826      	bhi.n	8007828 <UART_SetConfig+0x528>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0x4e0>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f9 	.word	0x080077f9
 80077e4:	08007801 	.word	0x08007801
 80077e8:	08007809 	.word	0x08007809
 80077ec:	08007811 	.word	0x08007811
 80077f0:	08007819 	.word	0x08007819
 80077f4:	08007821 	.word	0x08007821
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fe:	e050      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e04c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e048      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e044      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007818:	2320      	movs	r3, #32
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e040      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e03c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e038      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a5c      	ldr	r2, [pc, #368]	; (80079a8 <UART_SetConfig+0x6a8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d130      	bne.n	800789c <UART_SetConfig+0x59c>
 800783a:	4b58      	ldr	r3, [pc, #352]	; (800799c <UART_SetConfig+0x69c>)
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	2b05      	cmp	r3, #5
 8007844:	d826      	bhi.n	8007894 <UART_SetConfig+0x594>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x54c>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007865 	.word	0x08007865
 8007850:	0800786d 	.word	0x0800786d
 8007854:	08007875 	.word	0x08007875
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	2302      	movs	r3, #2
 8007866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786a:	e01a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800786c:	2304      	movs	r3, #4
 800786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007872:	e016      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007874:	2308      	movs	r3, #8
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787a:	e012      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800787c:	2310      	movs	r3, #16
 800787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007882:	e00e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007884:	2320      	movs	r3, #32
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e00a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800788c:	2340      	movs	r3, #64	; 0x40
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e006      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789a:	e002      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a40      	ldr	r2, [pc, #256]	; (80079a8 <UART_SetConfig+0x6a8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	f040 80ef 	bne.w	8007a8c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	dc46      	bgt.n	8007944 <UART_SetConfig+0x644>
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	f2c0 8081 	blt.w	80079be <UART_SetConfig+0x6be>
 80078bc:	3b02      	subs	r3, #2
 80078be:	2b1e      	cmp	r3, #30
 80078c0:	d87d      	bhi.n	80079be <UART_SetConfig+0x6be>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <UART_SetConfig+0x5c8>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	0800794b 	.word	0x0800794b
 80078cc:	080079bf 	.word	0x080079bf
 80078d0:	08007953 	.word	0x08007953
 80078d4:	080079bf 	.word	0x080079bf
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	080079bf 	.word	0x080079bf
 80078e0:	08007963 	.word	0x08007963
 80078e4:	080079bf 	.word	0x080079bf
 80078e8:	080079bf 	.word	0x080079bf
 80078ec:	080079bf 	.word	0x080079bf
 80078f0:	080079bf 	.word	0x080079bf
 80078f4:	080079bf 	.word	0x080079bf
 80078f8:	080079bf 	.word	0x080079bf
 80078fc:	080079bf 	.word	0x080079bf
 8007900:	08007973 	.word	0x08007973
 8007904:	080079bf 	.word	0x080079bf
 8007908:	080079bf 	.word	0x080079bf
 800790c:	080079bf 	.word	0x080079bf
 8007910:	080079bf 	.word	0x080079bf
 8007914:	080079bf 	.word	0x080079bf
 8007918:	080079bf 	.word	0x080079bf
 800791c:	080079bf 	.word	0x080079bf
 8007920:	080079bf 	.word	0x080079bf
 8007924:	080079bf 	.word	0x080079bf
 8007928:	080079bf 	.word	0x080079bf
 800792c:	080079bf 	.word	0x080079bf
 8007930:	080079bf 	.word	0x080079bf
 8007934:	080079bf 	.word	0x080079bf
 8007938:	080079bf 	.word	0x080079bf
 800793c:	080079bf 	.word	0x080079bf
 8007940:	080079b1 	.word	0x080079b1
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d036      	beq.n	80079b6 <UART_SetConfig+0x6b6>
 8007948:	e039      	b.n	80079be <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800794a:	f7fd fdad 	bl	80054a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800794e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007950:	e03b      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd fdbc 	bl	80054d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007960:	e033      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007962:	f107 0308 	add.w	r3, r7, #8
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd ff08 	bl	800577c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007970:	e02b      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <UART_SetConfig+0x69c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800797e:	4b07      	ldr	r3, [pc, #28]	; (800799c <UART_SetConfig+0x69c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	08db      	lsrs	r3, r3, #3
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	4a08      	ldr	r2, [pc, #32]	; (80079ac <UART_SetConfig+0x6ac>)
 800798a:	fa22 f303 	lsr.w	r3, r2, r3
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007990:	e01b      	b.n	80079ca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <UART_SetConfig+0x6ac>)
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007996:	e018      	b.n	80079ca <UART_SetConfig+0x6ca>
 8007998:	40011400 	.word	0x40011400
 800799c:	58024400 	.word	0x58024400
 80079a0:	40007800 	.word	0x40007800
 80079a4:	40007c00 	.word	0x40007c00
 80079a8:	58000c00 	.word	0x58000c00
 80079ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079b0:	4bc4      	ldr	r3, [pc, #784]	; (8007cc4 <UART_SetConfig+0x9c4>)
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80079c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 81da 	beq.w	8007d86 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	4abc      	ldr	r2, [pc, #752]	; (8007cc8 <UART_SetConfig+0x9c8>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	461a      	mov	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	4413      	add	r3, r2
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d305      	bcc.n	8007a02 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079fc:	6a3a      	ldr	r2, [r7, #32]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a08:	e1bd      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f04f 0100 	mov.w	r1, #0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	4aac      	ldr	r2, [pc, #688]	; (8007cc8 <UART_SetConfig+0x9c8>)
 8007a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	f7f8 fcb5 	bl	8000390 <__aeabi_uldivmod>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	020b      	lsls	r3, r1, #8
 8007a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a3c:	0202      	lsls	r2, r0, #8
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	6849      	ldr	r1, [r1, #4]
 8007a42:	0849      	lsrs	r1, r1, #1
 8007a44:	4608      	mov	r0, r1
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	1814      	adds	r4, r2, r0
 8007a4c:	eb43 0501 	adc.w	r5, r3, r1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7f8 fc97 	bl	8000390 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4613      	mov	r3, r2
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a70:	d308      	bcc.n	8007a84 <UART_SetConfig+0x784>
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	d204      	bcs.n	8007a84 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e180      	b.n	8007d86 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a8a:	e17c      	b.n	8007d86 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a94:	f040 80bf 	bne.w	8007c16 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	dc49      	bgt.n	8007b34 <UART_SetConfig+0x834>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	db7c      	blt.n	8007b9e <UART_SetConfig+0x89e>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d87a      	bhi.n	8007b9e <UART_SetConfig+0x89e>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x7b0>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007b3b 	.word	0x08007b3b
 8007ab4:	08007b43 	.word	0x08007b43
 8007ab8:	08007b9f 	.word	0x08007b9f
 8007abc:	08007b9f 	.word	0x08007b9f
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b9f 	.word	0x08007b9f
 8007ac8:	08007b9f 	.word	0x08007b9f
 8007acc:	08007b9f 	.word	0x08007b9f
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b9f 	.word	0x08007b9f
 8007ad8:	08007b9f 	.word	0x08007b9f
 8007adc:	08007b9f 	.word	0x08007b9f
 8007ae0:	08007b9f 	.word	0x08007b9f
 8007ae4:	08007b9f 	.word	0x08007b9f
 8007ae8:	08007b9f 	.word	0x08007b9f
 8007aec:	08007b9f 	.word	0x08007b9f
 8007af0:	08007b6b 	.word	0x08007b6b
 8007af4:	08007b9f 	.word	0x08007b9f
 8007af8:	08007b9f 	.word	0x08007b9f
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b9f 	.word	0x08007b9f
 8007b04:	08007b9f 	.word	0x08007b9f
 8007b08:	08007b9f 	.word	0x08007b9f
 8007b0c:	08007b9f 	.word	0x08007b9f
 8007b10:	08007b9f 	.word	0x08007b9f
 8007b14:	08007b9f 	.word	0x08007b9f
 8007b18:	08007b9f 	.word	0x08007b9f
 8007b1c:	08007b9f 	.word	0x08007b9f
 8007b20:	08007b9f 	.word	0x08007b9f
 8007b24:	08007b9f 	.word	0x08007b9f
 8007b28:	08007b9f 	.word	0x08007b9f
 8007b2c:	08007b9f 	.word	0x08007b9f
 8007b30:	08007b91 	.word	0x08007b91
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d02e      	beq.n	8007b96 <UART_SetConfig+0x896>
 8007b38:	e031      	b.n	8007b9e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fc fd49 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b40:	e033      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b42:	f7fc fd5b 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8007b46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b48:	e02f      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0314 	add.w	r3, r7, #20
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fcc0 	bl	80054d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b58:	e027      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fe0c 	bl	800577c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b68:	e01f      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b6a:	4b58      	ldr	r3, [pc, #352]	; (8007ccc <UART_SetConfig+0x9cc>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <UART_SetConfig+0x9cc>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	08db      	lsrs	r3, r3, #3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	4a53      	ldr	r2, [pc, #332]	; (8007cd0 <UART_SetConfig+0x9d0>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b88:	e00f      	b.n	8007baa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007b8a:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <UART_SetConfig+0x9d0>)
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b8e:	e00c      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b90:	4b4c      	ldr	r3, [pc, #304]	; (8007cc4 <UART_SetConfig+0x9c4>)
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80ea 	beq.w	8007d86 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <UART_SetConfig+0x9c8>)
 8007bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc4:	005a      	lsls	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	2b0f      	cmp	r3, #15
 8007bde:	d916      	bls.n	8007c0e <UART_SetConfig+0x90e>
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be6:	d212      	bcs.n	8007c0e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f023 030f 	bic.w	r3, r3, #15
 8007bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c00:	4313      	orrs	r3, r2
 8007c02:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e0bb      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c14:	e0b7      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	dc4a      	bgt.n	8007cb4 <UART_SetConfig+0x9b4>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f2c0 8086 	blt.w	8007d30 <UART_SetConfig+0xa30>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	f200 8083 	bhi.w	8007d30 <UART_SetConfig+0xa30>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x930>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007cbb 	.word	0x08007cbb
 8007c34:	08007cd5 	.word	0x08007cd5
 8007c38:	08007d31 	.word	0x08007d31
 8007c3c:	08007d31 	.word	0x08007d31
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007d31 	.word	0x08007d31
 8007c48:	08007d31 	.word	0x08007d31
 8007c4c:	08007d31 	.word	0x08007d31
 8007c50:	08007ced 	.word	0x08007ced
 8007c54:	08007d31 	.word	0x08007d31
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007d31 	.word	0x08007d31
 8007c60:	08007d31 	.word	0x08007d31
 8007c64:	08007d31 	.word	0x08007d31
 8007c68:	08007d31 	.word	0x08007d31
 8007c6c:	08007d31 	.word	0x08007d31
 8007c70:	08007cfd 	.word	0x08007cfd
 8007c74:	08007d31 	.word	0x08007d31
 8007c78:	08007d31 	.word	0x08007d31
 8007c7c:	08007d31 	.word	0x08007d31
 8007c80:	08007d31 	.word	0x08007d31
 8007c84:	08007d31 	.word	0x08007d31
 8007c88:	08007d31 	.word	0x08007d31
 8007c8c:	08007d31 	.word	0x08007d31
 8007c90:	08007d31 	.word	0x08007d31
 8007c94:	08007d31 	.word	0x08007d31
 8007c98:	08007d31 	.word	0x08007d31
 8007c9c:	08007d31 	.word	0x08007d31
 8007ca0:	08007d31 	.word	0x08007d31
 8007ca4:	08007d31 	.word	0x08007d31
 8007ca8:	08007d31 	.word	0x08007d31
 8007cac:	08007d31 	.word	0x08007d31
 8007cb0:	08007d23 	.word	0x08007d23
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d037      	beq.n	8007d28 <UART_SetConfig+0xa28>
 8007cb8:	e03a      	b.n	8007d30 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cba:	f7fc fc89 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8007cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cc0:	e03c      	b.n	8007d3c <UART_SetConfig+0xa3c>
 8007cc2:	bf00      	nop
 8007cc4:	003d0900 	.word	0x003d0900
 8007cc8:	080092a4 	.word	0x080092a4
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fc fc92 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8007cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cda:	e02f      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cdc:	f107 0314 	add.w	r3, r7, #20
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fbf7 	bl	80054d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cea:	e027      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cec:	f107 0308 	add.w	r3, r7, #8
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fd43 	bl	800577c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cfa:	e01f      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfc:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <UART_SetConfig+0xab0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d08:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <UART_SetConfig+0xab0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a28      	ldr	r2, [pc, #160]	; (8007db4 <UART_SetConfig+0xab4>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d1a:	e00f      	b.n	8007d3c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <UART_SetConfig+0xab4>)
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d20:	e00c      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d22:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <UART_SetConfig+0xab8>)
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d26:	e009      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d2e:	e005      	b.n	8007d3c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d3a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d021      	beq.n	8007d86 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <UART_SetConfig+0xabc>)
 8007d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	441a      	add	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d908      	bls.n	8007d80 <UART_SetConfig+0xa80>
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d204      	bcs.n	8007d80 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e002      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007da2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3738      	adds	r7, #56	; 0x38
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bdb0      	pop	{r4, r5, r7, pc}
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	003d0900 	.word	0x003d0900
 8007dbc:	080092a4 	.word	0x080092a4

08007dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebe:	d10a      	bne.n	8007ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]
  }
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f14:	f7f9 ff10 	bl	8001d38 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d10e      	bne.n	8007f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f82f 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e025      	b.n	8007f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d10e      	bne.n	8007f72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f819 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e00f      	b.n	8007f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007faa:	e062      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb2:	d05e      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb4:	f7f9 fec0 	bl	8001d38 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d11d      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e045      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d02e      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008022:	d126      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800803c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e00f      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	429a      	cmp	r2, r3
 800808e:	d08d      	beq.n	8007fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e027      	b.n	8008100 <HAL_UARTEx_DisableFifoMode+0x66>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	; 0x24
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e02d      	b.n	8008180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2224      	movs	r2, #36	; 0x24
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f84f 	bl	8008204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e02d      	b.n	80081fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2224      	movs	r2, #36	; 0x24
 80081ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f811 	bl	8008204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008210:	2b00      	cmp	r3, #0
 8008212:	d108      	bne.n	8008226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008224:	e031      	b.n	800828a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008226:	2310      	movs	r3, #16
 8008228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800822a:	2310      	movs	r3, #16
 800822c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	0e5b      	lsrs	r3, r3, #25
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	0f5b      	lsrs	r3, r3, #29
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	7b3a      	ldrb	r2, [r7, #12]
 8008252:	4911      	ldr	r1, [pc, #68]	; (8008298 <UARTEx_SetNbDataToProcess+0x94>)
 8008254:	5c8a      	ldrb	r2, [r1, r2]
 8008256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800825a:	7b3a      	ldrb	r2, [r7, #12]
 800825c:	490f      	ldr	r1, [pc, #60]	; (800829c <UARTEx_SetNbDataToProcess+0x98>)
 800825e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008260:	fb93 f3f2 	sdiv	r3, r3, r2
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	7b7a      	ldrb	r2, [r7, #13]
 8008270:	4909      	ldr	r1, [pc, #36]	; (8008298 <UARTEx_SetNbDataToProcess+0x94>)
 8008272:	5c8a      	ldrb	r2, [r1, r2]
 8008274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008278:	7b7a      	ldrb	r2, [r7, #13]
 800827a:	4908      	ldr	r1, [pc, #32]	; (800829c <UARTEx_SetNbDataToProcess+0x98>)
 800827c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800827e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	080092bc 	.word	0x080092bc
 800829c:	080092c4 	.word	0x080092c4

080082a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	f107 001c 	add.w	r0, r7, #28
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d120      	bne.n	80082fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	4b2a      	ldr	r3, [pc, #168]	; (8008374 <USB_CoreInit+0xd4>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d105      	bne.n	80082ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa60 	bl	80087b4 <USB_CoreReset>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e01a      	b.n	8008330 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa54 	bl	80087b4 <USB_CoreReset>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
 8008322:	e005      	b.n	8008330 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b01      	cmp	r3, #1
 8008334:	d116      	bne.n	8008364 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <USB_CoreInit+0xd8>)
 8008346:	4313      	orrs	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f043 0206 	orr.w	r2, r3, #6
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008370:	b004      	add	sp, #16
 8008372:	4770      	bx	lr
 8008374:	ffbdffbf 	.word	0xffbdffbf
 8008378:	03ee0000 	.word	0x03ee0000

0800837c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f023 0201 	bic.w	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d106      	bne.n	80083ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60da      	str	r2, [r3, #12]
 80083c8:	e00b      	b.n	80083e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]
 80083dc:	e001      	b.n	80083e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e003      	b.n	80083ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80083e2:	2032      	movs	r0, #50	; 0x32
 80083e4:	f7f9 fcb4 	bl	8001d50 <HAL_Delay>

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083f4:	b084      	sub	sp, #16
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	e009      	b.n	8008428 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3340      	adds	r3, #64	; 0x40
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b0e      	cmp	r3, #14
 800842c:	d9f2      	bls.n	8008414 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800842e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11c      	bne.n	800846e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008442:	f043 0302 	orr.w	r3, r3, #2
 8008446:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e005      	b.n	800847a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	4619      	mov	r1, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008494:	461a      	mov	r2, r3
 8008496:	680b      	ldr	r3, [r1, #0]
 8008498:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2b01      	cmp	r3, #1
 800849e:	d10c      	bne.n	80084ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d104      	bne.n	80084b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084a6:	2100      	movs	r1, #0
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f949 	bl	8008740 <USB_SetDevSpeed>
 80084ae:	e008      	b.n	80084c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084b0:	2101      	movs	r1, #1
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f944 	bl	8008740 <USB_SetDevSpeed>
 80084b8:	e003      	b.n	80084c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084ba:	2103      	movs	r1, #3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f93f 	bl	8008740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084c2:	2110      	movs	r1, #16
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8f3 	bl	80086b0 <USB_FlushTxFifo>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f911 	bl	80086fc <USB_FlushRxFifo>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ea:	461a      	mov	r2, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	461a      	mov	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	461a      	mov	r2, r3
 8008504:	2300      	movs	r3, #0
 8008506:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008508:	2300      	movs	r3, #0
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	e043      	b.n	8008596 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008524:	d118      	bne.n	8008558 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	461a      	mov	r2, r3
 800853a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e013      	b.n	800856a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854e:	461a      	mov	r2, r3
 8008550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e008      	b.n	800856a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	461a      	mov	r2, r3
 8008566:	2300      	movs	r3, #0
 8008568:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	461a      	mov	r2, r3
 8008578:	2300      	movs	r3, #0
 800857a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800858e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	3301      	adds	r3, #1
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3b7      	bcc.n	800850e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	e043      	b.n	800862c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ba:	d118      	bne.n	80085ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	461a      	mov	r2, r3
 80085d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e013      	b.n	8008600 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e008      	b.n	8008600 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fa:	461a      	mov	r2, r3
 80085fc:	2300      	movs	r3, #0
 80085fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	461a      	mov	r2, r3
 800860e:	2300      	movs	r3, #0
 8008610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861e:	461a      	mov	r2, r3
 8008620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d3b7      	bcc.n	80085a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008646:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008654:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f043 0210 	orr.w	r2, r3, #16
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <USB_DevInit+0x2b4>)
 800866e:	4313      	orrs	r3, r2
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008688:	2b01      	cmp	r3, #1
 800868a:	d105      	bne.n	8008698 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <USB_DevInit+0x2b8>)
 8008692:	4313      	orrs	r3, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a4:	b004      	add	sp, #16
 80086a6:	4770      	bx	lr
 80086a8:	803c3800 	.word	0x803c3800
 80086ac:	40000004 	.word	0x40000004

080086b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	019b      	lsls	r3, r3, #6
 80086c2:	f043 0220 	orr.w	r2, r3, #32
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <USB_FlushTxFifo+0x48>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d901      	bls.n	80086dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e006      	b.n	80086ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d0f0      	beq.n	80086ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	00030d40 	.word	0x00030d40

080086fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2210      	movs	r2, #16
 800870c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <USB_FlushRxFifo+0x40>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d901      	bls.n	8008720 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e006      	b.n	800872e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d0f0      	beq.n	800870e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	00030d40 	.word	0x00030d40

08008740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800878c:	f023 0303 	bic.w	r3, r3, #3
 8008790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a13      	ldr	r2, [pc, #76]	; (8008818 <USB_CoreReset+0x64>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e01b      	b.n	800880a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	daf2      	bge.n	80087c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f043 0201 	orr.w	r2, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a09      	ldr	r2, [pc, #36]	; (8008818 <USB_CoreReset+0x64>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d901      	bls.n	80087fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e006      	b.n	800880a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b01      	cmp	r3, #1
 8008806:	d0f0      	beq.n	80087ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	00030d40 	.word	0x00030d40

0800881c <_Znwj>:
 800881c:	2801      	cmp	r0, #1
 800881e:	bf38      	it	cc
 8008820:	2001      	movcc	r0, #1
 8008822:	b510      	push	{r4, lr}
 8008824:	4604      	mov	r4, r0
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f88a 	bl	8008940 <malloc>
 800882c:	b930      	cbnz	r0, 800883c <_Znwj+0x20>
 800882e:	f000 f807 	bl	8008840 <_ZSt15get_new_handlerv>
 8008832:	b908      	cbnz	r0, 8008838 <_Znwj+0x1c>
 8008834:	f000 f852 	bl	80088dc <abort>
 8008838:	4780      	blx	r0
 800883a:	e7f4      	b.n	8008826 <_Znwj+0xa>
 800883c:	bd10      	pop	{r4, pc}
	...

08008840 <_ZSt15get_new_handlerv>:
 8008840:	4b02      	ldr	r3, [pc, #8]	; (800884c <_ZSt15get_new_handlerv+0xc>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	f3bf 8f5b 	dmb	ish
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	2000074c 	.word	0x2000074c

08008850 <round>:
 8008850:	ee10 1a90 	vmov	r1, s1
 8008854:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8008858:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800885c:	2a13      	cmp	r2, #19
 800885e:	b510      	push	{r4, lr}
 8008860:	ee10 3a10 	vmov	r3, s0
 8008864:	dc19      	bgt.n	800889a <round+0x4a>
 8008866:	2a00      	cmp	r2, #0
 8008868:	da09      	bge.n	800887e <round+0x2e>
 800886a:	3201      	adds	r2, #1
 800886c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008870:	d103      	bne.n	800887a <round+0x2a>
 8008872:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008876:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800887a:	2000      	movs	r0, #0
 800887c:	e027      	b.n	80088ce <round+0x7e>
 800887e:	4816      	ldr	r0, [pc, #88]	; (80088d8 <round+0x88>)
 8008880:	4110      	asrs	r0, r2
 8008882:	ea01 0400 	and.w	r4, r1, r0
 8008886:	4323      	orrs	r3, r4
 8008888:	d00e      	beq.n	80088a8 <round+0x58>
 800888a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800888e:	fa43 f202 	asr.w	r2, r3, r2
 8008892:	4411      	add	r1, r2
 8008894:	ea21 0100 	bic.w	r1, r1, r0
 8008898:	e7ef      	b.n	800887a <round+0x2a>
 800889a:	2a33      	cmp	r2, #51	; 0x33
 800889c:	dd05      	ble.n	80088aa <round+0x5a>
 800889e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80088a2:	d101      	bne.n	80088a8 <round+0x58>
 80088a4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b2:	fa20 f404 	lsr.w	r4, r0, r4
 80088b6:	4223      	tst	r3, r4
 80088b8:	d0f6      	beq.n	80088a8 <round+0x58>
 80088ba:	2001      	movs	r0, #1
 80088bc:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 80088c0:	fa00 f202 	lsl.w	r2, r0, r2
 80088c4:	189b      	adds	r3, r3, r2
 80088c6:	bf28      	it	cs
 80088c8:	1809      	addcs	r1, r1, r0
 80088ca:	ea23 0004 	bic.w	r0, r3, r4
 80088ce:	460b      	mov	r3, r1
 80088d0:	4602      	mov	r2, r0
 80088d2:	ec43 2b10 	vmov	d0, r2, r3
 80088d6:	e7e7      	b.n	80088a8 <round+0x58>
 80088d8:	000fffff 	.word	0x000fffff

080088dc <abort>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	2006      	movs	r0, #6
 80088e0:	f000 f920 	bl	8008b24 <raise>
 80088e4:	2001      	movs	r0, #1
 80088e6:	f7f9 f8ab 	bl	8001a40 <_exit>
	...

080088ec <__errno>:
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <__errno+0x8>)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000010 	.word	0x20000010

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x38>)
 80088fc:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 80088fe:	1b64      	subs	r4, r4, r5
 8008900:	10a4      	asrs	r4, r4, #2
 8008902:	2600      	movs	r6, #0
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	4d0b      	ldr	r5, [pc, #44]	; (8008938 <__libc_init_array+0x40>)
 800890a:	4c0c      	ldr	r4, [pc, #48]	; (800893c <__libc_init_array+0x44>)
 800890c:	f000 fc9a 	bl	8009244 <_init>
 8008910:	1b64      	subs	r4, r4, r5
 8008912:	10a4      	asrs	r4, r4, #2
 8008914:	2600      	movs	r6, #0
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	08009308 	.word	0x08009308
 8008934:	08009308 	.word	0x08009308
 8008938:	08009308 	.word	0x08009308
 800893c:	08009310 	.word	0x08009310

08008940 <malloc>:
 8008940:	4b02      	ldr	r3, [pc, #8]	; (800894c <malloc+0xc>)
 8008942:	4601      	mov	r1, r0
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	f000 b85b 	b.w	8008a00 <_malloc_r>
 800894a:	bf00      	nop
 800894c:	20000010 	.word	0x20000010

08008950 <memset>:
 8008950:	4402      	add	r2, r0
 8008952:	4603      	mov	r3, r0
 8008954:	4293      	cmp	r3, r2
 8008956:	d100      	bne.n	800895a <memset+0xa>
 8008958:	4770      	bx	lr
 800895a:	f803 1b01 	strb.w	r1, [r3], #1
 800895e:	e7f9      	b.n	8008954 <memset+0x4>

08008960 <_free_r>:
 8008960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008962:	2900      	cmp	r1, #0
 8008964:	d048      	beq.n	80089f8 <_free_r+0x98>
 8008966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896a:	9001      	str	r0, [sp, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f1a1 0404 	sub.w	r4, r1, #4
 8008972:	bfb8      	it	lt
 8008974:	18e4      	addlt	r4, r4, r3
 8008976:	f000 f911 	bl	8008b9c <__malloc_lock>
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <_free_r+0x9c>)
 800897c:	9801      	ldr	r0, [sp, #4]
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	4615      	mov	r5, r2
 8008982:	b933      	cbnz	r3, 8008992 <_free_r+0x32>
 8008984:	6063      	str	r3, [r4, #4]
 8008986:	6014      	str	r4, [r2, #0]
 8008988:	b003      	add	sp, #12
 800898a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800898e:	f000 b90b 	b.w	8008ba8 <__malloc_unlock>
 8008992:	42a3      	cmp	r3, r4
 8008994:	d90b      	bls.n	80089ae <_free_r+0x4e>
 8008996:	6821      	ldr	r1, [r4, #0]
 8008998:	1862      	adds	r2, r4, r1
 800899a:	4293      	cmp	r3, r2
 800899c:	bf04      	itt	eq
 800899e:	681a      	ldreq	r2, [r3, #0]
 80089a0:	685b      	ldreq	r3, [r3, #4]
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	bf04      	itt	eq
 80089a6:	1852      	addeq	r2, r2, r1
 80089a8:	6022      	streq	r2, [r4, #0]
 80089aa:	602c      	str	r4, [r5, #0]
 80089ac:	e7ec      	b.n	8008988 <_free_r+0x28>
 80089ae:	461a      	mov	r2, r3
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b10b      	cbz	r3, 80089b8 <_free_r+0x58>
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d9fa      	bls.n	80089ae <_free_r+0x4e>
 80089b8:	6811      	ldr	r1, [r2, #0]
 80089ba:	1855      	adds	r5, r2, r1
 80089bc:	42a5      	cmp	r5, r4
 80089be:	d10b      	bne.n	80089d8 <_free_r+0x78>
 80089c0:	6824      	ldr	r4, [r4, #0]
 80089c2:	4421      	add	r1, r4
 80089c4:	1854      	adds	r4, r2, r1
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	d1dd      	bne.n	8008988 <_free_r+0x28>
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	6053      	str	r3, [r2, #4]
 80089d2:	4421      	add	r1, r4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	e7d7      	b.n	8008988 <_free_r+0x28>
 80089d8:	d902      	bls.n	80089e0 <_free_r+0x80>
 80089da:	230c      	movs	r3, #12
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	e7d3      	b.n	8008988 <_free_r+0x28>
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	1961      	adds	r1, r4, r5
 80089e4:	428b      	cmp	r3, r1
 80089e6:	bf04      	itt	eq
 80089e8:	6819      	ldreq	r1, [r3, #0]
 80089ea:	685b      	ldreq	r3, [r3, #4]
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	bf04      	itt	eq
 80089f0:	1949      	addeq	r1, r1, r5
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	6054      	str	r4, [r2, #4]
 80089f6:	e7c7      	b.n	8008988 <_free_r+0x28>
 80089f8:	b003      	add	sp, #12
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	20000750 	.word	0x20000750

08008a00 <_malloc_r>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	1ccd      	adds	r5, r1, #3
 8008a04:	f025 0503 	bic.w	r5, r5, #3
 8008a08:	3508      	adds	r5, #8
 8008a0a:	2d0c      	cmp	r5, #12
 8008a0c:	bf38      	it	cc
 8008a0e:	250c      	movcc	r5, #12
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	4606      	mov	r6, r0
 8008a14:	db01      	blt.n	8008a1a <_malloc_r+0x1a>
 8008a16:	42a9      	cmp	r1, r5
 8008a18:	d903      	bls.n	8008a22 <_malloc_r+0x22>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	2000      	movs	r0, #0
 8008a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a22:	f000 f8bb 	bl	8008b9c <__malloc_lock>
 8008a26:	4921      	ldr	r1, [pc, #132]	; (8008aac <_malloc_r+0xac>)
 8008a28:	680a      	ldr	r2, [r1, #0]
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	b99c      	cbnz	r4, 8008a56 <_malloc_r+0x56>
 8008a2e:	4f20      	ldr	r7, [pc, #128]	; (8008ab0 <_malloc_r+0xb0>)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	b923      	cbnz	r3, 8008a3e <_malloc_r+0x3e>
 8008a34:	4621      	mov	r1, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f83c 	bl	8008ab4 <_sbrk_r>
 8008a3c:	6038      	str	r0, [r7, #0]
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f837 	bl	8008ab4 <_sbrk_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d123      	bne.n	8008a92 <_malloc_r+0x92>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	6033      	str	r3, [r6, #0]
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 f8aa 	bl	8008ba8 <__malloc_unlock>
 8008a54:	e7e3      	b.n	8008a1e <_malloc_r+0x1e>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	1b5b      	subs	r3, r3, r5
 8008a5a:	d417      	bmi.n	8008a8c <_malloc_r+0x8c>
 8008a5c:	2b0b      	cmp	r3, #11
 8008a5e:	d903      	bls.n	8008a68 <_malloc_r+0x68>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	441c      	add	r4, r3
 8008a64:	6025      	str	r5, [r4, #0]
 8008a66:	e004      	b.n	8008a72 <_malloc_r+0x72>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	42a2      	cmp	r2, r4
 8008a6c:	bf0c      	ite	eq
 8008a6e:	600b      	streq	r3, [r1, #0]
 8008a70:	6053      	strne	r3, [r2, #4]
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 f898 	bl	8008ba8 <__malloc_unlock>
 8008a78:	f104 000b 	add.w	r0, r4, #11
 8008a7c:	1d23      	adds	r3, r4, #4
 8008a7e:	f020 0007 	bic.w	r0, r0, #7
 8008a82:	1ac2      	subs	r2, r0, r3
 8008a84:	d0cc      	beq.n	8008a20 <_malloc_r+0x20>
 8008a86:	1a1b      	subs	r3, r3, r0
 8008a88:	50a3      	str	r3, [r4, r2]
 8008a8a:	e7c9      	b.n	8008a20 <_malloc_r+0x20>
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	6864      	ldr	r4, [r4, #4]
 8008a90:	e7cc      	b.n	8008a2c <_malloc_r+0x2c>
 8008a92:	1cc4      	adds	r4, r0, #3
 8008a94:	f024 0403 	bic.w	r4, r4, #3
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d0e3      	beq.n	8008a64 <_malloc_r+0x64>
 8008a9c:	1a21      	subs	r1, r4, r0
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 f808 	bl	8008ab4 <_sbrk_r>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d1dd      	bne.n	8008a64 <_malloc_r+0x64>
 8008aa8:	e7cf      	b.n	8008a4a <_malloc_r+0x4a>
 8008aaa:	bf00      	nop
 8008aac:	20000750 	.word	0x20000750
 8008ab0:	20000754 	.word	0x20000754

08008ab4 <_sbrk_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d06      	ldr	r5, [pc, #24]	; (8008ad0 <_sbrk_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7f8 ffc8 	bl	8001a54 <_sbrk>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_sbrk_r+0x1a>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_sbrk_r+0x1a>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	2000075c 	.word	0x2000075c

08008ad4 <_raise_r>:
 8008ad4:	291f      	cmp	r1, #31
 8008ad6:	b538      	push	{r3, r4, r5, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	d904      	bls.n	8008ae8 <_raise_r+0x14>
 8008ade:	2316      	movs	r3, #22
 8008ae0:	6003      	str	r3, [r0, #0]
 8008ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008aea:	b112      	cbz	r2, 8008af2 <_raise_r+0x1e>
 8008aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008af0:	b94b      	cbnz	r3, 8008b06 <_raise_r+0x32>
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f830 	bl	8008b58 <_getpid_r>
 8008af8:	462a      	mov	r2, r5
 8008afa:	4601      	mov	r1, r0
 8008afc:	4620      	mov	r0, r4
 8008afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b02:	f000 b817 	b.w	8008b34 <_kill_r>
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d00a      	beq.n	8008b20 <_raise_r+0x4c>
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	d103      	bne.n	8008b16 <_raise_r+0x42>
 8008b0e:	2316      	movs	r3, #22
 8008b10:	6003      	str	r3, [r0, #0]
 8008b12:	2001      	movs	r0, #1
 8008b14:	e7e7      	b.n	8008ae6 <_raise_r+0x12>
 8008b16:	2400      	movs	r4, #0
 8008b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	4798      	blx	r3
 8008b20:	2000      	movs	r0, #0
 8008b22:	e7e0      	b.n	8008ae6 <_raise_r+0x12>

08008b24 <raise>:
 8008b24:	4b02      	ldr	r3, [pc, #8]	; (8008b30 <raise+0xc>)
 8008b26:	4601      	mov	r1, r0
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	f7ff bfd3 	b.w	8008ad4 <_raise_r>
 8008b2e:	bf00      	nop
 8008b30:	20000010 	.word	0x20000010

08008b34 <_kill_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	; (8008b54 <_kill_r+0x20>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	f7f8 ff6d 	bl	8001a20 <_kill>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d102      	bne.n	8008b50 <_kill_r+0x1c>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	b103      	cbz	r3, 8008b50 <_kill_r+0x1c>
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	2000075c 	.word	0x2000075c

08008b58 <_getpid_r>:
 8008b58:	f7f8 bf5a 	b.w	8001a10 <_getpid>

08008b5c <siprintf>:
 8008b5c:	b40e      	push	{r1, r2, r3}
 8008b5e:	b500      	push	{lr}
 8008b60:	b09c      	sub	sp, #112	; 0x70
 8008b62:	ab1d      	add	r3, sp, #116	; 0x74
 8008b64:	9002      	str	r0, [sp, #8]
 8008b66:	9006      	str	r0, [sp, #24]
 8008b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <siprintf+0x38>)
 8008b6e:	9107      	str	r1, [sp, #28]
 8008b70:	9104      	str	r1, [sp, #16]
 8008b72:	4909      	ldr	r1, [pc, #36]	; (8008b98 <siprintf+0x3c>)
 8008b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	a902      	add	r1, sp, #8
 8008b80:	f000 f874 	bl	8008c6c <_svfiprintf_r>
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	b01c      	add	sp, #112	; 0x70
 8008b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b90:	b003      	add	sp, #12
 8008b92:	4770      	bx	lr
 8008b94:	20000010 	.word	0x20000010
 8008b98:	ffff0208 	.word	0xffff0208

08008b9c <__malloc_lock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	; (8008ba4 <__malloc_lock+0x8>)
 8008b9e:	f000 baf9 	b.w	8009194 <__retarget_lock_acquire_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20000764 	.word	0x20000764

08008ba8 <__malloc_unlock>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	; (8008bb0 <__malloc_unlock+0x8>)
 8008baa:	f000 baf4 	b.w	8009196 <__retarget_lock_release_recursive>
 8008bae:	bf00      	nop
 8008bb0:	20000764 	.word	0x20000764

08008bb4 <__ssputs_r>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	688e      	ldr	r6, [r1, #8]
 8008bba:	429e      	cmp	r6, r3
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	4690      	mov	r8, r2
 8008bc2:	461f      	mov	r7, r3
 8008bc4:	d838      	bhi.n	8008c38 <__ssputs_r+0x84>
 8008bc6:	898a      	ldrh	r2, [r1, #12]
 8008bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bcc:	d032      	beq.n	8008c34 <__ssputs_r+0x80>
 8008bce:	6825      	ldr	r5, [r4, #0]
 8008bd0:	6909      	ldr	r1, [r1, #16]
 8008bd2:	eba5 0901 	sub.w	r9, r5, r1
 8008bd6:	6965      	ldr	r5, [r4, #20]
 8008bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008be0:	3301      	adds	r3, #1
 8008be2:	444b      	add	r3, r9
 8008be4:	106d      	asrs	r5, r5, #1
 8008be6:	429d      	cmp	r5, r3
 8008be8:	bf38      	it	cc
 8008bea:	461d      	movcc	r5, r3
 8008bec:	0553      	lsls	r3, r2, #21
 8008bee:	d531      	bpl.n	8008c54 <__ssputs_r+0xa0>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7ff ff05 	bl	8008a00 <_malloc_r>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	b950      	cbnz	r0, 8008c10 <__ssputs_r+0x5c>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	f8ca 3000 	str.w	r3, [sl]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c10:	6921      	ldr	r1, [r4, #16]
 8008c12:	464a      	mov	r2, r9
 8008c14:	f000 fac0 	bl	8009198 <memcpy>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	6126      	str	r6, [r4, #16]
 8008c26:	6165      	str	r5, [r4, #20]
 8008c28:	444e      	add	r6, r9
 8008c2a:	eba5 0509 	sub.w	r5, r5, r9
 8008c2e:	6026      	str	r6, [r4, #0]
 8008c30:	60a5      	str	r5, [r4, #8]
 8008c32:	463e      	mov	r6, r7
 8008c34:	42be      	cmp	r6, r7
 8008c36:	d900      	bls.n	8008c3a <__ssputs_r+0x86>
 8008c38:	463e      	mov	r6, r7
 8008c3a:	4632      	mov	r2, r6
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	4641      	mov	r1, r8
 8008c40:	f000 fab8 	bl	80091b4 <memmove>
 8008c44:	68a3      	ldr	r3, [r4, #8]
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	4432      	add	r2, r6
 8008c4c:	60a3      	str	r3, [r4, #8]
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	2000      	movs	r0, #0
 8008c52:	e7db      	b.n	8008c0c <__ssputs_r+0x58>
 8008c54:	462a      	mov	r2, r5
 8008c56:	f000 fac7 	bl	80091e8 <_realloc_r>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d1e1      	bne.n	8008c24 <__ssputs_r+0x70>
 8008c60:	6921      	ldr	r1, [r4, #16]
 8008c62:	4650      	mov	r0, sl
 8008c64:	f7ff fe7c 	bl	8008960 <_free_r>
 8008c68:	e7c7      	b.n	8008bfa <__ssputs_r+0x46>
	...

08008c6c <_svfiprintf_r>:
 8008c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	4698      	mov	r8, r3
 8008c72:	898b      	ldrh	r3, [r1, #12]
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	b09d      	sub	sp, #116	; 0x74
 8008c78:	4607      	mov	r7, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	d50e      	bpl.n	8008c9e <_svfiprintf_r+0x32>
 8008c80:	690b      	ldr	r3, [r1, #16]
 8008c82:	b963      	cbnz	r3, 8008c9e <_svfiprintf_r+0x32>
 8008c84:	2140      	movs	r1, #64	; 0x40
 8008c86:	f7ff febb 	bl	8008a00 <_malloc_r>
 8008c8a:	6028      	str	r0, [r5, #0]
 8008c8c:	6128      	str	r0, [r5, #16]
 8008c8e:	b920      	cbnz	r0, 8008c9a <_svfiprintf_r+0x2e>
 8008c90:	230c      	movs	r3, #12
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c98:	e0d1      	b.n	8008e3e <_svfiprintf_r+0x1d2>
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	616b      	str	r3, [r5, #20]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca2:	2320      	movs	r3, #32
 8008ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cac:	2330      	movs	r3, #48	; 0x30
 8008cae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e58 <_svfiprintf_r+0x1ec>
 8008cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cb6:	f04f 0901 	mov.w	r9, #1
 8008cba:	4623      	mov	r3, r4
 8008cbc:	469a      	mov	sl, r3
 8008cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cc2:	b10a      	cbz	r2, 8008cc8 <_svfiprintf_r+0x5c>
 8008cc4:	2a25      	cmp	r2, #37	; 0x25
 8008cc6:	d1f9      	bne.n	8008cbc <_svfiprintf_r+0x50>
 8008cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ccc:	d00b      	beq.n	8008ce6 <_svfiprintf_r+0x7a>
 8008cce:	465b      	mov	r3, fp
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff ff6d 	bl	8008bb4 <__ssputs_r>
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f000 80aa 	beq.w	8008e34 <_svfiprintf_r+0x1c8>
 8008ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce2:	445a      	add	r2, fp
 8008ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80a2 	beq.w	8008e34 <_svfiprintf_r+0x1c8>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cfa:	f10a 0a01 	add.w	sl, sl, #1
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	9307      	str	r3, [sp, #28]
 8008d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d06:	931a      	str	r3, [sp, #104]	; 0x68
 8008d08:	4654      	mov	r4, sl
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d10:	4851      	ldr	r0, [pc, #324]	; (8008e58 <_svfiprintf_r+0x1ec>)
 8008d12:	f7f7 faed 	bl	80002f0 <memchr>
 8008d16:	9a04      	ldr	r2, [sp, #16]
 8008d18:	b9d8      	cbnz	r0, 8008d52 <_svfiprintf_r+0xe6>
 8008d1a:	06d0      	lsls	r0, r2, #27
 8008d1c:	bf44      	itt	mi
 8008d1e:	2320      	movmi	r3, #32
 8008d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d24:	0711      	lsls	r1, r2, #28
 8008d26:	bf44      	itt	mi
 8008d28:	232b      	movmi	r3, #43	; 0x2b
 8008d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b2a      	cmp	r3, #42	; 0x2a
 8008d34:	d015      	beq.n	8008d62 <_svfiprintf_r+0xf6>
 8008d36:	9a07      	ldr	r2, [sp, #28]
 8008d38:	4654      	mov	r4, sl
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f04f 0c0a 	mov.w	ip, #10
 8008d40:	4621      	mov	r1, r4
 8008d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d46:	3b30      	subs	r3, #48	; 0x30
 8008d48:	2b09      	cmp	r3, #9
 8008d4a:	d94e      	bls.n	8008dea <_svfiprintf_r+0x17e>
 8008d4c:	b1b0      	cbz	r0, 8008d7c <_svfiprintf_r+0x110>
 8008d4e:	9207      	str	r2, [sp, #28]
 8008d50:	e014      	b.n	8008d7c <_svfiprintf_r+0x110>
 8008d52:	eba0 0308 	sub.w	r3, r0, r8
 8008d56:	fa09 f303 	lsl.w	r3, r9, r3
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	46a2      	mov	sl, r4
 8008d60:	e7d2      	b.n	8008d08 <_svfiprintf_r+0x9c>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	1d19      	adds	r1, r3, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	9103      	str	r1, [sp, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfbb      	ittet	lt
 8008d6e:	425b      	neglt	r3, r3
 8008d70:	f042 0202 	orrlt.w	r2, r2, #2
 8008d74:	9307      	strge	r3, [sp, #28]
 8008d76:	9307      	strlt	r3, [sp, #28]
 8008d78:	bfb8      	it	lt
 8008d7a:	9204      	strlt	r2, [sp, #16]
 8008d7c:	7823      	ldrb	r3, [r4, #0]
 8008d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d80:	d10c      	bne.n	8008d9c <_svfiprintf_r+0x130>
 8008d82:	7863      	ldrb	r3, [r4, #1]
 8008d84:	2b2a      	cmp	r3, #42	; 0x2a
 8008d86:	d135      	bne.n	8008df4 <_svfiprintf_r+0x188>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9203      	str	r2, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfb8      	it	lt
 8008d94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d98:	3402      	adds	r4, #2
 8008d9a:	9305      	str	r3, [sp, #20]
 8008d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e68 <_svfiprintf_r+0x1fc>
 8008da0:	7821      	ldrb	r1, [r4, #0]
 8008da2:	2203      	movs	r2, #3
 8008da4:	4650      	mov	r0, sl
 8008da6:	f7f7 faa3 	bl	80002f0 <memchr>
 8008daa:	b140      	cbz	r0, 8008dbe <_svfiprintf_r+0x152>
 8008dac:	2340      	movs	r3, #64	; 0x40
 8008dae:	eba0 000a 	sub.w	r0, r0, sl
 8008db2:	fa03 f000 	lsl.w	r0, r3, r0
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	4303      	orrs	r3, r0
 8008dba:	3401      	adds	r4, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc2:	4826      	ldr	r0, [pc, #152]	; (8008e5c <_svfiprintf_r+0x1f0>)
 8008dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dc8:	2206      	movs	r2, #6
 8008dca:	f7f7 fa91 	bl	80002f0 <memchr>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d038      	beq.n	8008e44 <_svfiprintf_r+0x1d8>
 8008dd2:	4b23      	ldr	r3, [pc, #140]	; (8008e60 <_svfiprintf_r+0x1f4>)
 8008dd4:	bb1b      	cbnz	r3, 8008e1e <_svfiprintf_r+0x1b2>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	3307      	adds	r3, #7
 8008dda:	f023 0307 	bic.w	r3, r3, #7
 8008dde:	3308      	adds	r3, #8
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de4:	4433      	add	r3, r6
 8008de6:	9309      	str	r3, [sp, #36]	; 0x24
 8008de8:	e767      	b.n	8008cba <_svfiprintf_r+0x4e>
 8008dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dee:	460c      	mov	r4, r1
 8008df0:	2001      	movs	r0, #1
 8008df2:	e7a5      	b.n	8008d40 <_svfiprintf_r+0xd4>
 8008df4:	2300      	movs	r3, #0
 8008df6:	3401      	adds	r4, #1
 8008df8:	9305      	str	r3, [sp, #20]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	f04f 0c0a 	mov.w	ip, #10
 8008e00:	4620      	mov	r0, r4
 8008e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e06:	3a30      	subs	r2, #48	; 0x30
 8008e08:	2a09      	cmp	r2, #9
 8008e0a:	d903      	bls.n	8008e14 <_svfiprintf_r+0x1a8>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0c5      	beq.n	8008d9c <_svfiprintf_r+0x130>
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	e7c3      	b.n	8008d9c <_svfiprintf_r+0x130>
 8008e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e18:	4604      	mov	r4, r0
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e7f0      	b.n	8008e00 <_svfiprintf_r+0x194>
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <_svfiprintf_r+0x1f8>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f3af 8000 	nop.w
 8008e2e:	1c42      	adds	r2, r0, #1
 8008e30:	4606      	mov	r6, r0
 8008e32:	d1d6      	bne.n	8008de2 <_svfiprintf_r+0x176>
 8008e34:	89ab      	ldrh	r3, [r5, #12]
 8008e36:	065b      	lsls	r3, r3, #25
 8008e38:	f53f af2c 	bmi.w	8008c94 <_svfiprintf_r+0x28>
 8008e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e3e:	b01d      	add	sp, #116	; 0x74
 8008e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e44:	ab03      	add	r3, sp, #12
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <_svfiprintf_r+0x1f8>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f000 f87a 	bl	8008f48 <_printf_i>
 8008e54:	e7eb      	b.n	8008e2e <_svfiprintf_r+0x1c2>
 8008e56:	bf00      	nop
 8008e58:	080092cc 	.word	0x080092cc
 8008e5c:	080092d6 	.word	0x080092d6
 8008e60:	00000000 	.word	0x00000000
 8008e64:	08008bb5 	.word	0x08008bb5
 8008e68:	080092d2 	.word	0x080092d2

08008e6c <_printf_common>:
 8008e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	4616      	mov	r6, r2
 8008e72:	4699      	mov	r9, r3
 8008e74:	688a      	ldr	r2, [r1, #8]
 8008e76:	690b      	ldr	r3, [r1, #16]
 8008e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	bfb8      	it	lt
 8008e80:	4613      	movlt	r3, r2
 8008e82:	6033      	str	r3, [r6, #0]
 8008e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e88:	4607      	mov	r7, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	b10a      	cbz	r2, 8008e92 <_printf_common+0x26>
 8008e8e:	3301      	adds	r3, #1
 8008e90:	6033      	str	r3, [r6, #0]
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	0699      	lsls	r1, r3, #26
 8008e96:	bf42      	ittt	mi
 8008e98:	6833      	ldrmi	r3, [r6, #0]
 8008e9a:	3302      	addmi	r3, #2
 8008e9c:	6033      	strmi	r3, [r6, #0]
 8008e9e:	6825      	ldr	r5, [r4, #0]
 8008ea0:	f015 0506 	ands.w	r5, r5, #6
 8008ea4:	d106      	bne.n	8008eb4 <_printf_common+0x48>
 8008ea6:	f104 0a19 	add.w	sl, r4, #25
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	6832      	ldr	r2, [r6, #0]
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	dc26      	bgt.n	8008f02 <_printf_common+0x96>
 8008eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008eb8:	1e13      	subs	r3, r2, #0
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	bf18      	it	ne
 8008ebe:	2301      	movne	r3, #1
 8008ec0:	0692      	lsls	r2, r2, #26
 8008ec2:	d42b      	bmi.n	8008f1c <_printf_common+0xb0>
 8008ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ec8:	4649      	mov	r1, r9
 8008eca:	4638      	mov	r0, r7
 8008ecc:	47c0      	blx	r8
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d01e      	beq.n	8008f10 <_printf_common+0xa4>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	68e5      	ldr	r5, [r4, #12]
 8008ed6:	6832      	ldr	r2, [r6, #0]
 8008ed8:	f003 0306 	and.w	r3, r3, #6
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	bf08      	it	eq
 8008ee0:	1aad      	subeq	r5, r5, r2
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	6922      	ldr	r2, [r4, #16]
 8008ee6:	bf0c      	ite	eq
 8008ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eec:	2500      	movne	r5, #0
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	bfc4      	itt	gt
 8008ef2:	1a9b      	subgt	r3, r3, r2
 8008ef4:	18ed      	addgt	r5, r5, r3
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	341a      	adds	r4, #26
 8008efa:	42b5      	cmp	r5, r6
 8008efc:	d11a      	bne.n	8008f34 <_printf_common+0xc8>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e008      	b.n	8008f14 <_printf_common+0xa8>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4652      	mov	r2, sl
 8008f06:	4649      	mov	r1, r9
 8008f08:	4638      	mov	r0, r7
 8008f0a:	47c0      	blx	r8
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d103      	bne.n	8008f18 <_printf_common+0xac>
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	3501      	adds	r5, #1
 8008f1a:	e7c6      	b.n	8008eaa <_printf_common+0x3e>
 8008f1c:	18e1      	adds	r1, r4, r3
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	2030      	movs	r0, #48	; 0x30
 8008f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f26:	4422      	add	r2, r4
 8008f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f30:	3302      	adds	r3, #2
 8008f32:	e7c7      	b.n	8008ec4 <_printf_common+0x58>
 8008f34:	2301      	movs	r3, #1
 8008f36:	4622      	mov	r2, r4
 8008f38:	4649      	mov	r1, r9
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	47c0      	blx	r8
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d0e6      	beq.n	8008f10 <_printf_common+0xa4>
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7d9      	b.n	8008efa <_printf_common+0x8e>
	...

08008f48 <_printf_i>:
 8008f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4691      	mov	r9, r2
 8008f50:	7e27      	ldrb	r7, [r4, #24]
 8008f52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f54:	2f78      	cmp	r7, #120	; 0x78
 8008f56:	4680      	mov	r8, r0
 8008f58:	469a      	mov	sl, r3
 8008f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f5e:	d807      	bhi.n	8008f70 <_printf_i+0x28>
 8008f60:	2f62      	cmp	r7, #98	; 0x62
 8008f62:	d80a      	bhi.n	8008f7a <_printf_i+0x32>
 8008f64:	2f00      	cmp	r7, #0
 8008f66:	f000 80d8 	beq.w	800911a <_printf_i+0x1d2>
 8008f6a:	2f58      	cmp	r7, #88	; 0x58
 8008f6c:	f000 80a3 	beq.w	80090b6 <_printf_i+0x16e>
 8008f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f78:	e03a      	b.n	8008ff0 <_printf_i+0xa8>
 8008f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f7e:	2b15      	cmp	r3, #21
 8008f80:	d8f6      	bhi.n	8008f70 <_printf_i+0x28>
 8008f82:	a001      	add	r0, pc, #4	; (adr r0, 8008f88 <_printf_i+0x40>)
 8008f84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f88:	08008fe1 	.word	0x08008fe1
 8008f8c:	08008ff5 	.word	0x08008ff5
 8008f90:	08008f71 	.word	0x08008f71
 8008f94:	08008f71 	.word	0x08008f71
 8008f98:	08008f71 	.word	0x08008f71
 8008f9c:	08008f71 	.word	0x08008f71
 8008fa0:	08008ff5 	.word	0x08008ff5
 8008fa4:	08008f71 	.word	0x08008f71
 8008fa8:	08008f71 	.word	0x08008f71
 8008fac:	08008f71 	.word	0x08008f71
 8008fb0:	08008f71 	.word	0x08008f71
 8008fb4:	08009101 	.word	0x08009101
 8008fb8:	08009025 	.word	0x08009025
 8008fbc:	080090e3 	.word	0x080090e3
 8008fc0:	08008f71 	.word	0x08008f71
 8008fc4:	08008f71 	.word	0x08008f71
 8008fc8:	08009123 	.word	0x08009123
 8008fcc:	08008f71 	.word	0x08008f71
 8008fd0:	08009025 	.word	0x08009025
 8008fd4:	08008f71 	.word	0x08008f71
 8008fd8:	08008f71 	.word	0x08008f71
 8008fdc:	080090eb 	.word	0x080090eb
 8008fe0:	680b      	ldr	r3, [r1, #0]
 8008fe2:	1d1a      	adds	r2, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	600a      	str	r2, [r1, #0]
 8008fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0a3      	b.n	800913c <_printf_i+0x1f4>
 8008ff4:	6825      	ldr	r5, [r4, #0]
 8008ff6:	6808      	ldr	r0, [r1, #0]
 8008ff8:	062e      	lsls	r6, r5, #24
 8008ffa:	f100 0304 	add.w	r3, r0, #4
 8008ffe:	d50a      	bpl.n	8009016 <_printf_i+0xce>
 8009000:	6805      	ldr	r5, [r0, #0]
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	2d00      	cmp	r5, #0
 8009006:	da03      	bge.n	8009010 <_printf_i+0xc8>
 8009008:	232d      	movs	r3, #45	; 0x2d
 800900a:	426d      	negs	r5, r5
 800900c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009010:	485e      	ldr	r0, [pc, #376]	; (800918c <_printf_i+0x244>)
 8009012:	230a      	movs	r3, #10
 8009014:	e019      	b.n	800904a <_printf_i+0x102>
 8009016:	f015 0f40 	tst.w	r5, #64	; 0x40
 800901a:	6805      	ldr	r5, [r0, #0]
 800901c:	600b      	str	r3, [r1, #0]
 800901e:	bf18      	it	ne
 8009020:	b22d      	sxthne	r5, r5
 8009022:	e7ef      	b.n	8009004 <_printf_i+0xbc>
 8009024:	680b      	ldr	r3, [r1, #0]
 8009026:	6825      	ldr	r5, [r4, #0]
 8009028:	1d18      	adds	r0, r3, #4
 800902a:	6008      	str	r0, [r1, #0]
 800902c:	0628      	lsls	r0, r5, #24
 800902e:	d501      	bpl.n	8009034 <_printf_i+0xec>
 8009030:	681d      	ldr	r5, [r3, #0]
 8009032:	e002      	b.n	800903a <_printf_i+0xf2>
 8009034:	0669      	lsls	r1, r5, #25
 8009036:	d5fb      	bpl.n	8009030 <_printf_i+0xe8>
 8009038:	881d      	ldrh	r5, [r3, #0]
 800903a:	4854      	ldr	r0, [pc, #336]	; (800918c <_printf_i+0x244>)
 800903c:	2f6f      	cmp	r7, #111	; 0x6f
 800903e:	bf0c      	ite	eq
 8009040:	2308      	moveq	r3, #8
 8009042:	230a      	movne	r3, #10
 8009044:	2100      	movs	r1, #0
 8009046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800904a:	6866      	ldr	r6, [r4, #4]
 800904c:	60a6      	str	r6, [r4, #8]
 800904e:	2e00      	cmp	r6, #0
 8009050:	bfa2      	ittt	ge
 8009052:	6821      	ldrge	r1, [r4, #0]
 8009054:	f021 0104 	bicge.w	r1, r1, #4
 8009058:	6021      	strge	r1, [r4, #0]
 800905a:	b90d      	cbnz	r5, 8009060 <_printf_i+0x118>
 800905c:	2e00      	cmp	r6, #0
 800905e:	d04d      	beq.n	80090fc <_printf_i+0x1b4>
 8009060:	4616      	mov	r6, r2
 8009062:	fbb5 f1f3 	udiv	r1, r5, r3
 8009066:	fb03 5711 	mls	r7, r3, r1, r5
 800906a:	5dc7      	ldrb	r7, [r0, r7]
 800906c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009070:	462f      	mov	r7, r5
 8009072:	42bb      	cmp	r3, r7
 8009074:	460d      	mov	r5, r1
 8009076:	d9f4      	bls.n	8009062 <_printf_i+0x11a>
 8009078:	2b08      	cmp	r3, #8
 800907a:	d10b      	bne.n	8009094 <_printf_i+0x14c>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	07df      	lsls	r7, r3, #31
 8009080:	d508      	bpl.n	8009094 <_printf_i+0x14c>
 8009082:	6923      	ldr	r3, [r4, #16]
 8009084:	6861      	ldr	r1, [r4, #4]
 8009086:	4299      	cmp	r1, r3
 8009088:	bfde      	ittt	le
 800908a:	2330      	movle	r3, #48	; 0x30
 800908c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009090:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009094:	1b92      	subs	r2, r2, r6
 8009096:	6122      	str	r2, [r4, #16]
 8009098:	f8cd a000 	str.w	sl, [sp]
 800909c:	464b      	mov	r3, r9
 800909e:	aa03      	add	r2, sp, #12
 80090a0:	4621      	mov	r1, r4
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7ff fee2 	bl	8008e6c <_printf_common>
 80090a8:	3001      	adds	r0, #1
 80090aa:	d14c      	bne.n	8009146 <_printf_i+0x1fe>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b0:	b004      	add	sp, #16
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	4835      	ldr	r0, [pc, #212]	; (800918c <_printf_i+0x244>)
 80090b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	680e      	ldr	r6, [r1, #0]
 80090c0:	061f      	lsls	r7, r3, #24
 80090c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090c6:	600e      	str	r6, [r1, #0]
 80090c8:	d514      	bpl.n	80090f4 <_printf_i+0x1ac>
 80090ca:	07d9      	lsls	r1, r3, #31
 80090cc:	bf44      	itt	mi
 80090ce:	f043 0320 	orrmi.w	r3, r3, #32
 80090d2:	6023      	strmi	r3, [r4, #0]
 80090d4:	b91d      	cbnz	r5, 80090de <_printf_i+0x196>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	f023 0320 	bic.w	r3, r3, #32
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	2310      	movs	r3, #16
 80090e0:	e7b0      	b.n	8009044 <_printf_i+0xfc>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	f043 0320 	orr.w	r3, r3, #32
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	2378      	movs	r3, #120	; 0x78
 80090ec:	4828      	ldr	r0, [pc, #160]	; (8009190 <_printf_i+0x248>)
 80090ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090f2:	e7e3      	b.n	80090bc <_printf_i+0x174>
 80090f4:	065e      	lsls	r6, r3, #25
 80090f6:	bf48      	it	mi
 80090f8:	b2ad      	uxthmi	r5, r5
 80090fa:	e7e6      	b.n	80090ca <_printf_i+0x182>
 80090fc:	4616      	mov	r6, r2
 80090fe:	e7bb      	b.n	8009078 <_printf_i+0x130>
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	6826      	ldr	r6, [r4, #0]
 8009104:	6960      	ldr	r0, [r4, #20]
 8009106:	1d1d      	adds	r5, r3, #4
 8009108:	600d      	str	r5, [r1, #0]
 800910a:	0635      	lsls	r5, r6, #24
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	d501      	bpl.n	8009114 <_printf_i+0x1cc>
 8009110:	6018      	str	r0, [r3, #0]
 8009112:	e002      	b.n	800911a <_printf_i+0x1d2>
 8009114:	0671      	lsls	r1, r6, #25
 8009116:	d5fb      	bpl.n	8009110 <_printf_i+0x1c8>
 8009118:	8018      	strh	r0, [r3, #0]
 800911a:	2300      	movs	r3, #0
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	4616      	mov	r6, r2
 8009120:	e7ba      	b.n	8009098 <_printf_i+0x150>
 8009122:	680b      	ldr	r3, [r1, #0]
 8009124:	1d1a      	adds	r2, r3, #4
 8009126:	600a      	str	r2, [r1, #0]
 8009128:	681e      	ldr	r6, [r3, #0]
 800912a:	6862      	ldr	r2, [r4, #4]
 800912c:	2100      	movs	r1, #0
 800912e:	4630      	mov	r0, r6
 8009130:	f7f7 f8de 	bl	80002f0 <memchr>
 8009134:	b108      	cbz	r0, 800913a <_printf_i+0x1f2>
 8009136:	1b80      	subs	r0, r0, r6
 8009138:	6060      	str	r0, [r4, #4]
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	2300      	movs	r3, #0
 8009140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009144:	e7a8      	b.n	8009098 <_printf_i+0x150>
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	4632      	mov	r2, r6
 800914a:	4649      	mov	r1, r9
 800914c:	4640      	mov	r0, r8
 800914e:	47d0      	blx	sl
 8009150:	3001      	adds	r0, #1
 8009152:	d0ab      	beq.n	80090ac <_printf_i+0x164>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	079b      	lsls	r3, r3, #30
 8009158:	d413      	bmi.n	8009182 <_printf_i+0x23a>
 800915a:	68e0      	ldr	r0, [r4, #12]
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	4298      	cmp	r0, r3
 8009160:	bfb8      	it	lt
 8009162:	4618      	movlt	r0, r3
 8009164:	e7a4      	b.n	80090b0 <_printf_i+0x168>
 8009166:	2301      	movs	r3, #1
 8009168:	4632      	mov	r2, r6
 800916a:	4649      	mov	r1, r9
 800916c:	4640      	mov	r0, r8
 800916e:	47d0      	blx	sl
 8009170:	3001      	adds	r0, #1
 8009172:	d09b      	beq.n	80090ac <_printf_i+0x164>
 8009174:	3501      	adds	r5, #1
 8009176:	68e3      	ldr	r3, [r4, #12]
 8009178:	9903      	ldr	r1, [sp, #12]
 800917a:	1a5b      	subs	r3, r3, r1
 800917c:	42ab      	cmp	r3, r5
 800917e:	dcf2      	bgt.n	8009166 <_printf_i+0x21e>
 8009180:	e7eb      	b.n	800915a <_printf_i+0x212>
 8009182:	2500      	movs	r5, #0
 8009184:	f104 0619 	add.w	r6, r4, #25
 8009188:	e7f5      	b.n	8009176 <_printf_i+0x22e>
 800918a:	bf00      	nop
 800918c:	080092dd 	.word	0x080092dd
 8009190:	080092ee 	.word	0x080092ee

08009194 <__retarget_lock_acquire_recursive>:
 8009194:	4770      	bx	lr

08009196 <__retarget_lock_release_recursive>:
 8009196:	4770      	bx	lr

08009198 <memcpy>:
 8009198:	440a      	add	r2, r1
 800919a:	4291      	cmp	r1, r2
 800919c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091a0:	d100      	bne.n	80091a4 <memcpy+0xc>
 80091a2:	4770      	bx	lr
 80091a4:	b510      	push	{r4, lr}
 80091a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ae:	4291      	cmp	r1, r2
 80091b0:	d1f9      	bne.n	80091a6 <memcpy+0xe>
 80091b2:	bd10      	pop	{r4, pc}

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4402      	add	r2, r0
 80091d6:	4601      	mov	r1, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <_realloc_r>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	4607      	mov	r7, r0
 80091ec:	4614      	mov	r4, r2
 80091ee:	460e      	mov	r6, r1
 80091f0:	b921      	cbnz	r1, 80091fc <_realloc_r+0x14>
 80091f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091f6:	4611      	mov	r1, r2
 80091f8:	f7ff bc02 	b.w	8008a00 <_malloc_r>
 80091fc:	b922      	cbnz	r2, 8009208 <_realloc_r+0x20>
 80091fe:	f7ff fbaf 	bl	8008960 <_free_r>
 8009202:	4625      	mov	r5, r4
 8009204:	4628      	mov	r0, r5
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	f000 f814 	bl	8009234 <_malloc_usable_size_r>
 800920c:	42a0      	cmp	r0, r4
 800920e:	d20f      	bcs.n	8009230 <_realloc_r+0x48>
 8009210:	4621      	mov	r1, r4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff fbf4 	bl	8008a00 <_malloc_r>
 8009218:	4605      	mov	r5, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d0f2      	beq.n	8009204 <_realloc_r+0x1c>
 800921e:	4631      	mov	r1, r6
 8009220:	4622      	mov	r2, r4
 8009222:	f7ff ffb9 	bl	8009198 <memcpy>
 8009226:	4631      	mov	r1, r6
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff fb99 	bl	8008960 <_free_r>
 800922e:	e7e9      	b.n	8009204 <_realloc_r+0x1c>
 8009230:	4635      	mov	r5, r6
 8009232:	e7e7      	b.n	8009204 <_realloc_r+0x1c>

08009234 <_malloc_usable_size_r>:
 8009234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009238:	1f18      	subs	r0, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	bfbc      	itt	lt
 800923e:	580b      	ldrlt	r3, [r1, r0]
 8009240:	18c0      	addlt	r0, r0, r3
 8009242:	4770      	bx	lr

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
