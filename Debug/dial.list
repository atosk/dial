
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08007ff8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08008058  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000134  080080b8  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  080080b8  00020768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003413e  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a5b  00000000  00000000  000542a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00058d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0005a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d1b1  00000000  00000000  0005bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e617  00000000  00000000  00098f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016ec67  00000000  00000000  000b7580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002261e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f8c  00000000  00000000  0022623c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000134 	.word	0x20000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007f20 	.word	0x08007f20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000138 	.word	0x20000138
 80002d4:	08007f20 	.word	0x08007f20

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	705a      	strb	r2, [r3, #1]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_ZNSt4Dial14CalculateStepsE9Directionhh>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	4608      	mov	r0, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	461a      	mov	r2, r3
 8000600:	4603      	mov	r3, r0
 8000602:	70fb      	strb	r3, [r7, #3]
 8000604:	460b      	mov	r3, r1
 8000606:	70bb      	strb	r3, [r7, #2]
 8000608:	4613      	mov	r3, r2
 800060a:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	787a      	ldrb	r2, [r7, #1]
 8000610:	705a      	strb	r2, [r3, #1]
   int m_dial_temp = 0; // Temporary location to collect dial displacement
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d105      	bne.n	8000628 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x36>
 800061c:	787b      	ldrb	r3, [r7, #1]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e005      	b.n	8000634 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x42>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	da02      	bge.n	8000640 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x4e>
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3364      	adds	r3, #100	; 0x64
 800063e:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 8000640:	78ba      	ldrb	r2, [r7, #2]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	015b      	lsls	r3, r3, #5

}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZNSt4Dial14UpdatePositionEh>:

void Dial::UpdatePosition(uint8_t new_position){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
   m_dial_location = new_position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	78fa      	ldrb	r2, [r7, #3]
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]

}
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	715a      	strb	r2, [r3, #5]
   }
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f022 0201 	bic.w	r2, r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	711a      	strb	r2, [r3, #4]

}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4613      	mov	r3, r2
 8000714:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2201      	movs	r2, #1
 8000726:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 800072e:	2301      	movs	r3, #1
 8000730:	75fb      	strb	r3, [r7, #23]
 8000732:	e001      	b.n	8000738 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	461a      	mov	r2, r3
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 8000742:	f002 f801 	bl	8002748 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f042 0201 	orr.w	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	58020800 	.word	0x58020800

0800076c <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
   return m_status;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	795b      	ldrb	r3, [r3, #5]
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80007a2:	f001 f825 	bl	80017f0 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 80007a6:	f000 f839 	bl	800081c <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 80007aa:	f000 fa91 	bl	8000cd0 <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 80007ae:	f000 f8c3 	bl	8000938 <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 80007b2:	f000 f9f7 	bl	8000ba4 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 80007b6:	f000 fa55 	bl	8000c64 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 80007ba:	f000 f963 	bl	8000a84 <_ZL12MX_TIM3_Initv>
   MX_I2C2_Init();
 80007be:	f000 f913 	bl	80009e8 <_ZL12MX_I2C2_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80007c2:	2108      	movs	r1, #8
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <main+0x78>)
 80007c6:	f004 fe49 	bl	800545c <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <main+0x7c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <main+0x7c>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]

   // Stepper
   int newnum = 90; // Next number to spin the dial to
 80007d6:	235a      	movs	r3, #90	; 0x5a
 80007d8:	60fb      	str	r3, [r7, #12]
   enum Direction dir = CW; // Direction of dial rotation.
 80007da:	2300      	movs	r3, #0
 80007dc:	72fb      	strb	r3, [r7, #11]

   // Encoder
   uint8_t i2c_receive_buf[2]; // Position data is 12 bits and requires two reads.
   uint16_t encoder_angle = 0; //
 80007de:	2300      	movs	r3, #0
 80007e0:	813b      	strh	r3, [r7, #8]
   /* USER CODE BEGIN WHILE */

   while (1) {

      // Routine to demo stepper control
      Move_Stepper(dir, 0, newnum);
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fbbb 	bl	8000f64 <_Z12Move_Stepper9Directionii>

      if (newnum > 0) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dd03      	ble.n	80007fc <main+0x60>
         newnum -= 10;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3b0a      	subs	r3, #10
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e7f2      	b.n	80007e2 <main+0x46>
      } else {
         newnum = 90;
 80007fc:	235a      	movs	r3, #90	; 0x5a
 80007fe:	60fb      	str	r3, [r7, #12]
         if (dir == CCW) {
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d102      	bne.n	800080c <main+0x70>
            dir = CW;
 8000806:	2300      	movs	r3, #0
 8000808:	72fb      	strb	r3, [r7, #11]
 800080a:	e7ea      	b.n	80007e2 <main+0x46>
         } else
            (dir = CCW);
 800080c:	2301      	movs	r3, #1
 800080e:	72fb      	strb	r3, [r7, #11]
      Move_Stepper(dir, 0, newnum);
 8000810:	e7e7      	b.n	80007e2 <main+0x46>
 8000812:	bf00      	nop
 8000814:	20000258 	.word	0x20000258
 8000818:	40000400 	.word	0x40000400

0800081c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	; 0x70
 8000820:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	224c      	movs	r2, #76	; 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f007 fab4 	bl	8007d98 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f007 faae 	bl	8007d98 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800083c:	2002      	movs	r0, #2
 800083e:	f002 fa0d 	bl	8002c5c <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <_Z18SystemClock_Configv+0x114>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	4a39      	ldr	r2, [pc, #228]	; (8000930 <_Z18SystemClock_Configv+0x114>)
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <_Z18SystemClock_Configv+0x114>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b35      	ldr	r3, [pc, #212]	; (8000934 <_Z18SystemClock_Configv+0x118>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000864:	4a33      	ldr	r2, [pc, #204]	; (8000934 <_Z18SystemClock_Configv+0x118>)
 8000866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <_Z18SystemClock_Configv+0x118>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <_Z18SystemClock_Configv+0x118>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	bf14      	ite	ne
 8000886:	2301      	movne	r3, #1
 8000888:	2300      	moveq	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d000      	beq.n	8000892 <_Z18SystemClock_Configv+0x76>
 8000890:	e7f2      	b.n	8000878 <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000892:	2303      	movs	r3, #3
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000896:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089c:	2301      	movs	r3, #1
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 80008b0:	2318      	movs	r3, #24
 80008b2:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c0:	230c      	movs	r3, #12
 80008c2:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fa0d 	bl	8002cf0 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf14      	ite	ne
 80008dc:	2301      	movne	r3, #1
 80008de:	2300      	moveq	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 80008e6:	f000 fb77 	bl	8000fd8 <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008ea:	233f      	movs	r3, #63	; 0x3f
 80008ec:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fdfe 	bl	8003510 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000924:	f000 fb58 	bl	8000fd8 <Error_Handler>
   }
}
 8000928:	bf00      	nop
 800092a:	3770      	adds	r7, #112	; 0x70
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58000400 	.word	0x58000400
 8000934:	58024800 	.word	0x58024800

08000938 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 800093e:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <_ZL11MX_ETH_Initv+0xa0>)
 8000940:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	3302      	adds	r3, #2
 800095a:	22e1      	movs	r2, #225	; 0xe1
 800095c:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	3303      	adds	r3, #3
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	3304      	adds	r3, #4
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	3305      	adds	r3, #5
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 800097e:	2201      	movs	r2, #1
 8000980:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <_ZL11MX_ETH_Initv+0xa4>)
 8000986:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <_ZL11MX_ETH_Initv+0xa8>)
 800098c:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000990:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000994:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <_ZL11MX_ETH_Initv+0x9c>)
 8000998:	f001 f910 	bl	8001bbc <HAL_ETH_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bf14      	ite	ne
 80009a2:	2301      	movne	r3, #1
 80009a4:	2300      	moveq	r3, #0
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 80009ac:	f000 fb14 	bl	8000fd8 <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80009b0:	2234      	movs	r2, #52	; 0x34
 80009b2:	2100      	movs	r1, #0
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <_ZL11MX_ETH_Initv+0xac>)
 80009b6:	f007 f9ef 	bl	8007d98 <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <_ZL11MX_ETH_Initv+0xac>)
 80009bc:	2221      	movs	r2, #33	; 0x21
 80009be:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_ZL11MX_ETH_Initv+0xac>)
 80009c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c6:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <_ZL11MX_ETH_Initv+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000184 	.word	0x20000184
 80009d8:	40028000 	.word	0x40028000
 80009dc:	200000d4 	.word	0x200000d4
 80009e0:	20000074 	.word	0x20000074
 80009e4:	20000150 	.word	0x20000150

080009e8 <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
   /* USER CODE END I2C2_Init 0 */

   /* USER CODE BEGIN I2C2_Init 1 */

   /* USER CODE END I2C2_Init 1 */
   hi2c2.Instance = I2C2;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <_ZL12MX_I2C2_Initv+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
   hi2c2.Init.Timing = 0x00602173;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 80009f4:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <_ZL12MX_I2C2_Initv+0x98>)
 80009f6:	605a      	str	r2, [r3, #4]
   hi2c2.Init.OwnAddress1 = 0;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
   hi2c2.Init.OwnAddress2 = 0;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a24:	f001 feaa 	bl	800277c <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <_ZL12MX_I2C2_Initv+0x54>
      Error_Handler();
 8000a38:	f000 face 	bl	8000fd8 <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a40:	f001 ff2c 	bl	800289c <HAL_I2CEx_ConfigAnalogFilter>
 8000a44:	4603      	mov	r3, r0
         != HAL_OK) {
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <_ZL12MX_I2C2_Initv+0x70>
      Error_Handler();
 8000a54:	f000 fac0 	bl	8000fd8 <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <_ZL12MX_I2C2_Initv+0x90>)
 8000a5c:	f001 ff69 	bl	8002932 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <_ZL12MX_I2C2_Initv+0x8c>
      Error_Handler();
 8000a70:	f000 fab2 	bl	8000fd8 <Error_Handler>
   }
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000020c 	.word	0x2000020c
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	00602173 	.word	0x00602173

08000a84 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000ab8:	4a39      	ldr	r2, [pc, #228]	; (8000ba0 <_ZL12MX_TIM3_Initv+0x11c>)
 8000aba:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000abc:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000abe:	223f      	movs	r2, #63	; 0x3f
 8000ac0:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000ac8:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000aca:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000ace:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000adc:	482f      	ldr	r0, [pc, #188]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000ade:	f004 fc05 	bl	80052ec <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf14      	ite	ne
 8000ae8:	2301      	movne	r3, #1
 8000aea:	2300      	moveq	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000af2:	f000 fa71 	bl	8000fd8 <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000b04:	f005 f828 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf14      	ite	ne
 8000b0e:	2301      	movne	r3, #1
 8000b10:	2300      	moveq	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000b18:	f000 fa5e 	bl	8000fd8 <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000b1e:	f004 fc3c 	bl	800539a <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000b32:	f000 fa51 	bl	8000fd8 <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b36:	2320      	movs	r3, #32
 8000b38:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000b46:	f005 fd4f 	bl	80065e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2300      	moveq	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000b5a:	f000 fa3d 	bl	8000fd8 <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	; 0x60
 8000b60:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000b62:	2328      	movs	r3, #40	; 0x28
 8000b64:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2208      	movs	r2, #8
 8000b72:	4619      	mov	r1, r3
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000b76:	f004 fedf 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000b8a:	f000 fa25 	bl	8000fd8 <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <_ZL12MX_TIM3_Initv+0x118>)
 8000b90:	f000 fbd0 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000258 	.word	0x20000258
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000bac:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000bec:	481b      	ldr	r0, [pc, #108]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bee:	f005 fda1 	bl	8006734 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8000c02:	f000 f9e9 	bl	8000fd8 <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4814      	ldr	r0, [pc, #80]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c0a:	f006 fce9 	bl	80075e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0e:	4603      	mov	r3, r0
         != HAL_OK) {
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf14      	ite	ne
 8000c14:	2301      	movne	r3, #1
 8000c16:	2300      	moveq	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8000c1e:	f000 f9db 	bl	8000fd8 <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000c22:	2100      	movs	r1, #0
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c26:	f006 fd19 	bl	800765c <HAL_UARTEx_SetRxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf14      	ite	ne
 8000c30:	2301      	movne	r3, #1
 8000c32:	2300      	moveq	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8000c3a:	f000 f9cd 	bl	8000fd8 <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000c40:	f006 fc95 	bl	800756e <HAL_UARTEx_DisableFifoMode>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8000c54:	f000 f9c0 	bl	8000fd8 <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002a4 	.word	0x200002a4
 8000c60:	40004800 	.word	0x40004800

08000c64 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c70:	2209      	movs	r2, #9
 8000c72:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000cac:	f001 fe8d 	bl	80029ca <HAL_PCD_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8000cc0:	f000 f98a 	bl	8000fd8 <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000334 	.word	0x20000334
 8000ccc:	40080000 	.word	0x40080000

08000cd0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b73      	ldr	r3, [pc, #460]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	4a71      	ldr	r2, [pc, #452]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	6a3b      	ldr	r3, [r7, #32]
   __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d04:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	4a6a      	ldr	r2, [pc, #424]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d14:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	69fb      	ldr	r3, [r7, #28]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b64      	ldr	r3, [pc, #400]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	4a62      	ldr	r2, [pc, #392]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d32:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d46:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	4a53      	ldr	r2, [pc, #332]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7c:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8c:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ddc:	4836      	ldr	r0, [pc, #216]	; (8000eb8 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000dde:	f001 fcb3 	bl	8002748 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4834      	ldr	r0, [pc, #208]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1ec>)
 8000dea:	f001 fcad 	bl	8002748 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	4832      	ldr	r0, [pc, #200]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000df6:	f001 fca7 	bl	8002748 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4831      	ldr	r0, [pc, #196]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e00:	f001 fca2 	bl	8002748 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4829      	ldr	r0, [pc, #164]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e1a:	f001 fae5 	bl	80023e8 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000e1e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000e38:	f001 fad6 	bl	80023e8 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4819      	ldr	r0, [pc, #100]	; (8000ebc <_ZL12MX_GPIO_Initv+0x1ec>)
 8000e56:	f001 fac7 	bl	80023e8 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e6e:	f001 fabb 	bl	80023e8 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8000e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x1f0>)
 8000e8c:	f001 faac 	bl	80023e8 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 8000e90:	2302      	movs	r3, #2
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000ea8:	f001 fa9e 	bl	80023e8 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58020c00 	.word	0x58020c00
 8000ec0:	58020800 	.word	0x58020800
 8000ec4:	58021000 	.word	0x58021000
 8000ec8:	11110000 	.word	0x11110000
 8000ecc:	58021800 	.word	0x58021800

08000ed0 <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN) ;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 0201 	bic.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
   // Interrupt service routine for TIMER3
   // Counts pulses until the desired number have been sent
   // Then it disables the timer to end the output.

   Stop_Timer(TIM3); // Freeze counter at zero
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000f1a:	f7ff ffd9 	bl	8000ed0 <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fbbd 	bl	80006a2 <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fc29 	bl	8000784 <_ZNSt12StepperMotor12MoveCompleteEv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fbc1 	bl	80006ce <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 8000f4c:	e002      	b.n	8000f54 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000f50:	f7ff ffce 	bl	8000ef0 <_Z11Start_TimerP11TIM_TypeDef>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	2000073c 	.word	0x2000073c

08000f64 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	73fb      	strb	r3, [r7, #15]
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */
   //int dial_start = Dial->GetPosition();
   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <_Z12Move_Stepper9Directionii+0x6c>)
 8000f74:	681c      	ldr	r4, [r3, #0]
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <_Z12Move_Stepper9Directionii+0x70>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	7bf9      	ldrb	r1, [r7, #15]
 8000f84:	f7ff fb35 	bl	80005f2 <_ZNSt4Dial14CalculateStepsE9Directionhh>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff fbba 	bl	8000708 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {} // Wait for move to finish
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <_Z12Move_Stepper9Directionii+0x6c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fbe7 	bl	800076c <_ZNSt12StepperMotor6StatusEv>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d000      	beq.n	8000fb0 <_Z12Move_Stepper9Directionii+0x4c>
 8000fae:	e7f1      	b.n	8000f94 <_Z12Move_Stepper9Directionii+0x30>

   // [TODO] Compare expected and measured positions here.

   Dial->UpdatePosition(next_number); // Expected and measured are in agreement.
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_Z12Move_Stepper9Directionii+0x70>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb4a 	bl	8000654 <_ZNSt4Dial14UpdatePositionEh>
   HAL_Delay(DELAY_MS);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f000 fca6 	bl	8001914 <HAL_Delay>
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	2000073c 	.word	0x2000073c
 8000fd4:	20000740 	.word	0x20000740

08000fd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d119      	bne.n	8001028 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d114      	bne.n	8001028 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 8000ffe:	200c      	movs	r0, #12
 8001000:	f006 fe76 	bl	8007cf0 <_Znwj>
 8001004:	4603      	mov	r3, r0
 8001006:	461c      	mov	r4, r3
 8001008:	4909      	ldr	r1, [pc, #36]	; (8001030 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff fb31 	bl	8000672 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001012:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fe6b 	bl	8007cf0 <_Znwj>
 800101a:	4603      	mov	r3, r0
 800101c:	461c      	mov	r4, r3
 800101e:	4620      	mov	r0, r4
 8001020:	f7ff fad6 	bl	80005d0 <_ZNSt4DialC1Ev>
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001026:	601c      	str	r4, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	40000400 	.word	0x40000400
 8001034:	2000073c 	.word	0x2000073c
 8001038:	20000740 	.word	0x20000740

0800103c <_GLOBAL__sub_I_DMARxDscrTab>:
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
 8001040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ffcd 	bl	8000fe4 <_Z41__static_initialization_and_destruction_0ii>
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x30>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a59      	ldr	r2, [pc, #356]	; (8001204 <HAL_ETH_MspInit+0x184>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	f040 80ab 	bne.w	80011fa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010aa:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010be:	623b      	str	r3, [r7, #32]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010d2:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010e6:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010f0:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a40      	ldr	r2, [pc, #256]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a39      	ldr	r2, [pc, #228]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a31      	ldr	r2, [pc, #196]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_ETH_MspInit+0x188>)
 8001160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_ETH_MspInit+0x188>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001176:	2332      	movs	r3, #50	; 0x32
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001186:	230b      	movs	r3, #11
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <HAL_ETH_MspInit+0x18c>)
 8001192:	f001 f929 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001196:	2386      	movs	r3, #134	; 0x86
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a6:	230b      	movs	r3, #11
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4817      	ldr	r0, [pc, #92]	; (8001210 <HAL_ETH_MspInit+0x190>)
 80011b2:	f001 f919 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c8:	230b      	movs	r3, #11
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <HAL_ETH_MspInit+0x194>)
 80011d4:	f001 f908 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ea:	230b      	movs	r3, #11
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <HAL_ETH_MspInit+0x198>)
 80011f6:	f001 f8f7 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3738      	adds	r7, #56	; 0x38
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40028000 	.word	0x40028000
 8001208:	58024400 	.word	0x58024400
 800120c:	58020800 	.word	0x58020800
 8001210:	58020000 	.word	0x58020000
 8001214:	58020400 	.word	0x58020400
 8001218:	58021800 	.word	0x58021800

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b8      	sub	sp, #224	; 0xe0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	22bc      	movs	r2, #188	; 0xbc
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fdab 	bl	8007d98 <memset>
  if(hi2c->Instance==I2C2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_I2C_MspInit+0xbc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d141      	bne.n	80012d0 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800124c:	2308      	movs	r3, #8
 800124e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fce4 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff feb7 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001288:	2303      	movs	r3, #3
 800128a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012a0:	2304      	movs	r3, #4
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_I2C_MspInit+0xc4>)
 80012ae:	f001 f89b 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 80012b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 80012ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0xc0>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	37e0      	adds	r7, #224	; 0xe0
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40005800 	.word	0x40005800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58021400 	.word	0x58021400

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d116      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	201d      	movs	r0, #29
 800131a:	f000 fc1a 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800131e:	201d      	movs	r0, #29
 8001320:	f000 fc31 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40000400 	.word	0x40000400
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11f      	bne.n	8001396 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_TIM_MspPostInit+0x70>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_TIM_MspPostInit+0x70>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_TIM_MspPostInit+0x70>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001386:	2302      	movs	r3, #2
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_TIM_MspPostInit+0x74>)
 8001392:	f001 f829 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020800 	.word	0x58020800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0b8      	sub	sp, #224	; 0xe0
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	22bc      	movs	r2, #188	; 0xbc
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 fce3 	bl	8007d98 <memset>
  if(huart->Instance==USART3)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_UART_MspInit+0xc0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d142      	bne.n	8001462 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fc1c 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013f6:	f7ff fdef 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_UART_MspInit+0xc4>)
 80013fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_UART_MspInit+0xc4>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001406:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_MspInit+0xc4>)
 800140c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0xc4>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_UART_MspInit+0xc4>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_UART_MspInit+0xc4>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001450:	2307      	movs	r3, #7
 8001452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_MspInit+0xc8>)
 800145e:	f000 ffc3 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37e0      	adds	r7, #224	; 0xe0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004800 	.word	0x40004800
 8001470:	58024400 	.word	0x58024400
 8001474:	58020c00 	.word	0x58020c00

08001478 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0b8      	sub	sp, #224	; 0xe0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	22bc      	movs	r2, #188	; 0xbc
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f006 fc7d 	bl	8007d98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <HAL_PCD_MspInit+0xe8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d156      	bne.n	8001556 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fbb4 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80014c6:	f7ff fd87 	bl	8000fd8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014ca:	f001 fc01 	bl	8002cd0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_PCD_MspInit+0xec>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_PCD_MspInit+0xec>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_PCD_MspInit+0xec>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014ec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80014f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001506:	230a      	movs	r3, #10
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001510:	4619      	mov	r1, r3
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <HAL_PCD_MspInit+0xf0>)
 8001514:	f000 ff68 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800151c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <HAL_PCD_MspInit+0xf0>)
 8001534:	f000 ff58 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_PCD_MspInit+0xec>)
 800153a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_PCD_MspInit+0xec>)
 8001540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001544:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_PCD_MspInit+0xec>)
 800154a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800154e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	37e0      	adds	r7, #224	; 0xe0
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40080000 	.word	0x40080000
 8001564:	58024400 	.word	0x58024400
 8001568:	58020000 	.word	0x58020000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f98c 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM3_IRQHandler+0x10>)
 80015c6:	f004 f897 	bl	80056f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000258 	.word	0x20000258

080015d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_kill>:

int _kill(int pid, int sig)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ee:	f006 fba1 	bl	8007d34 <__errno>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2216      	movs	r2, #22
 80015f6:	601a      	str	r2, [r3, #0]
	return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_exit>:

void _exit (int status)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800160c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ffe7 	bl	80015e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001616:	e7fe      	b.n	8001616 <_exit+0x12>

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f006 fb74 	bl	8007d34 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000744 	.word	0x20000744
 8001680:	20000768 	.word	0x20000768

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <SystemInit+0xec>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a38      	ldr	r2, [pc, #224]	; (8001770 <SystemInit+0xec>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <SystemInit+0xf0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d807      	bhi.n	80016b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <SystemInit+0xf0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 030f 	bic.w	r3, r3, #15
 80016ac:	4a31      	ldr	r2, [pc, #196]	; (8001774 <SystemInit+0xf0>)
 80016ae:	f043 0307 	orr.w	r3, r3, #7
 80016b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <SystemInit+0xf4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <SystemInit+0xf4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <SystemInit+0xf4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <SystemInit+0xf4>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	492b      	ldr	r1, [pc, #172]	; (8001778 <SystemInit+0xf4>)
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <SystemInit+0xf8>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <SystemInit+0xf0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <SystemInit+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 030f 	bic.w	r3, r3, #15
 80016e6:	4a23      	ldr	r2, [pc, #140]	; (8001774 <SystemInit+0xf0>)
 80016e8:	f043 0307 	orr.w	r3, r3, #7
 80016ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <SystemInit+0xf4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <SystemInit+0xf4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <SystemInit+0xf4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <SystemInit+0xf4>)
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <SystemInit+0xfc>)
 8001704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <SystemInit+0xf4>)
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <SystemInit+0x100>)
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <SystemInit+0xf4>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <SystemInit+0x104>)
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <SystemInit+0xf4>)
 8001714:	2200      	movs	r2, #0
 8001716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <SystemInit+0xf4>)
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <SystemInit+0x104>)
 800171c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <SystemInit+0xf4>)
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <SystemInit+0xf4>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <SystemInit+0x104>)
 8001728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <SystemInit+0xf4>)
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <SystemInit+0xf4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a10      	ldr	r2, [pc, #64]	; (8001778 <SystemInit+0xf4>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <SystemInit+0xf4>)
 800173e:	2200      	movs	r2, #0
 8001740:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <SystemInit+0x108>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <SystemInit+0x10c>)
 8001748:	4013      	ands	r3, r2
 800174a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800174e:	d202      	bcs.n	8001756 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <SystemInit+0x110>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <SystemInit+0x114>)
 8001758:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800175c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SystemInit+0xec>)
 8001760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001764:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	52002000 	.word	0x52002000
 8001778:	58024400 	.word	0x58024400
 800177c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001780:	02020200 	.word	0x02020200
 8001784:	01ff0000 	.word	0x01ff0000
 8001788:	01010280 	.word	0x01010280
 800178c:	5c001000 	.word	0x5c001000
 8001790:	ffff0000 	.word	0xffff0000
 8001794:	51008108 	.word	0x51008108
 8001798:	52004000 	.word	0x52004000

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f7ff ff70 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f006 fab9 	bl	8007d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe ffe5 	bl	800079c <main>
  bx  lr
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017e0:	08007f84 	.word	0x08007f84
  ldr r2, =_sbss
 80017e4:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80017e8:	20000768 	.word	0x20000768

080017ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f9a0 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017fc:	f002 f83e 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_Init+0x68>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	4913      	ldr	r1, [pc, #76]	; (800185c <HAL_Init+0x6c>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_Init+0x68>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_Init+0x6c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_Init+0x70>)
 8001832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_Init+0x74>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f814 	bl	8001868 <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e002      	b.n	8001850 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800184a:	f7ff fbff 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58024400 	.word	0x58024400
 800185c:	08007f38 	.word	0x08007f38
 8001860:	20000004 	.word	0x20000004
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_InitTick+0x60>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e021      	b.n	80018c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_InitTick+0x64>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_InitTick+0x60>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f985 	bl	8001ba2 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b0:	f000 f94f 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x68>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000754 	.word	0x20000754

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000754 	.word	0x20000754

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000000c 	.word	0x2000000c

0800195c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetREVID+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0c1b      	lsrs	r3, r3, #16
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	5c001000 	.word	0x5c001000

08001974 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	58000400 	.word	0x58000400

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <__NVIC_SetPriorityGrouping+0x40>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x40>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	05fa0000 	.word	0x05fa0000

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b1c:	f7ff ff8e 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff29 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff40 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff33 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa4 	bl	8001af8 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0c6      	b.n	8001d5c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fa52 	bl	8001080 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2223      	movs	r2, #35	; 0x23
 8001be0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_ETH_Init+0x1a8>)
 8001be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be8:	4a5e      	ldr	r2, [pc, #376]	; (8001d64 <HAL_ETH_Init+0x1a8>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_ETH_Init+0x1a8>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7a1b      	ldrb	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff feb3 	bl	8001974 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c0e:	e003      	b.n	8001c18 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c14:	f7ff feae 	bl	8001974 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c30:	f7ff fe64 	bl	80018fc <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c36:	e00f      	b.n	8001c58 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001c38:	f7ff fe60 	bl	80018fc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c46:	d907      	bls.n	8001c58 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	22e0      	movs	r2, #224	; 0xe0
 8001c52:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e081      	b.n	8001d5c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e6      	bne.n	8001c38 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fac0 	bl	80021f0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c70:	f001 ff7e 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <HAL_ETH_Init+0x1ac>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	0c9a      	lsrs	r2, r3, #18
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3a01      	subs	r2, #1
 8001c84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fa13 	bl	80020b4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ca4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	22e0      	movs	r2, #224	; 0xe0
 8001cc0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e04a      	b.n	8001d5c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cce:	4413      	add	r3, r2
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_ETH_Init+0x1b0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6952      	ldr	r2, [r2, #20]
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	6809      	ldr	r1, [r1, #0]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ce6:	440b      	add	r3, r1
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fad8 	bl	80022a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fb1c 	bl	800232e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	021a      	lsls	r2, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	061a      	lsls	r2, r3, #24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	3302      	adds	r3, #2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2210      	movs	r2, #16
 8001d52:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2210      	movs	r2, #16
 8001d58:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58024400 	.word	0x58024400
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	ffff8001 	.word	0xffff8001

08001d70 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001d82:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	791b      	ldrb	r3, [r3, #4]
 8001d88:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001d8a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001d92:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7b5b      	ldrb	r3, [r3, #13]
 8001d98:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d9a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7b9b      	ldrb	r3, [r3, #14]
 8001da0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001da2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7bdb      	ldrb	r3, [r3, #15]
 8001da8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001daa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	7c12      	ldrb	r2, [r2, #16]
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d102      	bne.n	8001dba <ETH_SetMACConfig+0x4a>
 8001db4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001db8:	e000      	b.n	8001dbc <ETH_SetMACConfig+0x4c>
 8001dba:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001dbc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	7c52      	ldrb	r2, [r2, #17]
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d102      	bne.n	8001dcc <ETH_SetMACConfig+0x5c>
 8001dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dca:	e000      	b.n	8001dce <ETH_SetMACConfig+0x5e>
 8001dcc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001dce:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7c9b      	ldrb	r3, [r3, #18]
 8001dd4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001dd6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ddc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001de2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	7f1b      	ldrb	r3, [r3, #28]
 8001de8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001dea:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	7f5b      	ldrb	r3, [r3, #29]
 8001df0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001df2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	7f92      	ldrb	r2, [r2, #30]
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d102      	bne.n	8001e02 <ETH_SetMACConfig+0x92>
 8001dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e00:	e000      	b.n	8001e04 <ETH_SetMACConfig+0x94>
 8001e02:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001e04:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7fdb      	ldrb	r3, [r3, #31]
 8001e0a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001e0c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	d102      	bne.n	8001e1e <ETH_SetMACConfig+0xae>
 8001e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1c:	e000      	b.n	8001e20 <ETH_SetMACConfig+0xb0>
 8001e1e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e20:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e26:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e2e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001e30:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <ETH_SetMACConfig+0x22c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	68f9      	ldr	r1, [r7, #12]
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001e5c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001e66:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e6e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001e70:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d102      	bne.n	8001e82 <ETH_SetMACConfig+0x112>
 8001e7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e80:	e000      	b.n	8001e84 <ETH_SetMACConfig+0x114>
 8001e82:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001e84:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <ETH_SetMACConfig+0x230>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <ETH_SetMACConfig+0x234>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ecc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ed2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d101      	bne.n	8001ee2 <ETH_SetMACConfig+0x172>
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	e000      	b.n	8001ee4 <ETH_SetMACConfig+0x174>
 8001ee2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ee4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001f0c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001f14:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	f023 0103 	bic.w	r1, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001f3a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001f56:	2a00      	cmp	r2, #0
 8001f58:	d101      	bne.n	8001f5e <ETH_SetMACConfig+0x1ee>
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	e000      	b.n	8001f60 <ETH_SetMACConfig+0x1f0>
 8001f5e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001f60:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001f68:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f6a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f72:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001f80:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	00048083 	.word	0x00048083
 8001fa0:	c0f88000 	.word	0xc0f88000
 8001fa4:	fffffef0 	.word	0xfffffef0

08001fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <ETH_SetDMAConfig+0xf8>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	6809      	ldr	r1, [r1, #0]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001fce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001fda:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f241 0304 	movw	r3, #4100	; 0x1004
 8001fee:	4413      	add	r3, r2
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <ETH_SetDMAConfig+0xfc>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	f241 0304 	movw	r3, #4100	; 0x1004
 8002002:	440b      	add	r3, r1
 8002004:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7b5b      	ldrb	r3, [r3, #13]
 800200a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <ETH_SetDMAConfig+0x100>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6811      	ldr	r1, [r2, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	431a      	orrs	r2, r3
 800202a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800202e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7d1b      	ldrb	r3, [r3, #20]
 8002038:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800203a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	7f5b      	ldrb	r3, [r3, #29]
 8002040:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f241 1304 	movw	r3, #4356	; 0x1104
 800204e:	4413      	add	r3, r2
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <ETH_SetDMAConfig+0x104>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	431a      	orrs	r2, r3
 800205e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002062:	440b      	add	r3, r1
 8002064:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	7f1b      	ldrb	r3, [r3, #28]
 800206a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f241 1308 	movw	r3, #4360	; 0x1108
 800207c:	4413      	add	r3, r2
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <ETH_SetDMAConfig+0x108>)
 8002082:	4013      	ands	r3, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6811      	ldr	r1, [r2, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	431a      	orrs	r2, r3
 800208c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002090:	440b      	add	r3, r1
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	ffff87fd 	.word	0xffff87fd
 80020a4:	ffff2ffe 	.word	0xffff2ffe
 80020a8:	fffec000 	.word	0xfffec000
 80020ac:	ffc0efef 	.word	0xffc0efef
 80020b0:	7fc0ffff 	.word	0x7fc0ffff

080020b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0a4      	sub	sp, #144	; 0x90
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020c2:	2300      	movs	r3, #0
 80020c4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800210c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002110:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800212e:	2300      	movs	r3, #0
 8002130:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002132:	2300      	movs	r3, #0
 8002134:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002136:	2300      	movs	r3, #0
 8002138:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800214c:	2320      	movs	r3, #32
 800214e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800215e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800218e:	2300      	movs	r3, #0
 8002190:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fde6 	bl	8001d70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80021d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fee1 	bl	8001fa8 <ETH_SetDMAConfig>
}
 80021e6:	bf00      	nop
 80021e8:	3790      	adds	r7, #144	; 0x90
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002200:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002208:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800220a:	f001 fcb1 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 800220e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d908      	bls.n	800222a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d804      	bhi.n	800222a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e027      	b.n	800227a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d908      	bls.n	8002244 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d204      	bcs.n	8002244 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e01a      	b.n	800227a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d303      	bcc.n	8002254 <ETH_MAC_MDIO_ClkConfig+0x64>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d911      	bls.n	8002278 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d908      	bls.n	800226e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d804      	bhi.n	800226e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e005      	b.n	800227a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e000      	b.n	800227a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002278:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	01312cff 	.word	0x01312cff
 8002290:	02160ebf 	.word	0x02160ebf
 8002294:	03938700 	.word	0x03938700
 8002298:	05f5e0ff 	.word	0x05f5e0ff
 800229c:	08f0d17f 	.word	0x08f0d17f

080022a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e01d      	b.n	80022ea <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	3206      	adds	r2, #6
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d9de      	bls.n	80022ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f241 132c 	movw	r3, #4396	; 0x112c
 80022fe:	4413      	add	r3, r2
 8002300:	2203      	movs	r2, #3
 8002302:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002310:	4413      	add	r3, r2
 8002312:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e024      	b.n	8002386 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3310      	adds	r3, #16
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d9d7      	bls.n	800233c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f241 1330 	movw	r3, #4400	; 0x1130
 80023b2:	4413      	add	r3, r2
 80023b4:	2203      	movs	r2, #3
 80023b6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80023c4:	4413      	add	r3, r2
 80023c6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f241 1328 	movw	r3, #4392	; 0x1128
 80023d8:	4413      	add	r3, r2
 80023da:	6019      	str	r1, [r3, #0]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <HAL_GPIO_Init+0x234>)
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023fa:	e194      	b.n	8002726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8186 	beq.w	8002720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00b      	beq.n	8002434 <HAL_GPIO_Init+0x4c>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002428:	2b11      	cmp	r3, #17
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0xee>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	69b9      	ldr	r1, [r7, #24]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80e0 	beq.w	8002720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x238>)
 8002562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002566:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <HAL_GPIO_Init+0x238>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_GPIO_Init+0x238>)
 8002572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_GPIO_Init+0x23c>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_GPIO_Init+0x240>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d052      	beq.n	8002650 <HAL_GPIO_Init+0x268>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_GPIO_Init+0x244>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_GPIO_Init+0x22e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_GPIO_Init+0x248>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x22a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_GPIO_Init+0x24c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <HAL_GPIO_Init+0x250>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_GPIO_Init+0x254>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_GPIO_Init+0x258>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_GPIO_Init+0x25c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_GPIO_Init+0x260>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_GPIO_Init+0x264>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20e>
 80025f2:	2309      	movs	r3, #9
 80025f4:	e02d      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025f6:	230a      	movs	r3, #10
 80025f8:	e02b      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e029      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025fe:	2307      	movs	r3, #7
 8002600:	e027      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002602:	2306      	movs	r3, #6
 8002604:	e025      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002606:	2305      	movs	r3, #5
 8002608:	e023      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800260a:	2304      	movs	r3, #4
 800260c:	e021      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800260e:	2303      	movs	r3, #3
 8002610:	e01f      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002612:	2302      	movs	r3, #2
 8002614:	e01d      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002616:	2301      	movs	r3, #1
 8002618:	e01b      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800261a:	bf00      	nop
 800261c:	58000080 	.word	0x58000080
 8002620:	58024400 	.word	0x58024400
 8002624:	58000400 	.word	0x58000400
 8002628:	58020000 	.word	0x58020000
 800262c:	58020400 	.word	0x58020400
 8002630:	58020800 	.word	0x58020800
 8002634:	58020c00 	.word	0x58020c00
 8002638:	58021000 	.word	0x58021000
 800263c:	58021400 	.word	0x58021400
 8002640:	58021800 	.word	0x58021800
 8002644:	58021c00 	.word	0x58021c00
 8002648:	58022000 	.word	0x58022000
 800264c:	58022400 	.word	0x58022400
 8002650:	2300      	movs	r3, #0
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002662:	4938      	ldr	r1, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x35c>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae63 	bne.w	80023fc <HAL_GPIO_Init+0x14>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	58000400 	.word	0x58000400

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fd3a 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	e006      	b.n	8002804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d104      	bne.n	8002816 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002814:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_I2C_Init+0x11c>)
 8002822:	430b      	orrs	r3, r1
 8002824:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002834:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	ea42 0103 	orr.w	r1, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	021a      	lsls	r2, r3, #8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	02008000 	.word	0x02008000

0800289c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d138      	bne.n	8002924 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028bc:	2302      	movs	r3, #2
 80028be:	e032      	b.n	8002926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	d139      	bne.n	80029bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002952:	2302      	movs	r3, #2
 8002954:	e033      	b.n	80029be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2224      	movs	r2, #36	; 0x24
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002984:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029cc:	b08f      	sub	sp, #60	; 0x3c
 80029ce:	af0a      	add	r7, sp, #40	; 0x28
 80029d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e116      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fd3e 	bl	8001478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 ff18 	bl	8007850 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	687e      	ldr	r6, [r7, #4]
 8002a28:	466d      	mov	r5, sp
 8002a2a:	f106 0410 	add.w	r4, r6, #16
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3e:	1d33      	adds	r3, r6, #4
 8002a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f004 fe96 	bl	8007774 <USB_CoreInit>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0d7      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 ff06 	bl	8007872 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e04a      	b.n	8002b02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	333d      	adds	r3, #61	; 0x3d
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	333c      	adds	r3, #60	; 0x3c
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	b298      	uxth	r0, r3
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3342      	adds	r3, #66	; 0x42
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	333f      	adds	r3, #63	; 0x3f
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3344      	adds	r3, #68	; 0x44
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3348      	adds	r3, #72	; 0x48
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3350      	adds	r3, #80	; 0x50
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	3301      	adds	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3af      	bcc.n	8002a6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e044      	b.n	8002b9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3b5      	bcc.n	8002b12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	687e      	ldr	r6, [r7, #4]
 8002bae:	466d      	mov	r5, sp
 8002bb0:	f106 0410 	add.w	r4, r6, #16
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc4:	1d33      	adds	r3, r6, #4
 8002bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc8:	6838      	ldr	r0, [r7, #0]
 8002bca:	f004 fe7d 	bl	80078c8 <USB_DevInit>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e014      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f80b 	bl	8002c14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 f81f 	bl	8007c46 <USB_DevDisconnect>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	10000003 	.word	0x10000003

08002c5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_PWREx_ConfigSupply+0x70>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00a      	beq.n	8002c86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_PWREx_ConfigSupply+0x70>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e01f      	b.n	8002cc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e01d      	b.n	8002cc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_PWREx_ConfigSupply+0x70>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	490f      	ldr	r1, [pc, #60]	; (8002ccc <HAL_PWREx_ConfigSupply+0x70>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c96:	f7fe fe31 	bl	80018fc <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c9c:	e009      	b.n	8002cb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c9e:	f7fe fe2d 	bl	80018fc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cac:	d901      	bls.n	8002cb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_PWREx_ConfigSupply+0x70>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	d1ee      	bne.n	8002c9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	58024800 	.word	0x58024800

08002cd0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	58024800 	.word	0x58024800

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e3ff      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8087 	beq.w	8002e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d10:	4b99      	ldr	r3, [pc, #612]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d1a:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d007      	beq.n	8002d36 <HAL_RCC_OscConfig+0x46>
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	2b18      	cmp	r3, #24
 8002d2a:	d110      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x12c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d168      	bne.n	8002e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e3d9      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x76>
 8002d58:	4b87      	ldr	r3, [pc, #540]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a86      	ldr	r2, [pc, #536]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e02e      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a81      	ldr	r2, [pc, #516]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b7f      	ldr	r3, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7e      	ldr	r2, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0xbc>
 8002d92:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a78      	ldr	r2, [pc, #480]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002dac:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a71      	ldr	r2, [pc, #452]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fd96 	bl	80018fc <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fd92 	bl	80018fc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e38d      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de6:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe4>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fd82 	bl	80018fc <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fd7e 	bl	80018fc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e379      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e0e:	4b5a      	ldr	r3, [pc, #360]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x10c>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80ae 	beq.w	8002f88 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2c:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_RCC_OscConfig+0x162>
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	2b18      	cmp	r3, #24
 8002e46:	d13a      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1ce>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d135      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e34b      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	f7fe fd77 	bl	800195c <HAL_GetREVID>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d817      	bhi.n	8002ea8 <HAL_RCC_OscConfig+0x1b8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d108      	bne.n	8002e92 <HAL_RCC_OscConfig+0x1a2>
 8002e80:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e88:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e90:	e07a      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	031b      	lsls	r3, r3, #12
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea6:	e06f      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	4930      	ldr	r1, [pc, #192]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	e064      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d045      	beq.n	8002f52 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0219 	bic.w	r2, r3, #25
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4929      	ldr	r1, [pc, #164]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fd10 	bl	80018fc <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fd0c 	bl	80018fc <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e307      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	f7fe fd2d 	bl	800195c <HAL_GetREVID>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d817      	bhi.n	8002f3c <HAL_RCC_OscConfig+0x24c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d108      	bne.n	8002f26 <HAL_RCC_OscConfig+0x236>
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f22:	6053      	str	r3, [r2, #4]
 8002f24:	e030      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	031b      	lsls	r3, r3, #12
 8002f34:	4910      	ldr	r1, [pc, #64]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
 8002f3a:	e025      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	490b      	ldr	r1, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	e01a      	b.n	8002f88 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_RCC_OscConfig+0x288>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fccd 	bl	80018fc <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fcc9 	bl	80018fc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d903      	bls.n	8002f7c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e2c4      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
 8002f78:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f7c:	4ba4      	ldr	r3, [pc, #656]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ee      	bne.n	8002f66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a9 	beq.w	80030e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa0:	4b9b      	ldr	r3, [pc, #620]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d007      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2cc>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b18      	cmp	r3, #24
 8002fb0:	d13a      	bne.n	8003028 <HAL_RCC_OscConfig+0x338>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d135      	bne.n	8003028 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fbc:	4b94      	ldr	r3, [pc, #592]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2e4>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	2b80      	cmp	r3, #128	; 0x80
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e296      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd4:	f7fe fcc2 	bl	800195c <HAL_GetREVID>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d817      	bhi.n	8003012 <HAL_RCC_OscConfig+0x322>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fea:	4b89      	ldr	r3, [pc, #548]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ff2:	4a87      	ldr	r2, [pc, #540]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ff8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ffa:	e075      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffc:	4b84      	ldr	r3, [pc, #528]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	069b      	lsls	r3, r3, #26
 800300a:	4981      	ldr	r1, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003010:	e06a      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	497b      	ldr	r1, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003026:	e05f      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d042      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a76      	ldr	r2, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fc5e 	bl	80018fc <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003044:	f7fe fc5a 	bl	80018fc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e255      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003056:	4b6e      	ldr	r3, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003062:	f7fe fc7b 	bl	800195c <HAL_GetREVID>
 8003066:	4603      	mov	r3, r0
 8003068:	f241 0203 	movw	r2, #4099	; 0x1003
 800306c:	4293      	cmp	r3, r2
 800306e:	d817      	bhi.n	80030a0 <HAL_RCC_OscConfig+0x3b0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	2b20      	cmp	r3, #32
 8003076:	d108      	bne.n	800308a <HAL_RCC_OscConfig+0x39a>
 8003078:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003080:	4a63      	ldr	r2, [pc, #396]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003086:	6053      	str	r3, [r2, #4]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
 800308a:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	069b      	lsls	r3, r3, #26
 8003098:	495d      	ldr	r1, [pc, #372]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	e023      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	4958      	ldr	r1, [pc, #352]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
 80030b4:	e018      	b.n	80030e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030b6:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a55      	ldr	r2, [pc, #340]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe fc1b 	bl	80018fc <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030ca:	f7fe fc17 	bl	80018fc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e212      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030dc:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d036      	beq.n	8003162 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d019      	beq.n	8003130 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fc:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	4a43      	ldr	r2, [pc, #268]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe fbf8 	bl	80018fc <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe fbf4 	bl	80018fc <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ef      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x420>
 800312e:	e018      	b.n	8003162 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	4a36      	ldr	r2, [pc, #216]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fbde 	bl	80018fc <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fbda 	bl	80018fc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1d5      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d036      	beq.n	80031dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a25      	ldr	r2, [pc, #148]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800317c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003182:	f7fe fbbb 	bl	80018fc <HAL_GetTick>
 8003186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800318a:	f7fe fbb7 	bl	80018fc <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1b2      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x49a>
 80031a8:	e018      	b.n	80031dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a18      	ldr	r2, [pc, #96]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80031b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031b6:	f7fe fba1 	bl	80018fc <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031be:	f7fe fb9d 	bl	80018fc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e198      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x520>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8085 	beq.w	80032f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_OscConfig+0x524>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <HAL_RCC_OscConfig+0x524>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fb81 	bl	80018fc <HAL_GetTick>
 80031fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031fc:	e00c      	b.n	8003218 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe fb7d 	bl	80018fc <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	; 0x64
 800320a:	d905      	bls.n	8003218 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e178      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
 8003210:	58024400 	.word	0x58024400
 8003214:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003218:	4b96      	ldr	r3, [pc, #600]	; (8003474 <HAL_RCC_OscConfig+0x784>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ec      	beq.n	80031fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x54a>
 800322c:	4b92      	ldr	r3, [pc, #584]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a91      	ldr	r2, [pc, #580]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	e02d      	b.n	8003296 <HAL_RCC_OscConfig+0x5a6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x56c>
 8003242:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a8c      	ldr	r2, [pc, #560]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b8a      	ldr	r3, [pc, #552]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a89      	ldr	r2, [pc, #548]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	e01c      	b.n	8003296 <HAL_RCC_OscConfig+0x5a6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d10c      	bne.n	800327e <HAL_RCC_OscConfig+0x58e>
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a83      	ldr	r2, [pc, #524]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a80      	ldr	r2, [pc, #512]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	e00b      	b.n	8003296 <HAL_RCC_OscConfig+0x5a6>
 800327e:	4b7e      	ldr	r3, [pc, #504]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a7d      	ldr	r2, [pc, #500]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a7a      	ldr	r2, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d015      	beq.n	80032ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fe fb2d 	bl	80018fc <HAL_GetTick>
 80032a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fb29 	bl	80018fc <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e122      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032bc:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ee      	beq.n	80032a6 <HAL_RCC_OscConfig+0x5b6>
 80032c8:	e014      	b.n	80032f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe fb17 	bl	80018fc <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fb13 	bl	80018fc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10c      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ee      	bne.n	80032d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8101 	beq.w	8003500 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032fe:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003306:	2b18      	cmp	r3, #24
 8003308:	f000 80bc 	beq.w	8003484 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b02      	cmp	r3, #2
 8003312:	f040 8095 	bne.w	8003440 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800331c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe faeb 	bl	80018fc <HAL_GetTick>
 8003326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fae7 	bl	80018fc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0e2      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333c:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003348:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800334a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334c:	4b4b      	ldr	r3, [pc, #300]	; (800347c <HAL_RCC_OscConfig+0x78c>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	430a      	orrs	r2, r1
 800335c:	4946      	ldr	r1, [pc, #280]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800335e:	4313      	orrs	r3, r2
 8003360:	628b      	str	r3, [r1, #40]	; 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	3b01      	subs	r3, #1
 8003368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	3b01      	subs	r3, #1
 8003372:	025b      	lsls	r3, r3, #9
 8003374:	b29b      	uxth	r3, r3
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	3b01      	subs	r3, #1
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003392:	4939      	ldr	r1, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003394:	4313      	orrs	r3, r2
 8003396:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003398:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4a36      	ldr	r2, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a8:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_RCC_OscConfig+0x790>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033b0:	00d2      	lsls	r2, r2, #3
 80033b2:	4931      	ldr	r1, [pc, #196]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f023 020c 	bic.w	r2, r3, #12
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	492c      	ldr	r1, [pc, #176]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f023 0202 	bic.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4928      	ldr	r1, [pc, #160]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a25      	ldr	r2, [pc, #148]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 80033fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fa70 	bl	80018fc <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fa6c 	bl	80018fc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e067      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x730>
 800343e:	e05f      	b.n	8003500 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe fa56 	bl	80018fc <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe fa52 	bl	80018fc <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04d      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCC_OscConfig+0x788>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x764>
 8003472:	e045      	b.n	8003500 <HAL_RCC_OscConfig+0x810>
 8003474:	58024800 	.word	0x58024800
 8003478:	58024400 	.word	0x58024400
 800347c:	fffffc0c 	.word	0xfffffc0c
 8003480:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003484:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_RCC_OscConfig+0x81c>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_OscConfig+0x81c>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b01      	cmp	r3, #1
 8003496:	d031      	beq.n	80034fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0203 	and.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d12a      	bne.n	80034fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d122      	bne.n	80034fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3730      	adds	r7, #48	; 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	58024400 	.word	0x58024400

08003510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e19c      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b8a      	ldr	r3, [pc, #552]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b87      	ldr	r3, [pc, #540]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	4985      	ldr	r1, [pc, #532]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e184      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003570:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	4975      	ldr	r1, [pc, #468]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 800357e:	4313      	orrs	r3, r2
 8003580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800359a:	429a      	cmp	r2, r3
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	496a      	ldr	r1, [pc, #424]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	4b64      	ldr	r3, [pc, #400]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d908      	bls.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035cc:	4b61      	ldr	r3, [pc, #388]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	495e      	ldr	r1, [pc, #376]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d908      	bls.n	800360c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035fa:	4b56      	ldr	r3, [pc, #344]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4953      	ldr	r1, [pc, #332]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003608:	4313      	orrs	r3, r2
 800360a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	429a      	cmp	r2, r3
 8003626:	d908      	bls.n	800363a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f023 020f 	bic.w	r2, r3, #15
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4947      	ldr	r1, [pc, #284]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003636:	4313      	orrs	r3, r2
 8003638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d055      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4940      	ldr	r1, [pc, #256]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003654:	4313      	orrs	r3, r2
 8003656:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003660:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d121      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0f6      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d115      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ea      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0de      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d6      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4925      	ldr	r1, [pc, #148]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe f91b 	bl	80018fc <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f7fe f917 	bl	80018fc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0be      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d1eb      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	429a      	cmp	r2, r3
 800370c:	d208      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_RCC_ClockConfig+0x244>)
 800371c:	4313      	orrs	r3, r2
 800371e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d214      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	4906      	ldr	r1, [pc, #24]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e086      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
 8003750:	52002000 	.word	0x52002000
 8003754:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003770:	429a      	cmp	r2, r3
 8003772:	d208      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003774:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	4939      	ldr	r1, [pc, #228]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003782:	4313      	orrs	r3, r2
 8003784:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379e:	429a      	cmp	r2, r3
 80037a0:	d208      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	492e      	ldr	r1, [pc, #184]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d208      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4922      	ldr	r1, [pc, #136]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d208      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4917      	ldr	r1, [pc, #92]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 800380c:	4313      	orrs	r3, r2
 800380e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003810:	f000 f834 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	4912      	ldr	r1, [pc, #72]	; (800386c <HAL_RCC_ClockConfig+0x35c>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a0d      	ldr	r2, [pc, #52]	; (800386c <HAL_RCC_ClockConfig+0x35c>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x360>)
 8003846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x364>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x368>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe f808 	bl	8001868 <HAL_InitTick>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
 800386c:	08007f38 	.word	0x08007f38
 8003870:	20000004 	.word	0x20000004
 8003874:	20000000 	.word	0x20000000
 8003878:	20000008 	.word	0x20000008

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003882:	4bb3      	ldr	r3, [pc, #716]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388a:	2b18      	cmp	r3, #24
 800388c:	f200 8155 	bhi.w	8003b3a <HAL_RCC_GetSysClockFreq+0x2be>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038fd 	.word	0x080038fd
 800389c:	08003b3b 	.word	0x08003b3b
 80038a0:	08003b3b 	.word	0x08003b3b
 80038a4:	08003b3b 	.word	0x08003b3b
 80038a8:	08003b3b 	.word	0x08003b3b
 80038ac:	08003b3b 	.word	0x08003b3b
 80038b0:	08003b3b 	.word	0x08003b3b
 80038b4:	08003b3b 	.word	0x08003b3b
 80038b8:	08003923 	.word	0x08003923
 80038bc:	08003b3b 	.word	0x08003b3b
 80038c0:	08003b3b 	.word	0x08003b3b
 80038c4:	08003b3b 	.word	0x08003b3b
 80038c8:	08003b3b 	.word	0x08003b3b
 80038cc:	08003b3b 	.word	0x08003b3b
 80038d0:	08003b3b 	.word	0x08003b3b
 80038d4:	08003b3b 	.word	0x08003b3b
 80038d8:	08003929 	.word	0x08003929
 80038dc:	08003b3b 	.word	0x08003b3b
 80038e0:	08003b3b 	.word	0x08003b3b
 80038e4:	08003b3b 	.word	0x08003b3b
 80038e8:	08003b3b 	.word	0x08003b3b
 80038ec:	08003b3b 	.word	0x08003b3b
 80038f0:	08003b3b 	.word	0x08003b3b
 80038f4:	08003b3b 	.word	0x08003b3b
 80038f8:	0800392f 	.word	0x0800392f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	4b94      	ldr	r3, [pc, #592]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003908:	4b91      	ldr	r3, [pc, #580]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	4a90      	ldr	r2, [pc, #576]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800391a:	e111      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800391c:	4b8d      	ldr	r3, [pc, #564]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800391e:	61bb      	str	r3, [r7, #24]
    break;
 8003920:	e10e      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003922:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003924:	61bb      	str	r3, [r7, #24]
    break;
 8003926:	e10b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003928:	4b8c      	ldr	r3, [pc, #560]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800392a:	61bb      	str	r3, [r7, #24]
    break;
 800392c:	e108      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003938:	4b85      	ldr	r3, [pc, #532]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003942:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003944:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800394e:	4b80      	ldr	r3, [pc, #512]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	08db      	lsrs	r3, r3, #3
 8003954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80e1 	beq.w	8003b34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f000 8083 	beq.w	8003a80 <HAL_RCC_GetSysClockFreq+0x204>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b02      	cmp	r3, #2
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x248>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x114>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d056      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1c0>
 800398e:	e099      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003990:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02d      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800399c:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	4a6b      	ldr	r2, [pc, #428]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b62      	ldr	r3, [pc, #392]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039f6:	e087      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0a:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a3a:	e065      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4e:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7e:	e043      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ac2:	e021      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b12:	3301      	adds	r3, #1
 8003b14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2c:	ee17 3a90 	vmov	r3, s15
 8003b30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b3c:	61bb      	str	r3, [r7, #24]
    break;
 8003b3e:	bf00      	nop
  }

  return sysclockfreq;
 8003b40:	69bb      	ldr	r3, [r7, #24]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	58024400 	.word	0x58024400
 8003b54:	03d09000 	.word	0x03d09000
 8003b58:	003d0900 	.word	0x003d0900
 8003b5c:	007a1200 	.word	0x007a1200
 8003b60:	46000000 	.word	0x46000000
 8003b64:	4c742400 	.word	0x4c742400
 8003b68:	4a742400 	.word	0x4a742400
 8003b6c:	4af42400 	.word	0x4af42400

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b76:	f7ff fe81 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490f      	ldr	r1, [pc, #60]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	08007f38 	.word	0x08007f38
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bd4:	f7ff ffcc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	08007f38 	.word	0x08007f38

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c00:	f7ff ffb6 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4904      	ldr	r1, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	58024400 	.word	0x58024400
 8003c24:	08007f38 	.word	0x08007f38

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03f      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c4c:	d02a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c52:	d824      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c58:	d018      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5e:	d81e      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c6a:	e018      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4bab      	ldr	r3, [pc, #684]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4aaa      	ldr	r2, [pc, #680]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c78:	e015      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f9cf 	bl	8005024 <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3324      	adds	r3, #36	; 0x24
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fa78 	bl	8005188 <RCCEx_PLL3_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cac:	4b9b      	ldr	r3, [pc, #620]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb8:	4998      	ldr	r1, [pc, #608]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	650b      	str	r3, [r1, #80]	; 0x50
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03d      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d826      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf5 	.word	0x08003cf5
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2d 	.word	0x08003d2d
 8003cf0:	08003d2d 	.word	0x08003d2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b89      	ldr	r3, [pc, #548]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a88      	ldr	r2, [pc, #544]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d00:	e015      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 f98b 	bl	8005024 <RCCEx_PLL2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d12:	e00c      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fa34 	bl	8005188 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d34:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	f023 0207 	bic.w	r2, r3, #7
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	4976      	ldr	r1, [pc, #472]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	650b      	str	r3, [r1, #80]	; 0x50
 8003d46:	e001      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d042      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d60:	d02b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d68:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6a:	d028      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6e:	d821      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d81d      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d007      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d80:	e018      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d82:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d8e:	e017      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f944 	bl	8005024 <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 f9ed 	bl	8005188 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
      break;
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	4952      	ldr	r1, [pc, #328]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d049      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df4:	d030      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003df6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dfa:	d82a      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e00:	d02c      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e06:	d824      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0c:	d018      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d81e      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e1e:	e018      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a3d      	ldr	r2, [pc, #244]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e017      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 f8f5 	bl	8005024 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e00e      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3324      	adds	r3, #36	; 0x24
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f99e 	bl	8005188 <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e72:	492a      	ldr	r1, [pc, #168]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	658b      	str	r3, [r1, #88]	; 0x58
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d04c      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e94:	d030      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9a:	d82a      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea0:	d02c      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003ea2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea6:	d824      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eac:	d018      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb2:	d81e      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ebe:	e018      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ecc:	e017      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 f8a5 	bl	8005024 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ede:	e00e      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3324      	adds	r3, #36	; 0x24
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f94e 	bl	8005188 <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ef0:	e005      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10d      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f12:	4902      	ldr	r1, [pc, #8]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	658b      	str	r3, [r1, #88]	; 0x58
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d032      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d01c      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d817      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d00c      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d813      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d10f      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4baf      	ldr	r3, [pc, #700]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4aae      	ldr	r2, [pc, #696]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f58:	e00e      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 f85f 	bl	8005024 <RCCEx_PLL2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f7e:	4ba3      	ldr	r3, [pc, #652]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8a:	49a0      	ldr	r1, [pc, #640]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f90:	e001      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d047      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d030      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d82a      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb6:	d02c      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fbc:	d824      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d018      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc8:	d81e      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d007      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003fd4:	e018      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a8c      	ldr	r2, [pc, #560]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fe2:	e017      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f81a 	bl	8005024 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e00e      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f8c3 	bl	8005188 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004006:	e005      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800401a:	4b7c      	ldr	r3, [pc, #496]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800401c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	4979      	ldr	r1, [pc, #484]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	650b      	str	r3, [r1, #80]	; 0x50
 800402c:	e001      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d049      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004046:	d02e      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d828      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800404e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004052:	d02a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004058:	d822      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800405a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800405e:	d026      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004064:	d81c      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406a:	d010      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800406c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004070:	d816      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01d      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d111      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f000 ffce 	bl	8005024 <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800408c:	e012      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3324      	adds	r3, #36	; 0x24
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f001 f877 	bl	8005188 <RCCEx_PLL3_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800409e:	e009      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
      break;
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80040a6:	bf00      	nop
 80040a8:	e004      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80040b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040ba:	4b54      	ldr	r3, [pc, #336]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	4951      	ldr	r1, [pc, #324]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	650b      	str	r3, [r1, #80]	; 0x50
 80040cc:	e001      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e8:	d02e      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80040ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ee:	d828      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d02a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d822      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004100:	d026      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004106:	d81c      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410c:	d010      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800410e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004112:	d816      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01d      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411c:	d111      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 ff7d 	bl	8005024 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800412e:	e012      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f826 	bl	8005188 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004140:	e009      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800415c:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800416a:	4928      	ldr	r1, [pc, #160]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	658b      	str	r3, [r1, #88]	; 0x58
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02f      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d00e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d814      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d015      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d10f      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041a8:	e00c      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3304      	adds	r3, #4
 80041ae:	2101      	movs	r1, #1
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 ff37 	bl	8005024 <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041ba:	e003      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80041c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	490d      	ldr	r1, [pc, #52]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	650b      	str	r3, [r1, #80]	; 0x50
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d033      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d81c      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004237 	.word	0x08004237
 8004200:	08004211 	.word	0x08004211
 8004204:	0800421f 	.word	0x0800421f
 8004208:	08004237 	.word	0x08004237
 800420c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004210:	4bb8      	ldr	r3, [pc, #736]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4ab7      	ldr	r2, [pc, #732]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800421c:	e00c      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	2102      	movs	r1, #2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fefd 	bl	8005024 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800423e:	4bad      	ldr	r3, [pc, #692]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	49aa      	ldr	r1, [pc, #680]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8086 	beq.w	8004370 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004264:	4ba4      	ldr	r3, [pc, #656]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4aa3      	ldr	r2, [pc, #652]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004270:	f7fd fb44 	bl	80018fc <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fd fb40 	bl	80018fc <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	75fb      	strb	r3, [r7, #23]
        break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428c:	4b9a      	ldr	r3, [pc, #616]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d166      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800429e:	4b95      	ldr	r3, [pc, #596]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a8:	4053      	eors	r3, r2
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d013      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b2:	4b90      	ldr	r3, [pc, #576]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b8d      	ldr	r3, [pc, #564]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a8c      	ldr	r2, [pc, #560]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c8:	4b8a      	ldr	r3, [pc, #552]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a89      	ldr	r2, [pc, #548]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042d4:	4a87      	ldr	r2, [pc, #540]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d115      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fd fb09 	bl	80018fc <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ec:	e00b      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fd fb05 	bl	80018fc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	75fb      	strb	r3, [r7, #23]
            break;
 8004304:	e005      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004306:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ed      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d126      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004326:	d10d      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004328:	4b72      	ldr	r3, [pc, #456]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004336:	0919      	lsrs	r1, r3, #4
 8004338:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800433a:	400b      	ands	r3, r1
 800433c:	496d      	ldr	r1, [pc, #436]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]
 8004342:	e005      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004344:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	4a6a      	ldr	r2, [pc, #424]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800434a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800434e:	6113      	str	r3, [r2, #16]
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	4965      	ldr	r1, [pc, #404]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	670b      	str	r3, [r1, #112]	; 0x70
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	75bb      	strb	r3, [r7, #22]
 800436a:	e001      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d07e      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004380:	2b28      	cmp	r3, #40	; 0x28
 8004382:	d867      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800445b 	.word	0x0800445b
 8004390:	08004455 	.word	0x08004455
 8004394:	08004455 	.word	0x08004455
 8004398:	08004455 	.word	0x08004455
 800439c:	08004455 	.word	0x08004455
 80043a0:	08004455 	.word	0x08004455
 80043a4:	08004455 	.word	0x08004455
 80043a8:	08004455 	.word	0x08004455
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004455 	.word	0x08004455
 80043b4:	08004455 	.word	0x08004455
 80043b8:	08004455 	.word	0x08004455
 80043bc:	08004455 	.word	0x08004455
 80043c0:	08004455 	.word	0x08004455
 80043c4:	08004455 	.word	0x08004455
 80043c8:	08004455 	.word	0x08004455
 80043cc:	08004443 	.word	0x08004443
 80043d0:	08004455 	.word	0x08004455
 80043d4:	08004455 	.word	0x08004455
 80043d8:	08004455 	.word	0x08004455
 80043dc:	08004455 	.word	0x08004455
 80043e0:	08004455 	.word	0x08004455
 80043e4:	08004455 	.word	0x08004455
 80043e8:	08004455 	.word	0x08004455
 80043ec:	0800445b 	.word	0x0800445b
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004455 	.word	0x08004455
 80043f8:	08004455 	.word	0x08004455
 80043fc:	08004455 	.word	0x08004455
 8004400:	08004455 	.word	0x08004455
 8004404:	08004455 	.word	0x08004455
 8004408:	08004455 	.word	0x08004455
 800440c:	0800445b 	.word	0x0800445b
 8004410:	08004455 	.word	0x08004455
 8004414:	08004455 	.word	0x08004455
 8004418:	08004455 	.word	0x08004455
 800441c:	08004455 	.word	0x08004455
 8004420:	08004455 	.word	0x08004455
 8004424:	08004455 	.word	0x08004455
 8004428:	08004455 	.word	0x08004455
 800442c:	0800445b 	.word	0x0800445b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fdf4 	bl	8005024 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004440:	e00c      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fe9d 	bl	8005188 <RCCEx_PLL3_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
      break;
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800445a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446e:	4921      	ldr	r1, [pc, #132]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	654b      	str	r3, [r1, #84]	; 0x54
 8004474:	e001      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d03e      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	2b05      	cmp	r3, #5
 800448c:	d820      	bhi.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044d7 	.word	0x080044d7
 8004498:	080044ad 	.word	0x080044ad
 800449c:	080044bf 	.word	0x080044bf
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	080044d7 	.word	0x080044d7
 80044a8:	080044d7 	.word	0x080044d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fdb6 	bl	8005024 <RCCEx_PLL2_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044bc:	e00c      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3324      	adds	r3, #36	; 0x24
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fe5f 	bl	8005188 <RCCEx_PLL3_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
      break;
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80044d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d110      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	4902      	ldr	r1, [pc, #8]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	654b      	str	r3, [r1, #84]	; 0x54
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58024800 	.word	0x58024800
 80044fc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d039      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	2b05      	cmp	r3, #5
 8004518:	d820      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004563 	.word	0x08004563
 8004524:	08004539 	.word	0x08004539
 8004528:	0800454b 	.word	0x0800454b
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd70 	bl	8005024 <RCCEx_PLL2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004548:	e00c      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fe19 	bl	8005188 <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800455a:	e003      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456a:	4bb7      	ldr	r3, [pc, #732]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	49b3      	ldr	r1, [pc, #716]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800457a:	4313      	orrs	r3, r2
 800457c:	658b      	str	r3, [r1, #88]	; 0x58
 800457e:	e001      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d04b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800459a:	d02e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800459c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a0:	d828      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d02a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d822      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80045ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045b2:	d026      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80045b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045b8:	d81c      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80045ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045be:	d010      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d816      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01d      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ce:	d111      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fd24 	bl	8005024 <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045e0:	e012      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fdcd 	bl	8005188 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
      break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460e:	4b8e      	ldr	r3, [pc, #568]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461c:	498a      	ldr	r1, [pc, #552]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800461e:	4313      	orrs	r3, r2
 8004620:	654b      	str	r3, [r1, #84]	; 0x54
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d04b      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800463e:	d02e      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004640:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004644:	d828      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d02a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d822      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004656:	d026      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465c:	d81c      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d010      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004668:	d816      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01d      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d111      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcd2 	bl	8005024 <RCCEx_PLL2_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004684:	e012      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3324      	adds	r3, #36	; 0x24
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd7b 	bl	8005188 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004696:	e009      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
      break;
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80046aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c0:	4961      	ldr	r1, [pc, #388]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	658b      	str	r3, [r1, #88]	; 0x58
 80046c6:	e001      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d04b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046e2:	d02e      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80046e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046e8:	d828      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d02a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	d822      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046fa:	d026      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80046fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004700:	d81c      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004706:	d010      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470c:	d816      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc80 	bl	8005024 <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004728:	e012      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fd29 	bl	8005188 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800473a:	e009      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	e006      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004742:	bf00      	nop
 8004744:	e004      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004756:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004764:	4938      	ldr	r1, [pc, #224]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004766:	4313      	orrs	r3, r2
 8004768:	658b      	str	r3, [r1, #88]	; 0x58
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d10a      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3324      	adds	r3, #36	; 0x24
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fcfa 	bl	8005188 <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ac:	4926      	ldr	r1, [pc, #152]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c8:	d10a      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3324      	adds	r3, #36	; 0x24
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fcd9 	bl	8005188 <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d036      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480a:	d01f      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004810:	d817      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481a:	d009      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800481c:	e011      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fbfd 	bl	8005024 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800482e:	e00e      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fca6 	bl	8005188 <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004840:	e005      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	e002      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004848:	58024400 	.word	0x58024400
      break;
 800484c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004854:	4b93      	ldr	r3, [pc, #588]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004862:	4990      	ldr	r1, [pc, #576]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	658b      	str	r3, [r1, #88]	; 0x58
 8004868:	e001      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d033      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004884:	d01c      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488a:	d816      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800488c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004890:	d003      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004896:	d007      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489a:	4b82      	ldr	r3, [pc, #520]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a81      	ldr	r2, [pc, #516]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048a6:	e00c      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3324      	adds	r3, #36	; 0x24
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc6a 	bl	8005188 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
      break;
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80048c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c8:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	4973      	ldr	r1, [pc, #460]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	654b      	str	r3, [r1, #84]	; 0x54
 80048dc:	e001      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d029      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d007      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fe:	4b69      	ldr	r3, [pc, #420]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a68      	ldr	r2, [pc, #416]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800490a:	e00b      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fb86 	bl	8005024 <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800492a:	4b5e      	ldr	r3, [pc, #376]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	495b      	ldr	r1, [pc, #364]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800493c:	e001      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fc17 	bl	8005188 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d030      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004978:	d017      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d811      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004984:	d013      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498a:	d80b      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	d106      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a42      	ldr	r2, [pc, #264]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049a2:	e007      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80049b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ba:	4b3a      	ldr	r3, [pc, #232]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c6:	4937      	ldr	r1, [pc, #220]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	654b      	str	r3, [r1, #84]	; 0x54
 80049cc:	e001      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	492e      	ldr	r1, [pc, #184]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049fc:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a0a:	4926      	ldr	r1, [pc, #152]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a1c:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a28:	491e      	ldr	r1, [pc, #120]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a44:	6113      	str	r3, [r2, #16]
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a50:	4914      	ldr	r1, [pc, #80]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da08      	bge.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	490e      	ldr	r1, [pc, #56]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	4906      	ldr	r1, [pc, #24]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58024400 	.word	0x58024400

08004aa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004aac:	f7ff f860 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	08007f38 	.word	0x08007f38

08004ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004adc:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ae6:	4b9f      	ldr	r3, [pc, #636]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	0b1b      	lsrs	r3, r3, #12
 8004aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004af2:	4b9c      	ldr	r3, [pc, #624]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004afe:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8111 	beq.w	8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f200 80a1 	bhi.w	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d056      	beq.n	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b3e:	e099      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b40:	4b88      	ldr	r3, [pc, #544]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b4c:	4b85      	ldr	r3, [pc, #532]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a84      	ldr	r2, [pc, #528]	; (8004d68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ba6:	e087      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bea:	e065      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2e:	e043      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c72:	e021      	b.n	8004cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cde:	ee17 2a90 	vmov	r2, s15
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 2a90 	vmov	r2, s15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d42:	e008      	b.n	8004d56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
}
 8004d56:	bf00      	nop
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	58024400 	.word	0x58024400
 8004d68:	03d09000 	.word	0x03d09000
 8004d6c:	46000000 	.word	0x46000000
 8004d70:	4c742400 	.word	0x4c742400
 8004d74:	4a742400 	.word	0x4a742400
 8004d78:	4af42400 	.word	0x4af42400

08004d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d84:	4ba1      	ldr	r3, [pc, #644]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d8e:	4b9f      	ldr	r3, [pc, #636]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	0d1b      	lsrs	r3, r3, #20
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d9a:	4b9c      	ldr	r3, [pc, #624]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004da6:	4b99      	ldr	r3, [pc, #612]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8111 	beq.w	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f000 8083 	beq.w	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	f200 80a1 	bhi.w	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d056      	beq.n	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004de6:	e099      	b.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de8:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02d      	beq.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004df4:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	4a84      	ldr	r2, [pc, #528]	; (8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
 8004e04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b7b      	ldr	r3, [pc, #492]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e4e:	e087      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b6a      	ldr	r3, [pc, #424]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e92:	e065      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed6:	e043      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eea:	4b48      	ldr	r3, [pc, #288]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f1a:	e021      	b.n	8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2e:	4b37      	ldr	r3, [pc, #220]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	0a5b      	lsrs	r3, r3, #9
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f86:	ee17 2a90 	vmov	r2, s15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb4:	ee17 2a90 	vmov	r2, s15
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004fbc:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe2:	ee17 2a90 	vmov	r2, s15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fea:	e008      	b.n	8004ffe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
}
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
 8005010:	03d09000 	.word	0x03d09000
 8005014:	46000000 	.word	0x46000000
 8005018:	4c742400 	.word	0x4c742400
 800501c:	4a742400 	.word	0x4a742400
 8005020:	4af42400 	.word	0x4af42400

08005024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005032:	4b53      	ldr	r3, [pc, #332]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d101      	bne.n	8005042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e099      	b.n	8005176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005042:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc fc55 	bl	80018fc <HAL_GetTick>
 8005052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005054:	e008      	b.n	8005068 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005056:	f7fc fc51 	bl	80018fc <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e086      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	493f      	ldr	r1, [pc, #252]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050b8:	4931      	ldr	r1, [pc, #196]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	492d      	ldr	r1, [pc, #180]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f023 0220 	bic.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4928      	ldr	r1, [pc, #160]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a26      	ldr	r2, [pc, #152]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <RCCEx_PLL2_Config+0x160>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69d2      	ldr	r2, [r2, #28]
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	4920      	ldr	r1, [pc, #128]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005102:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005108:	f043 0310 	orr.w	r3, r3, #16
 800510c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005120:	e00f      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005134:	e005      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc fbd5 	bl	80018fc <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005156:	f7fc fbd1 	bl	80018fc <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
 8005184:	ffff0007 	.word	0xffff0007

08005188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005196:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d101      	bne.n	80051a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e099      	b.n	80052da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051a6:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b2:	f7fc fba3 	bl	80018fc <HAL_GetTick>
 80051b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051ba:	f7fc fb9f 	bl	80018fc <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e086      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	493f      	ldr	r1, [pc, #252]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	628b      	str	r3, [r1, #40]	; 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	025b      	lsls	r3, r3, #9
 80051fe:	b29b      	uxth	r3, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	3b01      	subs	r3, #1
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800521c:	4931      	ldr	r1, [pc, #196]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005234:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005246:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <RCCEx_PLL3_Config+0x160>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	69d2      	ldr	r2, [r2, #28]
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4920      	ldr	r1, [pc, #128]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005284:	e00f      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d106      	bne.n	800529a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005298:	e005      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc fb23 	bl	80018fc <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052ba:	f7fc fb1f 	bl	80018fc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	ffff0007 	.word	0xffff0007

080052ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e049      	b.n	8005392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb ffe6 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fd30 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e049      	b.n	8005440 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f841 	bl	8005448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fcd9 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start_IT+0x24>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e03c      	b.n	80054fa <HAL_TIM_PWM_Start_IT+0x9e>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b04      	cmp	r3, #4
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start_IT+0x3e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e02f      	b.n	80054fa <HAL_TIM_PWM_Start_IT+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start_IT+0x58>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e022      	b.n	80054fa <HAL_TIM_PWM_Start_IT+0x9e>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d109      	bne.n	80054ce <HAL_TIM_PWM_Start_IT+0x72>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e015      	b.n	80054fa <HAL_TIM_PWM_Start_IT+0x9e>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start_IT+0x8c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e008      	b.n	80054fa <HAL_TIM_PWM_Start_IT+0x9e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0e2      	b.n	80056c8 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start_IT+0xb6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	e023      	b.n	800555a <HAL_TIM_PWM_Start_IT+0xfe>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start_IT+0xc6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005520:	e01b      	b.n	800555a <HAL_TIM_PWM_Start_IT+0xfe>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start_IT+0xd6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005530:	e013      	b.n	800555a <HAL_TIM_PWM_Start_IT+0xfe>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start_IT+0xe6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005540:	e00b      	b.n	800555a <HAL_TIM_PWM_Start_IT+0xfe>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start_IT+0xf6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	e003      	b.n	800555a <HAL_TIM_PWM_Start_IT+0xfe>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d841      	bhi.n	80055e4 <HAL_TIM_PWM_Start_IT+0x188>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080055e5 	.word	0x080055e5
 8005570:	080055e5 	.word	0x080055e5
 8005574:	080055e5 	.word	0x080055e5
 8005578:	080055af 	.word	0x080055af
 800557c:	080055e5 	.word	0x080055e5
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080055e5 	.word	0x080055e5
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055e5 	.word	0x080055e5
 8005590:	080055e5 	.word	0x080055e5
 8005594:	080055e5 	.word	0x080055e5
 8005598:	080055d3 	.word	0x080055d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0202 	orr.w	r2, r2, #2
 80055aa:	60da      	str	r2, [r3, #12]
      break;
 80055ac:	e01b      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0204 	orr.w	r2, r2, #4
 80055bc:	60da      	str	r2, [r3, #12]
      break;
 80055be:	e012      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	60da      	str	r2, [r3, #12]
      break;
 80055d0:	e009      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0210 	orr.w	r2, r2, #16
 80055e0:	60da      	str	r2, [r3, #12]
      break;
 80055e2:	e000      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80055e4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2201      	movs	r2, #1
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 ffd4 	bl	800659c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <HAL_TIM_PWM_Start_IT+0x274>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIM_PWM_Start_IT+0x1ca>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <HAL_TIM_PWM_Start_IT+0x278>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a32      	ldr	r2, [pc, #200]	; (80056d8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a31      	ldr	r2, [pc, #196]	; (80056dc <HAL_TIM_PWM_Start_IT+0x280>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIM_PWM_Start_IT+0x1ca>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <HAL_TIM_PWM_Start_IT+0x284>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Start_IT+0x1ce>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_TIM_PWM_Start_IT+0x1d0>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <HAL_TIM_PWM_Start_IT+0x274>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01d      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d018      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_TIM_PWM_Start_IT+0x288>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_TIM_PWM_Start_IT+0x290>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a17      	ldr	r2, [pc, #92]	; (80056d4 <HAL_TIM_PWM_Start_IT+0x278>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_PWM_Start_IT+0x22a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIM_PWM_Start_IT+0x294>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d115      	bne.n	80056b2 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <HAL_TIM_PWM_Start_IT+0x298>)
 800568e:	4013      	ands	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d015      	beq.n	80056c4 <HAL_TIM_PWM_Start_IT+0x268>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569e:	d011      	beq.n	80056c4 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	e008      	b.n	80056c4 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e000      	b.n	80056c6 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40001800 	.word	0x40001800
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0202 	mvn.w	r2, #2
 8005724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fb14 	bl	8005d68 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb06 	bl	8005d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fb fbe1 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0204 	mvn.w	r2, #4
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 faea 	bl	8005d68 <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fadc 	bl	8005d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fbb7 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0208 	mvn.w	r2, #8
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fac0 	bl	8005d68 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fab2 	bl	8005d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fb fb8d 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b10      	cmp	r3, #16
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa96 	bl	8005d68 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa88 	bl	8005d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fb fb63 	bl	8000f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0201 	mvn.w	r2, #1
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa62 	bl	8005d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 ff32 	bl	800670c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b6:	d10e      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 ff25 	bl	8006720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d10e      	bne.n	8005902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d107      	bne.n	8005902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa3d 	bl	8005d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d10e      	bne.n	800592e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b20      	cmp	r3, #32
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0220 	mvn.w	r2, #32
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fee5 	bl	80066f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800594e:	2302      	movs	r3, #2
 8005950:	e0fd      	b.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b14      	cmp	r3, #20
 800595e:	f200 80f0 	bhi.w	8005b42 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005962:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005b43 	.word	0x08005b43
 8005970:	08005b43 	.word	0x08005b43
 8005974:	08005b43 	.word	0x08005b43
 8005978:	080059fd 	.word	0x080059fd
 800597c:	08005b43 	.word	0x08005b43
 8005980:	08005b43 	.word	0x08005b43
 8005984:	08005b43 	.word	0x08005b43
 8005988:	08005a3f 	.word	0x08005a3f
 800598c:	08005b43 	.word	0x08005b43
 8005990:	08005b43 	.word	0x08005b43
 8005994:	08005b43 	.word	0x08005b43
 8005998:	08005a7f 	.word	0x08005a7f
 800599c:	08005b43 	.word	0x08005b43
 80059a0:	08005b43 	.word	0x08005b43
 80059a4:	08005b43 	.word	0x08005b43
 80059a8:	08005ac1 	.word	0x08005ac1
 80059ac:	08005b43 	.word	0x08005b43
 80059b0:	08005b43 	.word	0x08005b43
 80059b4:	08005b43 	.word	0x08005b43
 80059b8:	08005b01 	.word	0x08005b01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa7e 	bl	8005ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0208 	orr.w	r2, r2, #8
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0204 	bic.w	r2, r2, #4
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	619a      	str	r2, [r3, #24]
      break;
 80059fa:	e0a3      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 faee 	bl	8005fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	619a      	str	r2, [r3, #24]
      break;
 8005a3c:	e082      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb57 	bl	80060f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0204 	bic.w	r2, r2, #4
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	61da      	str	r2, [r3, #28]
      break;
 8005a7c:	e062      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fbbd 	bl	8006204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69d9      	ldr	r1, [r3, #28]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	021a      	lsls	r2, r3, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	61da      	str	r2, [r3, #28]
      break;
 8005abe:	e041      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fc04 	bl	80062d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0204 	bic.w	r2, r2, #4
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005afe:	e021      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc46 	bl	8006398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005b42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIM_ConfigClockSource+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0db      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x1d0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4b69      	ldr	r3, [pc, #420]	; (8005d30 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a63      	ldr	r2, [pc, #396]	; (8005d34 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f000 80a9 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005bac:	4a61      	ldr	r2, [pc, #388]	; (8005d34 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f200 80ae 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005bb4:	4a60      	ldr	r2, [pc, #384]	; (8005d38 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f000 80a1 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005bbc:	4a5e      	ldr	r2, [pc, #376]	; (8005d38 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f200 80a6 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005bc4:	4a5d      	ldr	r2, [pc, #372]	; (8005d3c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f000 8099 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005bcc:	4a5b      	ldr	r2, [pc, #364]	; (8005d3c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f200 809e 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005bd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bd8:	f000 8091 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005bdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be0:	f200 8096 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be8:	f000 8089 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	f200 808e 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf8:	d03e      	beq.n	8005c78 <HAL_TIM_ConfigClockSource+0x120>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	f200 8087 	bhi.w	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	f000 8085 	beq.w	8005d14 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	d87f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c10:	2b70      	cmp	r3, #112	; 0x70
 8005c12:	d01a      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0xf2>
 8005c14:	2b70      	cmp	r3, #112	; 0x70
 8005c16:	d87b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d050      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x166>
 8005c1c:	2b60      	cmp	r3, #96	; 0x60
 8005c1e:	d877      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c20:	2b50      	cmp	r3, #80	; 0x50
 8005c22:	d03c      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x146>
 8005c24:	2b50      	cmp	r3, #80	; 0x50
 8005c26:	d873      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d058      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x186>
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d86f      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d064      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d86b      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d060      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d867      	bhi.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d05c      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d05a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c48:	e062      	b.n	8005d10 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f000 fc7f 	bl	800655c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	609a      	str	r2, [r3, #8]
      break;
 8005c76:	e04e      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6899      	ldr	r1, [r3, #8]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f000 fc68 	bl	800655c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c9a:	609a      	str	r2, [r3, #8]
      break;
 8005c9c:	e03b      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 fbd8 	bl	8006460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2150      	movs	r1, #80	; 0x50
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fc32 	bl	8006520 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e02b      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 fbf7 	bl	80064be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2160      	movs	r1, #96	; 0x60
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fc22 	bl	8006520 <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e01b      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f000 fbb8 	bl	8006460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fc12 	bl	8006520 <TIM_ITRx_SetConfig>
      break;
 8005cfc:	e00b      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fc09 	bl	8006520 <TIM_ITRx_SetConfig>
        break;
 8005d0e:	e002      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005d14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	ffceff88 	.word	0xffceff88
 8005d34:	00100040 	.word	0x00100040
 8005d38:	00100030 	.word	0x00100030
 8005d3c:	00100020 	.word	0x00100020

08005d40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a40      	ldr	r2, [pc, #256]	; (8005ea4 <TIM_Base_SetConfig+0x114>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d00f      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3d      	ldr	r2, [pc, #244]	; (8005ea8 <TIM_Base_SetConfig+0x118>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3c      	ldr	r2, [pc, #240]	; (8005eac <TIM_Base_SetConfig+0x11c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <TIM_Base_SetConfig+0x120>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3a      	ldr	r2, [pc, #232]	; (8005eb4 <TIM_Base_SetConfig+0x124>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d108      	bne.n	8005de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <TIM_Base_SetConfig+0x114>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <TIM_Base_SetConfig+0x118>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2b      	ldr	r2, [pc, #172]	; (8005eac <TIM_Base_SetConfig+0x11c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2a      	ldr	r2, [pc, #168]	; (8005eb0 <TIM_Base_SetConfig+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a29      	ldr	r2, [pc, #164]	; (8005eb4 <TIM_Base_SetConfig+0x124>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <TIM_Base_SetConfig+0x128>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <TIM_Base_SetConfig+0x130>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a10      	ldr	r2, [pc, #64]	; (8005ea4 <TIM_Base_SetConfig+0x114>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00f      	beq.n	8005e88 <TIM_Base_SetConfig+0xf8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <TIM_Base_SetConfig+0xf8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <TIM_Base_SetConfig+0x128>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_Base_SetConfig+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_Base_SetConfig+0xf8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a0f      	ldr	r2, [pc, #60]	; (8005ec0 <TIM_Base_SetConfig+0x130>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d103      	bne.n	8005e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	615a      	str	r2, [r3, #20]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40010400 	.word	0x40010400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <TIM_OC1_SetConfig+0x108>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0302 	bic.w	r3, r3, #2
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2d      	ldr	r2, [pc, #180]	; (8005fd0 <TIM_OC1_SetConfig+0x10c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_OC1_SetConfig+0x7c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <TIM_OC1_SetConfig+0x110>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <TIM_OC1_SetConfig+0x7c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <TIM_OC1_SetConfig+0x114>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_OC1_SetConfig+0x7c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a2a      	ldr	r2, [pc, #168]	; (8005fdc <TIM_OC1_SetConfig+0x118>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC1_SetConfig+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <TIM_OC1_SetConfig+0x11c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0308 	bic.w	r3, r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <TIM_OC1_SetConfig+0x10c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00f      	beq.n	8005f82 <TIM_OC1_SetConfig+0xbe>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <TIM_OC1_SetConfig+0x110>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <TIM_OC1_SetConfig+0xbe>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <TIM_OC1_SetConfig+0x114>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_OC1_SetConfig+0xbe>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <TIM_OC1_SetConfig+0x118>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC1_SetConfig+0xbe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <TIM_OC1_SetConfig+0x11c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d111      	bne.n	8005fa6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	621a      	str	r2, [r3, #32]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	fffeff8f 	.word	0xfffeff8f
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800

08005fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4b34      	ldr	r3, [pc, #208]	; (80060e0 <TIM_OC2_SetConfig+0xfc>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0320 	bic.w	r3, r3, #32
 800602e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_OC2_SetConfig+0x100>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC2_SetConfig+0x68>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_OC2_SetConfig+0x104>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10d      	bne.n	8006068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <TIM_OC2_SetConfig+0x100>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_OC2_SetConfig+0xac>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <TIM_OC2_SetConfig+0x104>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_OC2_SetConfig+0xac>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <TIM_OC2_SetConfig+0x108>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC2_SetConfig+0xac>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <TIM_OC2_SetConfig+0x10c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0xac>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1a      	ldr	r2, [pc, #104]	; (80060f4 <TIM_OC2_SetConfig+0x110>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d113      	bne.n	80060b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	feff8fff 	.word	0xfeff8fff
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a27      	ldr	r2, [pc, #156]	; (80061f0 <TIM_OC3_SetConfig+0xf8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC3_SetConfig+0x66>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a26      	ldr	r2, [pc, #152]	; (80061f4 <TIM_OC3_SetConfig+0xfc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d10d      	bne.n	800617a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1c      	ldr	r2, [pc, #112]	; (80061f0 <TIM_OC3_SetConfig+0xf8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_OC3_SetConfig+0xaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <TIM_OC3_SetConfig+0xfc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_OC3_SetConfig+0xaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <TIM_OC3_SetConfig+0x100>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC3_SetConfig+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a19      	ldr	r2, [pc, #100]	; (80061fc <TIM_OC3_SetConfig+0x104>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0xaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <TIM_OC3_SetConfig+0x108>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d113      	bne.n	80061ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800624e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <TIM_OC4_SetConfig+0xbc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_OC4_SetConfig+0x80>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <TIM_OC4_SetConfig+0xc0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_OC4_SetConfig+0x80>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC4_SetConfig+0xc4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_OC4_SetConfig+0x80>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a15      	ldr	r2, [pc, #84]	; (80062cc <TIM_OC4_SetConfig+0xc8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC4_SetConfig+0x80>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <TIM_OC4_SetConfig+0xcc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d109      	bne.n	8006298 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a17      	ldr	r2, [pc, #92]	; (8006384 <TIM_OC5_SetConfig+0xb0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00f      	beq.n	800634a <TIM_OC5_SetConfig+0x76>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <TIM_OC5_SetConfig+0xb4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00b      	beq.n	800634a <TIM_OC5_SetConfig+0x76>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <TIM_OC5_SetConfig+0xb8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <TIM_OC5_SetConfig+0x76>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a14      	ldr	r2, [pc, #80]	; (8006390 <TIM_OC5_SetConfig+0xbc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_OC5_SetConfig+0x76>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a13      	ldr	r2, [pc, #76]	; (8006394 <TIM_OC5_SetConfig+0xc0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d109      	bne.n	800635e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800

08006398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	051b      	lsls	r3, r3, #20
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <TIM_OC6_SetConfig+0xb4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC6_SetConfig+0x78>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a17      	ldr	r2, [pc, #92]	; (8006450 <TIM_OC6_SetConfig+0xb8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC6_SetConfig+0x78>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <TIM_OC6_SetConfig+0xbc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC6_SetConfig+0x78>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a15      	ldr	r2, [pc, #84]	; (8006458 <TIM_OC6_SetConfig+0xc0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC6_SetConfig+0x78>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a14      	ldr	r2, [pc, #80]	; (800645c <TIM_OC6_SetConfig+0xc4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d109      	bne.n	8006424 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40010400 	.word	0x40010400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800648a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 030a 	bic.w	r3, r3, #10
 800649c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0210 	bic.w	r2, r3, #16
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <TIM_ITRx_SetConfig+0x38>)
 8006534:	4013      	ands	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	f043 0307 	orr.w	r3, r3, #7
 8006542:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	609a      	str	r2, [r3, #8]
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	ffcfff8f 	.word	0xffcfff8f

0800655c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	431a      	orrs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	2201      	movs	r2, #1
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	43db      	mvns	r3, r3
 80065be:	401a      	ands	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	fa01 f303 	lsl.w	r3, r1, r3
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e068      	b.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d108      	bne.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800663a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01d      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d018      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10c      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40001800 	.word	0x40001800

080066f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e042      	b.n	80067cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fa fe27 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2224      	movs	r2, #36	; 0x24
 8006762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f82c 	bl	80067d4 <UART_SetConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e022      	b.n	80067cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fd80 	bl	8007294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fe07 	bl	80073d8 <UART_CheckIdleState>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d4:	b5b0      	push	{r4, r5, r7, lr}
 80067d6:	b08e      	sub	sp, #56	; 0x38
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4bbf      	ldr	r3, [pc, #764]	; (8006b00 <UART_SetConfig+0x32c>)
 8006802:	4013      	ands	r3, r2
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800680a:	430b      	orrs	r3, r1
 800680c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4ab5      	ldr	r2, [pc, #724]	; (8006b04 <UART_SetConfig+0x330>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683a:	4313      	orrs	r3, r2
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	4bb0      	ldr	r3, [pc, #704]	; (8006b08 <UART_SetConfig+0x334>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800684e:	430b      	orrs	r3, r1
 8006850:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f023 010f 	bic.w	r1, r3, #15
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4aa7      	ldr	r2, [pc, #668]	; (8006b0c <UART_SetConfig+0x338>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d176      	bne.n	8006960 <UART_SetConfig+0x18c>
 8006872:	4ba7      	ldr	r3, [pc, #668]	; (8006b10 <UART_SetConfig+0x33c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687a:	2b28      	cmp	r3, #40	; 0x28
 800687c:	d86c      	bhi.n	8006958 <UART_SetConfig+0x184>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0xb0>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006929 	.word	0x08006929
 8006888:	08006959 	.word	0x08006959
 800688c:	08006959 	.word	0x08006959
 8006890:	08006959 	.word	0x08006959
 8006894:	08006959 	.word	0x08006959
 8006898:	08006959 	.word	0x08006959
 800689c:	08006959 	.word	0x08006959
 80068a0:	08006959 	.word	0x08006959
 80068a4:	08006931 	.word	0x08006931
 80068a8:	08006959 	.word	0x08006959
 80068ac:	08006959 	.word	0x08006959
 80068b0:	08006959 	.word	0x08006959
 80068b4:	08006959 	.word	0x08006959
 80068b8:	08006959 	.word	0x08006959
 80068bc:	08006959 	.word	0x08006959
 80068c0:	08006959 	.word	0x08006959
 80068c4:	08006939 	.word	0x08006939
 80068c8:	08006959 	.word	0x08006959
 80068cc:	08006959 	.word	0x08006959
 80068d0:	08006959 	.word	0x08006959
 80068d4:	08006959 	.word	0x08006959
 80068d8:	08006959 	.word	0x08006959
 80068dc:	08006959 	.word	0x08006959
 80068e0:	08006959 	.word	0x08006959
 80068e4:	08006941 	.word	0x08006941
 80068e8:	08006959 	.word	0x08006959
 80068ec:	08006959 	.word	0x08006959
 80068f0:	08006959 	.word	0x08006959
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006959 	.word	0x08006959
 80068fc:	08006959 	.word	0x08006959
 8006900:	08006959 	.word	0x08006959
 8006904:	08006949 	.word	0x08006949
 8006908:	08006959 	.word	0x08006959
 800690c:	08006959 	.word	0x08006959
 8006910:	08006959 	.word	0x08006959
 8006914:	08006959 	.word	0x08006959
 8006918:	08006959 	.word	0x08006959
 800691c:	08006959 	.word	0x08006959
 8006920:	08006959 	.word	0x08006959
 8006924:	08006951 	.word	0x08006951
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692e:	e222      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006936:	e21e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693e:	e21a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006946:	e216      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006948:	2320      	movs	r3, #32
 800694a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694e:	e212      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006956:	e20e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695e:	e20a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6b      	ldr	r2, [pc, #428]	; (8006b14 <UART_SetConfig+0x340>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d130      	bne.n	80069cc <UART_SetConfig+0x1f8>
 800696a:	4b69      	ldr	r3, [pc, #420]	; (8006b10 <UART_SetConfig+0x33c>)
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	2b05      	cmp	r3, #5
 8006974:	d826      	bhi.n	80069c4 <UART_SetConfig+0x1f0>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x1a8>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	08006995 	.word	0x08006995
 8006980:	0800699d 	.word	0x0800699d
 8006984:	080069a5 	.word	0x080069a5
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069bd 	.word	0x080069bd
 8006994:	2300      	movs	r3, #0
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699a:	e1ec      	b.n	8006d76 <UART_SetConfig+0x5a2>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a2:	e1e8      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069aa:	e1e4      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b2:	e1e0      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069b4:	2320      	movs	r3, #32
 80069b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ba:	e1dc      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c2:	e1d8      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ca:	e1d4      	b.n	8006d76 <UART_SetConfig+0x5a2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a51      	ldr	r2, [pc, #324]	; (8006b18 <UART_SetConfig+0x344>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d130      	bne.n	8006a38 <UART_SetConfig+0x264>
 80069d6:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <UART_SetConfig+0x33c>)
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d826      	bhi.n	8006a30 <UART_SetConfig+0x25c>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x214>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a01 	.word	0x08006a01
 80069ec:	08006a09 	.word	0x08006a09
 80069f0:	08006a11 	.word	0x08006a11
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	e1b6      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a0e:	e1b2      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a16:	e1ae      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a1e:	e1aa      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a20:	2320      	movs	r3, #32
 8006a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a26:	e1a6      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a2e:	e1a2      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a36:	e19e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a37      	ldr	r2, [pc, #220]	; (8006b1c <UART_SetConfig+0x348>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d130      	bne.n	8006aa4 <UART_SetConfig+0x2d0>
 8006a42:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <UART_SetConfig+0x33c>)
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d826      	bhi.n	8006a9c <UART_SetConfig+0x2c8>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x280>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	08006a7d 	.word	0x08006a7d
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a72:	e180      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7a:	e17c      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a82:	e178      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8a:	e174      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a92:	e170      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9a:	e16c      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e168      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <UART_SetConfig+0x34c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d142      	bne.n	8006b34 <UART_SetConfig+0x360>
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <UART_SetConfig+0x33c>)
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d838      	bhi.n	8006b2c <UART_SetConfig+0x358>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0x2ec>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ad9 	.word	0x08006ad9
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ae9 	.word	0x08006ae9
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006b25 	.word	0x08006b25
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e14a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e146      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e142      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e13e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006af8:	2320      	movs	r3, #32
 8006afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afe:	e13a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006b00:	cfff69f3 	.word	0xcfff69f3
 8006b04:	58000c00 	.word	0x58000c00
 8006b08:	11fff4ff 	.word	0x11fff4ff
 8006b0c:	40011000 	.word	0x40011000
 8006b10:	58024400 	.word	0x58024400
 8006b14:	40004400 	.word	0x40004400
 8006b18:	40004800 	.word	0x40004800
 8006b1c:	40004c00 	.word	0x40004c00
 8006b20:	40005000 	.word	0x40005000
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e124      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e120      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4acc      	ldr	r2, [pc, #816]	; (8006e6c <UART_SetConfig+0x698>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d176      	bne.n	8006c2c <UART_SetConfig+0x458>
 8006b3e:	4bcc      	ldr	r3, [pc, #816]	; (8006e70 <UART_SetConfig+0x69c>)
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b46:	2b28      	cmp	r3, #40	; 0x28
 8006b48:	d86c      	bhi.n	8006c24 <UART_SetConfig+0x450>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x37c>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006bf5 	.word	0x08006bf5
 8006b54:	08006c25 	.word	0x08006c25
 8006b58:	08006c25 	.word	0x08006c25
 8006b5c:	08006c25 	.word	0x08006c25
 8006b60:	08006c25 	.word	0x08006c25
 8006b64:	08006c25 	.word	0x08006c25
 8006b68:	08006c25 	.word	0x08006c25
 8006b6c:	08006c25 	.word	0x08006c25
 8006b70:	08006bfd 	.word	0x08006bfd
 8006b74:	08006c25 	.word	0x08006c25
 8006b78:	08006c25 	.word	0x08006c25
 8006b7c:	08006c25 	.word	0x08006c25
 8006b80:	08006c25 	.word	0x08006c25
 8006b84:	08006c25 	.word	0x08006c25
 8006b88:	08006c25 	.word	0x08006c25
 8006b8c:	08006c25 	.word	0x08006c25
 8006b90:	08006c05 	.word	0x08006c05
 8006b94:	08006c25 	.word	0x08006c25
 8006b98:	08006c25 	.word	0x08006c25
 8006b9c:	08006c25 	.word	0x08006c25
 8006ba0:	08006c25 	.word	0x08006c25
 8006ba4:	08006c25 	.word	0x08006c25
 8006ba8:	08006c25 	.word	0x08006c25
 8006bac:	08006c25 	.word	0x08006c25
 8006bb0:	08006c0d 	.word	0x08006c0d
 8006bb4:	08006c25 	.word	0x08006c25
 8006bb8:	08006c25 	.word	0x08006c25
 8006bbc:	08006c25 	.word	0x08006c25
 8006bc0:	08006c25 	.word	0x08006c25
 8006bc4:	08006c25 	.word	0x08006c25
 8006bc8:	08006c25 	.word	0x08006c25
 8006bcc:	08006c25 	.word	0x08006c25
 8006bd0:	08006c15 	.word	0x08006c15
 8006bd4:	08006c25 	.word	0x08006c25
 8006bd8:	08006c25 	.word	0x08006c25
 8006bdc:	08006c25 	.word	0x08006c25
 8006be0:	08006c25 	.word	0x08006c25
 8006be4:	08006c25 	.word	0x08006c25
 8006be8:	08006c25 	.word	0x08006c25
 8006bec:	08006c25 	.word	0x08006c25
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfa:	e0bc      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c02:	e0b8      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0a:	e0b4      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e0b0      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c14:	2320      	movs	r3, #32
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e0ac      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e0a8      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e0a4      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a90      	ldr	r2, [pc, #576]	; (8006e74 <UART_SetConfig+0x6a0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d130      	bne.n	8006c98 <UART_SetConfig+0x4c4>
 8006c36:	4b8e      	ldr	r3, [pc, #568]	; (8006e70 <UART_SetConfig+0x69c>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d826      	bhi.n	8006c90 <UART_SetConfig+0x4bc>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x474>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c79 	.word	0x08006c79
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c66:	e086      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c6e:	e082      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c76:	e07e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7e:	e07a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c80:	2320      	movs	r3, #32
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c86:	e076      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8e:	e072      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c96:	e06e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a76      	ldr	r2, [pc, #472]	; (8006e78 <UART_SetConfig+0x6a4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d130      	bne.n	8006d04 <UART_SetConfig+0x530>
 8006ca2:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <UART_SetConfig+0x69c>)
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d826      	bhi.n	8006cfc <UART_SetConfig+0x528>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x4e0>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006ccd 	.word	0x08006ccd
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	08006cdd 	.word	0x08006cdd
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd2:	e050      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cda:	e04c      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce2:	e048      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cea:	e044      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006cec:	2320      	movs	r3, #32
 8006cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cf2:	e040      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cfa:	e03c      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d02:	e038      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a5c      	ldr	r2, [pc, #368]	; (8006e7c <UART_SetConfig+0x6a8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d130      	bne.n	8006d70 <UART_SetConfig+0x59c>
 8006d0e:	4b58      	ldr	r3, [pc, #352]	; (8006e70 <UART_SetConfig+0x69c>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d826      	bhi.n	8006d68 <UART_SetConfig+0x594>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x54c>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d39 	.word	0x08006d39
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d49 	.word	0x08006d49
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e01a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e016      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e012      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e00e      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	e00a      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e006      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e002      	b.n	8006d76 <UART_SetConfig+0x5a2>
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a40      	ldr	r2, [pc, #256]	; (8006e7c <UART_SetConfig+0x6a8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	f040 80ef 	bne.w	8006f60 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	dc46      	bgt.n	8006e18 <UART_SetConfig+0x644>
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	f2c0 8081 	blt.w	8006e92 <UART_SetConfig+0x6be>
 8006d90:	3b02      	subs	r3, #2
 8006d92:	2b1e      	cmp	r3, #30
 8006d94:	d87d      	bhi.n	8006e92 <UART_SetConfig+0x6be>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x5c8>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006e1f 	.word	0x08006e1f
 8006da0:	08006e93 	.word	0x08006e93
 8006da4:	08006e27 	.word	0x08006e27
 8006da8:	08006e93 	.word	0x08006e93
 8006dac:	08006e93 	.word	0x08006e93
 8006db0:	08006e93 	.word	0x08006e93
 8006db4:	08006e37 	.word	0x08006e37
 8006db8:	08006e93 	.word	0x08006e93
 8006dbc:	08006e93 	.word	0x08006e93
 8006dc0:	08006e93 	.word	0x08006e93
 8006dc4:	08006e93 	.word	0x08006e93
 8006dc8:	08006e93 	.word	0x08006e93
 8006dcc:	08006e93 	.word	0x08006e93
 8006dd0:	08006e93 	.word	0x08006e93
 8006dd4:	08006e47 	.word	0x08006e47
 8006dd8:	08006e93 	.word	0x08006e93
 8006ddc:	08006e93 	.word	0x08006e93
 8006de0:	08006e93 	.word	0x08006e93
 8006de4:	08006e93 	.word	0x08006e93
 8006de8:	08006e93 	.word	0x08006e93
 8006dec:	08006e93 	.word	0x08006e93
 8006df0:	08006e93 	.word	0x08006e93
 8006df4:	08006e93 	.word	0x08006e93
 8006df8:	08006e93 	.word	0x08006e93
 8006dfc:	08006e93 	.word	0x08006e93
 8006e00:	08006e93 	.word	0x08006e93
 8006e04:	08006e93 	.word	0x08006e93
 8006e08:	08006e93 	.word	0x08006e93
 8006e0c:	08006e93 	.word	0x08006e93
 8006e10:	08006e93 	.word	0x08006e93
 8006e14:	08006e85 	.word	0x08006e85
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d036      	beq.n	8006e8a <UART_SetConfig+0x6b6>
 8006e1c:	e039      	b.n	8006e92 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e1e:	f7fd fe43 	bl	8004aa8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e24:	e03b      	b.n	8006e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e26:	f107 0314 	add.w	r3, r7, #20
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fd fe52 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e34:	e033      	b.n	8006e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fd ff9e 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e44:	e02b      	b.n	8006e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <UART_SetConfig+0x69c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <UART_SetConfig+0x69c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <UART_SetConfig+0x6ac>)
 8006e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e64:	e01b      	b.n	8006e9e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <UART_SetConfig+0x6ac>)
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e6a:	e018      	b.n	8006e9e <UART_SetConfig+0x6ca>
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	58024400 	.word	0x58024400
 8006e74:	40007800 	.word	0x40007800
 8006e78:	40007c00 	.word	0x40007c00
 8006e7c:	58000c00 	.word	0x58000c00
 8006e80:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e84:	4bc4      	ldr	r3, [pc, #784]	; (8007198 <UART_SetConfig+0x9c4>)
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e88:	e009      	b.n	8006e9e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e90:	e005      	b.n	8006e9e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 81da 	beq.w	800725a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	4abc      	ldr	r2, [pc, #752]	; (800719c <UART_SetConfig+0x9c8>)
 8006eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	6a3a      	ldr	r2, [r7, #32]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d305      	bcc.n	8006ed6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d903      	bls.n	8006ede <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006edc:	e1bd      	b.n	800725a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	4aac      	ldr	r2, [pc, #688]	; (800719c <UART_SetConfig+0x9c8>)
 8006eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	f7f9 f9ef 	bl	80002d8 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	020b      	lsls	r3, r1, #8
 8006f0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f10:	0202      	lsls	r2, r0, #8
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	6849      	ldr	r1, [r1, #4]
 8006f16:	0849      	lsrs	r1, r1, #1
 8006f18:	4608      	mov	r0, r1
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	1814      	adds	r4, r2, r0
 8006f20:	eb43 0501 	adc.w	r5, r3, r1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 f9d1 	bl	80002d8 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f44:	d308      	bcc.n	8006f58 <UART_SetConfig+0x784>
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4c:	d204      	bcs.n	8006f58 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	e180      	b.n	800725a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f5e:	e17c      	b.n	800725a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f68:	f040 80bf 	bne.w	80070ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	dc49      	bgt.n	8007008 <UART_SetConfig+0x834>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db7c      	blt.n	8007072 <UART_SetConfig+0x89e>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d87a      	bhi.n	8007072 <UART_SetConfig+0x89e>
 8006f7c:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <UART_SetConfig+0x7b0>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	0800700f 	.word	0x0800700f
 8006f88:	08007017 	.word	0x08007017
 8006f8c:	08007073 	.word	0x08007073
 8006f90:	08007073 	.word	0x08007073
 8006f94:	0800701f 	.word	0x0800701f
 8006f98:	08007073 	.word	0x08007073
 8006f9c:	08007073 	.word	0x08007073
 8006fa0:	08007073 	.word	0x08007073
 8006fa4:	0800702f 	.word	0x0800702f
 8006fa8:	08007073 	.word	0x08007073
 8006fac:	08007073 	.word	0x08007073
 8006fb0:	08007073 	.word	0x08007073
 8006fb4:	08007073 	.word	0x08007073
 8006fb8:	08007073 	.word	0x08007073
 8006fbc:	08007073 	.word	0x08007073
 8006fc0:	08007073 	.word	0x08007073
 8006fc4:	0800703f 	.word	0x0800703f
 8006fc8:	08007073 	.word	0x08007073
 8006fcc:	08007073 	.word	0x08007073
 8006fd0:	08007073 	.word	0x08007073
 8006fd4:	08007073 	.word	0x08007073
 8006fd8:	08007073 	.word	0x08007073
 8006fdc:	08007073 	.word	0x08007073
 8006fe0:	08007073 	.word	0x08007073
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	08007073 	.word	0x08007073
 8006ff0:	08007073 	.word	0x08007073
 8006ff4:	08007073 	.word	0x08007073
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	08007073 	.word	0x08007073
 8007000:	08007073 	.word	0x08007073
 8007004:	08007065 	.word	0x08007065
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d02e      	beq.n	800706a <UART_SetConfig+0x896>
 800700c:	e031      	b.n	8007072 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700e:	f7fc fddf 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8007012:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007014:	e033      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007016:	f7fc fdf1 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 800701a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800701c:	e02f      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701e:	f107 0314 	add.w	r3, r7, #20
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd fd56 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800702c:	e027      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800702e:	f107 0308 	add.w	r3, r7, #8
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd fea2 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800703c:	e01f      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703e:	4b58      	ldr	r3, [pc, #352]	; (80071a0 <UART_SetConfig+0x9cc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800704a:	4b55      	ldr	r3, [pc, #340]	; (80071a0 <UART_SetConfig+0x9cc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	4a53      	ldr	r2, [pc, #332]	; (80071a4 <UART_SetConfig+0x9d0>)
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800705c:	e00f      	b.n	800707e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800705e:	4b51      	ldr	r3, [pc, #324]	; (80071a4 <UART_SetConfig+0x9d0>)
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007062:	e00c      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007064:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <UART_SetConfig+0x9c4>)
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007068:	e009      	b.n	800707e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007070:	e005      	b.n	800707e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800707c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80ea 	beq.w	800725a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	4a44      	ldr	r2, [pc, #272]	; (800719c <UART_SetConfig+0x9c8>)
 800708c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007090:	461a      	mov	r2, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	fbb3 f3f2 	udiv	r3, r3, r2
 8007098:	005a      	lsls	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	441a      	add	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	2b0f      	cmp	r3, #15
 80070b2:	d916      	bls.n	80070e2 <UART_SetConfig+0x90e>
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ba:	d212      	bcs.n	80070e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f023 030f 	bic.w	r3, r3, #15
 80070c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070d4:	4313      	orrs	r3, r2
 80070d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070de:	60da      	str	r2, [r3, #12]
 80070e0:	e0bb      	b.n	800725a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80070e8:	e0b7      	b.n	800725a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	dc4a      	bgt.n	8007188 <UART_SetConfig+0x9b4>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f2c0 8086 	blt.w	8007204 <UART_SetConfig+0xa30>
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	f200 8083 	bhi.w	8007204 <UART_SetConfig+0xa30>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x930>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	0800718f 	.word	0x0800718f
 8007108:	080071a9 	.word	0x080071a9
 800710c:	08007205 	.word	0x08007205
 8007110:	08007205 	.word	0x08007205
 8007114:	080071b1 	.word	0x080071b1
 8007118:	08007205 	.word	0x08007205
 800711c:	08007205 	.word	0x08007205
 8007120:	08007205 	.word	0x08007205
 8007124:	080071c1 	.word	0x080071c1
 8007128:	08007205 	.word	0x08007205
 800712c:	08007205 	.word	0x08007205
 8007130:	08007205 	.word	0x08007205
 8007134:	08007205 	.word	0x08007205
 8007138:	08007205 	.word	0x08007205
 800713c:	08007205 	.word	0x08007205
 8007140:	08007205 	.word	0x08007205
 8007144:	080071d1 	.word	0x080071d1
 8007148:	08007205 	.word	0x08007205
 800714c:	08007205 	.word	0x08007205
 8007150:	08007205 	.word	0x08007205
 8007154:	08007205 	.word	0x08007205
 8007158:	08007205 	.word	0x08007205
 800715c:	08007205 	.word	0x08007205
 8007160:	08007205 	.word	0x08007205
 8007164:	08007205 	.word	0x08007205
 8007168:	08007205 	.word	0x08007205
 800716c:	08007205 	.word	0x08007205
 8007170:	08007205 	.word	0x08007205
 8007174:	08007205 	.word	0x08007205
 8007178:	08007205 	.word	0x08007205
 800717c:	08007205 	.word	0x08007205
 8007180:	08007205 	.word	0x08007205
 8007184:	080071f7 	.word	0x080071f7
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d037      	beq.n	80071fc <UART_SetConfig+0xa28>
 800718c:	e03a      	b.n	8007204 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718e:	f7fc fd1f 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8007192:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007194:	e03c      	b.n	8007210 <UART_SetConfig+0xa3c>
 8007196:	bf00      	nop
 8007198:	003d0900 	.word	0x003d0900
 800719c:	08007f48 	.word	0x08007f48
 80071a0:	58024400 	.word	0x58024400
 80071a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fc fd28 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 80071ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071ae:	e02f      	b.n	8007210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd fc8d 	bl	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071be:	e027      	b.n	8007210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071c0:	f107 0308 	add.w	r3, r7, #8
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fdd9 	bl	8004d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071ce:	e01f      	b.n	8007210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d0:	4b2c      	ldr	r3, [pc, #176]	; (8007284 <UART_SetConfig+0xab0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071dc:	4b29      	ldr	r3, [pc, #164]	; (8007284 <UART_SetConfig+0xab0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a28      	ldr	r2, [pc, #160]	; (8007288 <UART_SetConfig+0xab4>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071ee:	e00f      	b.n	8007210 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <UART_SetConfig+0xab4>)
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071f4:	e00c      	b.n	8007210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071f6:	4b25      	ldr	r3, [pc, #148]	; (800728c <UART_SetConfig+0xab8>)
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071fa:	e009      	b.n	8007210 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007202:	e005      	b.n	8007210 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800720e:	bf00      	nop
    }

    if (pclk != 0U)
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d021      	beq.n	800725a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <UART_SetConfig+0xabc>)
 800721c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007220:	461a      	mov	r2, r3
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	fbb3 f2f2 	udiv	r2, r3, r2
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2b0f      	cmp	r3, #15
 8007240:	d908      	bls.n	8007254 <UART_SetConfig+0xa80>
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007248:	d204      	bcs.n	8007254 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	e002      	b.n	800725a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007276:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800727a:	4618      	mov	r0, r3
 800727c:	3738      	adds	r7, #56	; 0x38
 800727e:	46bd      	mov	sp, r7
 8007280:	bdb0      	pop	{r4, r5, r7, pc}
 8007282:	bf00      	nop
 8007284:	58024400 	.word	0x58024400
 8007288:	03d09000 	.word	0x03d09000
 800728c:	003d0900 	.word	0x003d0900
 8007290:	08007f48 	.word	0x08007f48

08007294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01a      	beq.n	80073aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007392:	d10a      	bne.n	80073aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	605a      	str	r2, [r3, #4]
  }
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af02      	add	r7, sp, #8
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073e8:	f7fa fa88 	bl	80018fc <HAL_GetTick>
 80073ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d10e      	bne.n	800741a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f82f 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e025      	b.n	8007466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b04      	cmp	r3, #4
 8007426:	d10e      	bne.n	8007446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f819 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e00f      	b.n	8007466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747e:	e062      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007486:	d05e      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fa fa38 	bl	80018fc <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <UART_WaitOnFlagUntilTimeout+0x30>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d11d      	bne.n	80074da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e045      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02e      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f6:	d126      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007510:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e00f      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4013      	ands	r3, r2
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	429a      	cmp	r2, r3
 8007562:	d08d      	beq.n	8007480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_UARTEx_DisableFifoMode+0x16>
 8007580:	2302      	movs	r3, #2
 8007582:	e027      	b.n	80075d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e02d      	b.n	8007654 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	; 0x24
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f84f 	bl	80076d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007670:	2302      	movs	r3, #2
 8007672:	e02d      	b.n	80076d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2224      	movs	r2, #36	; 0x24
 8007680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f811 	bl	80076d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d108      	bne.n	80076fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076f8:	e031      	b.n	800775e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076fa:	2310      	movs	r3, #16
 80076fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076fe:	2310      	movs	r3, #16
 8007700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	0e5b      	lsrs	r3, r3, #25
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	0f5b      	lsrs	r3, r3, #29
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	7b3a      	ldrb	r2, [r7, #12]
 8007726:	4911      	ldr	r1, [pc, #68]	; (800776c <UARTEx_SetNbDataToProcess+0x94>)
 8007728:	5c8a      	ldrb	r2, [r1, r2]
 800772a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800772e:	7b3a      	ldrb	r2, [r7, #12]
 8007730:	490f      	ldr	r1, [pc, #60]	; (8007770 <UARTEx_SetNbDataToProcess+0x98>)
 8007732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007734:	fb93 f3f2 	sdiv	r3, r3, r2
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	7b7a      	ldrb	r2, [r7, #13]
 8007744:	4909      	ldr	r1, [pc, #36]	; (800776c <UARTEx_SetNbDataToProcess+0x94>)
 8007746:	5c8a      	ldrb	r2, [r1, r2]
 8007748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800774c:	7b7a      	ldrb	r2, [r7, #13]
 800774e:	4908      	ldr	r1, [pc, #32]	; (8007770 <UARTEx_SetNbDataToProcess+0x98>)
 8007750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007752:	fb93 f3f2 	sdiv	r3, r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	08007f60 	.word	0x08007f60
 8007770:	08007f68 	.word	0x08007f68

08007774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 001c 	add.w	r0, r7, #28
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d120      	bne.n	80077ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <USB_CoreInit+0xd4>)
 800779e:	4013      	ands	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d105      	bne.n	80077c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa60 	bl	8007c88 <USB_CoreReset>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	e01a      	b.n	8007804 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa54 	bl	8007c88 <USB_CoreReset>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	639a      	str	r2, [r3, #56]	; 0x38
 80077f6:	e005      	b.n	8007804 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	2b01      	cmp	r3, #1
 8007808:	d116      	bne.n	8007838 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	b29a      	uxth	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <USB_CoreInit+0xd8>)
 800781a:	4313      	orrs	r3, r2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f043 0206 	orr.w	r2, r3, #6
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f043 0220 	orr.w	r2, r3, #32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007844:	b004      	add	sp, #16
 8007846:	4770      	bx	lr
 8007848:	ffbdffbf 	.word	0xffbdffbf
 800784c:	03ee0000 	.word	0x03ee0000

08007850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f023 0201 	bic.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d106      	bne.n	800789e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	e00b      	b.n	80078b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]
 80078b0:	e001      	b.n	80078b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e003      	b.n	80078be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80078b6:	2032      	movs	r0, #50	; 0x32
 80078b8:	f7fa f82c 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c8:	b084      	sub	sp, #16
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	e009      	b.n	80078fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3340      	adds	r3, #64	; 0x40
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b0e      	cmp	r3, #14
 8007900:	d9f2      	bls.n	80078e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d11c      	bne.n	8007942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007916:	f043 0302 	orr.w	r3, r3, #2
 800791a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e005      	b.n	800794e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007954:	461a      	mov	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	4619      	mov	r1, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	461a      	mov	r2, r3
 800796a:	680b      	ldr	r3, [r1, #0]
 800796c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10c      	bne.n	800798e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f949 	bl	8007c14 <USB_SetDevSpeed>
 8007982:	e008      	b.n	8007996 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007984:	2101      	movs	r1, #1
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f944 	bl	8007c14 <USB_SetDevSpeed>
 800798c:	e003      	b.n	8007996 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800798e:	2103      	movs	r1, #3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f93f 	bl	8007c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007996:	2110      	movs	r1, #16
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8f3 	bl	8007b84 <USB_FlushTxFifo>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f911 	bl	8007bd0 <USB_FlushRxFifo>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	461a      	mov	r2, r3
 80079c0:	2300      	movs	r3, #0
 80079c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	461a      	mov	r2, r3
 80079cc:	2300      	movs	r3, #0
 80079ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	e043      	b.n	8007a6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f8:	d118      	bne.n	8007a2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e013      	b.n	8007a3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	461a      	mov	r2, r3
 8007a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e008      	b.n	8007a3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	3301      	adds	r3, #1
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d3b7      	bcc.n	80079e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	e043      	b.n	8007b00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8e:	d118      	bne.n	8007ac2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e013      	b.n	8007ad4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e008      	b.n	8007ad4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	461a      	mov	r2, r3
 8007af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3b7      	bcc.n	8007a78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f043 0210 	orr.w	r2, r3, #16
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <USB_DevInit+0x2b4>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f043 0208 	orr.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d105      	bne.n	8007b6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <USB_DevInit+0x2b8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b78:	b004      	add	sp, #16
 8007b7a:	4770      	bx	lr
 8007b7c:	803c3800 	.word	0x803c3800
 8007b80:	40000004 	.word	0x40000004

08007b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	019b      	lsls	r3, r3, #6
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <USB_FlushTxFifo+0x48>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d0f0      	beq.n	8007b9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	00030d40 	.word	0x00030d40

08007bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2210      	movs	r2, #16
 8007be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <USB_FlushRxFifo+0x40>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d0f0      	beq.n	8007be2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	00030d40 	.word	0x00030d40

08007c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c34:	4313      	orrs	r3, r2
 8007c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c60:	f023 0303 	bic.w	r3, r3, #3
 8007c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c74:	f043 0302 	orr.w	r3, r3, #2
 8007c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <USB_CoreReset+0x64>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e01b      	b.n	8007cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	daf2      	bge.n	8007c94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f043 0201 	orr.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a09      	ldr	r2, [pc, #36]	; (8007cec <USB_CoreReset+0x64>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e006      	b.n	8007cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d0f0      	beq.n	8007cbe <USB_CoreReset+0x36>

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	00030d40 	.word	0x00030d40

08007cf0 <_Znwj>:
 8007cf0:	2801      	cmp	r0, #1
 8007cf2:	bf38      	it	cc
 8007cf4:	2001      	movcc	r0, #1
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 f844 	bl	8007d88 <malloc>
 8007d00:	b930      	cbnz	r0, 8007d10 <_Znwj+0x20>
 8007d02:	f000 f807 	bl	8007d14 <_ZSt15get_new_handlerv>
 8007d06:	b908      	cbnz	r0, 8007d0c <_Znwj+0x1c>
 8007d08:	f000 f80c 	bl	8007d24 <abort>
 8007d0c:	4780      	blx	r0
 8007d0e:	e7f4      	b.n	8007cfa <_Znwj+0xa>
 8007d10:	bd10      	pop	{r4, pc}
	...

08007d14 <_ZSt15get_new_handlerv>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <_ZSt15get_new_handlerv+0xc>)
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	f3bf 8f5b 	dmb	ish
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000748 	.word	0x20000748

08007d24 <abort>:
 8007d24:	b508      	push	{r3, lr}
 8007d26:	2006      	movs	r0, #6
 8007d28:	f000 f8d0 	bl	8007ecc <raise>
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f7f9 fc69 	bl	8001604 <_exit>
	...

08007d34 <__errno>:
 8007d34:	4b01      	ldr	r3, [pc, #4]	; (8007d3c <__errno+0x8>)
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000010 	.word	0x20000010

08007d40 <__libc_init_array>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4d0d      	ldr	r5, [pc, #52]	; (8007d78 <__libc_init_array+0x38>)
 8007d44:	4c0d      	ldr	r4, [pc, #52]	; (8007d7c <__libc_init_array+0x3c>)
 8007d46:	1b64      	subs	r4, r4, r5
 8007d48:	10a4      	asrs	r4, r4, #2
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	d109      	bne.n	8007d64 <__libc_init_array+0x24>
 8007d50:	4d0b      	ldr	r5, [pc, #44]	; (8007d80 <__libc_init_array+0x40>)
 8007d52:	4c0c      	ldr	r4, [pc, #48]	; (8007d84 <__libc_init_array+0x44>)
 8007d54:	f000 f8e4 	bl	8007f20 <_init>
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	d105      	bne.n	8007d6e <__libc_init_array+0x2e>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d68:	4798      	blx	r3
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7ee      	b.n	8007d4c <__libc_init_array+0xc>
 8007d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d72:	4798      	blx	r3
 8007d74:	3601      	adds	r6, #1
 8007d76:	e7f2      	b.n	8007d5e <__libc_init_array+0x1e>
 8007d78:	08007f78 	.word	0x08007f78
 8007d7c:	08007f78 	.word	0x08007f78
 8007d80:	08007f78 	.word	0x08007f78
 8007d84:	08007f80 	.word	0x08007f80

08007d88 <malloc>:
 8007d88:	4b02      	ldr	r3, [pc, #8]	; (8007d94 <malloc+0xc>)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f000 b80b 	b.w	8007da8 <_malloc_r>
 8007d92:	bf00      	nop
 8007d94:	20000010 	.word	0x20000010

08007d98 <memset>:
 8007d98:	4402      	add	r2, r0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <_malloc_r>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	1ccd      	adds	r5, r1, #3
 8007dac:	f025 0503 	bic.w	r5, r5, #3
 8007db0:	3508      	adds	r5, #8
 8007db2:	2d0c      	cmp	r5, #12
 8007db4:	bf38      	it	cc
 8007db6:	250c      	movcc	r5, #12
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	4606      	mov	r6, r0
 8007dbc:	db01      	blt.n	8007dc2 <_malloc_r+0x1a>
 8007dbe:	42a9      	cmp	r1, r5
 8007dc0:	d903      	bls.n	8007dca <_malloc_r+0x22>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	6033      	str	r3, [r6, #0]
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dca:	f000 f89b 	bl	8007f04 <__malloc_lock>
 8007dce:	4921      	ldr	r1, [pc, #132]	; (8007e54 <_malloc_r+0xac>)
 8007dd0:	680a      	ldr	r2, [r1, #0]
 8007dd2:	4614      	mov	r4, r2
 8007dd4:	b99c      	cbnz	r4, 8007dfe <_malloc_r+0x56>
 8007dd6:	4f20      	ldr	r7, [pc, #128]	; (8007e58 <_malloc_r+0xb0>)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	b923      	cbnz	r3, 8007de6 <_malloc_r+0x3e>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f83c 	bl	8007e5c <_sbrk_r>
 8007de4:	6038      	str	r0, [r7, #0]
 8007de6:	4629      	mov	r1, r5
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 f837 	bl	8007e5c <_sbrk_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d123      	bne.n	8007e3a <_malloc_r+0x92>
 8007df2:	230c      	movs	r3, #12
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	4630      	mov	r0, r6
 8007df8:	f000 f88a 	bl	8007f10 <__malloc_unlock>
 8007dfc:	e7e3      	b.n	8007dc6 <_malloc_r+0x1e>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	1b5b      	subs	r3, r3, r5
 8007e02:	d417      	bmi.n	8007e34 <_malloc_r+0x8c>
 8007e04:	2b0b      	cmp	r3, #11
 8007e06:	d903      	bls.n	8007e10 <_malloc_r+0x68>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	441c      	add	r4, r3
 8007e0c:	6025      	str	r5, [r4, #0]
 8007e0e:	e004      	b.n	8007e1a <_malloc_r+0x72>
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	42a2      	cmp	r2, r4
 8007e14:	bf0c      	ite	eq
 8007e16:	600b      	streq	r3, [r1, #0]
 8007e18:	6053      	strne	r3, [r2, #4]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f878 	bl	8007f10 <__malloc_unlock>
 8007e20:	f104 000b 	add.w	r0, r4, #11
 8007e24:	1d23      	adds	r3, r4, #4
 8007e26:	f020 0007 	bic.w	r0, r0, #7
 8007e2a:	1ac2      	subs	r2, r0, r3
 8007e2c:	d0cc      	beq.n	8007dc8 <_malloc_r+0x20>
 8007e2e:	1a1b      	subs	r3, r3, r0
 8007e30:	50a3      	str	r3, [r4, r2]
 8007e32:	e7c9      	b.n	8007dc8 <_malloc_r+0x20>
 8007e34:	4622      	mov	r2, r4
 8007e36:	6864      	ldr	r4, [r4, #4]
 8007e38:	e7cc      	b.n	8007dd4 <_malloc_r+0x2c>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d0e3      	beq.n	8007e0c <_malloc_r+0x64>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 f808 	bl	8007e5c <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d1dd      	bne.n	8007e0c <_malloc_r+0x64>
 8007e50:	e7cf      	b.n	8007df2 <_malloc_r+0x4a>
 8007e52:	bf00      	nop
 8007e54:	2000074c 	.word	0x2000074c
 8007e58:	20000750 	.word	0x20000750

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_sbrk_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7f9 fbd6 	bl	8001618 <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20000758 	.word	0x20000758

08007e7c <_raise_r>:
 8007e7c:	291f      	cmp	r1, #31
 8007e7e:	b538      	push	{r3, r4, r5, lr}
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	d904      	bls.n	8007e90 <_raise_r+0x14>
 8007e86:	2316      	movs	r3, #22
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e92:	b112      	cbz	r2, 8007e9a <_raise_r+0x1e>
 8007e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e98:	b94b      	cbnz	r3, 8007eae <_raise_r+0x32>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f830 	bl	8007f00 <_getpid_r>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eaa:	f000 b817 	b.w	8007edc <_kill_r>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d00a      	beq.n	8007ec8 <_raise_r+0x4c>
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	d103      	bne.n	8007ebe <_raise_r+0x42>
 8007eb6:	2316      	movs	r3, #22
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7e7      	b.n	8007e8e <_raise_r+0x12>
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	4798      	blx	r3
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7e0      	b.n	8007e8e <_raise_r+0x12>

08007ecc <raise>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <raise+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bfd3 	b.w	8007e7c <_raise_r>
 8007ed6:	bf00      	nop
 8007ed8:	20000010 	.word	0x20000010

08007edc <_kill_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_kill_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7f9 fb7b 	bl	80015e4 <_kill>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_kill_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_kill_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	20000758 	.word	0x20000758

08007f00 <_getpid_r>:
 8007f00:	f7f9 bb68 	b.w	80015d4 <_getpid>

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f000 b809 	b.w	8007f1c <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20000760 	.word	0x20000760

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f000 b804 	b.w	8007f1e <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	20000760 	.word	0x20000760

08007f1c <__retarget_lock_acquire_recursive>:
 8007f1c:	4770      	bx	lr

08007f1e <__retarget_lock_release_recursive>:
 8007f1e:	4770      	bx	lr

08007f20 <_init>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr

08007f2c <_fini>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr
