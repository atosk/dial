
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009074  08009074  00019074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800907c  0800907c  0001907c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08009088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  080090fc  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  0800915c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000134  080091bc  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  080091bc  00020768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038528  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e1c  00000000  00000000  0005868a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0005d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0005edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003de9c  00000000  00000000  00060570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec96  00000000  00000000  0009e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00175dff  00000000  00000000  000bd0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00232ea1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  00232ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000134 	.word	0x20000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f78 	.word	0x08008f78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000138 	.word	0x20000138
 80002dc:	08008f78 	.word	0x08008f78

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	705a      	strb	r2, [r3, #1]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	4608      	mov	r0, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	460b      	mov	r3, r1
 80006be:	70bb      	strb	r3, [r7, #2]
 80006c0:	4613      	mov	r3, r2
 80006c2:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	787a      	ldrb	r2, [r7, #1]
 80006c8:	705a      	strb	r2, [r3, #1]
   int m_dial_temp = 0; // Temporary location to collect dial displacement
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d105      	bne.n	80006e0 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x36>
 80006d4:	787b      	ldrb	r3, [r7, #1]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e005      	b.n	80006ec <_ZNSt4Dial14CalculateStepsE9Directionhh+0x42>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	787b      	ldrb	r3, [r7, #1]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da02      	bge.n	80006f8 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x4e>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3364      	adds	r3, #100	; 0x64
 80006f6:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 80006f8:	78ba      	ldrb	r2, [r7, #2]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	015b      	lsls	r3, r3, #5
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZNSt4Dial14UpdatePositionEh>:

void Dial::UpdatePosition(uint8_t new_position){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
   m_dial_location = new_position;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]

}
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	715a      	strb	r2, [r3, #5]
   }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f022 0201 	bic.w	r2, r2, #1
 800079c:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2201      	movs	r2, #1
 80007de:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 80007e6:	2301      	movs	r3, #1
 80007e8:	75fb      	strb	r3, [r7, #23]
 80007ea:	e001      	b.n	80007f0 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	461a      	mov	r2, r3
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 80007fa:	f002 f8a3 	bl	8002944 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f042 0201 	orr.w	r2, r2, #1
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58020800 	.word	0x58020800

08000824 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
   return m_status;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	795b      	ldrb	r3, [r3, #5]
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b0ac      	sub	sp, #176	; 0xb0
 8000858:	af04      	add	r7, sp, #16
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800085a:	f001 f8c7 	bl	80019ec <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800085e:	f000 f8db 	bl	8000a18 <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000862:	f000 fb33 	bl	8000ecc <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 8000866:	f000 f965 	bl	8000b34 <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 800086a:	f000 fa99 	bl	8000da0 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 800086e:	f000 faf7 	bl	8000e60 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 8000872:	f000 fa05 	bl	8000c80 <_ZL12MX_TIM3_Initv>
   MX_I2C2_Init();
 8000876:	f000 f9b5 	bl	8000be4 <_ZL12MX_I2C2_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800087a:	2108      	movs	r1, #8
 800087c:	485c      	ldr	r0, [pc, #368]	; (80009f0 <main+0x19c>)
 800087e:	f005 f9cd 	bl	8005c1c <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 8000882:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <main+0x1a0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a5b      	ldr	r2, [pc, #364]	; (80009f4 <main+0x1a0>)
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	6013      	str	r3, [r2, #0]

   // Control flow flags
   int move = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   int test_i2c = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

   // Character buffers
   char msg[100] = { 0 };
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2260      	movs	r2, #96	; 0x60
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 feec 	bl	8008684 <memset>

   // Stepper
   int newnum = 90; // Next number to spin the dial to
 80008ac:	235a      	movs	r3, #90	; 0x5a
 80008ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   enum Direction dir = CW; // Direction of dial rotation.
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

   // Encoder
   uint8_t i2c_receive_buf[2]; // Position data is 12 bits and requires two reads.
   uint16_t encoder_angle = 0; //
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

#if DEBUG ==1
   uint8_t start_message[] = "\r\n\r\n..... Running .....\r\n";
 80008be:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <main+0x1a4>)
 80008c0:	1d3c      	adds	r4, r7, #4
 80008c2:	461d      	mov	r5, r3
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008cc:	c403      	stmia	r4!, {r0, r1}
 80008ce:	8022      	strh	r2, [r4, #0]
   HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), 10);
 80008d0:	1d39      	adds	r1, r7, #4
 80008d2:	230a      	movs	r3, #10
 80008d4:	221a      	movs	r2, #26
 80008d6:	4849      	ldr	r0, [pc, #292]	; (80009fc <main+0x1a8>)
 80008d8:	f006 fb5c 	bl	8006f94 <HAL_UART_Transmit>
   /* USER CODE BEGIN WHILE */

   while (1) {

// -------------------------------------------------------------------
      if (test_i2c == 1) {
 80008dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d160      	bne.n	80009a6 <main+0x152>
          *
          */
         while (1) {

            // Read Status register
            HAL_I2C_Mem_Read(&hi2c2, AS5600_ADDR, AS5600_REG_STATUS, 1,
 80008e4:	23c8      	movs	r3, #200	; 0xc8
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	2301      	movs	r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	220b      	movs	r2, #11
 80008f6:	216c      	movs	r1, #108	; 0x6c
 80008f8:	4841      	ldr	r0, [pc, #260]	; (8000a00 <main+0x1ac>)
 80008fa:	f002 f8cd 	bl	8002a98 <HAL_I2C_Mem_Read>
                  i2c_receive_buf, 1, 200);
            char reg_status = (i2c_receive_buf[0] & 0b00111000); // Mask off unimportant  bits
 80008fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000906:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
            int ret;
            switch (reg_status) {
 800090a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800090e:	2b30      	cmp	r3, #48	; 0x30
 8000910:	d01c      	beq.n	800094c <main+0xf8>
 8000912:	2b30      	cmp	r3, #48	; 0x30
 8000914:	dc2c      	bgt.n	8000970 <main+0x11c>
 8000916:	2b28      	cmp	r3, #40	; 0x28
 8000918:	d00f      	beq.n	800093a <main+0xe6>
 800091a:	2b28      	cmp	r3, #40	; 0x28
 800091c:	dc28      	bgt.n	8000970 <main+0x11c>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <main+0xd4>
 8000922:	2b20      	cmp	r3, #32
 8000924:	d01b      	beq.n	800095e <main+0x10a>
 8000926:	e023      	b.n	8000970 <main+0x11c>
               case 0:
                  ret = sprintf(msg, "No magnet detected.\r\n");
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4935      	ldr	r1, [pc, #212]	; (8000a04 <main+0x1b0>)
 800092e:	4618      	mov	r0, r3
 8000930:	f007 ffae 	bl	8008890 <siprintf>
 8000934:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                  break;
 8000938:	e023      	b.n	8000982 <main+0x12e>
               case 40:
                  ret = sprintf(msg, "Magnet too Strong.\r\n");
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4932      	ldr	r1, [pc, #200]	; (8000a08 <main+0x1b4>)
 8000940:	4618      	mov	r0, r3
 8000942:	f007 ffa5 	bl	8008890 <siprintf>
 8000946:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                  break;
 800094a:	e01a      	b.n	8000982 <main+0x12e>
               case 48:
                  ret = sprintf(msg, "Magnet too weak.\r\n");
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	492e      	ldr	r1, [pc, #184]	; (8000a0c <main+0x1b8>)
 8000952:	4618      	mov	r0, r3
 8000954:	f007 ff9c 	bl	8008890 <siprintf>
 8000958:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                  break;
 800095c:	e011      	b.n	8000982 <main+0x12e>
               case 32:
                  ret = sprintf(msg, "Magnet OK!\r\n");
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	492b      	ldr	r1, [pc, #172]	; (8000a10 <main+0x1bc>)
 8000964:	4618      	mov	r0, r3
 8000966:	f007 ff93 	bl	8008890 <siprintf>
 800096a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                  break;
 800096e:	e008      	b.n	8000982 <main+0x12e>
               default:
                  ret = sprintf(msg, "Error\r\n");
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4927      	ldr	r1, [pc, #156]	; (8000a14 <main+0x1c0>)
 8000976:	4618      	mov	r0, r3
 8000978:	f007 ff8a 	bl	8008890 <siprintf>
 800097c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                  break;
 8000980:	bf00      	nop

            }
            // Serial print the result
            HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fcaa 	bl	80002e0 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000994:	230a      	movs	r3, #10
 8000996:	4819      	ldr	r0, [pc, #100]	; (80009fc <main+0x1a8>)
 8000998:	f006 fafc 	bl	8006f94 <HAL_UART_Transmit>
            HAL_Delay(500);
 800099c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a0:	f001 f8b6 	bl	8001b10 <HAL_Delay>
         }
 80009a4:	e79e      	b.n	80008e4 <main+0x90>

      }

// -------------------------------------------------------------------
      if (move == 1) {
 80009a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d196      	bne.n	80008dc <main+0x88>
         // Routine to demo stepper control
         Move_Stepper(dir, 0, newnum);
 80009ae:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80009b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fbd1 	bl	8001160 <_Z12Move_Stepper9Directionii>

         if (newnum > 0) {
 80009be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	dd05      	ble.n	80009d2 <main+0x17e>
            newnum -= 10;
 80009c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009ca:	3b0a      	subs	r3, #10
 80009cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80009d0:	e784      	b.n	80008dc <main+0x88>
         } else {
            newnum = 90;
 80009d2:	235a      	movs	r3, #90	; 0x5a
 80009d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            if (dir == CCW) {
 80009d8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d103      	bne.n	80009e8 <main+0x194>
               dir = CW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 80009e6:	e779      	b.n	80008dc <main+0x88>
            } else
               (dir = CCW);
 80009e8:	2301      	movs	r3, #1
 80009ea:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
      } // End if move == 1

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
   } // End main loop
 80009ee:	e775      	b.n	80008dc <main+0x88>
 80009f0:	20000258 	.word	0x20000258
 80009f4:	40000400 	.word	0x40000400
 80009f8:	08008fec 	.word	0x08008fec
 80009fc:	200002a4 	.word	0x200002a4
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	08008f90 	.word	0x08008f90
 8000a08:	08008fa8 	.word	0x08008fa8
 8000a0c:	08008fc0 	.word	0x08008fc0
 8000a10:	08008fd4 	.word	0x08008fd4
 8000a14:	08008fe4 	.word	0x08008fe4

08000a18 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	; 0x70
 8000a1c:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	224c      	movs	r2, #76	; 0x4c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 fe2c 	bl	8008684 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2220      	movs	r2, #32
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 fe26 	bl	8008684 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f002 fcef 	bl	800341c <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <_Z18SystemClock_Configv+0x114>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <_Z18SystemClock_Configv+0x114>)
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <_Z18SystemClock_Configv+0x114>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <_Z18SystemClock_Configv+0x118>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <_Z18SystemClock_Configv+0x118>)
 8000a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <_Z18SystemClock_Configv+0x118>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <_Z18SystemClock_Configv+0x118>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d000      	beq.n	8000a8e <_Z18SystemClock_Configv+0x76>
 8000a8c:	e7f2      	b.n	8000a74 <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000a8e:	2303      	movs	r3, #3
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2340      	movs	r3, #64	; 0x40
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 8000aac:	2318      	movs	r3, #24
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000abc:	230c      	movs	r3, #12
 8000abe:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fcef 	bl	80034b0 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 8000ae2:	f000 fb77 	bl	80011d4 <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ae6:	233f      	movs	r3, #63	; 0x3f
 8000ae8:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f8e0 	bl	8003cd0 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000b20:	f000 fb58 	bl	80011d4 <Error_Handler>
   }
}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	; 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58000400 	.word	0x58000400
 8000b30:	58024800 	.word	0x58024800

08000b34 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b3a:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <_ZL11MX_ETH_Initv+0xa0>)
 8000b3c:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	3302      	adds	r3, #2
 8000b56:	22e1      	movs	r2, #225	; 0xe1
 8000b58:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	3303      	adds	r3, #3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	3305      	adds	r3, #5
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <_ZL11MX_ETH_Initv+0xa4>)
 8000b82:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <_ZL11MX_ETH_Initv+0xa8>)
 8000b88:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b90:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <_ZL11MX_ETH_Initv+0x9c>)
 8000b94:	f001 f910 	bl	8001db8 <HAL_ETH_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 8000ba8:	f000 fb14 	bl	80011d4 <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000bac:	2234      	movs	r2, #52	; 0x34
 8000bae:	2100      	movs	r1, #0
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <_ZL11MX_ETH_Initv+0xac>)
 8000bb2:	f007 fd67 	bl	8008684 <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <_ZL11MX_ETH_Initv+0xac>)
 8000bb8:	2221      	movs	r2, #33	; 0x21
 8000bba:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_ZL11MX_ETH_Initv+0xac>)
 8000bbe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bc2:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <_ZL11MX_ETH_Initv+0xac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000184 	.word	0x20000184
 8000bd4:	40028000 	.word	0x40028000
 8000bd8:	200000d4 	.word	0x200000d4
 8000bdc:	20000074 	.word	0x20000074
 8000be0:	20000150 	.word	0x20000150

08000be4 <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
   /* USER CODE END I2C2_Init 0 */

   /* USER CODE BEGIN I2C2_Init 1 */

   /* USER CODE END I2C2_Init 1 */
   hi2c2.Instance = I2C2;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <_ZL12MX_I2C2_Initv+0x94>)
 8000bec:	601a      	str	r2, [r3, #0]
   hi2c2.Init.Timing = 0x10707DBC;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000bf0:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <_ZL12MX_I2C2_Initv+0x98>)
 8000bf2:	605a      	str	r2, [r3, #4]
   hi2c2.Init.OwnAddress1 = 0;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	60da      	str	r2, [r3, #12]
   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
   hi2c2.Init.OwnAddress2 = 0;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000c1e:	4815      	ldr	r0, [pc, #84]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c20:	f001 feaa 	bl	8002978 <HAL_I2C_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <_ZL12MX_I2C2_Initv+0x54>
      Error_Handler();
 8000c34:	f000 face 	bl	80011d4 <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c3c:	f002 fa0e 	bl	800305c <HAL_I2CEx_ConfigAnalogFilter>
 8000c40:	4603      	mov	r3, r0
         != HAL_OK) {
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_ZL12MX_I2C2_Initv+0x70>
      Error_Handler();
 8000c50:	f000 fac0 	bl	80011d4 <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000c54:	2100      	movs	r1, #0
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <_ZL12MX_I2C2_Initv+0x90>)
 8000c58:	f002 fa4b 	bl	80030f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_ZL12MX_I2C2_Initv+0x8c>
      Error_Handler();
 8000c6c:	f000 fab2 	bl	80011d4 <Error_Handler>
   }
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000020c 	.word	0x2000020c
 8000c78:	40005800 	.word	0x40005800
 8000c7c:	10707dbc 	.word	0x10707dbc

08000c80 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cb4:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <_ZL12MX_TIM3_Initv+0x11c>)
 8000cb6:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cba:	223f      	movs	r2, #63	; 0x3f
 8000cbc:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cc6:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000cca:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000cd8:	482f      	ldr	r0, [pc, #188]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000cda:	f004 fee7 	bl	8005aac <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000cee:	f000 fa71 	bl	80011d4 <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4826      	ldr	r0, [pc, #152]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000d00:	f005 fb0a 	bl	8006318 <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000d14:	f000 fa5e 	bl	80011d4 <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d18:	481f      	ldr	r0, [pc, #124]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000d1a:	f004 ff1e 	bl	8005b5a <HAL_TIM_PWM_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000d2e:	f000 fa51 	bl	80011d4 <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d32:	2320      	movs	r3, #32
 8000d34:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4815      	ldr	r0, [pc, #84]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000d42:	f006 f831 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
         != HAL_OK) {
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000d56:	f000 fa3d 	bl	80011d4 <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000d5e:	2328      	movs	r3, #40	; 0x28
 8000d60:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000d72:	f005 f9c1 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf14      	ite	ne
 8000d7c:	2301      	movne	r3, #1
 8000d7e:	2300      	moveq	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000d86:	f000 fa25 	bl	80011d4 <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <_ZL12MX_TIM3_Initv+0x118>)
 8000d8c:	f000 fbd0 	bl	8001530 <HAL_TIM_MspPostInit>

}
 8000d90:	bf00      	nop
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000258 	.word	0x20000258
 8000d9c:	40000400 	.word	0x40000400

08000da0 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000da8:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000de8:	481b      	ldr	r0, [pc, #108]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000dea:	f006 f883 	bl	8006ef4 <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8000dfe:	f000 f9e9 	bl	80011d4 <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e06:	f007 f861 	bl	8007ecc <HAL_UARTEx_SetTxFifoThreshold>
 8000e0a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8000e1a:	f000 f9db 	bl	80011d4 <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e22:	f007 f891 	bl	8007f48 <HAL_UARTEx_SetRxFifoThreshold>
 8000e26:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8000e36:	f000 f9cd 	bl	80011d4 <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e3c:	f007 f80d 	bl	8007e5a <HAL_UARTEx_DisableFifoMode>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8000e50:	f000 f9c0 	bl	80011d4 <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200002a4 	.word	0x200002a4
 8000e5c:	40004800 	.word	0x40004800

08000e60 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ea8:	f002 f96f 	bl	800318a <HAL_PCD_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf14      	ite	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	2300      	moveq	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8000ebc:	f000 f98a 	bl	80011d4 <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000334 	.word	0x20000334
 8000ec8:	40080000 	.word	0x40080000

08000ecc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a71      	ldr	r2, [pc, #452]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b6f      	ldr	r3, [pc, #444]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	6a3b      	ldr	r3, [r7, #32]
   __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f00:	4b6b      	ldr	r3, [pc, #428]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a6a      	ldr	r2, [pc, #424]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a62      	ldr	r2, [pc, #392]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2e:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b5c      	ldr	r3, [pc, #368]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4c:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b55      	ldr	r3, [pc, #340]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	4a53      	ldr	r2, [pc, #332]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6a:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fd8:	4836      	ldr	r0, [pc, #216]	; (80010b4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8000fda:	f001 fcb3 	bl	8002944 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4834      	ldr	r0, [pc, #208]	; (80010b8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8000fe6:	f001 fcad 	bl	8002944 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <_ZL12MX_GPIO_Initv+0x1f0>)
 8000ff2:	f001 fca7 	bl	8002944 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4831      	ldr	r0, [pc, #196]	; (80010c0 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000ffc:	f001 fca2 	bl	8002944 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 8001000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4829      	ldr	r0, [pc, #164]	; (80010bc <_ZL12MX_GPIO_Initv+0x1f0>)
 8001016:	f001 fae5 	bl	80025e4 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 800101a:	f244 0301 	movw	r3, #16385	; 0x4001
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001034:	f001 fad6 	bl	80025e4 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8001052:	f001 fac7 	bl	80025e4 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <_ZL12MX_GPIO_Initv+0x1f8>)
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4817      	ldr	r0, [pc, #92]	; (80010c8 <_ZL12MX_GPIO_Initv+0x1fc>)
 800106a:	f001 fabb 	bl	80025e4 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <_ZL12MX_GPIO_Initv+0x1f0>)
 8001088:	f001 faac 	bl	80025e4 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 800108c:	2302      	movs	r3, #2
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <_ZL12MX_GPIO_Initv+0x1f4>)
 80010a4:	f001 fa9e 	bl	80025e4 <HAL_GPIO_Init>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020400 	.word	0x58020400
 80010b8:	58020c00 	.word	0x58020c00
 80010bc:	58020800 	.word	0x58020800
 80010c0:	58021000 	.word	0x58021000
 80010c4:	11110000 	.word	0x11110000
 80010c8:	58021800 	.word	0x58021800

080010cc <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 0201 	bic.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

   // !! Only works now because TIM3 is the only PWM timer.
   // !! The complete solution is to check TIM status bits to see
   // !! who issued the interrupt.

   Stop_Timer(TIM3); // Freeze counter at zero
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001116:	f7ff ffd9 	bl	80010cc <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb1b 	bl	800075a <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fb87 	bl	800083c <_ZNSt12StepperMotor12MoveCompleteEv>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb1f 	bl	8000786 <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 8001148:	e002      	b.n	8001150 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800114c:	f7ff ffce 	bl	80010ec <_Z11Start_TimerP11TIM_TypeDef>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40000400 	.word	0x40000400
 800115c:	2000073c 	.word	0x2000073c

08001160 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */

   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <_Z12Move_Stepper9Directionii+0x6c>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <_Z12Move_Stepper9Directionii+0x70>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	7bf9      	ldrb	r1, [r7, #15]
 8001180:	f7ff fa93 	bl	80006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>
 8001184:	4601      	mov	r1, r0
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	461a      	mov	r2, r3
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fb18 	bl	80007c0 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_Z12Move_Stepper9Directionii+0x6c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb45 	bl	8000824 <_ZNSt12StepperMotor6StatusEv>
 800119a:	4603      	mov	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d000      	beq.n	80011ac <_Z12Move_Stepper9Directionii+0x4c>
 80011aa:	e7f1      	b.n	8001190 <_Z12Move_Stepper9Directionii+0x30>
   } // Wait for move to finish
   HAL_Delay(DELAY_MS); // Brief delay after move to allow mechanical settling.
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f000 fcae 	bl	8001b10 <HAL_Delay>

   // [TODO] Compare expected and measured positions here.

   Dial->UpdatePosition(next_number); // Expected and measured are in agreement.
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <_Z12Move_Stepper9Directionii+0x70>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff faa4 	bl	800070c <_ZNSt4Dial14UpdatePositionEh>

}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	2000073c 	.word	0x2000073c
 80011d0:	20000740 	.word	0x20000740

080011d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d119      	bne.n	8001224 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d114      	bne.n	8001224 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 80011fa:	200c      	movs	r0, #12
 80011fc:	f007 f9ee 	bl	80085dc <_Znwj>
 8001200:	4603      	mov	r3, r0
 8001202:	461c      	mov	r4, r3
 8001204:	4909      	ldr	r1, [pc, #36]	; (800122c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fa8f 	bl	800072a <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800120e:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 8001210:	2002      	movs	r0, #2
 8001212:	f007 f9e3 	bl	80085dc <_Znwj>
 8001216:	4603      	mov	r3, r0
 8001218:	461c      	mov	r4, r3
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fa34 	bl	8000688 <_ZNSt4DialC1Ev>
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001222:	601c      	str	r4, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	40000400 	.word	0x40000400
 8001230:	2000073c 	.word	0x2000073c
 8001234:	20000740 	.word	0x20000740

08001238 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
 800123c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff ffcd 	bl	80011e0 <_Z41__static_initialization_and_destruction_0ii>
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MspInit+0x30>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x30>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x30>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58024400 	.word	0x58024400

0800127c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a59      	ldr	r2, [pc, #356]	; (8001400 <HAL_ETH_MspInit+0x184>)
 800129a:	4293      	cmp	r3, r2
 800129c:	f040 80ab 	bne.w	80013f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a6:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012be:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ce:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012dc:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <HAL_ETH_MspInit+0x188>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_ETH_MspInit+0x188>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_ETH_MspInit+0x188>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a39      	ldr	r2, [pc, #228]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_ETH_MspInit+0x188>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a31      	ldr	r2, [pc, #196]	; (8001404 <HAL_ETH_MspInit+0x188>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a2a      	ldr	r2, [pc, #168]	; (8001404 <HAL_ETH_MspInit+0x188>)
 800135c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_ETH_MspInit+0x188>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001372:	2332      	movs	r3, #50	; 0x32
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001382:	230b      	movs	r3, #11
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <HAL_ETH_MspInit+0x18c>)
 800138e:	f001 f929 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001392:	2386      	movs	r3, #134	; 0x86
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a2:	230b      	movs	r3, #11
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <HAL_ETH_MspInit+0x190>)
 80013ae:	f001 f919 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c4:	230b      	movs	r3, #11
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <HAL_ETH_MspInit+0x194>)
 80013d0:	f001 f908 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e6:	230b      	movs	r3, #11
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <HAL_ETH_MspInit+0x198>)
 80013f2:	f001 f8f7 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40028000 	.word	0x40028000
 8001404:	58024400 	.word	0x58024400
 8001408:	58020800 	.word	0x58020800
 800140c:	58020000 	.word	0x58020000
 8001410:	58020400 	.word	0x58020400
 8001414:	58021800 	.word	0x58021800

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b8      	sub	sp, #224	; 0xe0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	22bc      	movs	r2, #188	; 0xbc
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f923 	bl	8008684 <memset>
  if(hi2c->Instance==I2C2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_I2C_MspInit+0xbc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d141      	bne.n	80014cc <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001448:	2308      	movs	r3, #8
 800144a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f002 ffc6 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001462:	f7ff feb7 	bl	80011d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148a:	2312      	movs	r3, #18
 800148c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800149c:	2304      	movs	r3, #4
 800149e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0xc4>)
 80014aa:	f001 f89b 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 80014b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 80014b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_I2C_MspInit+0xc0>)
 80014c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37e0      	adds	r7, #224	; 0xe0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005800 	.word	0x40005800
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58021400 	.word	0x58021400

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_TIM_Base_MspInit+0x48>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d116      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_TIM_Base_MspInit+0x4c>)
 80014f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_TIM_Base_MspInit+0x4c>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_TIM_Base_MspInit+0x4c>)
 8001504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	201d      	movs	r0, #29
 8001516:	f000 fc1a 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800151a:	201d      	movs	r0, #29
 800151c:	f000 fc31 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40000400 	.word	0x40000400
 800152c:	58024400 	.word	0x58024400

08001530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_TIM_MspPostInit+0x6c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11f      	bne.n	8001592 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_TIM_MspPostInit+0x70>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_TIM_MspPostInit+0x70>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_TIM_MspPostInit+0x70>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 8001570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001574:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001582:	2302      	movs	r3, #2
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_TIM_MspPostInit+0x74>)
 800158e:	f001 f829 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40000400 	.word	0x40000400
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58020800 	.word	0x58020800

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0b8      	sub	sp, #224	; 0xe0
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	22bc      	movs	r2, #188	; 0xbc
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 f85b 	bl	8008684 <memset>
  if(huart->Instance==USART3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a25      	ldr	r2, [pc, #148]	; (8001668 <HAL_UART_MspInit+0xc0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d142      	bne.n	800165e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fefe 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff fdef 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_UART_MspInit+0xc4>)
 80015f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_UART_MspInit+0xc4>)
 80015fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_UART_MspInit+0xc4>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0xc4>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_UART_MspInit+0xc4>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0xc4>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164c:	2307      	movs	r3, #7
 800164e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0xc8>)
 800165a:	f000 ffc3 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	37e0      	adds	r7, #224	; 0xe0
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004800 	.word	0x40004800
 800166c:	58024400 	.word	0x58024400
 8001670:	58020c00 	.word	0x58020c00

08001674 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0b8      	sub	sp, #224	; 0xe0
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	22bc      	movs	r2, #188	; 0xbc
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fff5 	bl	8008684 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_PCD_MspInit+0xe8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d156      	bne.n	8001752 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80016aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fe96 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80016c2:	f7ff fd87 	bl	80011d4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016c6:	f001 fee3 	bl	8003490 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_PCD_MspInit+0xec>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_PCD_MspInit+0xec>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_PCD_MspInit+0xec>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016e8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80016ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001702:	230a      	movs	r3, #10
 8001704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	; (8001764 <HAL_PCD_MspInit+0xf0>)
 8001710:	f000 ff68 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <HAL_PCD_MspInit+0xf0>)
 8001730:	f000 ff58 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_PCD_MspInit+0xec>)
 8001736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_PCD_MspInit+0xec>)
 800173c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001740:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_PCD_MspInit+0xec>)
 8001746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	37e0      	adds	r7, #224	; 0xe0
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40080000 	.word	0x40080000
 8001760:	58024400 	.word	0x58024400
 8001764:	58020000 	.word	0x58020000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f98c 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM3_IRQHandler+0x10>)
 80017c2:	f004 fb79 	bl	8005eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000258 	.word	0x20000258

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ea:	f006 ff19 	bl	8008620 <__errno>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2216      	movs	r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001812:	e7fe      	b.n	8001812 <_exit+0x12>

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f006 feec 	bl	8008620 <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20020000 	.word	0x20020000
 8001874:	00000400 	.word	0x00000400
 8001878:	20000744 	.word	0x20000744
 800187c:	20000768 	.word	0x20000768

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <SystemInit+0xec>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <SystemInit+0xec>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <SystemInit+0xf0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	2b06      	cmp	r3, #6
 800189e:	d807      	bhi.n	80018b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <SystemInit+0xf0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 030f 	bic.w	r3, r3, #15
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <SystemInit+0xf0>)
 80018aa:	f043 0307 	orr.w	r3, r3, #7
 80018ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <SystemInit+0xf4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2f      	ldr	r2, [pc, #188]	; (8001974 <SystemInit+0xf4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <SystemInit+0xf4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <SystemInit+0xf4>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	492b      	ldr	r1, [pc, #172]	; (8001974 <SystemInit+0xf4>)
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <SystemInit+0xf8>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <SystemInit+0xf0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <SystemInit+0xf0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 030f 	bic.w	r3, r3, #15
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <SystemInit+0xf0>)
 80018e4:	f043 0307 	orr.w	r3, r3, #7
 80018e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <SystemInit+0xf4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <SystemInit+0xf4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <SystemInit+0xf4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <SystemInit+0xf4>)
 80018fe:	4a1f      	ldr	r2, [pc, #124]	; (800197c <SystemInit+0xfc>)
 8001900:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <SystemInit+0xf4>)
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <SystemInit+0x100>)
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <SystemInit+0xf4>)
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <SystemInit+0x104>)
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <SystemInit+0xf4>)
 8001910:	2200      	movs	r2, #0
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <SystemInit+0xf4>)
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <SystemInit+0x104>)
 8001918:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <SystemInit+0xf4>)
 800191c:	2200      	movs	r2, #0
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <SystemInit+0xf4>)
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <SystemInit+0x104>)
 8001924:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <SystemInit+0xf4>)
 8001928:	2200      	movs	r2, #0
 800192a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <SystemInit+0xf4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <SystemInit+0xf4>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <SystemInit+0xf4>)
 800193a:	2200      	movs	r2, #0
 800193c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <SystemInit+0x108>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <SystemInit+0x10c>)
 8001944:	4013      	ands	r3, r2
 8001946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800194a:	d202      	bcs.n	8001952 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <SystemInit+0x110>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <SystemInit+0x114>)
 8001954:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001958:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SystemInit+0xec>)
 800195c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001960:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	52002000 	.word	0x52002000
 8001974:	58024400 	.word	0x58024400
 8001978:	eaf6ed7f 	.word	0xeaf6ed7f
 800197c:	02020200 	.word	0x02020200
 8001980:	01ff0000 	.word	0x01ff0000
 8001984:	01010280 	.word	0x01010280
 8001988:	5c001000 	.word	0x5c001000
 800198c:	ffff0000 	.word	0xffff0000
 8001990:	51008108 	.word	0x51008108
 8001994:	52004000 	.word	0x52004000

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800199c:	f7ff ff70 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f006 fe31 	bl	800862c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7fe ff43 	bl	8000854 <main>
  bx  lr
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019dc:	08009088 	.word	0x08009088
  ldr r2, =_sbss
 80019e0:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80019e4:	20000768 	.word	0x20000768

080019e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC3_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f2:	2003      	movs	r0, #3
 80019f4:	f000 f9a0 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019f8:	f002 fb20 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_Init+0x68>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	4913      	ldr	r1, [pc, #76]	; (8001a58 <HAL_Init+0x6c>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_Init+0x68>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_Init+0x6c>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <HAL_Init+0x70>)
 8001a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_Init+0x74>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f814 	bl	8001a64 <HAL_InitTick>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e002      	b.n	8001a4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a46:	f7ff fbff 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	58024400 	.word	0x58024400
 8001a58:	08009008 	.word	0x08009008
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	20000000 	.word	0x20000000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_InitTick+0x60>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e021      	b.n	8001abc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_InitTick+0x64>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_InitTick+0x60>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f985 	bl	8001d9e <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aac:	f000 f94f 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_InitTick+0x68>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000000c 	.word	0x2000000c
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000008 	.word	0x20000008

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	20000754 	.word	0x20000754

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000754 	.word	0x20000754

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff ffee 	bl	8001af8 <HAL_GetTick>
 8001b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b36:	bf00      	nop
 8001b38:	f7ff ffde 	bl	8001af8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetREVID+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0c1b      	lsrs	r3, r3, #16
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	5c001000 	.word	0x5c001000

08001b70 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b80:	4904      	ldr	r1, [pc, #16]	; (8001b94 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58000400 	.word	0x58000400

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	05fa0000 	.word	0x05fa0000

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff40 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff90 	bl	8001c8c <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5f 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff33 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa4 	bl	8001cf4 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0c6      	b.n	8001f58 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fa52 	bl	800127c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2223      	movs	r2, #35	; 0x23
 8001ddc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <HAL_ETH_Init+0x1a8>)
 8001de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de4:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_ETH_Init+0x1a8>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <HAL_ETH_Init+0x1a8>)
 8001df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7a1b      	ldrb	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff feb3 	bl	8001b70 <HAL_SYSCFG_ETHInterfaceSelect>
 8001e0a:	e003      	b.n	8001e14 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e10:	f7ff feae 	bl	8001b70 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2c:	f7ff fe64 	bl	8001af8 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e32:	e00f      	b.n	8001e54 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001e34:	f7ff fe60 	bl	8001af8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e42:	d907      	bls.n	8001e54 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	22e0      	movs	r2, #224	; 0xe0
 8001e4e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e081      	b.n	8001f58 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e6      	bne.n	8001e34 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fac0 	bl	80023ec <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e6c:	f002 fa60 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_ETH_Init+0x1ac>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9a      	lsrs	r2, r3, #18
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3a01      	subs	r2, #1
 8001e80:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa13 	bl	80022b0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ea0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	22e0      	movs	r2, #224	; 0xe0
 8001ebc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e04a      	b.n	8001f58 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eca:	4413      	add	r3, r2
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_ETH_Init+0x1b0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6952      	ldr	r2, [r2, #20]
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6809      	ldr	r1, [r1, #0]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ee2:	440b      	add	r3, r1
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fad8 	bl	800249c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fb1c 	bl	800252a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	3305      	adds	r3, #5
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	3303      	adds	r3, #3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	061a      	lsls	r2, r3, #24
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f3e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2210      	movs	r2, #16
 8001f54:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58024400 	.word	0x58024400
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	ffff8001 	.word	0xffff8001

08001f6c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001f7e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001f86:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f8e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7b5b      	ldrb	r3, [r3, #13]
 8001f94:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f96:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	7b9b      	ldrb	r3, [r3, #14]
 8001f9c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	7bdb      	ldrb	r3, [r3, #15]
 8001fa4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fa6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	7c12      	ldrb	r2, [r2, #16]
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d102      	bne.n	8001fb6 <ETH_SetMACConfig+0x4a>
 8001fb0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fb4:	e000      	b.n	8001fb8 <ETH_SetMACConfig+0x4c>
 8001fb6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fb8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	7c52      	ldrb	r2, [r2, #17]
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d102      	bne.n	8001fc8 <ETH_SetMACConfig+0x5c>
 8001fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc6:	e000      	b.n	8001fca <ETH_SetMACConfig+0x5e>
 8001fc8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fca:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7c9b      	ldrb	r3, [r3, #18]
 8001fd0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fd2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fd8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001fde:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
 8001fe4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001fe6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	7f5b      	ldrb	r3, [r3, #29]
 8001fec:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fee:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	7f92      	ldrb	r2, [r2, #30]
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d102      	bne.n	8001ffe <ETH_SetMACConfig+0x92>
 8001ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffc:	e000      	b.n	8002000 <ETH_SetMACConfig+0x94>
 8001ffe:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002000:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	7fdb      	ldrb	r3, [r3, #31]
 8002006:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002008:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002010:	2a00      	cmp	r2, #0
 8002012:	d102      	bne.n	800201a <ETH_SetMACConfig+0xae>
 8002014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0xb0>
 800201a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800201c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002022:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800202a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800202c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b56      	ldr	r3, [pc, #344]	; (8002198 <ETH_SetMACConfig+0x22c>)
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	68f9      	ldr	r1, [r7, #12]
 8002046:	430b      	orrs	r3, r1
 8002048:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002056:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002058:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002060:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002062:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800206a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800206c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002074:	2a00      	cmp	r2, #0
 8002076:	d102      	bne.n	800207e <ETH_SetMACConfig+0x112>
 8002078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800207c:	e000      	b.n	8002080 <ETH_SetMACConfig+0x114>
 800207e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002080:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <ETH_SetMACConfig+0x230>)
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	430b      	orrs	r3, r1
 800209c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <ETH_SetMACConfig+0x234>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	430b      	orrs	r3, r1
 80020c0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020c8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020ce:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d101      	bne.n	80020de <ETH_SetMACConfig+0x172>
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	e000      	b.n	80020e0 <ETH_SetMACConfig+0x174>
 80020de:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80020e0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020f2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	430b      	orrs	r3, r1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002108:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002110:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f023 0103 	bic.w	r1, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	430a      	orrs	r2, r1
 800212a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002136:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002152:	2a00      	cmp	r2, #0
 8002154:	d101      	bne.n	800215a <ETH_SetMACConfig+0x1ee>
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0x1f0>
 800215a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800215c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002164:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002166:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800216e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800217c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	430a      	orrs	r2, r1
 8002188:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	00048083 	.word	0x00048083
 800219c:	c0f88000 	.word	0xc0f88000
 80021a0:	fffffef0 	.word	0xfffffef0

080021a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <ETH_SetDMAConfig+0xf8>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	6809      	ldr	r1, [r1, #0]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80021ca:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021d6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7b1b      	ldrb	r3, [r3, #12]
 80021dc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80021ea:	4413      	add	r3, r2
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <ETH_SetDMAConfig+0xfc>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6811      	ldr	r1, [r2, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80021fe:	440b      	add	r3, r1
 8002200:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7b5b      	ldrb	r3, [r3, #13]
 8002206:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <ETH_SetDMAConfig+0x100>)
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	431a      	orrs	r2, r3
 8002226:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800222a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7d1b      	ldrb	r3, [r3, #20]
 8002234:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002236:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7f5b      	ldrb	r3, [r3, #29]
 800223c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f241 1304 	movw	r3, #4356	; 0x1104
 800224a:	4413      	add	r3, r2
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <ETH_SetDMAConfig+0x104>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	431a      	orrs	r2, r3
 800225a:	f241 1304 	movw	r3, #4356	; 0x1104
 800225e:	440b      	add	r3, r1
 8002260:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
 8002266:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	f241 1308 	movw	r3, #4360	; 0x1108
 8002278:	4413      	add	r3, r2
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <ETH_SetDMAConfig+0x108>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6811      	ldr	r1, [r2, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	431a      	orrs	r2, r3
 8002288:	f241 1308 	movw	r3, #4360	; 0x1108
 800228c:	440b      	add	r3, r1
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	ffff87fd 	.word	0xffff87fd
 80022a0:	ffff2ffe 	.word	0xffff2ffe
 80022a4:	fffec000 	.word	0xfffec000
 80022a8:	ffc0efef 	.word	0xffc0efef
 80022ac:	7fc0ffff 	.word	0x7fc0ffff

080022b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0a4      	sub	sp, #144	; 0x90
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022be:	2300      	movs	r3, #0
 80022c0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002308:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800230c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002318:	2301      	movs	r3, #1
 800231a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800232a:	2300      	movs	r3, #0
 800232c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800232e:	2300      	movs	r3, #0
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002332:	2300      	movs	r3, #0
 8002334:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002348:	2320      	movs	r3, #32
 800234a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800235a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800238a:	2300      	movs	r3, #0
 800238c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fde6 	bl	8001f6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023a4:	2301      	movs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80023d0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fee1 	bl	80021a4 <ETH_SetDMAConfig>
}
 80023e2:	bf00      	nop
 80023e4:	3790      	adds	r7, #144	; 0x90
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002404:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002406:	f001 ff93 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 800240a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d908      	bls.n	8002426 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d804      	bhi.n	8002426 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e027      	b.n	8002476 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d908      	bls.n	8002440 <ETH_MAC_MDIO_ClkConfig+0x54>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d204      	bcs.n	8002440 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e01a      	b.n	8002476 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d303      	bcc.n	8002450 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d911      	bls.n	8002474 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d908      	bls.n	800246a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d804      	bhi.n	800246a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e005      	b.n	8002476 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e000      	b.n	8002476 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002474:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	01312cff 	.word	0x01312cff
 800248c:	02160ebf 	.word	0x02160ebf
 8002490:	03938700 	.word	0x03938700
 8002494:	05f5e0ff 	.word	0x05f5e0ff
 8002498:	08f0d17f 	.word	0x08f0d17f

0800249c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e01d      	b.n	80024e6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	3206      	adds	r2, #6
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d9de      	bls.n	80024aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f241 132c 	movw	r3, #4396	; 0x112c
 80024fa:	4413      	add	r3, r2
 80024fc:	2203      	movs	r2, #3
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f241 1314 	movw	r3, #4372	; 0x1114
 800250c:	4413      	add	r3, r2
 800250e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e024      	b.n	8002582 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6919      	ldr	r1, [r3, #16]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3310      	adds	r3, #16
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d9d7      	bls.n	8002538 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f241 1330 	movw	r3, #4400	; 0x1130
 80025ae:	4413      	add	r3, r2
 80025b0:	2203      	movs	r2, #3
 80025b2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6919      	ldr	r1, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80025c0:	4413      	add	r3, r2
 80025c2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f241 1328 	movw	r3, #4392	; 0x1128
 80025d4:	4413      	add	r3, r2
 80025d6:	6019      	str	r1, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_GPIO_Init+0x234>)
 80025f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025f6:	e194      	b.n	8002922 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8186 	beq.w	800291c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00b      	beq.n	8002630 <HAL_GPIO_Init+0x4c>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	2b11      	cmp	r3, #17
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b12      	cmp	r3, #18
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0xee>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d123      	bne.n	800271a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80e0 	beq.w	800291c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_GPIO_Init+0x238>)
 800275e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002762:	4a2e      	ldr	r2, [pc, #184]	; (800281c <HAL_GPIO_Init+0x238>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_GPIO_Init+0x238>)
 800276e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a29      	ldr	r2, [pc, #164]	; (8002820 <HAL_GPIO_Init+0x23c>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <HAL_GPIO_Init+0x240>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d052      	beq.n	800284c <HAL_GPIO_Init+0x268>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_GPIO_Init+0x244>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_GPIO_Init+0x22e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_GPIO_Init+0x248>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02b      	beq.n	800280e <HAL_GPIO_Init+0x22a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x24c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x226>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_GPIO_Init+0x250>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x222>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_GPIO_Init+0x254>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x21e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_GPIO_Init+0x258>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x21a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <HAL_GPIO_Init+0x25c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x216>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_GPIO_Init+0x260>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x212>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a17      	ldr	r2, [pc, #92]	; (8002848 <HAL_GPIO_Init+0x264>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x20e>
 80027ee:	2309      	movs	r3, #9
 80027f0:	e02d      	b.n	800284e <HAL_GPIO_Init+0x26a>
 80027f2:	230a      	movs	r3, #10
 80027f4:	e02b      	b.n	800284e <HAL_GPIO_Init+0x26a>
 80027f6:	2308      	movs	r3, #8
 80027f8:	e029      	b.n	800284e <HAL_GPIO_Init+0x26a>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e027      	b.n	800284e <HAL_GPIO_Init+0x26a>
 80027fe:	2306      	movs	r3, #6
 8002800:	e025      	b.n	800284e <HAL_GPIO_Init+0x26a>
 8002802:	2305      	movs	r3, #5
 8002804:	e023      	b.n	800284e <HAL_GPIO_Init+0x26a>
 8002806:	2304      	movs	r3, #4
 8002808:	e021      	b.n	800284e <HAL_GPIO_Init+0x26a>
 800280a:	2303      	movs	r3, #3
 800280c:	e01f      	b.n	800284e <HAL_GPIO_Init+0x26a>
 800280e:	2302      	movs	r3, #2
 8002810:	e01d      	b.n	800284e <HAL_GPIO_Init+0x26a>
 8002812:	2301      	movs	r3, #1
 8002814:	e01b      	b.n	800284e <HAL_GPIO_Init+0x26a>
 8002816:	bf00      	nop
 8002818:	58000080 	.word	0x58000080
 800281c:	58024400 	.word	0x58024400
 8002820:	58000400 	.word	0x58000400
 8002824:	58020000 	.word	0x58020000
 8002828:	58020400 	.word	0x58020400
 800282c:	58020800 	.word	0x58020800
 8002830:	58020c00 	.word	0x58020c00
 8002834:	58021000 	.word	0x58021000
 8002838:	58021400 	.word	0x58021400
 800283c:	58021800 	.word	0x58021800
 8002840:	58021c00 	.word	0x58021c00
 8002844:	58022000 	.word	0x58022000
 8002848:	58022400 	.word	0x58022400
 800284c:	2300      	movs	r3, #0
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4093      	lsls	r3, r2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800285e:	4938      	ldr	r1, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x35c>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3301      	adds	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f ae63 	bne.w	80025f8 <HAL_GPIO_Init+0x14>
  }
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3724      	adds	r7, #36	; 0x24
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	58000400 	.word	0x58000400

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002960:	e003      	b.n	800296a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fd3a 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e006      	b.n	8002a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d104      	bne.n	8002a12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_I2C_Init+0x11c>)
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	ea42 0103 	orr.w	r1, r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69d9      	ldr	r1, [r3, #28]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	02008000 	.word	0x02008000

08002a98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 80fd 	bne.w	8002cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_I2C_Mem_Read+0x34>
 8002ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0f1      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_Mem_Read+0x4e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ea      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aee:	f7ff f803 	bl	8001af8 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f95b 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0d5      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2222      	movs	r2, #34	; 0x22
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b38:	88f8      	ldrh	r0, [r7, #6]
 8002b3a:	893a      	ldrh	r2, [r7, #8]
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4603      	mov	r3, r0
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f8bf 	bl	8002ccc <I2C_RequestMemoryRead>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0ad      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d90e      	bls.n	8002b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa3d 	bl	8003000 <I2C_TransferConfig>
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa2c 	bl	8003000 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f902 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07c      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d034      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d130      	bne.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f8d3 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04d      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2bff      	cmp	r3, #255	; 0xff
 8002c28:	d90e      	bls.n	8002c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f9dd 	bl	8003000 <I2C_TransferConfig>
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9cc 	bl	8003000 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d19a      	bne.n	8002ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f920 	bl	8002ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e01a      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_I2C_Mem_Read+0x230>)
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	80002400 	.word	0x80002400
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <I2C_RequestMemoryRead+0xa4>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f984 	bl	8003000 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f89d 	bl	8002e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02c      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	e015      	b.n	8002d4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f883 	bl	8002e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e012      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f831 	bl	8002dbc <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	80002000 	.word	0x80002000

08002d74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d103      	bne.n	8002d92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d007      	beq.n	8002db0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	619a      	str	r2, [r3, #24]
  }
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dcc:	e022      	b.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd4:	d01e      	beq.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fe8f 	bl	8001af8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d113      	bne.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e00f      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d0cd      	beq.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e48:	e02c      	b.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f870 	bl	8002f34 <I2C_IsAcknowledgeFailed>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e02a      	b.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e64:	d01e      	beq.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fe47 	bl	8001af8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d113      	bne.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e007      	b.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d1cb      	bne.n	8002e4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	e028      	b.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f830 	bl	8002f34 <I2C_IsAcknowledgeFailed>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e026      	b.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe fe0b 	bl	8001af8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d1cf      	bne.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d151      	bne.n	8002ff2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f4e:	e022      	b.n	8002f96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f56:	d01e      	beq.n	8002f96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fe fdce 	bl	8001af8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_IsAcknowledgeFailed+0x3a>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d113      	bne.n	8002f96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02e      	b.n	8002ff4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d1d5      	bne.n	8002f50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fedd 	bl	8002d74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <I2C_IsAcknowledgeFailed+0xc8>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	fe00e800 	.word	0xfe00e800

08003000 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	4613      	mov	r3, r2
 8003010:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	0d5b      	lsrs	r3, r3, #21
 800301c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <I2C_TransferConfig+0x58>)
 8003022:	430b      	orrs	r3, r1
 8003024:	43db      	mvns	r3, r3
 8003026:	ea02 0103 	and.w	r1, r2, r3
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003030:	7a7b      	ldrb	r3, [r7, #9]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	431a      	orrs	r2, r3
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	03ff63ff 	.word	0x03ff63ff

0800305c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	d138      	bne.n	80030e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800307c:	2302      	movs	r3, #2
 800307e:	e032      	b.n	80030e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d139      	bne.n	800317c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003112:	2302      	movs	r3, #2
 8003114:	e033      	b.n	800317e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2224      	movs	r2, #36	; 0x24
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800318a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318c:	b08f      	sub	sp, #60	; 0x3c
 800318e:	af0a      	add	r7, sp, #40	; 0x28
 8003190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e116      	b.n	80033ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fe fa5c 	bl	8001674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2203      	movs	r2, #3
 80031c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 ffae 	bl	800813c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	687e      	ldr	r6, [r7, #4]
 80031e8:	466d      	mov	r5, sp
 80031ea:	f106 0410 	add.w	r4, r6, #16
 80031ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80031fe:	1d33      	adds	r3, r6, #4
 8003200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003202:	6838      	ldr	r0, [r7, #0]
 8003204:	f004 ff2c 	bl	8008060 <USB_CoreInit>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0d7      	b.n	80033ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f004 ff9c 	bl	800815e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e04a      	b.n	80032c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	333d      	adds	r3, #61	; 0x3d
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	333c      	adds	r3, #60	; 0x3c
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	b298      	uxth	r0, r3
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3342      	adds	r3, #66	; 0x42
 8003268:	4602      	mov	r2, r0
 800326a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	333f      	adds	r3, #63	; 0x3f
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	; 0x44
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3348      	adds	r3, #72	; 0x48
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3350      	adds	r3, #80	; 0x50
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3af      	bcc.n	800322c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e044      	b.n	800335c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3301      	adds	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3b5      	bcc.n	80032d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	687e      	ldr	r6, [r7, #4]
 800336e:	466d      	mov	r5, sp
 8003370:	f106 0410 	add.w	r4, r6, #16
 8003374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003380:	e885 0003 	stmia.w	r5, {r0, r1}
 8003384:	1d33      	adds	r3, r6, #4
 8003386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f004 ff13 	bl	80081b4 <USB_DevInit>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e014      	b.n	80033ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f80b 	bl	80033d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 f8b5 	bl	8008532 <USB_DevDisconnect>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080033d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_PCDEx_ActivateLPM+0x44>)
 8003404:	4313      	orrs	r3, r2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	10000003 	.word	0x10000003

0800341c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_PWREx_ConfigSupply+0x70>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b04      	cmp	r3, #4
 800342e:	d00a      	beq.n	8003446 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_PWREx_ConfigSupply+0x70>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e01f      	b.n	8003482 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e01d      	b.n	8003482 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_PWREx_ConfigSupply+0x70>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	490f      	ldr	r1, [pc, #60]	; (800348c <HAL_PWREx_ConfigSupply+0x70>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003456:	f7fe fb4f 	bl	8001af8 <HAL_GetTick>
 800345a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800345c:	e009      	b.n	8003472 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800345e:	f7fe fb4b 	bl	8001af8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800346c:	d901      	bls.n	8003472 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_PWREx_ConfigSupply+0x70>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d1ee      	bne.n	800345e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	58024800 	.word	0x58024800

08003490 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349e:	60d3      	str	r3, [r2, #12]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	58024800 	.word	0x58024800

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e3ff      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8087 	beq.w	80035de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d0:	4b99      	ldr	r3, [pc, #612]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034da:	4b97      	ldr	r3, [pc, #604]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d007      	beq.n	80034f6 <HAL_RCC_OscConfig+0x46>
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b18      	cmp	r3, #24
 80034ea:	d110      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b90      	ldr	r3, [pc, #576]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d06c      	beq.n	80035dc <HAL_RCC_OscConfig+0x12c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d168      	bne.n	80035dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e3d9      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x76>
 8003518:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a86      	ldr	r2, [pc, #536]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e02e      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a81      	ldr	r2, [pc, #516]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0xbc>
 8003552:	4b79      	ldr	r3, [pc, #484]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 800356c:	4b72      	ldr	r3, [pc, #456]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a71      	ldr	r2, [pc, #452]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6e      	ldr	r2, [pc, #440]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fab4 	bl	8001af8 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe fab0 	bl	8001af8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e38d      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a6:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xe4>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe faa0 	bl	8001af8 <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe fa9c 	bl	8001af8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e379      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x10c>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80ae 	beq.w	8003748 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ec:	4b52      	ldr	r3, [pc, #328]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035f6:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_RCC_OscConfig+0x162>
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b18      	cmp	r3, #24
 8003606:	d13a      	bne.n	800367e <HAL_RCC_OscConfig+0x1ce>
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d135      	bne.n	800367e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003612:	4b49      	ldr	r3, [pc, #292]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x17a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e34b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	f7fe fa95 	bl	8001b58 <HAL_GetREVID>
 800362e:	4603      	mov	r3, r0
 8003630:	f241 0203 	movw	r2, #4099	; 0x1003
 8003634:	4293      	cmp	r3, r2
 8003636:	d817      	bhi.n	8003668 <HAL_RCC_OscConfig+0x1b8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d108      	bne.n	8003652 <HAL_RCC_OscConfig+0x1a2>
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003648:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	e07a      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	031b      	lsls	r3, r3, #12
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003666:	e06f      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	4930      	ldr	r1, [pc, #192]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367c:	e064      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d045      	beq.n	8003712 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0219 	bic.w	r2, r3, #25
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4929      	ldr	r1, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fa2e 	bl	8001af8 <HAL_GetTick>
 800369c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fe fa2a 	bl	8001af8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e307      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036be:	f7fe fa4b 	bl	8001b58 <HAL_GetREVID>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d817      	bhi.n	80036fc <HAL_RCC_OscConfig+0x24c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d108      	bne.n	80036e6 <HAL_RCC_OscConfig+0x236>
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	6053      	str	r3, [r2, #4]
 80036e4:	e030      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	4910      	ldr	r1, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
 80036fa:	e025      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	490b      	ldr	r1, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e01a      	b.n	8003748 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_RCC_OscConfig+0x288>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fe f9eb 	bl	8001af8 <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe f9e7 	bl	8001af8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d903      	bls.n	800373c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e2c4      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
 8003738:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800373c:	4ba4      	ldr	r3, [pc, #656]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ee      	bne.n	8003726 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a9 	beq.w	80038a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b9e      	ldr	r3, [pc, #632]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003760:	4b9b      	ldr	r3, [pc, #620]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d007      	beq.n	800377c <HAL_RCC_OscConfig+0x2cc>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b18      	cmp	r3, #24
 8003770:	d13a      	bne.n	80037e8 <HAL_RCC_OscConfig+0x338>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d135      	bne.n	80037e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800377c:	4b94      	ldr	r3, [pc, #592]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x2e4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e296      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003794:	f7fe f9e0 	bl	8001b58 <HAL_GetREVID>
 8003798:	4603      	mov	r3, r0
 800379a:	f241 0203 	movw	r2, #4099	; 0x1003
 800379e:	4293      	cmp	r3, r2
 80037a0:	d817      	bhi.n	80037d2 <HAL_RCC_OscConfig+0x322>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x30c>
 80037aa:	4b89      	ldr	r3, [pc, #548]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ba:	e075      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	069b      	lsls	r3, r3, #26
 80037ca:	4981      	ldr	r1, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037d0:	e06a      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d2:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	497b      	ldr	r1, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037e6:	e05f      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d042      	beq.n	8003876 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037f0:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a76      	ldr	r2, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80037f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe f97c 	bl	8001af8 <HAL_GetTick>
 8003800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003804:	f7fe f978 	bl	8001af8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e255      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003816:	4b6e      	ldr	r3, [pc, #440]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003822:	f7fe f999 	bl	8001b58 <HAL_GetREVID>
 8003826:	4603      	mov	r3, r0
 8003828:	f241 0203 	movw	r2, #4099	; 0x1003
 800382c:	4293      	cmp	r3, r2
 800382e:	d817      	bhi.n	8003860 <HAL_RCC_OscConfig+0x3b0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2b20      	cmp	r3, #32
 8003836:	d108      	bne.n	800384a <HAL_RCC_OscConfig+0x39a>
 8003838:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003840:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003846:	6053      	str	r3, [r2, #4]
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	069b      	lsls	r3, r3, #26
 8003858:	495d      	ldr	r1, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 800385e:	e023      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	4958      	ldr	r1, [pc, #352]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003870:	4313      	orrs	r3, r2
 8003872:	60cb      	str	r3, [r1, #12]
 8003874:	e018      	b.n	80038a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003876:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a55      	ldr	r2, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800387c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe f939 	bl	8001af8 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800388a:	f7fe f935 	bl	8001af8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e212      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d036      	beq.n	8003922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038bc:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe f916 	bl	8001af8 <HAL_GetTick>
 80038cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe f912 	bl	8001af8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ef      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80038e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x420>
 80038ee:	e018      	b.n	8003922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe f8fc 	bl	8001af8 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe f8f8 	bl	8001af8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1d5      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d019      	beq.n	800396a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800393c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003942:	f7fe f8d9 	bl	8001af8 <HAL_GetTick>
 8003946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800394a:	f7fe f8d5 	bl	8001af8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e1b2      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x49a>
 8003968:	e018      	b.n	800399c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003976:	f7fe f8bf 	bl	8001af8 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800397e:	f7fe f8bb 	bl	8001af8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e198      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_OscConfig+0x520>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f0      	bne.n	800397e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8085 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_OscConfig+0x524>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x524>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039b6:	f7fe f89f 	bl	8001af8 <HAL_GetTick>
 80039ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039bc:	e00c      	b.n	80039d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039be:	f7fe f89b 	bl	8001af8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d905      	bls.n	80039d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e178      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
 80039d0:	58024400 	.word	0x58024400
 80039d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d8:	4b96      	ldr	r3, [pc, #600]	; (8003c34 <HAL_RCC_OscConfig+0x784>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ec      	beq.n	80039be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x54a>
 80039ec:	4b92      	ldr	r3, [pc, #584]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a91      	ldr	r2, [pc, #580]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	e02d      	b.n	8003a56 <HAL_RCC_OscConfig+0x5a6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x56c>
 8003a02:	4b8d      	ldr	r3, [pc, #564]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a8c      	ldr	r2, [pc, #560]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	4b8a      	ldr	r3, [pc, #552]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a89      	ldr	r2, [pc, #548]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCC_OscConfig+0x5a6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x58e>
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a80      	ldr	r2, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCC_OscConfig+0x5a6>
 8003a3e:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a7d      	ldr	r2, [pc, #500]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe f84b 	bl	8001af8 <HAL_GetTick>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe f847 	bl	8001af8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e122      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCC_OscConfig+0x5b6>
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f835 	bl	8001af8 <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe f831 	bl	8001af8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e10c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aa8:	4b63      	ldr	r3, [pc, #396]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8101 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003abe:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac6:	2b18      	cmp	r3, #24
 8003ac8:	f000 80bc 	beq.w	8003c44 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	f040 8095 	bne.w	8003c00 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad6:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe f809 	bl	8001af8 <HAL_GetTick>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fe f805 	bl	8001af8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0e2      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003afc:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_OscConfig+0x78c>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	4946      	ldr	r1, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	628b      	str	r3, [r1, #40]	; 0x28
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	3b01      	subs	r3, #1
 8003b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	3b01      	subs	r3, #1
 8003b32:	025b      	lsls	r3, r3, #9
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b52:	4939      	ldr	r1, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b58:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b64:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_OscConfig+0x790>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b70:	00d2      	lsls	r2, r2, #3
 8003b72:	4931      	ldr	r1, [pc, #196]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b78:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f023 020c 	bic.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	492c      	ldr	r1, [pc, #176]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f023 0202 	bic.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4928      	ldr	r1, [pc, #160]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a25      	ldr	r2, [pc, #148]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd ff8e 	bl	8001af8 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd ff8a 	bl	8001af8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e067      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x730>
 8003bfe:	e05f      	b.n	8003cc0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd ff74 	bl	8001af8 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd ff70 	bl	8001af8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04d      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_OscConfig+0x788>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x764>
 8003c32:	e045      	b.n	8003cc0 <HAL_RCC_OscConfig+0x810>
 8003c34:	58024800 	.word	0x58024800
 8003c38:	58024400 	.word	0x58024400
 8003c3c:	fffffc0c 	.word	0xfffffc0c
 8003c40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_RCC_OscConfig+0x81c>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCC_OscConfig+0x81c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d031      	beq.n	8003cbc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0203 	and.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d12a      	bne.n	8003cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d122      	bne.n	8003cbc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d11a      	bne.n	8003cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d111      	bne.n	8003cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d108      	bne.n	8003cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400

08003cd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e19c      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b8a      	ldr	r3, [pc, #552]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d910      	bls.n	8003d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b87      	ldr	r3, [pc, #540]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 020f 	bic.w	r2, r3, #15
 8003cfa:	4985      	ldr	r1, [pc, #532]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b83      	ldr	r3, [pc, #524]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e184      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	4b7b      	ldr	r3, [pc, #492]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d908      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d30:	4b78      	ldr	r3, [pc, #480]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	4975      	ldr	r1, [pc, #468]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	4b70      	ldr	r3, [pc, #448]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d908      	bls.n	8003d70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	496a      	ldr	r1, [pc, #424]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	4b64      	ldr	r3, [pc, #400]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d908      	bls.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d8c:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	495e      	ldr	r1, [pc, #376]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d908      	bls.n	8003dcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003dba:	4b56      	ldr	r3, [pc, #344]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4953      	ldr	r1, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d908      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f023 020f 	bic.w	r2, r3, #15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4947      	ldr	r1, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d055      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e06:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4940      	ldr	r1, [pc, #256]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e20:	4b3c      	ldr	r3, [pc, #240]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0f6      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e38:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d115      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0ea      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0de      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0d6      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f023 0207 	bic.w	r2, r3, #7
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4925      	ldr	r1, [pc, #148]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd fe39 	bl	8001af8 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8a:	f7fd fe35 	bl	8001af8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0be      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d1eb      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d208      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f023 020f 	bic.w	r2, r3, #15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x244>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d214      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 020f 	bic.w	r2, r3, #15
 8003ef6:	4906      	ldr	r1, [pc, #24]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_RCC_ClockConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e086      	b.n	800401e <HAL_RCC_ClockConfig+0x34e>
 8003f10:	52002000 	.word	0x52002000
 8003f14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d208      	bcs.n	8003f46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f34:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4939      	ldr	r1, [pc, #228]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d208      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f62:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	492e      	ldr	r1, [pc, #184]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d208      	bcs.n	8003fa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d208      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fd0:	f000 f834 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	4912      	ldr	r1, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x35c>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	; (800402c <HAL_RCC_ClockConfig+0x35c>)
 8003ff8:	5cd3      	ldrb	r3, [r2, r3]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x360>)
 8004006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_RCC_ClockConfig+0x364>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_RCC_ClockConfig+0x368>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd fd26 	bl	8001a64 <HAL_InitTick>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
 800402c:	08009008 	.word	0x08009008
 8004030:	20000004 	.word	0x20000004
 8004034:	20000000 	.word	0x20000000
 8004038:	20000008 	.word	0x20000008

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004042:	4bb3      	ldr	r3, [pc, #716]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800404a:	2b18      	cmp	r3, #24
 800404c:	f200 8155 	bhi.w	80042fa <HAL_RCC_GetSysClockFreq+0x2be>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	080040bd 	.word	0x080040bd
 800405c:	080042fb 	.word	0x080042fb
 8004060:	080042fb 	.word	0x080042fb
 8004064:	080042fb 	.word	0x080042fb
 8004068:	080042fb 	.word	0x080042fb
 800406c:	080042fb 	.word	0x080042fb
 8004070:	080042fb 	.word	0x080042fb
 8004074:	080042fb 	.word	0x080042fb
 8004078:	080040e3 	.word	0x080040e3
 800407c:	080042fb 	.word	0x080042fb
 8004080:	080042fb 	.word	0x080042fb
 8004084:	080042fb 	.word	0x080042fb
 8004088:	080042fb 	.word	0x080042fb
 800408c:	080042fb 	.word	0x080042fb
 8004090:	080042fb 	.word	0x080042fb
 8004094:	080042fb 	.word	0x080042fb
 8004098:	080040e9 	.word	0x080040e9
 800409c:	080042fb 	.word	0x080042fb
 80040a0:	080042fb 	.word	0x080042fb
 80040a4:	080042fb 	.word	0x080042fb
 80040a8:	080042fb 	.word	0x080042fb
 80040ac:	080042fb 	.word	0x080042fb
 80040b0:	080042fb 	.word	0x080042fb
 80040b4:	080042fb 	.word	0x080042fb
 80040b8:	080040ef 	.word	0x080040ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040bc:	4b94      	ldr	r3, [pc, #592]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040c8:	4b91      	ldr	r3, [pc, #580]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	4a90      	ldr	r2, [pc, #576]	; (8004314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040da:	e111      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040dc:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040de:	61bb      	str	r3, [r7, #24]
    break;
 80040e0:	e10e      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040e2:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040e4:	61bb      	str	r3, [r7, #24]
    break;
 80040e6:	e10b      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040e8:	4b8c      	ldr	r3, [pc, #560]	; (800431c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040ea:	61bb      	str	r3, [r7, #24]
    break;
 80040ec:	e108      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004102:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800410e:	4b80      	ldr	r3, [pc, #512]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80e1 	beq.w	80042f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b02      	cmp	r3, #2
 8004136:	f000 8083 	beq.w	8004240 <HAL_RCC_GetSysClockFreq+0x204>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b02      	cmp	r3, #2
 800413e:	f200 80a1 	bhi.w	8004284 <HAL_RCC_GetSysClockFreq+0x248>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x114>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d056      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800414e:	e099      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004150:	4b6f      	ldr	r3, [pc, #444]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800415c:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	4a6b      	ldr	r2, [pc, #428]	; (8004314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
 800416c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b62      	ldr	r3, [pc, #392]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a02 	vldr	s12, [r7, #8]
 800419a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80041b6:	e087      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004324 <HAL_RCC_GetSysClockFreq+0x2e8>
 80041c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	ed97 6a02 	vldr	s12, [r7, #8]
 80041de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041fa:	e065      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004328 <HAL_RCC_GetSysClockFreq+0x2ec>
 800420a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420e:	4b40      	ldr	r3, [pc, #256]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004222:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004320 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800423e:	e043      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800432c <HAL_RCC_GetSysClockFreq+0x2f0>
 800424e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004252:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004262:	ed97 6a02 	vldr	s12, [r7, #8]
 8004266:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800426a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004282:	e021      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004328 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	0a5b      	lsrs	r3, r3, #9
 80042ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d2:	3301      	adds	r3, #1
 80042d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ec:	ee17 3a90 	vmov	r3, s15
 80042f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042f2:	e005      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    break;
 80042f8:	e002      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042fc:	61bb      	str	r3, [r7, #24]
    break;
 80042fe:	bf00      	nop
  }

  return sysclockfreq;
 8004300:	69bb      	ldr	r3, [r7, #24]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
 8004314:	03d09000 	.word	0x03d09000
 8004318:	003d0900 	.word	0x003d0900
 800431c:	007a1200 	.word	0x007a1200
 8004320:	46000000 	.word	0x46000000
 8004324:	4c742400 	.word	0x4c742400
 8004328:	4a742400 	.word	0x4a742400
 800432c:	4af42400 	.word	0x4af42400

08004330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004336:	f7ff fe81 	bl	800403c <HAL_RCC_GetSysClockFreq>
 800433a:	4602      	mov	r2, r0
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_GetHCLKFreq+0x50>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	490f      	ldr	r1, [pc, #60]	; (8004384 <HAL_RCC_GetHCLKFreq+0x54>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_RCC_GetHCLKFreq+0x50>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_GetHCLKFreq+0x54>)
 800435e:	5cd3      	ldrb	r3, [r2, r3]
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_RCC_GetHCLKFreq+0x58>)
 800436c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <HAL_RCC_GetHCLKFreq+0x58>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	58024400 	.word	0x58024400
 8004384:	08009008 	.word	0x08009008
 8004388:	20000004 	.word	0x20000004
 800438c:	20000000 	.word	0x20000000

08004390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004394:	f7ff ffcc 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	58024400 	.word	0x58024400
 80043b8:	08009008 	.word	0x08009008

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043c0:	f7ff ffb6 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4904      	ldr	r1, [pc, #16]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	58024400 	.word	0x58024400
 80043e4:	08009008 	.word	0x08009008

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f4:	2300      	movs	r3, #0
 80043f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800440c:	d02a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800440e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004412:	d824      	bhi.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004418:	d018      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441e:	d81e      	bhi.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004428:	d007      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800442a:	e018      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4bab      	ldr	r3, [pc, #684]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4aaa      	ldr	r2, [pc, #680]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004438:	e015      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f9cf 	bl	80057e4 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800444a:	e00c      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3324      	adds	r3, #36	; 0x24
 8004450:	2102      	movs	r1, #2
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa78 	bl	8005948 <RCCEx_PLL3_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
      break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800446c:	4b9b      	ldr	r3, [pc, #620]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004478:	4998      	ldr	r1, [pc, #608]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	650b      	str	r3, [r1, #80]	; 0x50
 800447e:	e001      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	2b04      	cmp	r3, #4
 8004496:	d826      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b5 	.word	0x080044b5
 80044a4:	080044c3 	.word	0x080044c3
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044ed 	.word	0x080044ed
 80044b0:	080044ed 	.word	0x080044ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4b89      	ldr	r3, [pc, #548]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a88      	ldr	r2, [pc, #544]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044c0:	e015      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 f98b 	bl	80057e4 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044d2:	e00c      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fa34 	bl	8005948 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80044ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f4:	4b79      	ldr	r3, [pc, #484]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f8:	f023 0207 	bic.w	r2, r3, #7
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	4976      	ldr	r1, [pc, #472]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	650b      	str	r3, [r1, #80]	; 0x50
 8004506:	e001      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004514:	2b00      	cmp	r3, #0
 8004516:	d042      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004520:	d02b      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004526:	d825      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004528:	2bc0      	cmp	r3, #192	; 0xc0
 800452a:	d028      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800452c:	2bc0      	cmp	r3, #192	; 0xc0
 800452e:	d821      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	d016      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d81d      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d007      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004540:	e018      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004542:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	4a65      	ldr	r2, [pc, #404]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800454e:	e017      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f944 	bl	80057e4 <RCCEx_PLL2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004560:	e00e      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3324      	adds	r3, #36	; 0x24
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f9ed 	bl	8005948 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
      break;
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800457e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004586:	4b55      	ldr	r3, [pc, #340]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	4952      	ldr	r1, [pc, #328]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	650b      	str	r3, [r1, #80]	; 0x50
 8004598:	e001      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d049      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b4:	d030      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80045b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ba:	d82a      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045c0:	d02c      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80045c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045c6:	d824      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045cc:	d018      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80045ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d2:	d81e      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80045d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045dc:	d007      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80045de:	e018      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4b3e      	ldr	r3, [pc, #248]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045ec:	e017      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f8f5 	bl	80057e4 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045fe:	e00e      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f99e 	bl	8005948 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004610:	e005      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
      break;
 8004616:	e002      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004624:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004632:	492a      	ldr	r1, [pc, #168]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	658b      	str	r3, [r1, #88]	; 0x58
 8004638:	e001      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04c      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d030      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d82a      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800465c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004660:	d02c      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004666:	d824      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800466c:	d018      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800466e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004672:	d81e      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800467c:	d007      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800467e:	e018      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800468c:	e017      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f001 f8a5 	bl	80057e4 <RCCEx_PLL2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800469e:	e00e      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3324      	adds	r3, #36	; 0x24
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f94e 	bl	8005948 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046b0:	e005      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
      break;
 80046b6:	e002      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80046bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10d      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046d2:	4902      	ldr	r1, [pc, #8]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	658b      	str	r3, [r1, #88]	; 0x58
 80046d8:	e004      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80046da:	bf00      	nop
 80046dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d032      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d01c      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d817      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d00c      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d813      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d016      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d10f      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470c:	4baf      	ldr	r3, [pc, #700]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4aae      	ldr	r2, [pc, #696]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004718:	e00e      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f85f 	bl	80057e4 <RCCEx_PLL2_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800472a:	e005      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
      break;
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800473e:	4ba3      	ldr	r3, [pc, #652]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	49a0      	ldr	r1, [pc, #640]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004750:	e001      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d047      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476a:	d030      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004770:	d82a      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004776:	d02c      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477c:	d824      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800477e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004782:	d018      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004788:	d81e      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d007      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004794:	e018      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004796:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	4a8c      	ldr	r2, [pc, #560]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047a2:	e017      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f81a 	bl	80057e4 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047b4:	e00e      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f8c3 	bl	8005948 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047c6:	e005      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
      break;
 80047cc:	e002      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80047d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047da:	4b7c      	ldr	r3, [pc, #496]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	4979      	ldr	r1, [pc, #484]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	650b      	str	r3, [r1, #80]	; 0x50
 80047ec:	e001      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d049      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004806:	d02e      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d828      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800480e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004812:	d02a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004818:	d822      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800481a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800481e:	d026      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004820:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004824:	d81c      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482a:	d010      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800482c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004830:	d816      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d111      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	2101      	movs	r1, #1
 8004842:	4618      	mov	r0, r3
 8004844:	f000 ffce 	bl	80057e4 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800484c:	e012      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3324      	adds	r3, #36	; 0x24
 8004852:	2101      	movs	r1, #1
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f877 	bl	8005948 <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800485e:	e009      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	75fb      	strb	r3, [r7, #23]
      break;
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800487a:	4b54      	ldr	r3, [pc, #336]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004886:	4951      	ldr	r1, [pc, #324]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	650b      	str	r3, [r1, #80]	; 0x50
 800488c:	e001      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04b      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a8:	d02e      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80048aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ae:	d828      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d02a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d822      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048c0:	d026      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80048c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048c6:	d81c      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048cc:	d010      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80048ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d2:	d816      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01d      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80048d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048dc:	d111      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 ff7d 	bl	80057e4 <RCCEx_PLL2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048ee:	e012      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3324      	adds	r3, #36	; 0x24
 80048f4:	2101      	movs	r1, #1
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f826 	bl	8005948 <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004900:	e009      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
      break;
 8004906:	e006      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004908:	bf00      	nop
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800492a:	4928      	ldr	r1, [pc, #160]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800492c:	4313      	orrs	r3, r2
 800492e:	658b      	str	r3, [r1, #88]	; 0x58
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d02f      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494a:	d00e      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800494c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004950:	d814      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d015      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800495a:	d10f      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004968:	e00c      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f000 ff37 	bl	80057e4 <RCCEx_PLL2_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800497a:	e003      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
      break;
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	490d      	ldr	r1, [pc, #52]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	650b      	str	r3, [r1, #80]	; 0x50
 800499c:	e001      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d033      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d81c      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049f7 	.word	0x080049f7
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049df 	.word	0x080049df
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4bb8      	ldr	r3, [pc, #736]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4ab7      	ldr	r2, [pc, #732]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049dc:	e00c      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fefd 	bl	80057e4 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049ee:	e003      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      break;
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80049f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049fe:	4bad      	ldr	r3, [pc, #692]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	49aa      	ldr	r1, [pc, #680]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a10:	e001      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8086 	beq.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a24:	4ba4      	ldr	r3, [pc, #656]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4aa3      	ldr	r2, [pc, #652]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a30:	f7fd f862 	bl	8001af8 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a36:	e009      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fd f85e 	bl	8001af8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d902      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	75fb      	strb	r3, [r7, #23]
        break;
 8004a4a:	e005      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a4c:	4b9a      	ldr	r3, [pc, #616]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ef      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d166      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a5e:	4b95      	ldr	r3, [pc, #596]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a68:	4053      	eors	r3, r2
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d013      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a72:	4b90      	ldr	r3, [pc, #576]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a7c:	4b8d      	ldr	r3, [pc, #564]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a8c      	ldr	r2, [pc, #560]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a88:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a89      	ldr	r2, [pc, #548]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a94:	4a87      	ldr	r2, [pc, #540]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d115      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fd f827 	bl	8001af8 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aac:	e00b      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fd f823 	bl	8001af8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d902      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ed      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d126      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ae8:	4b72      	ldr	r3, [pc, #456]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af6:	0919      	lsrs	r1, r3, #4
 8004af8:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004afa:	400b      	ands	r3, r1
 8004afc:	496d      	ldr	r1, [pc, #436]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	610b      	str	r3, [r1, #16]
 8004b02:	e005      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004b04:	4b6b      	ldr	r3, [pc, #428]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	4a6a      	ldr	r2, [pc, #424]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b0e:	6113      	str	r3, [r2, #16]
 8004b10:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1e:	4965      	ldr	r1, [pc, #404]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	670b      	str	r3, [r1, #112]	; 0x70
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	75bb      	strb	r3, [r7, #22]
 8004b2a:	e001      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d07e      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b40:	2b28      	cmp	r3, #40	; 0x28
 8004b42:	d867      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004c1b 	.word	0x08004c1b
 8004b50:	08004c15 	.word	0x08004c15
 8004b54:	08004c15 	.word	0x08004c15
 8004b58:	08004c15 	.word	0x08004c15
 8004b5c:	08004c15 	.word	0x08004c15
 8004b60:	08004c15 	.word	0x08004c15
 8004b64:	08004c15 	.word	0x08004c15
 8004b68:	08004c15 	.word	0x08004c15
 8004b6c:	08004bf1 	.word	0x08004bf1
 8004b70:	08004c15 	.word	0x08004c15
 8004b74:	08004c15 	.word	0x08004c15
 8004b78:	08004c15 	.word	0x08004c15
 8004b7c:	08004c15 	.word	0x08004c15
 8004b80:	08004c15 	.word	0x08004c15
 8004b84:	08004c15 	.word	0x08004c15
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c03 	.word	0x08004c03
 8004b90:	08004c15 	.word	0x08004c15
 8004b94:	08004c15 	.word	0x08004c15
 8004b98:	08004c15 	.word	0x08004c15
 8004b9c:	08004c15 	.word	0x08004c15
 8004ba0:	08004c15 	.word	0x08004c15
 8004ba4:	08004c15 	.word	0x08004c15
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004c1b 	.word	0x08004c1b
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004c15 	.word	0x08004c15
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c15 	.word	0x08004c15
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c1b 	.word	0x08004c1b
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c1b 	.word	0x08004c1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fdf4 	bl	80057e4 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c00:	e00c      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3324      	adds	r3, #36	; 0x24
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fe9d 	bl	8005948 <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	4921      	ldr	r1, [pc, #132]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	654b      	str	r3, [r1, #84]	; 0x54
 8004c34:	e001      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d03e      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d820      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c97 	.word	0x08004c97
 8004c58:	08004c6d 	.word	0x08004c6d
 8004c5c:	08004c7f 	.word	0x08004c7f
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	2101      	movs	r1, #1
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fdb6 	bl	80057e4 <RCCEx_PLL2_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c7c:	e00c      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3324      	adds	r3, #36	; 0x24
 8004c82:	2101      	movs	r1, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fe5f 	bl	8005948 <RCCEx_PLL3_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	e000      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	4902      	ldr	r1, [pc, #8]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	654b      	str	r3, [r1, #84]	; 0x54
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58024800 	.word	0x58024800
 8004cbc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d039      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d820      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d23 	.word	0x08004d23
 8004ce4:	08004cf9 	.word	0x08004cf9
 8004ce8:	08004d0b 	.word	0x08004d0b
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d23 	.word	0x08004d23
 8004cf4:	08004d23 	.word	0x08004d23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fd70 	bl	80057e4 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d08:	e00c      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3324      	adds	r3, #36	; 0x24
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe19 	bl	8005948 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	e000      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d2a:	4bb7      	ldr	r3, [pc, #732]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f023 0207 	bic.w	r2, r3, #7
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d38:	49b3      	ldr	r1, [pc, #716]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004d3e:	e001      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d04b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d5a:	d02e      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d60:	d828      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d02a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d822      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d72:	d026      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d78:	d81c      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7e:	d010      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d84:	d816      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01d      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8e:	d111      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fd24 	bl	80057e4 <RCCEx_PLL2_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004da0:	e012      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3324      	adds	r3, #36	; 0x24
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fdcd 	bl	8005948 <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004db2:	e009      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dce:	4b8e      	ldr	r3, [pc, #568]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ddc:	498a      	ldr	r1, [pc, #552]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	654b      	str	r3, [r1, #84]	; 0x54
 8004de2:	e001      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
 8004de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d04b      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dfe:	d02e      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004e00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e04:	d828      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d02a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d822      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e16:	d026      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1c:	d81c      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e22:	d010      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e28:	d816      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d01d      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	d111      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fcd2 	bl	80057e4 <RCCEx_PLL2_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e44:	e012      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3324      	adds	r3, #36	; 0x24
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd7b 	bl	8005948 <RCCEx_PLL3_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e56:	e009      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5c:	e006      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e004      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e72:	4b65      	ldr	r3, [pc, #404]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e80:	4961      	ldr	r1, [pc, #388]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	658b      	str	r3, [r1, #88]	; 0x58
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d04b      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ea2:	d02e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004ea4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ea8:	d828      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eae:	d02a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d822      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004eb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004eba:	d026      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004ebc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ecc:	d816      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01d      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d111      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fc80 	bl	80057e4 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fd29 	bl	8005948 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f16:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f24:	4938      	ldr	r1, [pc, #224]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2a:	e001      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fcfa 	bl	8005948 <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f5e:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	4926      	ldr	r1, [pc, #152]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f88:	d10a      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fcd9 	bl	8005948 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	4916      	ldr	r1, [pc, #88]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d036      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fca:	d01f      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd0:	d817      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004fdc:	e011      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fbfd 	bl	80057e4 <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fee:	e00e      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fca6 	bl	8005948 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      break;
 8005006:	e002      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005008:	58024400 	.word	0x58024400
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005014:	4b93      	ldr	r3, [pc, #588]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005022:	4990      	ldr	r1, [pc, #576]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	658b      	str	r3, [r1, #88]	; 0x58
 8005028:	e001      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d033      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005044:	d01c      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800504a:	d816      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800504c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005056:	d007      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005058:	e00f      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	4b82      	ldr	r3, [pc, #520]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4a81      	ldr	r2, [pc, #516]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005066:	e00c      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fc6a 	bl	8005948 <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005078:	e003      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005088:	4b76      	ldr	r3, [pc, #472]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005096:	4973      	ldr	r1, [pc, #460]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	654b      	str	r3, [r1, #84]	; 0x54
 800509c:	e001      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d029      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80050b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ba:	d007      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80050bc:	e00f      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050be:	4b69      	ldr	r3, [pc, #420]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a68      	ldr	r2, [pc, #416]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050ca:	e00b      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	2102      	movs	r1, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fb86 	bl	80057e4 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050ea:	4b5e      	ldr	r3, [pc, #376]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	495b      	ldr	r1, [pc, #364]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050fc:	e001      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3324      	adds	r3, #36	; 0x24
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fc17 	bl	8005948 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d030      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005138:	d017      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800513a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513e:	d811      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d013      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514a:	d80b      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005154:	d106      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005156:	4b43      	ldr	r3, [pc, #268]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	4a42      	ldr	r2, [pc, #264]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800515c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005162:	e007      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800517a:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005186:	4937      	ldr	r1, [pc, #220]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	654b      	str	r3, [r1, #84]	; 0x54
 800518c:	e001      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	492e      	ldr	r1, [pc, #184]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051bc:	4b29      	ldr	r3, [pc, #164]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051ca:	4926      	ldr	r1, [pc, #152]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e8:	491e      	ldr	r1, [pc, #120]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	4a19      	ldr	r2, [pc, #100]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005204:	6113      	str	r3, [r2, #16]
 8005206:	4b17      	ldr	r3, [pc, #92]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005210:	4914      	ldr	r1, [pc, #80]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	da08      	bge.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	490e      	ldr	r1, [pc, #56]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800522c:	4313      	orrs	r3, r2
 800522e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d009      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	4906      	ldr	r1, [pc, #24]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005250:	7dbb      	ldrb	r3, [r7, #22]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e000      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	58024400 	.word	0x58024400

08005268 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800526c:	f7ff f860 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	58024400 	.word	0x58024400
 8005290:	08009008 	.word	0x08009008

08005294 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800529c:	4ba1      	ldr	r3, [pc, #644]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80052a6:	4b9f      	ldr	r3, [pc, #636]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	0b1b      	lsrs	r3, r3, #12
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052b2:	4b9c      	ldr	r3, [pc, #624]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80052be:	4b99      	ldr	r3, [pc, #612]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8111 	beq.w	8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	f000 8083 	beq.w	80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f200 80a1 	bhi.w	8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d056      	beq.n	80053ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052fe:	e099      	b.n	8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005300:	4b88      	ldr	r3, [pc, #544]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02d      	beq.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800530c:	4b85      	ldr	r3, [pc, #532]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	4a84      	ldr	r2, [pc, #528]	; (8005528 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a03 	vldr	s12, [r7, #12]
 800534a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005366:	e087      	b.n	8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005530 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538a:	ed97 6a03 	vldr	s12, [r7, #12]
 800538e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053aa:	e065      	b.n	8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b59      	ldr	r3, [pc, #356]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ee:	e043      	b.n	8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b48      	ldr	r3, [pc, #288]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a03 	vldr	s12, [r7, #12]
 8005416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005432:	e021      	b.n	8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b37      	ldr	r3, [pc, #220]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a03 	vldr	s12, [r7, #12]
 800545a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005476:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005478:	4b2a      	ldr	r3, [pc, #168]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	0a5b      	lsrs	r3, r3, #9
 800547e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005492:	edd7 6a07 	vldr	s13, [r7, #28]
 8005496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549e:	ee17 2a90 	vmov	r2, s15
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80054a6:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054cc:	ee17 2a90 	vmov	r2, s15
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054fa:	ee17 2a90 	vmov	r2, s15
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005502:	e008      	b.n	8005516 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
}
 8005516:	bf00      	nop
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	58024400 	.word	0x58024400
 8005528:	03d09000 	.word	0x03d09000
 800552c:	46000000 	.word	0x46000000
 8005530:	4c742400 	.word	0x4c742400
 8005534:	4a742400 	.word	0x4a742400
 8005538:	4af42400 	.word	0x4af42400

0800553c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005544:	4ba1      	ldr	r3, [pc, #644]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800554e:	4b9f      	ldr	r3, [pc, #636]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	0d1b      	lsrs	r3, r3, #20
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800555a:	4b9c      	ldr	r3, [pc, #624]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005566:	4b99      	ldr	r3, [pc, #612]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8111 	beq.w	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b02      	cmp	r3, #2
 800558e:	f000 8083 	beq.w	8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b02      	cmp	r3, #2
 8005596:	f200 80a1 	bhi.w	80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d056      	beq.n	8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055a6:	e099      	b.n	80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a8:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02d      	beq.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055b4:	4b85      	ldr	r3, [pc, #532]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	4a84      	ldr	r2, [pc, #528]	; (80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b7b      	ldr	r3, [pc, #492]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800560e:	e087      	b.n	8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a03 	vldr	s12, [r7, #12]
 8005636:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005652:	e065      	b.n	8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005676:	ed97 6a03 	vldr	s12, [r7, #12]
 800567a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800567e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005696:	e043      	b.n	8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80056be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056da:	e021      	b.n	8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005720:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	0a5b      	lsrs	r3, r3, #9
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800573a:	edd7 6a07 	vldr	s13, [r7, #28]
 800573e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005746:	ee17 2a90 	vmov	r2, s15
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005768:	edd7 6a07 	vldr	s13, [r7, #28]
 800576c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005774:	ee17 2a90 	vmov	r2, s15
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	0e1b      	lsrs	r3, r3, #24
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005796:	edd7 6a07 	vldr	s13, [r7, #28]
 800579a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a2:	ee17 2a90 	vmov	r2, s15
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057aa:	e008      	b.n	80057be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	609a      	str	r2, [r3, #8]
}
 80057be:	bf00      	nop
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	58024400 	.word	0x58024400
 80057d0:	03d09000 	.word	0x03d09000
 80057d4:	46000000 	.word	0x46000000
 80057d8:	4c742400 	.word	0x4c742400
 80057dc:	4a742400 	.word	0x4a742400
 80057e0:	4af42400 	.word	0x4af42400

080057e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057f2:	4b53      	ldr	r3, [pc, #332]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d101      	bne.n	8005802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e099      	b.n	8005936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005802:	4b4f      	ldr	r3, [pc, #316]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4e      	ldr	r2, [pc, #312]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800580c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fc f973 	bl	8001af8 <HAL_GetTick>
 8005812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005814:	e008      	b.n	8005828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005816:	f7fc f96f 	bl	8001af8 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e086      	b.n	8005936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005834:	4b42      	ldr	r3, [pc, #264]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	493f      	ldr	r1, [pc, #252]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	628b      	str	r3, [r1, #40]	; 0x28
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	3b01      	subs	r3, #1
 800584e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	3b01      	subs	r3, #1
 8005858:	025b      	lsls	r3, r3, #9
 800585a:	b29b      	uxth	r3, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	3b01      	subs	r3, #1
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005878:	4931      	ldr	r1, [pc, #196]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800587e:	4b30      	ldr	r3, [pc, #192]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	492d      	ldr	r1, [pc, #180]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	f023 0220 	bic.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4928      	ldr	r1, [pc, #160]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	4a26      	ldr	r2, [pc, #152]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058ae:	4b24      	ldr	r3, [pc, #144]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <RCCEx_PLL2_Config+0x160>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	69d2      	ldr	r2, [r2, #28]
 80058ba:	00d2      	lsls	r2, r2, #3
 80058bc:	4920      	ldr	r1, [pc, #128]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058c2:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058e0:	e00f      	b.n	8005902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058f4:	e005      	b.n	8005902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058f6:	4b12      	ldr	r3, [pc, #72]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a11      	ldr	r2, [pc, #68]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a0e      	ldr	r2, [pc, #56]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800590c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590e:	f7fc f8f3 	bl	8001af8 <HAL_GetTick>
 8005912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005914:	e008      	b.n	8005928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005916:	f7fc f8ef 	bl	8001af8 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <RCCEx_PLL2_Config+0x15c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	ffff0007 	.word	0xffff0007

08005948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005956:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d101      	bne.n	8005966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e099      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005966:	4b4f      	ldr	r3, [pc, #316]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a4e      	ldr	r2, [pc, #312]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800596c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005972:	f7fc f8c1 	bl	8001af8 <HAL_GetTick>
 8005976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005978:	e008      	b.n	800598c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800597a:	f7fc f8bd 	bl	8001af8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e086      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800598c:	4b45      	ldr	r3, [pc, #276]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	051b      	lsls	r3, r3, #20
 80059a6:	493f      	ldr	r1, [pc, #252]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	628b      	str	r3, [r1, #40]	; 0x28
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	b29b      	uxth	r3, r3
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	061b      	lsls	r3, r3, #24
 80059d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059dc:	4931      	ldr	r1, [pc, #196]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059e2:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	492d      	ldr	r1, [pc, #180]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059f4:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4928      	ldr	r1, [pc, #160]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a06:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <RCCEx_PLL3_Config+0x160>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	69d2      	ldr	r2, [r2, #28]
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	4920      	ldr	r1, [pc, #128]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a26:	4b1f      	ldr	r3, [pc, #124]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a38:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a44:	e00f      	b.n	8005a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a4c:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a58:	e005      	b.n	8005a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a11      	ldr	r2, [pc, #68]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0e      	ldr	r2, [pc, #56]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a72:	f7fc f841 	bl	8001af8 <HAL_GetTick>
 8005a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a7a:	f7fc f83d 	bl	8001af8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	ffff0007 	.word	0xffff0007

08005aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e049      	b.n	8005b52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fd04 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f000 fd30 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e049      	b.n	8005c00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f841 	bl	8005c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f000 fcd9 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_TIM_PWM_Start_IT+0x24>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e03c      	b.n	8005cba <HAL_TIM_PWM_Start_IT+0x9e>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d109      	bne.n	8005c5a <HAL_TIM_PWM_Start_IT+0x3e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	e02f      	b.n	8005cba <HAL_TIM_PWM_Start_IT+0x9e>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d109      	bne.n	8005c74 <HAL_TIM_PWM_Start_IT+0x58>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e022      	b.n	8005cba <HAL_TIM_PWM_Start_IT+0x9e>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	d109      	bne.n	8005c8e <HAL_TIM_PWM_Start_IT+0x72>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	bf14      	ite	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	2300      	moveq	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e015      	b.n	8005cba <HAL_TIM_PWM_Start_IT+0x9e>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d109      	bne.n	8005ca8 <HAL_TIM_PWM_Start_IT+0x8c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e008      	b.n	8005cba <HAL_TIM_PWM_Start_IT+0x9e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0e2      	b.n	8005e88 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start_IT+0xb6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd0:	e023      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0xfe>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Start_IT+0xc6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce0:	e01b      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0xfe>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start_IT+0xd6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf0:	e013      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0xfe>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start_IT+0xe6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0xfe>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start_IT+0xf6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d10:	e003      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0xfe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d841      	bhi.n	8005da4 <HAL_TIM_PWM_Start_IT+0x188>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005da5 	.word	0x08005da5
 8005d30:	08005da5 	.word	0x08005da5
 8005d34:	08005da5 	.word	0x08005da5
 8005d38:	08005d6f 	.word	0x08005d6f
 8005d3c:	08005da5 	.word	0x08005da5
 8005d40:	08005da5 	.word	0x08005da5
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	08005d81 	.word	0x08005d81
 8005d4c:	08005da5 	.word	0x08005da5
 8005d50:	08005da5 	.word	0x08005da5
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005d93 	.word	0x08005d93
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0202 	orr.w	r2, r2, #2
 8005d6a:	60da      	str	r2, [r3, #12]
      break;
 8005d6c:	e01b      	b.n	8005da6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0204 	orr.w	r2, r2, #4
 8005d7c:	60da      	str	r2, [r3, #12]
      break;
 8005d7e:	e012      	b.n	8005da6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	60da      	str	r2, [r3, #12]
      break;
 8005d90:	e009      	b.n	8005da6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0210 	orr.w	r2, r2, #16
 8005da0:	60da      	str	r2, [r3, #12]
      break;
 8005da2:	e000      	b.n	8005da6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8005da4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2201      	movs	r2, #1
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ffd4 	bl	8006d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a35      	ldr	r2, [pc, #212]	; (8005e90 <HAL_TIM_PWM_Start_IT+0x274>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a34      	ldr	r2, [pc, #208]	; (8005e94 <HAL_TIM_PWM_Start_IT+0x278>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a32      	ldr	r2, [pc, #200]	; (8005e98 <HAL_TIM_PWM_Start_IT+0x27c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a31      	ldr	r2, [pc, #196]	; (8005e9c <HAL_TIM_PWM_Start_IT+0x280>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <HAL_TIM_PWM_Start_IT+0x284>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_TIM_PWM_Start_IT+0x1ce>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_TIM_PWM_Start_IT+0x1d0>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_TIM_PWM_Start_IT+0x274>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d018      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_TIM_PWM_Start_IT+0x288>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_TIM_PWM_Start_IT+0x290>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a17      	ldr	r2, [pc, #92]	; (8005e94 <HAL_TIM_PWM_Start_IT+0x278>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_PWM_Start_IT+0x22a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_TIM_PWM_Start_IT+0x294>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d115      	bne.n	8005e72 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <HAL_TIM_PWM_Start_IT+0x298>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d015      	beq.n	8005e84 <HAL_TIM_PWM_Start_IT+0x268>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5e:	d011      	beq.n	8005e84 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	e008      	b.n	8005e84 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40001800 	.word	0x40001800
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0202 	mvn.w	r2, #2
 8005ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb14 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fb06 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fb f8ff 	bl	800110c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0204 	mvn.w	r2, #4
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 faea 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fadc 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fb f8d5 	bl	800110c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0208 	mvn.w	r2, #8
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2204      	movs	r2, #4
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fac0 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fab2 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7fb f8ab 	bl	800110c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0210 	mvn.w	r2, #16
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa96 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa88 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fb f881 	bl	800110c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10e      	bne.n	800603c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d107      	bne.n	800603c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0201 	mvn.w	r2, #1
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa62 	bl	8006500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d10e      	bne.n	8006068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d107      	bne.n	8006068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ff32 	bl	8006ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006076:	d10e      	bne.n	8006096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d107      	bne.n	8006096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 ff25 	bl	8006ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d10e      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa3d 	bl	800653c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d10e      	bne.n	80060ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0220 	mvn.w	r2, #32
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fee5 	bl	8006eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800610e:	2302      	movs	r3, #2
 8006110:	e0fd      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b14      	cmp	r3, #20
 800611e:	f200 80f0 	bhi.w	8006302 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	0800617d 	.word	0x0800617d
 800612c:	08006303 	.word	0x08006303
 8006130:	08006303 	.word	0x08006303
 8006134:	08006303 	.word	0x08006303
 8006138:	080061bd 	.word	0x080061bd
 800613c:	08006303 	.word	0x08006303
 8006140:	08006303 	.word	0x08006303
 8006144:	08006303 	.word	0x08006303
 8006148:	080061ff 	.word	0x080061ff
 800614c:	08006303 	.word	0x08006303
 8006150:	08006303 	.word	0x08006303
 8006154:	08006303 	.word	0x08006303
 8006158:	0800623f 	.word	0x0800623f
 800615c:	08006303 	.word	0x08006303
 8006160:	08006303 	.word	0x08006303
 8006164:	08006303 	.word	0x08006303
 8006168:	08006281 	.word	0x08006281
 800616c:	08006303 	.word	0x08006303
 8006170:	08006303 	.word	0x08006303
 8006174:	08006303 	.word	0x08006303
 8006178:	080062c1 	.word	0x080062c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa7e 	bl	8006684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0208 	orr.w	r2, r2, #8
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0204 	bic.w	r2, r2, #4
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	619a      	str	r2, [r3, #24]
      break;
 80061ba:	e0a3      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 faee 	bl	80067a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	619a      	str	r2, [r3, #24]
      break;
 80061fc:	e082      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fb57 	bl	80068b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0208 	orr.w	r2, r2, #8
 8006218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0204 	bic.w	r2, r2, #4
 8006228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69d9      	ldr	r1, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	61da      	str	r2, [r3, #28]
      break;
 800623c:	e062      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fbbd 	bl	80069c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	021a      	lsls	r2, r3, #8
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	61da      	str	r2, [r3, #28]
      break;
 800627e:	e041      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fc04 	bl	8006a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0208 	orr.w	r2, r2, #8
 800629a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0204 	bic.w	r2, r2, #4
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062be:	e021      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fc46 	bl	8006b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	021a      	lsls	r2, r3, #8
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006300:	e000      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop

08006318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIM_ConfigClockSource+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e0db      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4b69      	ldr	r3, [pc, #420]	; (80064f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800634c:	4013      	ands	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a63      	ldr	r2, [pc, #396]	; (80064f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f000 80a9 	beq.w	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 800636c:	4a61      	ldr	r2, [pc, #388]	; (80064f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	f200 80ae 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006374:	4a60      	ldr	r2, [pc, #384]	; (80064f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	f000 80a1 	beq.w	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 800637c:	4a5e      	ldr	r2, [pc, #376]	; (80064f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f200 80a6 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006384:	4a5d      	ldr	r2, [pc, #372]	; (80064fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 8099 	beq.w	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 800638c:	4a5b      	ldr	r2, [pc, #364]	; (80064fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f200 809e 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006394:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006398:	f000 8091 	beq.w	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 800639c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063a0:	f200 8096 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a8:	f000 8089 	beq.w	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 80063ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b0:	f200 808e 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b8:	d03e      	beq.n	8006438 <HAL_TIM_ConfigClockSource+0x120>
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	f200 8087 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	f000 8085 	beq.w	80064d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d87f      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063d0:	2b70      	cmp	r3, #112	; 0x70
 80063d2:	d01a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0xf2>
 80063d4:	2b70      	cmp	r3, #112	; 0x70
 80063d6:	d87b      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063d8:	2b60      	cmp	r3, #96	; 0x60
 80063da:	d050      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x166>
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d877      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063e0:	2b50      	cmp	r3, #80	; 0x50
 80063e2:	d03c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x146>
 80063e4:	2b50      	cmp	r3, #80	; 0x50
 80063e6:	d873      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d058      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x186>
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d86f      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d064      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 80063f4:	2b30      	cmp	r3, #48	; 0x30
 80063f6:	d86b      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d060      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d867      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05c      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x1a6>
 8006404:	2b10      	cmp	r3, #16
 8006406:	d05a      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006408:	e062      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6899      	ldr	r1, [r3, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f000 fc7f 	bl	8006d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800642c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
      break;
 8006436:	e04e      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f000 fc68 	bl	8006d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800645a:	609a      	str	r2, [r3, #8]
      break;
 800645c:	e03b      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 fbd8 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2150      	movs	r1, #80	; 0x50
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc32 	bl	8006ce0 <TIM_ITRx_SetConfig>
      break;
 800647c:	e02b      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fbf7 	bl	8006c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2160      	movs	r1, #96	; 0x60
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fc22 	bl	8006ce0 <TIM_ITRx_SetConfig>
      break;
 800649c:	e01b      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fbb8 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc12 	bl	8006ce0 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e00b      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f000 fc09 	bl	8006ce0 <TIM_ITRx_SetConfig>
        break;
 80064ce:	e002      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80064d0:	bf00      	nop
 80064d2:	e000      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80064d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	ffceff88 	.word	0xffceff88
 80064f4:	00100040 	.word	0x00100040
 80064f8:	00100030 	.word	0x00100030
 80064fc:	00100020 	.word	0x00100020

08006500 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a40      	ldr	r2, [pc, #256]	; (8006664 <TIM_Base_SetConfig+0x114>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a3d      	ldr	r2, [pc, #244]	; (8006668 <TIM_Base_SetConfig+0x118>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3c      	ldr	r2, [pc, #240]	; (800666c <TIM_Base_SetConfig+0x11c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3b      	ldr	r2, [pc, #236]	; (8006670 <TIM_Base_SetConfig+0x120>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a3a      	ldr	r2, [pc, #232]	; (8006674 <TIM_Base_SetConfig+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a2f      	ldr	r2, [pc, #188]	; (8006664 <TIM_Base_SetConfig+0x114>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d01b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <TIM_Base_SetConfig+0x118>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d017      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2b      	ldr	r2, [pc, #172]	; (800666c <TIM_Base_SetConfig+0x11c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <TIM_Base_SetConfig+0x120>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a29      	ldr	r2, [pc, #164]	; (8006674 <TIM_Base_SetConfig+0x124>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a28      	ldr	r2, [pc, #160]	; (8006678 <TIM_Base_SetConfig+0x128>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <TIM_Base_SetConfig+0x12c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a26      	ldr	r2, [pc, #152]	; (8006680 <TIM_Base_SetConfig+0x130>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d108      	bne.n	80065fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a10      	ldr	r2, [pc, #64]	; (8006664 <TIM_Base_SetConfig+0x114>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a12      	ldr	r2, [pc, #72]	; (8006674 <TIM_Base_SetConfig+0x124>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a11      	ldr	r2, [pc, #68]	; (8006678 <TIM_Base_SetConfig+0x128>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a10      	ldr	r2, [pc, #64]	; (800667c <TIM_Base_SetConfig+0x12c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a0f      	ldr	r2, [pc, #60]	; (8006680 <TIM_Base_SetConfig+0x130>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d103      	bne.n	8006650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	615a      	str	r2, [r3, #20]
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40010000 	.word	0x40010000
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40010400 	.word	0x40010400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4b37      	ldr	r3, [pc, #220]	; (800678c <TIM_OC1_SetConfig+0x108>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0302 	bic.w	r3, r3, #2
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a2d      	ldr	r2, [pc, #180]	; (8006790 <TIM_OC1_SetConfig+0x10c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00f      	beq.n	8006700 <TIM_OC1_SetConfig+0x7c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <TIM_OC1_SetConfig+0x110>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00b      	beq.n	8006700 <TIM_OC1_SetConfig+0x7c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a2b      	ldr	r2, [pc, #172]	; (8006798 <TIM_OC1_SetConfig+0x114>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <TIM_OC1_SetConfig+0x7c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <TIM_OC1_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC1_SetConfig+0x7c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <TIM_OC1_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10c      	bne.n	800671a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0308 	bic.w	r3, r3, #8
 8006706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f023 0304 	bic.w	r3, r3, #4
 8006718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <TIM_OC1_SetConfig+0x10c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00f      	beq.n	8006742 <TIM_OC1_SetConfig+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <TIM_OC1_SetConfig+0x110>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00b      	beq.n	8006742 <TIM_OC1_SetConfig+0xbe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <TIM_OC1_SetConfig+0x114>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d007      	beq.n	8006742 <TIM_OC1_SetConfig+0xbe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a19      	ldr	r2, [pc, #100]	; (800679c <TIM_OC1_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC1_SetConfig+0xbe>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <TIM_OC1_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d111      	bne.n	8006766 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	fffeff8f 	.word	0xfffeff8f
 8006790:	40010000 	.word	0x40010000
 8006794:	40010400 	.word	0x40010400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0210 	bic.w	r2, r3, #16
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <TIM_OC2_SetConfig+0xfc>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0320 	bic.w	r3, r3, #32
 80067ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <TIM_OC2_SetConfig+0x100>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC2_SetConfig+0x68>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <TIM_OC2_SetConfig+0x104>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d10d      	bne.n	8006828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <TIM_OC2_SetConfig+0x100>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00f      	beq.n	8006850 <TIM_OC2_SetConfig+0xac>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <TIM_OC2_SetConfig+0x104>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_OC2_SetConfig+0xac>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1c      	ldr	r2, [pc, #112]	; (80068ac <TIM_OC2_SetConfig+0x108>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d007      	beq.n	8006850 <TIM_OC2_SetConfig+0xac>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <TIM_OC2_SetConfig+0x10c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC2_SetConfig+0xac>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <TIM_OC2_SetConfig+0x110>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	feff8fff 	.word	0xfeff8fff
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <TIM_OC3_SetConfig+0xf8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_OC3_SetConfig+0x66>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <TIM_OC3_SetConfig+0xfc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d10d      	bne.n	800693a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <TIM_OC3_SetConfig+0xf8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_OC3_SetConfig+0xaa>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <TIM_OC3_SetConfig+0xfc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_OC3_SetConfig+0xaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <TIM_OC3_SetConfig+0x100>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_OC3_SetConfig+0xaa>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a19      	ldr	r2, [pc, #100]	; (80069bc <TIM_OC3_SetConfig+0x104>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC3_SetConfig+0xaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <TIM_OC3_SetConfig+0x108>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d113      	bne.n	800698a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	621a      	str	r2, [r3, #32]
}
 80069a4:	bf00      	nop
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40010400 	.word	0x40010400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	031b      	lsls	r3, r3, #12
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <TIM_OC4_SetConfig+0xbc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_OC4_SetConfig+0x80>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <TIM_OC4_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <TIM_OC4_SetConfig+0x80>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <TIM_OC4_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_OC4_SetConfig+0x80>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <TIM_OC4_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC4_SetConfig+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <TIM_OC4_SetConfig+0xcc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40014400 	.word	0x40014400
 8006a90:	40014800 	.word	0x40014800

08006a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <TIM_OC5_SetConfig+0xb0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_OC5_SetConfig+0x76>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <TIM_OC5_SetConfig+0xb4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_OC5_SetConfig+0x76>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <TIM_OC5_SetConfig+0xb8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_OC5_SetConfig+0x76>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <TIM_OC5_SetConfig+0xbc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_OC5_SetConfig+0x76>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <TIM_OC5_SetConfig+0xc0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d109      	bne.n	8006b1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	621a      	str	r2, [r3, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40010400 	.word	0x40010400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800

08006b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	051b      	lsls	r3, r3, #20
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <TIM_OC6_SetConfig+0xb4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00f      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x78>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <TIM_OC6_SetConfig+0xb8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00b      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x78>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <TIM_OC6_SetConfig+0xbc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d007      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x78>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <TIM_OC6_SetConfig+0xc0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x78>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <TIM_OC6_SetConfig+0xc4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d109      	bne.n	8006be4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 030a 	bic.w	r3, r3, #10
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0210 	bic.w	r2, r3, #16
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <TIM_ITRx_SetConfig+0x38>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f043 0307 	orr.w	r3, r3, #7
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	ffcfff8f 	.word	0xffcfff8f

08006d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	2201      	movs	r2, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	401a      	ands	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	fa01 f303 	lsl.w	r3, r1, r3
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e068      	b.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2e      	ldr	r2, [pc, #184]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2d      	ldr	r2, [pc, #180]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d108      	bne.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e32:	d018      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1a      	ldr	r2, [pc, #104]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a14      	ldr	r2, [pc, #80]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d10c      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40010400 	.word	0x40010400
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800
 8006eb0:	40000c00 	.word	0x40000c00
 8006eb4:	40001800 	.word	0x40001800

08006eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e042      	b.n	8006f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fa fb45 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2224      	movs	r2, #36	; 0x24
 8006f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8c2 	bl	80070c0 <UART_SetConfig>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e022      	b.n	8006f8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fe16 	bl	8007b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fe9d 	bl	8007cc4 <UART_CheckIdleState>
 8006f8a:	4603      	mov	r3, r0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	f040 8083 	bne.w	80070b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_UART_Transmit+0x28>
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e07b      	b.n	80070b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Transmit+0x3a>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e074      	b.n	80070b8 <HAL_UART_Transmit+0x124>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2221      	movs	r2, #33	; 0x21
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe6:	f7fa fd87 	bl	8001af8 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d108      	bne.n	8007018 <HAL_UART_Transmit+0x84>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e003      	b.n	8007020 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007028:	e02c      	b.n	8007084 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2200      	movs	r2, #0
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fe90 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e039      	b.n	80070b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	3302      	adds	r3, #2
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e007      	b.n	8007072 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1cc      	bne.n	800702a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	2140      	movs	r1, #64	; 0x40
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fe5d 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e006      	b.n	80070b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c0:	b5b0      	push	{r4, r5, r7, lr}
 80070c2:	b08e      	sub	sp, #56	; 0x38
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4bbf      	ldr	r3, [pc, #764]	; (80073ec <UART_SetConfig+0x32c>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070f6:	430b      	orrs	r3, r1
 80070f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4ab5      	ldr	r2, [pc, #724]	; (80073f0 <UART_SetConfig+0x330>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007126:	4313      	orrs	r3, r2
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	4bb0      	ldr	r3, [pc, #704]	; (80073f4 <UART_SetConfig+0x334>)
 8007132:	4013      	ands	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6812      	ldr	r2, [r2, #0]
 8007138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800713a:	430b      	orrs	r3, r1
 800713c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	f023 010f 	bic.w	r1, r3, #15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4aa7      	ldr	r2, [pc, #668]	; (80073f8 <UART_SetConfig+0x338>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d176      	bne.n	800724c <UART_SetConfig+0x18c>
 800715e:	4ba7      	ldr	r3, [pc, #668]	; (80073fc <UART_SetConfig+0x33c>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007166:	2b28      	cmp	r3, #40	; 0x28
 8007168:	d86c      	bhi.n	8007244 <UART_SetConfig+0x184>
 800716a:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <UART_SetConfig+0xb0>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	08007215 	.word	0x08007215
 8007174:	08007245 	.word	0x08007245
 8007178:	08007245 	.word	0x08007245
 800717c:	08007245 	.word	0x08007245
 8007180:	08007245 	.word	0x08007245
 8007184:	08007245 	.word	0x08007245
 8007188:	08007245 	.word	0x08007245
 800718c:	08007245 	.word	0x08007245
 8007190:	0800721d 	.word	0x0800721d
 8007194:	08007245 	.word	0x08007245
 8007198:	08007245 	.word	0x08007245
 800719c:	08007245 	.word	0x08007245
 80071a0:	08007245 	.word	0x08007245
 80071a4:	08007245 	.word	0x08007245
 80071a8:	08007245 	.word	0x08007245
 80071ac:	08007245 	.word	0x08007245
 80071b0:	08007225 	.word	0x08007225
 80071b4:	08007245 	.word	0x08007245
 80071b8:	08007245 	.word	0x08007245
 80071bc:	08007245 	.word	0x08007245
 80071c0:	08007245 	.word	0x08007245
 80071c4:	08007245 	.word	0x08007245
 80071c8:	08007245 	.word	0x08007245
 80071cc:	08007245 	.word	0x08007245
 80071d0:	0800722d 	.word	0x0800722d
 80071d4:	08007245 	.word	0x08007245
 80071d8:	08007245 	.word	0x08007245
 80071dc:	08007245 	.word	0x08007245
 80071e0:	08007245 	.word	0x08007245
 80071e4:	08007245 	.word	0x08007245
 80071e8:	08007245 	.word	0x08007245
 80071ec:	08007245 	.word	0x08007245
 80071f0:	08007235 	.word	0x08007235
 80071f4:	08007245 	.word	0x08007245
 80071f8:	08007245 	.word	0x08007245
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007245 	.word	0x08007245
 8007204:	08007245 	.word	0x08007245
 8007208:	08007245 	.word	0x08007245
 800720c:	08007245 	.word	0x08007245
 8007210:	0800723d 	.word	0x0800723d
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e222      	b.n	8007662 <UART_SetConfig+0x5a2>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007222:	e21e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	e21a      	b.n	8007662 <UART_SetConfig+0x5a2>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007232:	e216      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007234:	2320      	movs	r3, #32
 8007236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723a:	e212      	b.n	8007662 <UART_SetConfig+0x5a2>
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007242:	e20e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724a:	e20a      	b.n	8007662 <UART_SetConfig+0x5a2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6b      	ldr	r2, [pc, #428]	; (8007400 <UART_SetConfig+0x340>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d130      	bne.n	80072b8 <UART_SetConfig+0x1f8>
 8007256:	4b69      	ldr	r3, [pc, #420]	; (80073fc <UART_SetConfig+0x33c>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	2b05      	cmp	r3, #5
 8007260:	d826      	bhi.n	80072b0 <UART_SetConfig+0x1f0>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x1a8>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007281 	.word	0x08007281
 800726c:	08007289 	.word	0x08007289
 8007270:	08007291 	.word	0x08007291
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	2300      	movs	r3, #0
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e1ec      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007288:	2304      	movs	r3, #4
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	e1e8      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007290:	2308      	movs	r3, #8
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007296:	e1e4      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007298:	2310      	movs	r3, #16
 800729a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729e:	e1e0      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072a0:	2320      	movs	r3, #32
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a6:	e1dc      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072a8:	2340      	movs	r3, #64	; 0x40
 80072aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ae:	e1d8      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b6:	e1d4      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a51      	ldr	r2, [pc, #324]	; (8007404 <UART_SetConfig+0x344>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d130      	bne.n	8007324 <UART_SetConfig+0x264>
 80072c2:	4b4e      	ldr	r3, [pc, #312]	; (80073fc <UART_SetConfig+0x33c>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d826      	bhi.n	800731c <UART_SetConfig+0x25c>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0x214>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	080072ed 	.word	0x080072ed
 80072d8:	080072f5 	.word	0x080072f5
 80072dc:	080072fd 	.word	0x080072fd
 80072e0:	08007305 	.word	0x08007305
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007315 	.word	0x08007315
 80072ec:	2300      	movs	r3, #0
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e1b6      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e1b2      	b.n	8007662 <UART_SetConfig+0x5a2>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e1ae      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e1aa      	b.n	8007662 <UART_SetConfig+0x5a2>
 800730c:	2320      	movs	r3, #32
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e1a6      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800731a:	e1a2      	b.n	8007662 <UART_SetConfig+0x5a2>
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007322:	e19e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a37      	ldr	r2, [pc, #220]	; (8007408 <UART_SetConfig+0x348>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d130      	bne.n	8007390 <UART_SetConfig+0x2d0>
 800732e:	4b33      	ldr	r3, [pc, #204]	; (80073fc <UART_SetConfig+0x33c>)
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b05      	cmp	r3, #5
 8007338:	d826      	bhi.n	8007388 <UART_SetConfig+0x2c8>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x280>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007359 	.word	0x08007359
 8007344:	08007361 	.word	0x08007361
 8007348:	08007369 	.word	0x08007369
 800734c:	08007371 	.word	0x08007371
 8007350:	08007379 	.word	0x08007379
 8007354:	08007381 	.word	0x08007381
 8007358:	2300      	movs	r3, #0
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735e:	e180      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007360:	2304      	movs	r3, #4
 8007362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007366:	e17c      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007368:	2308      	movs	r3, #8
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	e178      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007370:	2310      	movs	r3, #16
 8007372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007376:	e174      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007378:	2320      	movs	r3, #32
 800737a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737e:	e170      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007386:	e16c      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007388:	2380      	movs	r3, #128	; 0x80
 800738a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738e:	e168      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <UART_SetConfig+0x34c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d142      	bne.n	8007420 <UART_SetConfig+0x360>
 800739a:	4b18      	ldr	r3, [pc, #96]	; (80073fc <UART_SetConfig+0x33c>)
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d838      	bhi.n	8007418 <UART_SetConfig+0x358>
 80073a6:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <UART_SetConfig+0x2ec>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	080073c5 	.word	0x080073c5
 80073b0:	080073cd 	.word	0x080073cd
 80073b4:	080073d5 	.word	0x080073d5
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073e5 	.word	0x080073e5
 80073c0:	08007411 	.word	0x08007411
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ca:	e14a      	b.n	8007662 <UART_SetConfig+0x5a2>
 80073cc:	2304      	movs	r3, #4
 80073ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d2:	e146      	b.n	8007662 <UART_SetConfig+0x5a2>
 80073d4:	2308      	movs	r3, #8
 80073d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073da:	e142      	b.n	8007662 <UART_SetConfig+0x5a2>
 80073dc:	2310      	movs	r3, #16
 80073de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e2:	e13e      	b.n	8007662 <UART_SetConfig+0x5a2>
 80073e4:	2320      	movs	r3, #32
 80073e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ea:	e13a      	b.n	8007662 <UART_SetConfig+0x5a2>
 80073ec:	cfff69f3 	.word	0xcfff69f3
 80073f0:	58000c00 	.word	0x58000c00
 80073f4:	11fff4ff 	.word	0x11fff4ff
 80073f8:	40011000 	.word	0x40011000
 80073fc:	58024400 	.word	0x58024400
 8007400:	40004400 	.word	0x40004400
 8007404:	40004800 	.word	0x40004800
 8007408:	40004c00 	.word	0x40004c00
 800740c:	40005000 	.word	0x40005000
 8007410:	2340      	movs	r3, #64	; 0x40
 8007412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007416:	e124      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741e:	e120      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4acc      	ldr	r2, [pc, #816]	; (8007758 <UART_SetConfig+0x698>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d176      	bne.n	8007518 <UART_SetConfig+0x458>
 800742a:	4bcc      	ldr	r3, [pc, #816]	; (800775c <UART_SetConfig+0x69c>)
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007432:	2b28      	cmp	r3, #40	; 0x28
 8007434:	d86c      	bhi.n	8007510 <UART_SetConfig+0x450>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0x37c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	080074e1 	.word	0x080074e1
 8007440:	08007511 	.word	0x08007511
 8007444:	08007511 	.word	0x08007511
 8007448:	08007511 	.word	0x08007511
 800744c:	08007511 	.word	0x08007511
 8007450:	08007511 	.word	0x08007511
 8007454:	08007511 	.word	0x08007511
 8007458:	08007511 	.word	0x08007511
 800745c:	080074e9 	.word	0x080074e9
 8007460:	08007511 	.word	0x08007511
 8007464:	08007511 	.word	0x08007511
 8007468:	08007511 	.word	0x08007511
 800746c:	08007511 	.word	0x08007511
 8007470:	08007511 	.word	0x08007511
 8007474:	08007511 	.word	0x08007511
 8007478:	08007511 	.word	0x08007511
 800747c:	080074f1 	.word	0x080074f1
 8007480:	08007511 	.word	0x08007511
 8007484:	08007511 	.word	0x08007511
 8007488:	08007511 	.word	0x08007511
 800748c:	08007511 	.word	0x08007511
 8007490:	08007511 	.word	0x08007511
 8007494:	08007511 	.word	0x08007511
 8007498:	08007511 	.word	0x08007511
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	08007511 	.word	0x08007511
 80074a4:	08007511 	.word	0x08007511
 80074a8:	08007511 	.word	0x08007511
 80074ac:	08007511 	.word	0x08007511
 80074b0:	08007511 	.word	0x08007511
 80074b4:	08007511 	.word	0x08007511
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007501 	.word	0x08007501
 80074c0:	08007511 	.word	0x08007511
 80074c4:	08007511 	.word	0x08007511
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007511 	.word	0x08007511
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007511 	.word	0x08007511
 80074d8:	08007511 	.word	0x08007511
 80074dc:	08007509 	.word	0x08007509
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e0bc      	b.n	8007662 <UART_SetConfig+0x5a2>
 80074e8:	2304      	movs	r3, #4
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e0b8      	b.n	8007662 <UART_SetConfig+0x5a2>
 80074f0:	2308      	movs	r3, #8
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e0b4      	b.n	8007662 <UART_SetConfig+0x5a2>
 80074f8:	2310      	movs	r3, #16
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fe:	e0b0      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007500:	2320      	movs	r3, #32
 8007502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007506:	e0ac      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750e:	e0a8      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e0a4      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a90      	ldr	r2, [pc, #576]	; (8007760 <UART_SetConfig+0x6a0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d130      	bne.n	8007584 <UART_SetConfig+0x4c4>
 8007522:	4b8e      	ldr	r3, [pc, #568]	; (800775c <UART_SetConfig+0x69c>)
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b05      	cmp	r3, #5
 800752c:	d826      	bhi.n	800757c <UART_SetConfig+0x4bc>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x474>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	0800754d 	.word	0x0800754d
 8007538:	08007555 	.word	0x08007555
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e086      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e082      	b.n	8007662 <UART_SetConfig+0x5a2>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e07e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e07a      	b.n	8007662 <UART_SetConfig+0x5a2>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007572:	e076      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757a:	e072      	b.n	8007662 <UART_SetConfig+0x5a2>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007582:	e06e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a76      	ldr	r2, [pc, #472]	; (8007764 <UART_SetConfig+0x6a4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d130      	bne.n	80075f0 <UART_SetConfig+0x530>
 800758e:	4b73      	ldr	r3, [pc, #460]	; (800775c <UART_SetConfig+0x69c>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d826      	bhi.n	80075e8 <UART_SetConfig+0x528>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x4e0>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e050      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c6:	e04c      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ce:	e048      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d6:	e044      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075de:	e040      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075e6:	e03c      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ee:	e038      	b.n	8007662 <UART_SetConfig+0x5a2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a5c      	ldr	r2, [pc, #368]	; (8007768 <UART_SetConfig+0x6a8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <UART_SetConfig+0x59c>
 80075fa:	4b58      	ldr	r3, [pc, #352]	; (800775c <UART_SetConfig+0x69c>)
 80075fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b05      	cmp	r3, #5
 8007604:	d826      	bhi.n	8007654 <UART_SetConfig+0x594>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x54c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007625 	.word	0x08007625
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007635 	.word	0x08007635
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	2302      	movs	r3, #2
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e01a      	b.n	8007662 <UART_SetConfig+0x5a2>
 800762c:	2304      	movs	r3, #4
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e016      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007634:	2308      	movs	r3, #8
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e012      	b.n	8007662 <UART_SetConfig+0x5a2>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	e00e      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007644:	2320      	movs	r3, #32
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800764a:	e00a      	b.n	8007662 <UART_SetConfig+0x5a2>
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007652:	e006      	b.n	8007662 <UART_SetConfig+0x5a2>
 8007654:	2380      	movs	r3, #128	; 0x80
 8007656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765a:	e002      	b.n	8007662 <UART_SetConfig+0x5a2>
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <UART_SetConfig+0x6a8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	f040 80ef 	bne.w	800784c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800766e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007672:	2b20      	cmp	r3, #32
 8007674:	dc46      	bgt.n	8007704 <UART_SetConfig+0x644>
 8007676:	2b02      	cmp	r3, #2
 8007678:	f2c0 8081 	blt.w	800777e <UART_SetConfig+0x6be>
 800767c:	3b02      	subs	r3, #2
 800767e:	2b1e      	cmp	r3, #30
 8007680:	d87d      	bhi.n	800777e <UART_SetConfig+0x6be>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0x5c8>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	0800770b 	.word	0x0800770b
 800768c:	0800777f 	.word	0x0800777f
 8007690:	08007713 	.word	0x08007713
 8007694:	0800777f 	.word	0x0800777f
 8007698:	0800777f 	.word	0x0800777f
 800769c:	0800777f 	.word	0x0800777f
 80076a0:	08007723 	.word	0x08007723
 80076a4:	0800777f 	.word	0x0800777f
 80076a8:	0800777f 	.word	0x0800777f
 80076ac:	0800777f 	.word	0x0800777f
 80076b0:	0800777f 	.word	0x0800777f
 80076b4:	0800777f 	.word	0x0800777f
 80076b8:	0800777f 	.word	0x0800777f
 80076bc:	0800777f 	.word	0x0800777f
 80076c0:	08007733 	.word	0x08007733
 80076c4:	0800777f 	.word	0x0800777f
 80076c8:	0800777f 	.word	0x0800777f
 80076cc:	0800777f 	.word	0x0800777f
 80076d0:	0800777f 	.word	0x0800777f
 80076d4:	0800777f 	.word	0x0800777f
 80076d8:	0800777f 	.word	0x0800777f
 80076dc:	0800777f 	.word	0x0800777f
 80076e0:	0800777f 	.word	0x0800777f
 80076e4:	0800777f 	.word	0x0800777f
 80076e8:	0800777f 	.word	0x0800777f
 80076ec:	0800777f 	.word	0x0800777f
 80076f0:	0800777f 	.word	0x0800777f
 80076f4:	0800777f 	.word	0x0800777f
 80076f8:	0800777f 	.word	0x0800777f
 80076fc:	0800777f 	.word	0x0800777f
 8007700:	08007771 	.word	0x08007771
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d036      	beq.n	8007776 <UART_SetConfig+0x6b6>
 8007708:	e039      	b.n	800777e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800770a:	f7fd fdad 	bl	8005268 <HAL_RCCEx_GetD3PCLK1Freq>
 800770e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007710:	e03b      	b.n	800778a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007712:	f107 0314 	add.w	r3, r7, #20
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fdbc 	bl	8005294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007720:	e033      	b.n	800778a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd ff08 	bl	800553c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007730:	e02b      	b.n	800778a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <UART_SetConfig+0x69c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <UART_SetConfig+0x69c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	08db      	lsrs	r3, r3, #3
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <UART_SetConfig+0x6ac>)
 800774a:	fa22 f303 	lsr.w	r3, r2, r3
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007750:	e01b      	b.n	800778a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <UART_SetConfig+0x6ac>)
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007756:	e018      	b.n	800778a <UART_SetConfig+0x6ca>
 8007758:	40011400 	.word	0x40011400
 800775c:	58024400 	.word	0x58024400
 8007760:	40007800 	.word	0x40007800
 8007764:	40007c00 	.word	0x40007c00
 8007768:	58000c00 	.word	0x58000c00
 800776c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007770:	4bc4      	ldr	r3, [pc, #784]	; (8007a84 <UART_SetConfig+0x9c4>)
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007774:	e009      	b.n	800778a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800777c:	e005      	b.n	800778a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 81da 	beq.w	8007b46 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	4abc      	ldr	r2, [pc, #752]	; (8007a88 <UART_SetConfig+0x9c8>)
 8007798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800779c:	461a      	mov	r2, r3
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d305      	bcc.n	80077c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80077c8:	e1bd      	b.n	8007b46 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	4618      	mov	r0, r3
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	4aac      	ldr	r2, [pc, #688]	; (8007a88 <UART_SetConfig+0x9c8>)
 80077d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	f7f8 fdd5 	bl	8000390 <__aeabi_uldivmod>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	020b      	lsls	r3, r1, #8
 80077f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077fc:	0202      	lsls	r2, r0, #8
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	6849      	ldr	r1, [r1, #4]
 8007802:	0849      	lsrs	r1, r1, #1
 8007804:	4608      	mov	r0, r1
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	1814      	adds	r4, r2, r0
 800780c:	eb43 0501 	adc.w	r5, r3, r1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	461a      	mov	r2, r3
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fdb7 	bl	8000390 <__aeabi_uldivmod>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4613      	mov	r3, r2
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007830:	d308      	bcc.n	8007844 <UART_SetConfig+0x784>
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007838:	d204      	bcs.n	8007844 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	60da      	str	r2, [r3, #12]
 8007842:	e180      	b.n	8007b46 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800784a:	e17c      	b.n	8007b46 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007854:	f040 80bf 	bne.w	80079d6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800785c:	2b20      	cmp	r3, #32
 800785e:	dc49      	bgt.n	80078f4 <UART_SetConfig+0x834>
 8007860:	2b00      	cmp	r3, #0
 8007862:	db7c      	blt.n	800795e <UART_SetConfig+0x89e>
 8007864:	2b20      	cmp	r3, #32
 8007866:	d87a      	bhi.n	800795e <UART_SetConfig+0x89e>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x7b0>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	080078fb 	.word	0x080078fb
 8007874:	08007903 	.word	0x08007903
 8007878:	0800795f 	.word	0x0800795f
 800787c:	0800795f 	.word	0x0800795f
 8007880:	0800790b 	.word	0x0800790b
 8007884:	0800795f 	.word	0x0800795f
 8007888:	0800795f 	.word	0x0800795f
 800788c:	0800795f 	.word	0x0800795f
 8007890:	0800791b 	.word	0x0800791b
 8007894:	0800795f 	.word	0x0800795f
 8007898:	0800795f 	.word	0x0800795f
 800789c:	0800795f 	.word	0x0800795f
 80078a0:	0800795f 	.word	0x0800795f
 80078a4:	0800795f 	.word	0x0800795f
 80078a8:	0800795f 	.word	0x0800795f
 80078ac:	0800795f 	.word	0x0800795f
 80078b0:	0800792b 	.word	0x0800792b
 80078b4:	0800795f 	.word	0x0800795f
 80078b8:	0800795f 	.word	0x0800795f
 80078bc:	0800795f 	.word	0x0800795f
 80078c0:	0800795f 	.word	0x0800795f
 80078c4:	0800795f 	.word	0x0800795f
 80078c8:	0800795f 	.word	0x0800795f
 80078cc:	0800795f 	.word	0x0800795f
 80078d0:	0800795f 	.word	0x0800795f
 80078d4:	0800795f 	.word	0x0800795f
 80078d8:	0800795f 	.word	0x0800795f
 80078dc:	0800795f 	.word	0x0800795f
 80078e0:	0800795f 	.word	0x0800795f
 80078e4:	0800795f 	.word	0x0800795f
 80078e8:	0800795f 	.word	0x0800795f
 80078ec:	0800795f 	.word	0x0800795f
 80078f0:	08007951 	.word	0x08007951
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d02e      	beq.n	8007956 <UART_SetConfig+0x896>
 80078f8:	e031      	b.n	800795e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fa:	f7fc fd49 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80078fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007900:	e033      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007902:	f7fc fd5b 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8007906:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007908:	e02f      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	4618      	mov	r0, r3
 8007910:	f7fd fcc0 	bl	8005294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007918:	e027      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd fe0c 	bl	800553c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007928:	e01f      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792a:	4b58      	ldr	r3, [pc, #352]	; (8007a8c <UART_SetConfig+0x9cc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007936:	4b55      	ldr	r3, [pc, #340]	; (8007a8c <UART_SetConfig+0x9cc>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	4a53      	ldr	r2, [pc, #332]	; (8007a90 <UART_SetConfig+0x9d0>)
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007948:	e00f      	b.n	800796a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800794a:	4b51      	ldr	r3, [pc, #324]	; (8007a90 <UART_SetConfig+0x9d0>)
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800794e:	e00c      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007950:	4b4c      	ldr	r3, [pc, #304]	; (8007a84 <UART_SetConfig+0x9c4>)
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007954:	e009      	b.n	800796a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800795c:	e005      	b.n	800796a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80ea 	beq.w	8007b46 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	4a44      	ldr	r2, [pc, #272]	; (8007a88 <UART_SetConfig+0x9c8>)
 8007978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800797c:	461a      	mov	r2, r3
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	fbb3 f3f2 	udiv	r3, r3, r2
 8007984:	005a      	lsls	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	441a      	add	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	fbb2 f3f3 	udiv	r3, r2, r3
 8007996:	b29b      	uxth	r3, r3
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	2b0f      	cmp	r3, #15
 800799e:	d916      	bls.n	80079ce <UART_SetConfig+0x90e>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a6:	d212      	bcs.n	80079ce <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f023 030f 	bic.w	r3, r3, #15
 80079b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	b29a      	uxth	r2, r3
 80079be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079c0:	4313      	orrs	r3, r2
 80079c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80079ca:	60da      	str	r2, [r3, #12]
 80079cc:	e0bb      	b.n	8007b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80079d4:	e0b7      	b.n	8007b46 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079da:	2b20      	cmp	r3, #32
 80079dc:	dc4a      	bgt.n	8007a74 <UART_SetConfig+0x9b4>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f2c0 8086 	blt.w	8007af0 <UART_SetConfig+0xa30>
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	f200 8083 	bhi.w	8007af0 <UART_SetConfig+0xa30>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x930>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a7b 	.word	0x08007a7b
 80079f4:	08007a95 	.word	0x08007a95
 80079f8:	08007af1 	.word	0x08007af1
 80079fc:	08007af1 	.word	0x08007af1
 8007a00:	08007a9d 	.word	0x08007a9d
 8007a04:	08007af1 	.word	0x08007af1
 8007a08:	08007af1 	.word	0x08007af1
 8007a0c:	08007af1 	.word	0x08007af1
 8007a10:	08007aad 	.word	0x08007aad
 8007a14:	08007af1 	.word	0x08007af1
 8007a18:	08007af1 	.word	0x08007af1
 8007a1c:	08007af1 	.word	0x08007af1
 8007a20:	08007af1 	.word	0x08007af1
 8007a24:	08007af1 	.word	0x08007af1
 8007a28:	08007af1 	.word	0x08007af1
 8007a2c:	08007af1 	.word	0x08007af1
 8007a30:	08007abd 	.word	0x08007abd
 8007a34:	08007af1 	.word	0x08007af1
 8007a38:	08007af1 	.word	0x08007af1
 8007a3c:	08007af1 	.word	0x08007af1
 8007a40:	08007af1 	.word	0x08007af1
 8007a44:	08007af1 	.word	0x08007af1
 8007a48:	08007af1 	.word	0x08007af1
 8007a4c:	08007af1 	.word	0x08007af1
 8007a50:	08007af1 	.word	0x08007af1
 8007a54:	08007af1 	.word	0x08007af1
 8007a58:	08007af1 	.word	0x08007af1
 8007a5c:	08007af1 	.word	0x08007af1
 8007a60:	08007af1 	.word	0x08007af1
 8007a64:	08007af1 	.word	0x08007af1
 8007a68:	08007af1 	.word	0x08007af1
 8007a6c:	08007af1 	.word	0x08007af1
 8007a70:	08007ae3 	.word	0x08007ae3
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d037      	beq.n	8007ae8 <UART_SetConfig+0xa28>
 8007a78:	e03a      	b.n	8007af0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7a:	f7fc fc89 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8007a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a80:	e03c      	b.n	8007afc <UART_SetConfig+0xa3c>
 8007a82:	bf00      	nop
 8007a84:	003d0900 	.word	0x003d0900
 8007a88:	08009018 	.word	0x08009018
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a94:	f7fc fc92 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8007a98:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a9a:	e02f      	b.n	8007afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd fbf7 	bl	8005294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aaa:	e027      	b.n	8007afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd fd43 	bl	800553c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aba:	e01f      	b.n	8007afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <UART_SetConfig+0xab0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ac8:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <UART_SetConfig+0xab0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <UART_SetConfig+0xab4>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ada:	e00f      	b.n	8007afc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <UART_SetConfig+0xab4>)
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae0:	e00c      	b.n	8007afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <UART_SetConfig+0xab8>)
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae6:	e009      	b.n	8007afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aee:	e005      	b.n	8007afc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007afa:	bf00      	nop
    }

    if (pclk != 0U)
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d021      	beq.n	8007b46 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	4a1d      	ldr	r2, [pc, #116]	; (8007b7c <UART_SetConfig+0xabc>)
 8007b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	085b      	lsrs	r3, r3, #1
 8007b1a:	441a      	add	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	2b0f      	cmp	r3, #15
 8007b2c:	d908      	bls.n	8007b40 <UART_SetConfig+0xa80>
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b34:	d204      	bcs.n	8007b40 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	e002      	b.n	8007b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3738      	adds	r7, #56	; 0x38
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	58024400 	.word	0x58024400
 8007b74:	03d09000 	.word	0x03d09000
 8007b78:	003d0900 	.word	0x003d0900
 8007b7c:	08009018 	.word	0x08009018

08007b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7e:	d10a      	bne.n	8007c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd4:	f7f9 ff10 	bl	8001af8 <HAL_GetTick>
 8007cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d10e      	bne.n	8007d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f82f 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e025      	b.n	8007d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d10e      	bne.n	8007d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f819 	bl	8007d5a <UART_WaitOnFlagUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e00f      	b.n	8007d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6a:	e062      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d72:	d05e      	beq.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d74:	f7f9 fec0 	bl	8001af8 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d11d      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e045      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02e      	beq.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d126      	bne.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e00f      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d08d      	beq.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e027      	b.n	8007ec0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2224      	movs	r2, #36	; 0x24
 8007e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0201 	bic.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e02d      	b.n	8007f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f84f 	bl	8007fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e02d      	b.n	8007fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0201 	bic.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f811 	bl	8007fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d108      	bne.n	8007fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fe4:	e031      	b.n	800804a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fe6:	2310      	movs	r3, #16
 8007fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fea:	2310      	movs	r3, #16
 8007fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	0e5b      	lsrs	r3, r3, #25
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	0f5b      	lsrs	r3, r3, #29
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	7b3a      	ldrb	r2, [r7, #12]
 8008012:	4911      	ldr	r1, [pc, #68]	; (8008058 <UARTEx_SetNbDataToProcess+0x94>)
 8008014:	5c8a      	ldrb	r2, [r1, r2]
 8008016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800801a:	7b3a      	ldrb	r2, [r7, #12]
 800801c:	490f      	ldr	r1, [pc, #60]	; (800805c <UARTEx_SetNbDataToProcess+0x98>)
 800801e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008020:	fb93 f3f2 	sdiv	r3, r3, r2
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	7b7a      	ldrb	r2, [r7, #13]
 8008030:	4909      	ldr	r1, [pc, #36]	; (8008058 <UARTEx_SetNbDataToProcess+0x94>)
 8008032:	5c8a      	ldrb	r2, [r1, r2]
 8008034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008038:	7b7a      	ldrb	r2, [r7, #13]
 800803a:	4908      	ldr	r1, [pc, #32]	; (800805c <UARTEx_SetNbDataToProcess+0x98>)
 800803c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800803e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	08009030 	.word	0x08009030
 800805c:	08009038 	.word	0x08009038

08008060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 001c 	add.w	r0, r7, #28
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b01      	cmp	r3, #1
 8008076:	d120      	bne.n	80080ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <USB_CoreInit+0xd4>)
 800808a:	4013      	ands	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d105      	bne.n	80080ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa60 	bl	8008574 <USB_CoreReset>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
 80080b8:	e01a      	b.n	80080f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa54 	bl	8008574 <USB_CoreReset>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
 80080e2:	e005      	b.n	80080f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d116      	bne.n	8008124 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <USB_CoreInit+0xd8>)
 8008106:	4313      	orrs	r3, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f043 0206 	orr.w	r2, r3, #6
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f043 0220 	orr.w	r2, r3, #32
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008130:	b004      	add	sp, #16
 8008132:	4770      	bx	lr
 8008134:	ffbdffbf 	.word	0xffbdffbf
 8008138:	03ee0000 	.word	0x03ee0000

0800813c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f023 0201 	bic.w	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d106      	bne.n	800818a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]
 8008188:	e00b      	b.n	80081a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
 800819c:	e001      	b.n	80081a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e003      	b.n	80081aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80081a2:	2032      	movs	r0, #50	; 0x32
 80081a4:	f7f9 fcb4 	bl	8001b10 <HAL_Delay>

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081b4:	b084      	sub	sp, #16
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	e009      	b.n	80081e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	3340      	adds	r3, #64	; 0x40
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3301      	adds	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b0e      	cmp	r3, #14
 80081ec:	d9f2      	bls.n	80081d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11c      	bne.n	800822e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e005      	b.n	800823a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008240:	461a      	mov	r2, r3
 8008242:	2300      	movs	r3, #0
 8008244:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824c:	4619      	mov	r1, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008254:	461a      	mov	r2, r3
 8008256:	680b      	ldr	r3, [r1, #0]
 8008258:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	2b01      	cmp	r3, #1
 800825e:	d10c      	bne.n	800827a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f949 	bl	8008500 <USB_SetDevSpeed>
 800826e:	e008      	b.n	8008282 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008270:	2101      	movs	r1, #1
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f944 	bl	8008500 <USB_SetDevSpeed>
 8008278:	e003      	b.n	8008282 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800827a:	2103      	movs	r1, #3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f93f 	bl	8008500 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008282:	2110      	movs	r1, #16
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f8f3 	bl	8008470 <USB_FlushTxFifo>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f911 	bl	80084bc <USB_FlushRxFifo>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	461a      	mov	r2, r3
 80082ac:	2300      	movs	r3, #0
 80082ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	461a      	mov	r2, r3
 80082b8:	2300      	movs	r3, #0
 80082ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c2:	461a      	mov	r2, r3
 80082c4:	2300      	movs	r3, #0
 80082c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	e043      	b.n	8008356 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e4:	d118      	bne.n	8008318 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f8:	461a      	mov	r2, r3
 80082fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	e013      	b.n	800832a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	461a      	mov	r2, r3
 8008310:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e008      	b.n	800832a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	2300      	movs	r3, #0
 8008328:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008336:	461a      	mov	r2, r3
 8008338:	2300      	movs	r3, #0
 800833a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	461a      	mov	r2, r3
 800834a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800834e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	3301      	adds	r3, #1
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d3b7      	bcc.n	80082ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	e043      	b.n	80083ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800837a:	d118      	bne.n	80083ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	461a      	mov	r2, r3
 8008390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e013      	b.n	80083c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e008      	b.n	80083c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ba:	461a      	mov	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	461a      	mov	r2, r3
 80083ce:	2300      	movs	r3, #0
 80083d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083de:	461a      	mov	r2, r3
 80083e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3301      	adds	r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3b7      	bcc.n	8008364 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008406:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008414:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f043 0210 	orr.w	r2, r3, #16
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699a      	ldr	r2, [r3, #24]
 800842c:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <USB_DevInit+0x2b4>)
 800842e:	4313      	orrs	r3, r2
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f043 0208 	orr.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <USB_DevInit+0x2b8>)
 8008452:	4313      	orrs	r3, r2
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008464:	b004      	add	sp, #16
 8008466:	4770      	bx	lr
 8008468:	803c3800 	.word	0x803c3800
 800846c:	40000004 	.word	0x40000004

08008470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	019b      	lsls	r3, r3, #6
 8008482:	f043 0220 	orr.w	r2, r3, #32
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <USB_FlushTxFifo+0x48>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d901      	bls.n	800849c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e006      	b.n	80084aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d0f0      	beq.n	800848a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	00030d40 	.word	0x00030d40

080084bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2210      	movs	r2, #16
 80084cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a09      	ldr	r2, [pc, #36]	; (80084fc <USB_FlushRxFifo+0x40>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d901      	bls.n	80084e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e006      	b.n	80084ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d0f0      	beq.n	80084ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	00030d40 	.word	0x00030d40

08008500 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008520:	4313      	orrs	r3, r2
 8008522:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008560:	f043 0302 	orr.w	r3, r3, #2
 8008564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <USB_CoreReset+0x64>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d901      	bls.n	8008592 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e01b      	b.n	80085ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	daf2      	bge.n	8008580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f043 0201 	orr.w	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a09      	ldr	r2, [pc, #36]	; (80085d8 <USB_CoreReset+0x64>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d901      	bls.n	80085bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e006      	b.n	80085ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d0f0      	beq.n	80085aa <USB_CoreReset+0x36>

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	00030d40 	.word	0x00030d40

080085dc <_Znwj>:
 80085dc:	2801      	cmp	r0, #1
 80085de:	bf38      	it	cc
 80085e0:	2001      	movcc	r0, #1
 80085e2:	b510      	push	{r4, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 f844 	bl	8008674 <malloc>
 80085ec:	b930      	cbnz	r0, 80085fc <_Znwj+0x20>
 80085ee:	f000 f807 	bl	8008600 <_ZSt15get_new_handlerv>
 80085f2:	b908      	cbnz	r0, 80085f8 <_Znwj+0x1c>
 80085f4:	f000 f80c 	bl	8008610 <abort>
 80085f8:	4780      	blx	r0
 80085fa:	e7f4      	b.n	80085e6 <_Znwj+0xa>
 80085fc:	bd10      	pop	{r4, pc}
	...

08008600 <_ZSt15get_new_handlerv>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <_ZSt15get_new_handlerv+0xc>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	f3bf 8f5b 	dmb	ish
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000748 	.word	0x20000748

08008610 <abort>:
 8008610:	b508      	push	{r3, lr}
 8008612:	2006      	movs	r0, #6
 8008614:	f000 f920 	bl	8008858 <raise>
 8008618:	2001      	movs	r0, #1
 800861a:	f7f9 f8f1 	bl	8001800 <_exit>
	...

08008620 <__errno>:
 8008620:	4b01      	ldr	r3, [pc, #4]	; (8008628 <__errno+0x8>)
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20000010 	.word	0x20000010

0800862c <__libc_init_array>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	4d0d      	ldr	r5, [pc, #52]	; (8008664 <__libc_init_array+0x38>)
 8008630:	4c0d      	ldr	r4, [pc, #52]	; (8008668 <__libc_init_array+0x3c>)
 8008632:	1b64      	subs	r4, r4, r5
 8008634:	10a4      	asrs	r4, r4, #2
 8008636:	2600      	movs	r6, #0
 8008638:	42a6      	cmp	r6, r4
 800863a:	d109      	bne.n	8008650 <__libc_init_array+0x24>
 800863c:	4d0b      	ldr	r5, [pc, #44]	; (800866c <__libc_init_array+0x40>)
 800863e:	4c0c      	ldr	r4, [pc, #48]	; (8008670 <__libc_init_array+0x44>)
 8008640:	f000 fc9a 	bl	8008f78 <_init>
 8008644:	1b64      	subs	r4, r4, r5
 8008646:	10a4      	asrs	r4, r4, #2
 8008648:	2600      	movs	r6, #0
 800864a:	42a6      	cmp	r6, r4
 800864c:	d105      	bne.n	800865a <__libc_init_array+0x2e>
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	f855 3b04 	ldr.w	r3, [r5], #4
 8008654:	4798      	blx	r3
 8008656:	3601      	adds	r6, #1
 8008658:	e7ee      	b.n	8008638 <__libc_init_array+0xc>
 800865a:	f855 3b04 	ldr.w	r3, [r5], #4
 800865e:	4798      	blx	r3
 8008660:	3601      	adds	r6, #1
 8008662:	e7f2      	b.n	800864a <__libc_init_array+0x1e>
 8008664:	0800907c 	.word	0x0800907c
 8008668:	0800907c 	.word	0x0800907c
 800866c:	0800907c 	.word	0x0800907c
 8008670:	08009084 	.word	0x08009084

08008674 <malloc>:
 8008674:	4b02      	ldr	r3, [pc, #8]	; (8008680 <malloc+0xc>)
 8008676:	4601      	mov	r1, r0
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	f000 b85b 	b.w	8008734 <_malloc_r>
 800867e:	bf00      	nop
 8008680:	20000010 	.word	0x20000010

08008684 <memset>:
 8008684:	4402      	add	r2, r0
 8008686:	4603      	mov	r3, r0
 8008688:	4293      	cmp	r3, r2
 800868a:	d100      	bne.n	800868e <memset+0xa>
 800868c:	4770      	bx	lr
 800868e:	f803 1b01 	strb.w	r1, [r3], #1
 8008692:	e7f9      	b.n	8008688 <memset+0x4>

08008694 <_free_r>:
 8008694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008696:	2900      	cmp	r1, #0
 8008698:	d048      	beq.n	800872c <_free_r+0x98>
 800869a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869e:	9001      	str	r0, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f1a1 0404 	sub.w	r4, r1, #4
 80086a6:	bfb8      	it	lt
 80086a8:	18e4      	addlt	r4, r4, r3
 80086aa:	f000 f911 	bl	80088d0 <__malloc_lock>
 80086ae:	4a20      	ldr	r2, [pc, #128]	; (8008730 <_free_r+0x9c>)
 80086b0:	9801      	ldr	r0, [sp, #4]
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	4615      	mov	r5, r2
 80086b6:	b933      	cbnz	r3, 80086c6 <_free_r+0x32>
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	6014      	str	r4, [r2, #0]
 80086bc:	b003      	add	sp, #12
 80086be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c2:	f000 b90b 	b.w	80088dc <__malloc_unlock>
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	d90b      	bls.n	80086e2 <_free_r+0x4e>
 80086ca:	6821      	ldr	r1, [r4, #0]
 80086cc:	1862      	adds	r2, r4, r1
 80086ce:	4293      	cmp	r3, r2
 80086d0:	bf04      	itt	eq
 80086d2:	681a      	ldreq	r2, [r3, #0]
 80086d4:	685b      	ldreq	r3, [r3, #4]
 80086d6:	6063      	str	r3, [r4, #4]
 80086d8:	bf04      	itt	eq
 80086da:	1852      	addeq	r2, r2, r1
 80086dc:	6022      	streq	r2, [r4, #0]
 80086de:	602c      	str	r4, [r5, #0]
 80086e0:	e7ec      	b.n	80086bc <_free_r+0x28>
 80086e2:	461a      	mov	r2, r3
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b10b      	cbz	r3, 80086ec <_free_r+0x58>
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	d9fa      	bls.n	80086e2 <_free_r+0x4e>
 80086ec:	6811      	ldr	r1, [r2, #0]
 80086ee:	1855      	adds	r5, r2, r1
 80086f0:	42a5      	cmp	r5, r4
 80086f2:	d10b      	bne.n	800870c <_free_r+0x78>
 80086f4:	6824      	ldr	r4, [r4, #0]
 80086f6:	4421      	add	r1, r4
 80086f8:	1854      	adds	r4, r2, r1
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	6011      	str	r1, [r2, #0]
 80086fe:	d1dd      	bne.n	80086bc <_free_r+0x28>
 8008700:	681c      	ldr	r4, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	6053      	str	r3, [r2, #4]
 8008706:	4421      	add	r1, r4
 8008708:	6011      	str	r1, [r2, #0]
 800870a:	e7d7      	b.n	80086bc <_free_r+0x28>
 800870c:	d902      	bls.n	8008714 <_free_r+0x80>
 800870e:	230c      	movs	r3, #12
 8008710:	6003      	str	r3, [r0, #0]
 8008712:	e7d3      	b.n	80086bc <_free_r+0x28>
 8008714:	6825      	ldr	r5, [r4, #0]
 8008716:	1961      	adds	r1, r4, r5
 8008718:	428b      	cmp	r3, r1
 800871a:	bf04      	itt	eq
 800871c:	6819      	ldreq	r1, [r3, #0]
 800871e:	685b      	ldreq	r3, [r3, #4]
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	bf04      	itt	eq
 8008724:	1949      	addeq	r1, r1, r5
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	6054      	str	r4, [r2, #4]
 800872a:	e7c7      	b.n	80086bc <_free_r+0x28>
 800872c:	b003      	add	sp, #12
 800872e:	bd30      	pop	{r4, r5, pc}
 8008730:	2000074c 	.word	0x2000074c

08008734 <_malloc_r>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	1ccd      	adds	r5, r1, #3
 8008738:	f025 0503 	bic.w	r5, r5, #3
 800873c:	3508      	adds	r5, #8
 800873e:	2d0c      	cmp	r5, #12
 8008740:	bf38      	it	cc
 8008742:	250c      	movcc	r5, #12
 8008744:	2d00      	cmp	r5, #0
 8008746:	4606      	mov	r6, r0
 8008748:	db01      	blt.n	800874e <_malloc_r+0x1a>
 800874a:	42a9      	cmp	r1, r5
 800874c:	d903      	bls.n	8008756 <_malloc_r+0x22>
 800874e:	230c      	movs	r3, #12
 8008750:	6033      	str	r3, [r6, #0]
 8008752:	2000      	movs	r0, #0
 8008754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008756:	f000 f8bb 	bl	80088d0 <__malloc_lock>
 800875a:	4921      	ldr	r1, [pc, #132]	; (80087e0 <_malloc_r+0xac>)
 800875c:	680a      	ldr	r2, [r1, #0]
 800875e:	4614      	mov	r4, r2
 8008760:	b99c      	cbnz	r4, 800878a <_malloc_r+0x56>
 8008762:	4f20      	ldr	r7, [pc, #128]	; (80087e4 <_malloc_r+0xb0>)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	b923      	cbnz	r3, 8008772 <_malloc_r+0x3e>
 8008768:	4621      	mov	r1, r4
 800876a:	4630      	mov	r0, r6
 800876c:	f000 f83c 	bl	80087e8 <_sbrk_r>
 8008770:	6038      	str	r0, [r7, #0]
 8008772:	4629      	mov	r1, r5
 8008774:	4630      	mov	r0, r6
 8008776:	f000 f837 	bl	80087e8 <_sbrk_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d123      	bne.n	80087c6 <_malloc_r+0x92>
 800877e:	230c      	movs	r3, #12
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f8aa 	bl	80088dc <__malloc_unlock>
 8008788:	e7e3      	b.n	8008752 <_malloc_r+0x1e>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	1b5b      	subs	r3, r3, r5
 800878e:	d417      	bmi.n	80087c0 <_malloc_r+0x8c>
 8008790:	2b0b      	cmp	r3, #11
 8008792:	d903      	bls.n	800879c <_malloc_r+0x68>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	441c      	add	r4, r3
 8008798:	6025      	str	r5, [r4, #0]
 800879a:	e004      	b.n	80087a6 <_malloc_r+0x72>
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	42a2      	cmp	r2, r4
 80087a0:	bf0c      	ite	eq
 80087a2:	600b      	streq	r3, [r1, #0]
 80087a4:	6053      	strne	r3, [r2, #4]
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f898 	bl	80088dc <__malloc_unlock>
 80087ac:	f104 000b 	add.w	r0, r4, #11
 80087b0:	1d23      	adds	r3, r4, #4
 80087b2:	f020 0007 	bic.w	r0, r0, #7
 80087b6:	1ac2      	subs	r2, r0, r3
 80087b8:	d0cc      	beq.n	8008754 <_malloc_r+0x20>
 80087ba:	1a1b      	subs	r3, r3, r0
 80087bc:	50a3      	str	r3, [r4, r2]
 80087be:	e7c9      	b.n	8008754 <_malloc_r+0x20>
 80087c0:	4622      	mov	r2, r4
 80087c2:	6864      	ldr	r4, [r4, #4]
 80087c4:	e7cc      	b.n	8008760 <_malloc_r+0x2c>
 80087c6:	1cc4      	adds	r4, r0, #3
 80087c8:	f024 0403 	bic.w	r4, r4, #3
 80087cc:	42a0      	cmp	r0, r4
 80087ce:	d0e3      	beq.n	8008798 <_malloc_r+0x64>
 80087d0:	1a21      	subs	r1, r4, r0
 80087d2:	4630      	mov	r0, r6
 80087d4:	f000 f808 	bl	80087e8 <_sbrk_r>
 80087d8:	3001      	adds	r0, #1
 80087da:	d1dd      	bne.n	8008798 <_malloc_r+0x64>
 80087dc:	e7cf      	b.n	800877e <_malloc_r+0x4a>
 80087de:	bf00      	nop
 80087e0:	2000074c 	.word	0x2000074c
 80087e4:	20000750 	.word	0x20000750

080087e8 <_sbrk_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d06      	ldr	r5, [pc, #24]	; (8008804 <_sbrk_r+0x1c>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	f7f9 f80e 	bl	8001814 <_sbrk>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_sbrk_r+0x1a>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_sbrk_r+0x1a>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000758 	.word	0x20000758

08008808 <_raise_r>:
 8008808:	291f      	cmp	r1, #31
 800880a:	b538      	push	{r3, r4, r5, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	d904      	bls.n	800881c <_raise_r+0x14>
 8008812:	2316      	movs	r3, #22
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800881e:	b112      	cbz	r2, 8008826 <_raise_r+0x1e>
 8008820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008824:	b94b      	cbnz	r3, 800883a <_raise_r+0x32>
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f830 	bl	800888c <_getpid_r>
 800882c:	462a      	mov	r2, r5
 800882e:	4601      	mov	r1, r0
 8008830:	4620      	mov	r0, r4
 8008832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008836:	f000 b817 	b.w	8008868 <_kill_r>
 800883a:	2b01      	cmp	r3, #1
 800883c:	d00a      	beq.n	8008854 <_raise_r+0x4c>
 800883e:	1c59      	adds	r1, r3, #1
 8008840:	d103      	bne.n	800884a <_raise_r+0x42>
 8008842:	2316      	movs	r3, #22
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	2001      	movs	r0, #1
 8008848:	e7e7      	b.n	800881a <_raise_r+0x12>
 800884a:	2400      	movs	r4, #0
 800884c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008850:	4628      	mov	r0, r5
 8008852:	4798      	blx	r3
 8008854:	2000      	movs	r0, #0
 8008856:	e7e0      	b.n	800881a <_raise_r+0x12>

08008858 <raise>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <raise+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f7ff bfd3 	b.w	8008808 <_raise_r>
 8008862:	bf00      	nop
 8008864:	20000010 	.word	0x20000010

08008868 <_kill_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_kill_r+0x20>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	4611      	mov	r1, r2
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	f7f8 ffb3 	bl	80017e0 <_kill>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d102      	bne.n	8008884 <_kill_r+0x1c>
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	b103      	cbz	r3, 8008884 <_kill_r+0x1c>
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	bf00      	nop
 8008888:	20000758 	.word	0x20000758

0800888c <_getpid_r>:
 800888c:	f7f8 bfa0 	b.w	80017d0 <_getpid>

08008890 <siprintf>:
 8008890:	b40e      	push	{r1, r2, r3}
 8008892:	b500      	push	{lr}
 8008894:	b09c      	sub	sp, #112	; 0x70
 8008896:	ab1d      	add	r3, sp, #116	; 0x74
 8008898:	9002      	str	r0, [sp, #8]
 800889a:	9006      	str	r0, [sp, #24]
 800889c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088a0:	4809      	ldr	r0, [pc, #36]	; (80088c8 <siprintf+0x38>)
 80088a2:	9107      	str	r1, [sp, #28]
 80088a4:	9104      	str	r1, [sp, #16]
 80088a6:	4909      	ldr	r1, [pc, #36]	; (80088cc <siprintf+0x3c>)
 80088a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ac:	9105      	str	r1, [sp, #20]
 80088ae:	6800      	ldr	r0, [r0, #0]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	a902      	add	r1, sp, #8
 80088b4:	f000 f874 	bl	80089a0 <_svfiprintf_r>
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	b01c      	add	sp, #112	; 0x70
 80088c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c4:	b003      	add	sp, #12
 80088c6:	4770      	bx	lr
 80088c8:	20000010 	.word	0x20000010
 80088cc:	ffff0208 	.word	0xffff0208

080088d0 <__malloc_lock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__malloc_lock+0x8>)
 80088d2:	f000 baf9 	b.w	8008ec8 <__retarget_lock_acquire_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000760 	.word	0x20000760

080088dc <__malloc_unlock>:
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <__malloc_unlock+0x8>)
 80088de:	f000 baf4 	b.w	8008eca <__retarget_lock_release_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000760 	.word	0x20000760

080088e8 <__ssputs_r>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	688e      	ldr	r6, [r1, #8]
 80088ee:	429e      	cmp	r6, r3
 80088f0:	4682      	mov	sl, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	4690      	mov	r8, r2
 80088f6:	461f      	mov	r7, r3
 80088f8:	d838      	bhi.n	800896c <__ssputs_r+0x84>
 80088fa:	898a      	ldrh	r2, [r1, #12]
 80088fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008900:	d032      	beq.n	8008968 <__ssputs_r+0x80>
 8008902:	6825      	ldr	r5, [r4, #0]
 8008904:	6909      	ldr	r1, [r1, #16]
 8008906:	eba5 0901 	sub.w	r9, r5, r1
 800890a:	6965      	ldr	r5, [r4, #20]
 800890c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008914:	3301      	adds	r3, #1
 8008916:	444b      	add	r3, r9
 8008918:	106d      	asrs	r5, r5, #1
 800891a:	429d      	cmp	r5, r3
 800891c:	bf38      	it	cc
 800891e:	461d      	movcc	r5, r3
 8008920:	0553      	lsls	r3, r2, #21
 8008922:	d531      	bpl.n	8008988 <__ssputs_r+0xa0>
 8008924:	4629      	mov	r1, r5
 8008926:	f7ff ff05 	bl	8008734 <_malloc_r>
 800892a:	4606      	mov	r6, r0
 800892c:	b950      	cbnz	r0, 8008944 <__ssputs_r+0x5c>
 800892e:	230c      	movs	r3, #12
 8008930:	f8ca 3000 	str.w	r3, [sl]
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008944:	6921      	ldr	r1, [r4, #16]
 8008946:	464a      	mov	r2, r9
 8008948:	f000 fac0 	bl	8008ecc <memcpy>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	6126      	str	r6, [r4, #16]
 800895a:	6165      	str	r5, [r4, #20]
 800895c:	444e      	add	r6, r9
 800895e:	eba5 0509 	sub.w	r5, r5, r9
 8008962:	6026      	str	r6, [r4, #0]
 8008964:	60a5      	str	r5, [r4, #8]
 8008966:	463e      	mov	r6, r7
 8008968:	42be      	cmp	r6, r7
 800896a:	d900      	bls.n	800896e <__ssputs_r+0x86>
 800896c:	463e      	mov	r6, r7
 800896e:	4632      	mov	r2, r6
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	4641      	mov	r1, r8
 8008974:	f000 fab8 	bl	8008ee8 <memmove>
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	1b9b      	subs	r3, r3, r6
 800897e:	4432      	add	r2, r6
 8008980:	60a3      	str	r3, [r4, #8]
 8008982:	6022      	str	r2, [r4, #0]
 8008984:	2000      	movs	r0, #0
 8008986:	e7db      	b.n	8008940 <__ssputs_r+0x58>
 8008988:	462a      	mov	r2, r5
 800898a:	f000 fac7 	bl	8008f1c <_realloc_r>
 800898e:	4606      	mov	r6, r0
 8008990:	2800      	cmp	r0, #0
 8008992:	d1e1      	bne.n	8008958 <__ssputs_r+0x70>
 8008994:	6921      	ldr	r1, [r4, #16]
 8008996:	4650      	mov	r0, sl
 8008998:	f7ff fe7c 	bl	8008694 <_free_r>
 800899c:	e7c7      	b.n	800892e <__ssputs_r+0x46>
	...

080089a0 <_svfiprintf_r>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	4698      	mov	r8, r3
 80089a6:	898b      	ldrh	r3, [r1, #12]
 80089a8:	061b      	lsls	r3, r3, #24
 80089aa:	b09d      	sub	sp, #116	; 0x74
 80089ac:	4607      	mov	r7, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	4614      	mov	r4, r2
 80089b2:	d50e      	bpl.n	80089d2 <_svfiprintf_r+0x32>
 80089b4:	690b      	ldr	r3, [r1, #16]
 80089b6:	b963      	cbnz	r3, 80089d2 <_svfiprintf_r+0x32>
 80089b8:	2140      	movs	r1, #64	; 0x40
 80089ba:	f7ff febb 	bl	8008734 <_malloc_r>
 80089be:	6028      	str	r0, [r5, #0]
 80089c0:	6128      	str	r0, [r5, #16]
 80089c2:	b920      	cbnz	r0, 80089ce <_svfiprintf_r+0x2e>
 80089c4:	230c      	movs	r3, #12
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089cc:	e0d1      	b.n	8008b72 <_svfiprintf_r+0x1d2>
 80089ce:	2340      	movs	r3, #64	; 0x40
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	; 0x24
 80089d6:	2320      	movs	r3, #32
 80089d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e0:	2330      	movs	r3, #48	; 0x30
 80089e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b8c <_svfiprintf_r+0x1ec>
 80089e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	4623      	mov	r3, r4
 80089f0:	469a      	mov	sl, r3
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	b10a      	cbz	r2, 80089fc <_svfiprintf_r+0x5c>
 80089f8:	2a25      	cmp	r2, #37	; 0x25
 80089fa:	d1f9      	bne.n	80089f0 <_svfiprintf_r+0x50>
 80089fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008a00:	d00b      	beq.n	8008a1a <_svfiprintf_r+0x7a>
 8008a02:	465b      	mov	r3, fp
 8008a04:	4622      	mov	r2, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ff6d 	bl	80088e8 <__ssputs_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f000 80aa 	beq.w	8008b68 <_svfiprintf_r+0x1c8>
 8008a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a16:	445a      	add	r2, fp
 8008a18:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80a2 	beq.w	8008b68 <_svfiprintf_r+0x1c8>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a3c:	4654      	mov	r4, sl
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	4851      	ldr	r0, [pc, #324]	; (8008b8c <_svfiprintf_r+0x1ec>)
 8008a46:	f7f7 fc53 	bl	80002f0 <memchr>
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_svfiprintf_r+0xe6>
 8008a4e:	06d0      	lsls	r0, r2, #27
 8008a50:	bf44      	itt	mi
 8008a52:	2320      	movmi	r3, #32
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a58:	0711      	lsls	r1, r2, #28
 8008a5a:	bf44      	itt	mi
 8008a5c:	232b      	movmi	r3, #43	; 0x2b
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b2a      	cmp	r3, #42	; 0x2a
 8008a68:	d015      	beq.n	8008a96 <_svfiprintf_r+0xf6>
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4654      	mov	r4, sl
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4621      	mov	r1, r4
 8008a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7a:	3b30      	subs	r3, #48	; 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d94e      	bls.n	8008b1e <_svfiprintf_r+0x17e>
 8008a80:	b1b0      	cbz	r0, 8008ab0 <_svfiprintf_r+0x110>
 8008a82:	9207      	str	r2, [sp, #28]
 8008a84:	e014      	b.n	8008ab0 <_svfiprintf_r+0x110>
 8008a86:	eba0 0308 	sub.w	r3, r0, r8
 8008a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46a2      	mov	sl, r4
 8008a94:	e7d2      	b.n	8008a3c <_svfiprintf_r+0x9c>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	9103      	str	r1, [sp, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbb      	ittet	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa8:	9307      	strge	r3, [sp, #28]
 8008aaa:	9307      	strlt	r3, [sp, #28]
 8008aac:	bfb8      	it	lt
 8008aae:	9204      	strlt	r2, [sp, #16]
 8008ab0:	7823      	ldrb	r3, [r4, #0]
 8008ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab4:	d10c      	bne.n	8008ad0 <_svfiprintf_r+0x130>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aba:	d135      	bne.n	8008b28 <_svfiprintf_r+0x188>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb8      	it	lt
 8008ac8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008acc:	3402      	adds	r4, #2
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b9c <_svfiprintf_r+0x1fc>
 8008ad4:	7821      	ldrb	r1, [r4, #0]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	4650      	mov	r0, sl
 8008ada:	f7f7 fc09 	bl	80002f0 <memchr>
 8008ade:	b140      	cbz	r0, 8008af2 <_svfiprintf_r+0x152>
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	eba0 000a 	sub.w	r0, r0, sl
 8008ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	4303      	orrs	r3, r0
 8008aee:	3401      	adds	r4, #1
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af6:	4826      	ldr	r0, [pc, #152]	; (8008b90 <_svfiprintf_r+0x1f0>)
 8008af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008afc:	2206      	movs	r2, #6
 8008afe:	f7f7 fbf7 	bl	80002f0 <memchr>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d038      	beq.n	8008b78 <_svfiprintf_r+0x1d8>
 8008b06:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <_svfiprintf_r+0x1f4>)
 8008b08:	bb1b      	cbnz	r3, 8008b52 <_svfiprintf_r+0x1b2>
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	3307      	adds	r3, #7
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	3308      	adds	r3, #8
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b18:	4433      	add	r3, r6
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	e767      	b.n	80089ee <_svfiprintf_r+0x4e>
 8008b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b22:	460c      	mov	r4, r1
 8008b24:	2001      	movs	r0, #1
 8008b26:	e7a5      	b.n	8008a74 <_svfiprintf_r+0xd4>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f04f 0c0a 	mov.w	ip, #10
 8008b34:	4620      	mov	r0, r4
 8008b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3a:	3a30      	subs	r2, #48	; 0x30
 8008b3c:	2a09      	cmp	r2, #9
 8008b3e:	d903      	bls.n	8008b48 <_svfiprintf_r+0x1a8>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0c5      	beq.n	8008ad0 <_svfiprintf_r+0x130>
 8008b44:	9105      	str	r1, [sp, #20]
 8008b46:	e7c3      	b.n	8008ad0 <_svfiprintf_r+0x130>
 8008b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7f0      	b.n	8008b34 <_svfiprintf_r+0x194>
 8008b52:	ab03      	add	r3, sp, #12
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	462a      	mov	r2, r5
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <_svfiprintf_r+0x1f8>)
 8008b5a:	a904      	add	r1, sp, #16
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f3af 8000 	nop.w
 8008b62:	1c42      	adds	r2, r0, #1
 8008b64:	4606      	mov	r6, r0
 8008b66:	d1d6      	bne.n	8008b16 <_svfiprintf_r+0x176>
 8008b68:	89ab      	ldrh	r3, [r5, #12]
 8008b6a:	065b      	lsls	r3, r3, #25
 8008b6c:	f53f af2c 	bmi.w	80089c8 <_svfiprintf_r+0x28>
 8008b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b72:	b01d      	add	sp, #116	; 0x74
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	ab03      	add	r3, sp, #12
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <_svfiprintf_r+0x1f8>)
 8008b80:	a904      	add	r1, sp, #16
 8008b82:	4638      	mov	r0, r7
 8008b84:	f000 f87a 	bl	8008c7c <_printf_i>
 8008b88:	e7eb      	b.n	8008b62 <_svfiprintf_r+0x1c2>
 8008b8a:	bf00      	nop
 8008b8c:	08009040 	.word	0x08009040
 8008b90:	0800904a 	.word	0x0800904a
 8008b94:	00000000 	.word	0x00000000
 8008b98:	080088e9 	.word	0x080088e9
 8008b9c:	08009046 	.word	0x08009046

08008ba0 <_printf_common>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	688a      	ldr	r2, [r1, #8]
 8008baa:	690b      	ldr	r3, [r1, #16]
 8008bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	bfb8      	it	lt
 8008bb4:	4613      	movlt	r3, r2
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b10a      	cbz	r2, 8008bc6 <_printf_common+0x26>
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	0699      	lsls	r1, r3, #26
 8008bca:	bf42      	ittt	mi
 8008bcc:	6833      	ldrmi	r3, [r6, #0]
 8008bce:	3302      	addmi	r3, #2
 8008bd0:	6033      	strmi	r3, [r6, #0]
 8008bd2:	6825      	ldr	r5, [r4, #0]
 8008bd4:	f015 0506 	ands.w	r5, r5, #6
 8008bd8:	d106      	bne.n	8008be8 <_printf_common+0x48>
 8008bda:	f104 0a19 	add.w	sl, r4, #25
 8008bde:	68e3      	ldr	r3, [r4, #12]
 8008be0:	6832      	ldr	r2, [r6, #0]
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	42ab      	cmp	r3, r5
 8008be6:	dc26      	bgt.n	8008c36 <_printf_common+0x96>
 8008be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bec:	1e13      	subs	r3, r2, #0
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	0692      	lsls	r2, r2, #26
 8008bf6:	d42b      	bmi.n	8008c50 <_printf_common+0xb0>
 8008bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	3001      	adds	r0, #1
 8008c04:	d01e      	beq.n	8008c44 <_printf_common+0xa4>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	68e5      	ldr	r5, [r4, #12]
 8008c0a:	6832      	ldr	r2, [r6, #0]
 8008c0c:	f003 0306 	and.w	r3, r3, #6
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	bf08      	it	eq
 8008c14:	1aad      	subeq	r5, r5, r2
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	bf0c      	ite	eq
 8008c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c20:	2500      	movne	r5, #0
 8008c22:	4293      	cmp	r3, r2
 8008c24:	bfc4      	itt	gt
 8008c26:	1a9b      	subgt	r3, r3, r2
 8008c28:	18ed      	addgt	r5, r5, r3
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	341a      	adds	r4, #26
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	d11a      	bne.n	8008c68 <_printf_common+0xc8>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e008      	b.n	8008c48 <_printf_common+0xa8>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	47c0      	blx	r8
 8008c40:	3001      	adds	r0, #1
 8008c42:	d103      	bne.n	8008c4c <_printf_common+0xac>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	e7c6      	b.n	8008bde <_printf_common+0x3e>
 8008c50:	18e1      	adds	r1, r4, r3
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	2030      	movs	r0, #48	; 0x30
 8008c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c5a:	4422      	add	r2, r4
 8008c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c64:	3302      	adds	r3, #2
 8008c66:	e7c7      	b.n	8008bf8 <_printf_common+0x58>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	4638      	mov	r0, r7
 8008c70:	47c0      	blx	r8
 8008c72:	3001      	adds	r0, #1
 8008c74:	d0e6      	beq.n	8008c44 <_printf_common+0xa4>
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7d9      	b.n	8008c2e <_printf_common+0x8e>
	...

08008c7c <_printf_i>:
 8008c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	4691      	mov	r9, r2
 8008c84:	7e27      	ldrb	r7, [r4, #24]
 8008c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c88:	2f78      	cmp	r7, #120	; 0x78
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c92:	d807      	bhi.n	8008ca4 <_printf_i+0x28>
 8008c94:	2f62      	cmp	r7, #98	; 0x62
 8008c96:	d80a      	bhi.n	8008cae <_printf_i+0x32>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	f000 80d8 	beq.w	8008e4e <_printf_i+0x1d2>
 8008c9e:	2f58      	cmp	r7, #88	; 0x58
 8008ca0:	f000 80a3 	beq.w	8008dea <_printf_i+0x16e>
 8008ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cac:	e03a      	b.n	8008d24 <_printf_i+0xa8>
 8008cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cb2:	2b15      	cmp	r3, #21
 8008cb4:	d8f6      	bhi.n	8008ca4 <_printf_i+0x28>
 8008cb6:	a001      	add	r0, pc, #4	; (adr r0, 8008cbc <_printf_i+0x40>)
 8008cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cbc:	08008d15 	.word	0x08008d15
 8008cc0:	08008d29 	.word	0x08008d29
 8008cc4:	08008ca5 	.word	0x08008ca5
 8008cc8:	08008ca5 	.word	0x08008ca5
 8008ccc:	08008ca5 	.word	0x08008ca5
 8008cd0:	08008ca5 	.word	0x08008ca5
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008ca5 	.word	0x08008ca5
 8008cdc:	08008ca5 	.word	0x08008ca5
 8008ce0:	08008ca5 	.word	0x08008ca5
 8008ce4:	08008ca5 	.word	0x08008ca5
 8008ce8:	08008e35 	.word	0x08008e35
 8008cec:	08008d59 	.word	0x08008d59
 8008cf0:	08008e17 	.word	0x08008e17
 8008cf4:	08008ca5 	.word	0x08008ca5
 8008cf8:	08008ca5 	.word	0x08008ca5
 8008cfc:	08008e57 	.word	0x08008e57
 8008d00:	08008ca5 	.word	0x08008ca5
 8008d04:	08008d59 	.word	0x08008d59
 8008d08:	08008ca5 	.word	0x08008ca5
 8008d0c:	08008ca5 	.word	0x08008ca5
 8008d10:	08008e1f 	.word	0x08008e1f
 8008d14:	680b      	ldr	r3, [r1, #0]
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	600a      	str	r2, [r1, #0]
 8008d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0a3      	b.n	8008e70 <_printf_i+0x1f4>
 8008d28:	6825      	ldr	r5, [r4, #0]
 8008d2a:	6808      	ldr	r0, [r1, #0]
 8008d2c:	062e      	lsls	r6, r5, #24
 8008d2e:	f100 0304 	add.w	r3, r0, #4
 8008d32:	d50a      	bpl.n	8008d4a <_printf_i+0xce>
 8008d34:	6805      	ldr	r5, [r0, #0]
 8008d36:	600b      	str	r3, [r1, #0]
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	da03      	bge.n	8008d44 <_printf_i+0xc8>
 8008d3c:	232d      	movs	r3, #45	; 0x2d
 8008d3e:	426d      	negs	r5, r5
 8008d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d44:	485e      	ldr	r0, [pc, #376]	; (8008ec0 <_printf_i+0x244>)
 8008d46:	230a      	movs	r3, #10
 8008d48:	e019      	b.n	8008d7e <_printf_i+0x102>
 8008d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d4e:	6805      	ldr	r5, [r0, #0]
 8008d50:	600b      	str	r3, [r1, #0]
 8008d52:	bf18      	it	ne
 8008d54:	b22d      	sxthne	r5, r5
 8008d56:	e7ef      	b.n	8008d38 <_printf_i+0xbc>
 8008d58:	680b      	ldr	r3, [r1, #0]
 8008d5a:	6825      	ldr	r5, [r4, #0]
 8008d5c:	1d18      	adds	r0, r3, #4
 8008d5e:	6008      	str	r0, [r1, #0]
 8008d60:	0628      	lsls	r0, r5, #24
 8008d62:	d501      	bpl.n	8008d68 <_printf_i+0xec>
 8008d64:	681d      	ldr	r5, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <_printf_i+0xf2>
 8008d68:	0669      	lsls	r1, r5, #25
 8008d6a:	d5fb      	bpl.n	8008d64 <_printf_i+0xe8>
 8008d6c:	881d      	ldrh	r5, [r3, #0]
 8008d6e:	4854      	ldr	r0, [pc, #336]	; (8008ec0 <_printf_i+0x244>)
 8008d70:	2f6f      	cmp	r7, #111	; 0x6f
 8008d72:	bf0c      	ite	eq
 8008d74:	2308      	moveq	r3, #8
 8008d76:	230a      	movne	r3, #10
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d7e:	6866      	ldr	r6, [r4, #4]
 8008d80:	60a6      	str	r6, [r4, #8]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	bfa2      	ittt	ge
 8008d86:	6821      	ldrge	r1, [r4, #0]
 8008d88:	f021 0104 	bicge.w	r1, r1, #4
 8008d8c:	6021      	strge	r1, [r4, #0]
 8008d8e:	b90d      	cbnz	r5, 8008d94 <_printf_i+0x118>
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	d04d      	beq.n	8008e30 <_printf_i+0x1b4>
 8008d94:	4616      	mov	r6, r2
 8008d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d9e:	5dc7      	ldrb	r7, [r0, r7]
 8008da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008da4:	462f      	mov	r7, r5
 8008da6:	42bb      	cmp	r3, r7
 8008da8:	460d      	mov	r5, r1
 8008daa:	d9f4      	bls.n	8008d96 <_printf_i+0x11a>
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d10b      	bne.n	8008dc8 <_printf_i+0x14c>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	07df      	lsls	r7, r3, #31
 8008db4:	d508      	bpl.n	8008dc8 <_printf_i+0x14c>
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	6861      	ldr	r1, [r4, #4]
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	bfde      	ittt	le
 8008dbe:	2330      	movle	r3, #48	; 0x30
 8008dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dc4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008dc8:	1b92      	subs	r2, r2, r6
 8008dca:	6122      	str	r2, [r4, #16]
 8008dcc:	f8cd a000 	str.w	sl, [sp]
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	aa03      	add	r2, sp, #12
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	f7ff fee2 	bl	8008ba0 <_printf_common>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d14c      	bne.n	8008e7a <_printf_i+0x1fe>
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de4:	b004      	add	sp, #16
 8008de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dea:	4835      	ldr	r0, [pc, #212]	; (8008ec0 <_printf_i+0x244>)
 8008dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	680e      	ldr	r6, [r1, #0]
 8008df4:	061f      	lsls	r7, r3, #24
 8008df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008dfa:	600e      	str	r6, [r1, #0]
 8008dfc:	d514      	bpl.n	8008e28 <_printf_i+0x1ac>
 8008dfe:	07d9      	lsls	r1, r3, #31
 8008e00:	bf44      	itt	mi
 8008e02:	f043 0320 	orrmi.w	r3, r3, #32
 8008e06:	6023      	strmi	r3, [r4, #0]
 8008e08:	b91d      	cbnz	r5, 8008e12 <_printf_i+0x196>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f023 0320 	bic.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	2310      	movs	r3, #16
 8008e14:	e7b0      	b.n	8008d78 <_printf_i+0xfc>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f043 0320 	orr.w	r3, r3, #32
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	2378      	movs	r3, #120	; 0x78
 8008e20:	4828      	ldr	r0, [pc, #160]	; (8008ec4 <_printf_i+0x248>)
 8008e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e26:	e7e3      	b.n	8008df0 <_printf_i+0x174>
 8008e28:	065e      	lsls	r6, r3, #25
 8008e2a:	bf48      	it	mi
 8008e2c:	b2ad      	uxthmi	r5, r5
 8008e2e:	e7e6      	b.n	8008dfe <_printf_i+0x182>
 8008e30:	4616      	mov	r6, r2
 8008e32:	e7bb      	b.n	8008dac <_printf_i+0x130>
 8008e34:	680b      	ldr	r3, [r1, #0]
 8008e36:	6826      	ldr	r6, [r4, #0]
 8008e38:	6960      	ldr	r0, [r4, #20]
 8008e3a:	1d1d      	adds	r5, r3, #4
 8008e3c:	600d      	str	r5, [r1, #0]
 8008e3e:	0635      	lsls	r5, r6, #24
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	d501      	bpl.n	8008e48 <_printf_i+0x1cc>
 8008e44:	6018      	str	r0, [r3, #0]
 8008e46:	e002      	b.n	8008e4e <_printf_i+0x1d2>
 8008e48:	0671      	lsls	r1, r6, #25
 8008e4a:	d5fb      	bpl.n	8008e44 <_printf_i+0x1c8>
 8008e4c:	8018      	strh	r0, [r3, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	4616      	mov	r6, r2
 8008e54:	e7ba      	b.n	8008dcc <_printf_i+0x150>
 8008e56:	680b      	ldr	r3, [r1, #0]
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	600a      	str	r2, [r1, #0]
 8008e5c:	681e      	ldr	r6, [r3, #0]
 8008e5e:	6862      	ldr	r2, [r4, #4]
 8008e60:	2100      	movs	r1, #0
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7f7 fa44 	bl	80002f0 <memchr>
 8008e68:	b108      	cbz	r0, 8008e6e <_printf_i+0x1f2>
 8008e6a:	1b80      	subs	r0, r0, r6
 8008e6c:	6060      	str	r0, [r4, #4]
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	2300      	movs	r3, #0
 8008e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e78:	e7a8      	b.n	8008dcc <_printf_i+0x150>
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d0ab      	beq.n	8008de0 <_printf_i+0x164>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	079b      	lsls	r3, r3, #30
 8008e8c:	d413      	bmi.n	8008eb6 <_printf_i+0x23a>
 8008e8e:	68e0      	ldr	r0, [r4, #12]
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	4298      	cmp	r0, r3
 8008e94:	bfb8      	it	lt
 8008e96:	4618      	movlt	r0, r3
 8008e98:	e7a4      	b.n	8008de4 <_printf_i+0x168>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d09b      	beq.n	8008de0 <_printf_i+0x164>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	9903      	ldr	r1, [sp, #12]
 8008eae:	1a5b      	subs	r3, r3, r1
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	dcf2      	bgt.n	8008e9a <_printf_i+0x21e>
 8008eb4:	e7eb      	b.n	8008e8e <_printf_i+0x212>
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	f104 0619 	add.w	r6, r4, #25
 8008ebc:	e7f5      	b.n	8008eaa <_printf_i+0x22e>
 8008ebe:	bf00      	nop
 8008ec0:	08009051 	.word	0x08009051
 8008ec4:	08009062 	.word	0x08009062

08008ec8 <__retarget_lock_acquire_recursive>:
 8008ec8:	4770      	bx	lr

08008eca <__retarget_lock_release_recursive>:
 8008eca:	4770      	bx	lr

08008ecc <memcpy>:
 8008ecc:	440a      	add	r2, r1
 8008ece:	4291      	cmp	r1, r2
 8008ed0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ed4:	d100      	bne.n	8008ed8 <memcpy+0xc>
 8008ed6:	4770      	bx	lr
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	d1f9      	bne.n	8008eda <memcpy+0xe>
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <memmove>:
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	b510      	push	{r4, lr}
 8008eec:	eb01 0402 	add.w	r4, r1, r2
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0x10>
 8008ef2:	4284      	cmp	r4, r0
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	d807      	bhi.n	8008f08 <memmove+0x20>
 8008ef8:	1e43      	subs	r3, r0, #1
 8008efa:	42a1      	cmp	r1, r4
 8008efc:	d008      	beq.n	8008f10 <memmove+0x28>
 8008efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f06:	e7f8      	b.n	8008efa <memmove+0x12>
 8008f08:	4402      	add	r2, r0
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	428a      	cmp	r2, r1
 8008f0e:	d100      	bne.n	8008f12 <memmove+0x2a>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1a:	e7f7      	b.n	8008f0c <memmove+0x24>

08008f1c <_realloc_r>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	4607      	mov	r7, r0
 8008f20:	4614      	mov	r4, r2
 8008f22:	460e      	mov	r6, r1
 8008f24:	b921      	cbnz	r1, 8008f30 <_realloc_r+0x14>
 8008f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	f7ff bc02 	b.w	8008734 <_malloc_r>
 8008f30:	b922      	cbnz	r2, 8008f3c <_realloc_r+0x20>
 8008f32:	f7ff fbaf 	bl	8008694 <_free_r>
 8008f36:	4625      	mov	r5, r4
 8008f38:	4628      	mov	r0, r5
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3c:	f000 f814 	bl	8008f68 <_malloc_usable_size_r>
 8008f40:	42a0      	cmp	r0, r4
 8008f42:	d20f      	bcs.n	8008f64 <_realloc_r+0x48>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4638      	mov	r0, r7
 8008f48:	f7ff fbf4 	bl	8008734 <_malloc_r>
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d0f2      	beq.n	8008f38 <_realloc_r+0x1c>
 8008f52:	4631      	mov	r1, r6
 8008f54:	4622      	mov	r2, r4
 8008f56:	f7ff ffb9 	bl	8008ecc <memcpy>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f7ff fb99 	bl	8008694 <_free_r>
 8008f62:	e7e9      	b.n	8008f38 <_realloc_r+0x1c>
 8008f64:	4635      	mov	r5, r6
 8008f66:	e7e7      	b.n	8008f38 <_realloc_r+0x1c>

08008f68 <_malloc_usable_size_r>:
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f18      	subs	r0, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbc      	itt	lt
 8008f72:	580b      	ldrlt	r3, [r1, r0]
 8008f74:	18c0      	addlt	r0, r0, r3
 8008f76:	4770      	bx	lr

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
