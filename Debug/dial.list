
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007768  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08007ac0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08007b20  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000134  08007b80  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08007b80  00020718  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6f6  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  0004c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  000508e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00051ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c775  00000000  00000000  00053340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195ae  00000000  00000000  0008fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d9fd  00000000  00000000  000a9063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00216a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e0  00000000  00000000  00216ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000134 	.word	0x20000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080079e8 	.word	0x080079e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000138 	.word	0x20000138
 80002d4:	080079e8 	.word	0x080079e8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	711a      	strb	r2, [r3, #4]

}
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2201      	movs	r2, #1
 800061e:	715a      	strb	r2, [r3, #5]
   }
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f022 0201 	bic.w	r2, r2, #1
 8000642:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]

}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	4613      	mov	r3, r2
 8000670:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2201      	movs	r2, #1
 8000682:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 800068a:	2301      	movs	r3, #1
 800068c:	75fb      	strb	r3, [r7, #23]
 800068e:	e001      	b.n	8000694 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	461a      	mov	r2, r3
 8000698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 800069e:	f001 fedf 	bl	8002460 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f042 0201 	orr.w	r2, r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58020800 	.word	0x58020800

080006c8 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
   return m_status;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;
   m_TIMx->CR1 |= TIM_CR1_CEN;

}

uint8_t StepperMotor::MoveComplete() {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	795b      	ldrb	r3, [r3, #5]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 ff04 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f846 	bl	8000790 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 fa50 	bl	8000ba8 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000708:	f000 f8d0 	bl	80008ac <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 800070c:	f000 f9b6 	bl	8000a7c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000710:	f000 fa14 	bl	8000b3c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM3_Init();
 8000714:	f000 f922 	bl	800095c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000718:	2108      	movs	r1, #8
 800071a:	481a      	ldr	r0, [pc, #104]	; (8000784 <main+0x8c>)
 800071c:	f004 fc02 	bl	8004f24 <HAL_TIM_PWM_Start_IT>
  TIM3->CR1 &= ~(TIM_CR1_CEN);
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0x90>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a18      	ldr	r2, [pc, #96]	; (8000788 <main+0x90>)
 8000726:	f023 0301 	bic.w	r3, r3, #1
 800072a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     Stepper->Move(50*16, CW);
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <main+0x94>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff94 	bl	8000664 <_ZNSt12StepperMotor4MoveEi9Direction>
     while (Stepper->Status() == Running) {}
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0x94>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffc1 	bl	80006c8 <_ZNSt12StepperMotor6StatusEv>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	bf0c      	ite	eq
 800074c:	2301      	moveq	r3, #1
 800074e:	2300      	movne	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d000      	beq.n	8000758 <main+0x60>
 8000756:	e7f1      	b.n	800073c <main+0x44>
     Stepper->Move(50*16, CCW);
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0x94>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff7e 	bl	8000664 <_ZNSt12StepperMotor4MoveEi9Direction>
     while (Stepper->Status() == Running) {}
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <main+0x94>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffab 	bl	80006c8 <_ZNSt12StepperMotor6StatusEv>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	bf0c      	ite	eq
 8000778:	2301      	moveq	r3, #1
 800077a:	2300      	movne	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0d4      	beq.n	800072c <main+0x34>
 8000782:	e7f1      	b.n	8000768 <main+0x70>
 8000784:	2000020c 	.word	0x2000020c
 8000788:	40000400 	.word	0x40000400
 800078c:	200006f0 	.word	0x200006f0

08000790 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	224c      	movs	r2, #76	; 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 f85e 	bl	8007860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 f858 	bl	8007860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f001 ffb7 	bl	8002724 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <_Z18SystemClock_Configv+0x114>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <_Z18SystemClock_Configv+0x114>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <_Z18SystemClock_Configv+0x114>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <_Z18SystemClock_Configv+0x118>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <_Z18SystemClock_Configv+0x118>)
 80007da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <_Z18SystemClock_Configv+0x118>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <_Z18SystemClock_Configv+0x118>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d000      	beq.n	8000806 <_Z18SystemClock_Configv+0x76>
 8000804:	e7f2      	b.n	80007ec <_Z18SystemClock_Configv+0x5c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000806:	2303      	movs	r3, #3
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000810:	2301      	movs	r3, #1
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000824:	2318      	movs	r3, #24
 8000826:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000834:	230c      	movs	r3, #12
 8000836:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000838:	2300      	movs	r3, #0
 800083a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f001 ffb7 	bl	80027b8 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2301      	movne	r3, #1
 8000852:	2300      	moveq	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800085a:	f000 fab9 	bl	8000dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	233f      	movs	r3, #63	; 0x3f
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fba8 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000898:	f000 fa9a 	bl	8000dd0 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58000400 	.word	0x58000400
 80008a8:	58024800 	.word	0x58024800

080008ac <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008b2:	4a26      	ldr	r2, [pc, #152]	; (800094c <_ZL11MX_ETH_Initv+0xa0>)
 80008b4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	3302      	adds	r3, #2
 80008ce:	22e1      	movs	r2, #225	; 0xe1
 80008d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	3303      	adds	r3, #3
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	3305      	adds	r3, #5
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <_ZL11MX_ETH_Initv+0xa4>)
 80008fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <_ZL11MX_ETH_Initv+0xa8>)
 8000900:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 8000904:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000908:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800090a:	480f      	ldr	r0, [pc, #60]	; (8000948 <_ZL11MX_ETH_Initv+0x9c>)
 800090c:	f000 ffe2 	bl	80018d4 <HAL_ETH_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <_ZL11MX_ETH_Initv+0x78>
  {
    Error_Handler();
 8000920:	f000 fa56 	bl	8000dd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000924:	2234      	movs	r2, #52	; 0x34
 8000926:	2100      	movs	r1, #0
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <_ZL11MX_ETH_Initv+0xac>)
 800092a:	f006 ff99 	bl	8007860 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <_ZL11MX_ETH_Initv+0xac>)
 8000930:	2221      	movs	r2, #33	; 0x21
 8000932:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_ZL11MX_ETH_Initv+0xac>)
 8000936:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800093a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <_ZL11MX_ETH_Initv+0xac>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000184 	.word	0x20000184
 800094c:	40028000 	.word	0x40028000
 8000950:	200000d4 	.word	0x200000d4
 8000954:	20000074 	.word	0x20000074
 8000958:	20000150 	.word	0x20000150

0800095c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 8000990:	4a39      	ldr	r2, [pc, #228]	; (8000a78 <_ZL12MX_TIM3_Initv+0x11c>)
 8000992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 8000996:	223f      	movs	r2, #63	; 0x3f
 8000998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800099a:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 800099c:	2210      	movs	r2, #16
 800099e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 468;
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009a2:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80009a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b4:	482f      	ldr	r0, [pc, #188]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009b6:	f004 f9fd 	bl	8004db4 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80009ca:	f000 fa01 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d8:	4619      	mov	r1, r3
 80009da:	4826      	ldr	r0, [pc, #152]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009dc:	f004 fe20 	bl	8005620 <HAL_TIM_ConfigClockSource>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80009f0:	f000 f9ee 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 80009f6:	f004 fa34 	bl	8004e62 <HAL_TIM_PWM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f9e1 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 8000a1e:	f005 fb47 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf14      	ite	ne
 8000a28:	2301      	movne	r3, #1
 8000a2a:	2300      	moveq	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000a32:	f000 f9cd 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a36:	2360      	movs	r3, #96	; 0x60
 8000a38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 40;
 8000a3a:	2328      	movs	r3, #40	; 0x28
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 8000a4e:	f004 fcd7 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000a62:	f000 f9b5 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <_ZL12MX_TIM3_Initv+0x118>)
 8000a68:	f000 faf0 	bl	800104c <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	40000400 	.word	0x40000400

08000a7c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a82:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac4:	481b      	ldr	r0, [pc, #108]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ac6:	f005 fb99 	bl	80061fc <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf14      	ite	ne
 8000ad0:	2301      	movne	r3, #1
 8000ad2:	2300      	moveq	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000ada:	f000 f979 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4814      	ldr	r0, [pc, #80]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ae2:	f006 fae1 	bl	80070a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf14      	ite	ne
 8000aec:	2301      	movne	r3, #1
 8000aee:	2300      	moveq	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000af6:	f000 f96b 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000afe:	f006 fb11 	bl	8007124 <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000b12:	f000 f95d 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b18:	f006 fa8d 	bl	8007036 <HAL_UARTEx_DisableFifoMode>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000b2c:	f000 f950 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000258 	.word	0x20000258
 8000b38:	40004800 	.word	0x40004800

08000b3c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b48:	2209      	movs	r2, #9
 8000b4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b84:	f001 fc85 	bl	8002492 <HAL_PCD_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000b98:	f000 f91a 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200002e8 	.word	0x200002e8
 8000ba4:	40080000 	.word	0x40080000

08000ba8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a6a      	ldr	r2, [pc, #424]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bdc:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a63      	ldr	r2, [pc, #396]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b60      	ldr	r3, [pc, #384]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	4a5b      	ldr	r2, [pc, #364]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0a:	4b59      	ldr	r3, [pc, #356]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a54      	ldr	r2, [pc, #336]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a4c      	ldr	r2, [pc, #304]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a3d      	ldr	r2, [pc, #244]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c96:	4837      	ldr	r0, [pc, #220]	; (8000d74 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000c98:	f001 fbe2 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4835      	ldr	r0, [pc, #212]	; (8000d78 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000ca4:	f001 fbdc 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cae:	4833      	ldr	r0, [pc, #204]	; (8000d7c <_ZL12MX_GPIO_Initv+0x1d4>)
 8000cb0:	f001 fbd6 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4831      	ldr	r0, [pc, #196]	; (8000d80 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000cba:	f001 fbd1 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482a      	ldr	r0, [pc, #168]	; (8000d7c <_ZL12MX_GPIO_Initv+0x1d4>)
 8000cd4:	f001 fa14 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cd8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4820      	ldr	r0, [pc, #128]	; (8000d74 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000cf2:	f001 fa05 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481a      	ldr	r0, [pc, #104]	; (8000d78 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000d10:	f001 f9f6 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <_ZL12MX_GPIO_Initv+0x1dc>)
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000d28:	f001 f9ea 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin_Pin */
  GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <_ZL12MX_GPIO_Initv+0x1d4>)
 8000d46:	f001 f9db 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000d62:	f001 f9cd 	bl	8002100 <HAL_GPIO_Init>

}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58020c00 	.word	0x58020c00
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	58021000 	.word	0x58021000
 8000d84:	11110000 	.word	0x11110000
 8000d88:	58021800 	.word	0x58021800

08000d8c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
   Stepper->UpdateStep();
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc31 	bl	8000600 <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()){
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fc9c 	bl	80006e0 <_ZNSt12StepperMotor12MoveCompleteEv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
      Stepper->Stop();
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc35 	bl	800062c <_ZNSt12StepperMotor4StopEv>
   }
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200006f0 	.word	0x200006f0

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10f      	bne.n	8000e0c <_Z41__static_initialization_and_destruction_0ii+0x30>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10a      	bne.n	8000e0c <_Z41__static_initialization_and_destruction_0ii+0x30>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);;
 8000df6:	200c      	movs	r0, #12
 8000df8:	f006 fcde 	bl	80077b8 <_Znwj>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461c      	mov	r4, r3
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff fbe4 	bl	80005d0 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000e0a:	601c      	str	r4, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	40000400 	.word	0x40000400
 8000e18:	200006f0 	.word	0x200006f0

08000e1c <_GLOBAL__sub_I_DMARxDscrTab>:
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ffd9 	bl	8000ddc <_Z41__static_initialization_and_destruction_0ii>
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x30>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x30>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x30>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58024400 	.word	0x58024400

08000e60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a59      	ldr	r2, [pc, #356]	; (8000fe4 <HAL_ETH_MspInit+0x184>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	f040 80ab 	bne.w	8000fda <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e84:	4b58      	ldr	r3, [pc, #352]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	4a57      	ldr	r2, [pc, #348]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e94:	4b54      	ldr	r3, [pc, #336]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ea2:	4b51      	ldr	r3, [pc, #324]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ec0:	4b49      	ldr	r3, [pc, #292]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec6:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ed0:	4b45      	ldr	r3, [pc, #276]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a40      	ldr	r2, [pc, #256]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f56:	2332      	movs	r3, #50	; 0x32
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f66:	230b      	movs	r3, #11
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <HAL_ETH_MspInit+0x18c>)
 8000f72:	f001 f8c5 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f76:	2386      	movs	r3, #134	; 0x86
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f86:	230b      	movs	r3, #11
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <HAL_ETH_MspInit+0x190>)
 8000f92:	f001 f8b5 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa8:	230b      	movs	r3, #11
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <HAL_ETH_MspInit+0x194>)
 8000fb4:	f001 f8a4 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <HAL_ETH_MspInit+0x198>)
 8000fd6:	f001 f893 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3738      	adds	r7, #56	; 0x38
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40028000 	.word	0x40028000
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	58020800 	.word	0x58020800
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58021800 	.word	0x58021800

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_TIM_Base_MspInit+0x48>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d116      	bne.n	800103c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_Base_MspInit+0x4c>)
 8001020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201d      	movs	r0, #29
 8001032:	f000 fc1a 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001036:	201d      	movs	r0, #29
 8001038:	f000 fc31 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40000400 	.word	0x40000400
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_TIM_MspPostInit+0x6c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11f      	bne.n	80010ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_TIM_MspPostInit+0x70>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_TIM_MspPostInit+0x70>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_TIM_MspPostInit+0x70>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_TIM_MspPostInit+0x74>)
 80010aa:	f001 f829 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40000400 	.word	0x40000400
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020800 	.word	0x58020800

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b8      	sub	sp, #224	; 0xe0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	22bc      	movs	r2, #188	; 0xbc
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 fbbb 	bl	8007860 <memset>
  if(huart->Instance==USART3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <HAL_UART_MspInit+0xc0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d142      	bne.n	800117a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f002 faf4 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110e:	f7ff fe5f 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_UART_MspInit+0xc4>)
 8001114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_UART_MspInit+0xc4>)
 800111a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_MspInit+0xc4>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0xc4>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xc4>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0xc4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800114e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001168:	2307      	movs	r3, #7
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_UART_MspInit+0xc8>)
 8001176:	f000 ffc3 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	37e0      	adds	r7, #224	; 0xe0
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40004800 	.word	0x40004800
 8001188:	58024400 	.word	0x58024400
 800118c:	58020c00 	.word	0x58020c00

08001190 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0b8      	sub	sp, #224	; 0xe0
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	22bc      	movs	r2, #188	; 0xbc
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fb55 	bl	8007860 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <HAL_PCD_MspInit+0xe8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d156      	bne.n	800126e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fa8c 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80011de:	f7ff fdf7 	bl	8000dd0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011e2:	f001 fad9 	bl	8002798 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_PCD_MspInit+0xec>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <HAL_PCD_MspInit+0xec>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_PCD_MspInit+0xec>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001204:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800121e:	230a      	movs	r3, #10
 8001220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001228:	4619      	mov	r1, r3
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <HAL_PCD_MspInit+0xf0>)
 800122c:	f000 ff68 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <HAL_PCD_MspInit+0xf0>)
 800124c:	f000 ff58 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_PCD_MspInit+0xec>)
 8001252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_PCD_MspInit+0xec>)
 8001258:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800125c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_PCD_MspInit+0xec>)
 8001262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	37e0      	adds	r7, #224	; 0xe0
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40080000 	.word	0x40080000
 800127c:	58024400 	.word	0x58024400
 8001280:	58020000 	.word	0x58020000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f98c 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM3_IRQHandler+0x10>)
 80012de:	f003 ff6f 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000020c 	.word	0x2000020c

080012ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return 1;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_kill>:

int _kill(int pid, int sig)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001306:	f006 fa79 	bl	80077fc <__errno>
 800130a:	4603      	mov	r3, r0
 800130c:	2216      	movs	r2, #22
 800130e:	601a      	str	r2, [r3, #0]
	return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_exit>:

void _exit (int status)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffe7 	bl	80012fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800132e:	e7fe      	b.n	800132e <_exit+0x12>

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f006 fa4c 	bl	80077fc <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	200006f4 	.word	0x200006f4
 8001398:	20000718 	.word	0x20000718

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <SystemInit+0xec>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a38      	ldr	r2, [pc, #224]	; (8001488 <SystemInit+0xec>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <SystemInit+0xf0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d807      	bhi.n	80013cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <SystemInit+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	4a31      	ldr	r2, [pc, #196]	; (800148c <SystemInit+0xf0>)
 80013c6:	f043 0307 	orr.w	r3, r3, #7
 80013ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <SystemInit+0xf4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <SystemInit+0xf4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <SystemInit+0xf4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <SystemInit+0xf4>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	492b      	ldr	r1, [pc, #172]	; (8001490 <SystemInit+0xf4>)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <SystemInit+0xf8>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <SystemInit+0xf0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <SystemInit+0xf0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 030f 	bic.w	r3, r3, #15
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <SystemInit+0xf0>)
 8001400:	f043 0307 	orr.w	r3, r3, #7
 8001404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <SystemInit+0xf4>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <SystemInit+0xf4>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <SystemInit+0xf4>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <SystemInit+0xf4>)
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <SystemInit+0xfc>)
 800141c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <SystemInit+0xf4>)
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <SystemInit+0x100>)
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <SystemInit+0xf4>)
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <SystemInit+0x104>)
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <SystemInit+0xf4>)
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SystemInit+0xf4>)
 8001432:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <SystemInit+0x104>)
 8001434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <SystemInit+0xf4>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <SystemInit+0xf4>)
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <SystemInit+0x104>)
 8001440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <SystemInit+0xf4>)
 8001444:	2200      	movs	r2, #0
 8001446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <SystemInit+0xf4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <SystemInit+0xf4>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <SystemInit+0xf4>)
 8001456:	2200      	movs	r2, #0
 8001458:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <SystemInit+0x108>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <SystemInit+0x10c>)
 8001460:	4013      	ands	r3, r2
 8001462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001466:	d202      	bcs.n	800146e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <SystemInit+0x110>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0x114>)
 8001470:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001474:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SystemInit+0xec>)
 8001478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	52002000 	.word	0x52002000
 8001490:	58024400 	.word	0x58024400
 8001494:	eaf6ed7f 	.word	0xeaf6ed7f
 8001498:	02020200 	.word	0x02020200
 800149c:	01ff0000 	.word	0x01ff0000
 80014a0:	01010280 	.word	0x01010280
 80014a4:	5c001000 	.word	0x5c001000
 80014a8:	ffff0000 	.word	0xffff0000
 80014ac:	51008108 	.word	0x51008108
 80014b0:	52004000 	.word	0x52004000

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b8:	f7ff ff70 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f006 f991 	bl	8007808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff f907 	bl	80006f8 <main>
  bx  lr
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014f8:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 80014fc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001500:	20000718 	.word	0x20000718

08001504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC3_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150e:	2003      	movs	r0, #3
 8001510:	f000 f9a0 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001514:	f001 ff16 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_Init+0x68>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	4913      	ldr	r1, [pc, #76]	; (8001574 <HAL_Init+0x6c>)
 8001526:	5ccb      	ldrb	r3, [r1, r3]
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_Init+0x68>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_Init+0x6c>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_Init+0x70>)
 800154a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_Init+0x74>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f814 	bl	8001580 <HAL_InitTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e002      	b.n	8001568 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001562:	f7ff fc63 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58024400 	.word	0x58024400
 8001574:	08007a00 	.word	0x08007a00
 8001578:	20000004 	.word	0x20000004
 800157c:	20000000 	.word	0x20000000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_InitTick+0x60>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e021      	b.n	80015d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_InitTick+0x64>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_InitTick+0x60>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f985 	bl	80018ba <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f000 f94f 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x68>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c
 8001610:	20000704 	.word	0x20000704

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000704 	.word	0x20000704

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c

08001674 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetREVID+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0c1b      	lsrs	r3, r3, #16
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	5c001000 	.word	0x5c001000

0800168c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800169c:	4904      	ldr	r1, [pc, #16]	; (80016b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	58000400 	.word	0x58000400

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	05fa0000 	.word	0x05fa0000

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff40 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff33 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa4 	bl	8001810 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0c6      	b.n	8001a74 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fab6 	bl	8000e60 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2223      	movs	r2, #35	; 0x23
 80018f8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <HAL_ETH_Init+0x1a8>)
 80018fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001900:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_ETH_Init+0x1a8>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_ETH_Init+0x1a8>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff feb3 	bl	800168c <HAL_SYSCFG_ETHInterfaceSelect>
 8001926:	e003      	b.n	8001930 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001928:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800192c:	f7ff feae 	bl	800168c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fe64 	bl	8001614 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800194e:	e00f      	b.n	8001970 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001950:	f7ff fe60 	bl	8001614 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800195e:	d907      	bls.n	8001970 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	22e0      	movs	r2, #224	; 0xe0
 800196a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e081      	b.n	8001a74 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e6      	bne.n	8001950 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fac0 	bl	8001f08 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001988:	f001 fe56 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 800198c:	4603      	mov	r3, r0
 800198e:	4a3c      	ldr	r2, [pc, #240]	; (8001a80 <HAL_ETH_Init+0x1ac>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	0c9a      	lsrs	r2, r3, #18
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3a01      	subs	r2, #1
 800199c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fa13 	bl	8001dcc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019c0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	22e0      	movs	r2, #224	; 0xe0
 80019d8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e04a      	b.n	8001a74 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019e6:	4413      	add	r3, r2
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_ETH_Init+0x1b0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6952      	ldr	r2, [r2, #20]
 80019f2:	0052      	lsls	r2, r2, #1
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	6809      	ldr	r1, [r1, #0]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80019fe:	440b      	add	r3, r1
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fad8 	bl	8001fb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fb1c 	bl	8002046 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	3305      	adds	r3, #5
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	021a      	lsls	r2, r3, #8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	3303      	adds	r3, #3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	061a      	lsls	r2, r3, #24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a5a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	ffff8001 	.word	0xffff8001

08001a88 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a9a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001aa2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001aaa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7b5b      	ldrb	r3, [r3, #13]
 8001ab0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ab2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7bdb      	ldrb	r3, [r3, #15]
 8001ac0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ac2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	7c12      	ldrb	r2, [r2, #16]
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	d102      	bne.n	8001ad2 <ETH_SetMACConfig+0x4a>
 8001acc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ad0:	e000      	b.n	8001ad4 <ETH_SetMACConfig+0x4c>
 8001ad2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ad4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	7c52      	ldrb	r2, [r2, #17]
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d102      	bne.n	8001ae4 <ETH_SetMACConfig+0x5c>
 8001ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae2:	e000      	b.n	8001ae6 <ETH_SetMACConfig+0x5e>
 8001ae4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ae6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7c9b      	ldrb	r3, [r3, #18]
 8001aec:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aee:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001af4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001afa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7f1b      	ldrb	r3, [r3, #28]
 8001b00:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001b02:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7f5b      	ldrb	r3, [r3, #29]
 8001b08:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b0a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	7f92      	ldrb	r2, [r2, #30]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d102      	bne.n	8001b1a <ETH_SetMACConfig+0x92>
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x94>
 8001b1a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b1c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7fdb      	ldrb	r3, [r3, #31]
 8001b22:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b24:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d102      	bne.n	8001b36 <ETH_SetMACConfig+0xae>
 8001b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b34:	e000      	b.n	8001b38 <ETH_SetMACConfig+0xb0>
 8001b36:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b38:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b3e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b46:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b48:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <ETH_SetMACConfig+0x22c>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b72:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b74:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b7e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b86:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b88:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d102      	bne.n	8001b9a <ETH_SetMACConfig+0x112>
 8001b94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b98:	e000      	b.n	8001b9c <ETH_SetMACConfig+0x114>
 8001b9a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b9c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <ETH_SetMACConfig+0x230>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <ETH_SetMACConfig+0x234>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001be4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bea:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d101      	bne.n	8001bfa <ETH_SetMACConfig+0x172>
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	e000      	b.n	8001bfc <ETH_SetMACConfig+0x174>
 8001bfa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bfc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c0e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c24:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c2c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	f023 0103 	bic.w	r1, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c52:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d101      	bne.n	8001c76 <ETH_SetMACConfig+0x1ee>
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	e000      	b.n	8001c78 <ETH_SetMACConfig+0x1f0>
 8001c76:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c78:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c80:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c82:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c8a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c98:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	00048083 	.word	0x00048083
 8001cb8:	c0f88000 	.word	0xc0f88000
 8001cbc:	fffffef0 	.word	0xfffffef0

08001cc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <ETH_SetDMAConfig+0xf8>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	6809      	ldr	r1, [r1, #0]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001ce6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	791b      	ldrb	r3, [r3, #4]
 8001cec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cf2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d06:	4413      	add	r3, r2
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <ETH_SetDMAConfig+0xfc>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d1a:	440b      	add	r3, r1
 8001d1c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	7b5b      	ldrb	r3, [r3, #13]
 8001d22:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <ETH_SetDMAConfig+0x100>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d46:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	7d1b      	ldrb	r3, [r3, #20]
 8001d50:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d52:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7f5b      	ldrb	r3, [r3, #29]
 8001d58:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d66:	4413      	add	r3, r2
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <ETH_SetDMAConfig+0x104>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6811      	ldr	r1, [r2, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d7a:	440b      	add	r3, r1
 8001d7c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	7f1b      	ldrb	r3, [r3, #28]
 8001d82:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d94:	4413      	add	r3, r2
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <ETH_SetDMAConfig+0x108>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6811      	ldr	r1, [r2, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001da8:	440b      	add	r3, r1
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	ffff87fd 	.word	0xffff87fd
 8001dbc:	ffff2ffe 	.word	0xffff2ffe
 8001dc0:	fffec000 	.word	0xfffec000
 8001dc4:	ffc0efef 	.word	0xffc0efef
 8001dc8:	7fc0ffff 	.word	0x7fc0ffff

08001dcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0a4      	sub	sp, #144	; 0x90
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e24:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e46:	2300      	movs	r3, #0
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e64:	2320      	movs	r3, #32
 8001e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e76:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fde6 	bl	8001a88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ed6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ee4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001eec:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fee1 	bl	8001cc0 <ETH_SetDMAConfig>
}
 8001efe:	bf00      	nop
 8001f00:	3790      	adds	r7, #144	; 0x90
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f22:	f001 fb89 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8001f26:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d908      	bls.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d804      	bhi.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e027      	b.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d908      	bls.n	8001f5c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4a17      	ldr	r2, [pc, #92]	; (8001fac <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d204      	bcs.n	8001f5c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e01a      	b.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4a13      	ldr	r2, [pc, #76]	; (8001fac <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d303      	bcc.n	8001f6c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d911      	bls.n	8001f90 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d908      	bls.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d804      	bhi.n	8001f86 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e005      	b.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e000      	b.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f90:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	01312cff 	.word	0x01312cff
 8001fa8:	02160ebf 	.word	0x02160ebf
 8001fac:	03938700 	.word	0x03938700
 8001fb0:	05f5e0ff 	.word	0x05f5e0ff
 8001fb4:	08f0d17f 	.word	0x08f0d17f

08001fb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e01d      	b.n	8002002 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68d9      	ldr	r1, [r3, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	3206      	adds	r2, #6
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d9de      	bls.n	8001fc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	f241 132c 	movw	r3, #4396	; 0x112c
 8002016:	4413      	add	r3, r2
 8002018:	2203      	movs	r2, #3
 800201a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f241 1314 	movw	r3, #4372	; 0x1114
 8002028:	4413      	add	r3, r2
 800202a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e024      	b.n	800209e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6919      	ldr	r1, [r3, #16]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3310      	adds	r3, #16
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d9d7      	bls.n	8002054 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f241 1330 	movw	r3, #4400	; 0x1130
 80020ca:	4413      	add	r3, r2
 80020cc:	2203      	movs	r2, #3
 80020ce:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80020dc:	4413      	add	r3, r2
 80020de:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f241 1328 	movw	r3, #4392	; 0x1128
 80020f0:	4413      	add	r3, r2
 80020f2:	6019      	str	r1, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_GPIO_Init+0x234>)
 8002110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002112:	e194      	b.n	800243e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8186 	beq.w	8002438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d00b      	beq.n	800214c <HAL_GPIO_Init+0x4c>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002140:	2b11      	cmp	r3, #17
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b12      	cmp	r3, #18
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0201 	and.w	r2, r3, #1
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0xee>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b12      	cmp	r3, #18
 80021ec:	d123      	bne.n	8002236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80e0 	beq.w	8002438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x238>)
 800227a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <HAL_GPIO_Init+0x238>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_GPIO_Init+0x238>)
 800228a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <HAL_GPIO_Init+0x23c>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a20      	ldr	r2, [pc, #128]	; (8002340 <HAL_GPIO_Init+0x240>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d052      	beq.n	8002368 <HAL_GPIO_Init+0x268>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_GPIO_Init+0x244>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d031      	beq.n	800232e <HAL_GPIO_Init+0x22e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_GPIO_Init+0x248>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02b      	beq.n	800232a <HAL_GPIO_Init+0x22a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_GPIO_Init+0x24c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d025      	beq.n	8002326 <HAL_GPIO_Init+0x226>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_GPIO_Init+0x250>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01f      	beq.n	8002322 <HAL_GPIO_Init+0x222>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_GPIO_Init+0x254>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d019      	beq.n	800231e <HAL_GPIO_Init+0x21e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x258>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0x21a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_GPIO_Init+0x25c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00d      	beq.n	8002316 <HAL_GPIO_Init+0x216>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x260>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x212>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_GPIO_Init+0x264>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_GPIO_Init+0x20e>
 800230a:	2309      	movs	r3, #9
 800230c:	e02d      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800230e:	230a      	movs	r3, #10
 8002310:	e02b      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002312:	2308      	movs	r3, #8
 8002314:	e029      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002316:	2307      	movs	r3, #7
 8002318:	e027      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800231a:	2306      	movs	r3, #6
 800231c:	e025      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800231e:	2305      	movs	r3, #5
 8002320:	e023      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002322:	2304      	movs	r3, #4
 8002324:	e021      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002326:	2303      	movs	r3, #3
 8002328:	e01f      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800232a:	2302      	movs	r3, #2
 800232c:	e01d      	b.n	800236a <HAL_GPIO_Init+0x26a>
 800232e:	2301      	movs	r3, #1
 8002330:	e01b      	b.n	800236a <HAL_GPIO_Init+0x26a>
 8002332:	bf00      	nop
 8002334:	58000080 	.word	0x58000080
 8002338:	58024400 	.word	0x58024400
 800233c:	58000400 	.word	0x58000400
 8002340:	58020000 	.word	0x58020000
 8002344:	58020400 	.word	0x58020400
 8002348:	58020800 	.word	0x58020800
 800234c:	58020c00 	.word	0x58020c00
 8002350:	58021000 	.word	0x58021000
 8002354:	58021400 	.word	0x58021400
 8002358:	58021800 	.word	0x58021800
 800235c:	58021c00 	.word	0x58021c00
 8002360:	58022000 	.word	0x58022000
 8002364:	58022400 	.word	0x58022400
 8002368:	2300      	movs	r3, #0
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237a:	4938      	ldr	r1, [pc, #224]	; (800245c <HAL_GPIO_Init+0x35c>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae63 	bne.w	8002114 <HAL_GPIO_Init+0x14>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58000400 	.word	0x58000400

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002494:	b08f      	sub	sp, #60	; 0x3c
 8002496:	af0a      	add	r7, sp, #40	; 0x28
 8002498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e116      	b.n	80026d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fe66 	bl	8001190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 ff18 	bl	8007318 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	687e      	ldr	r6, [r7, #4]
 80024f0:	466d      	mov	r5, sp
 80024f2:	f106 0410 	add.w	r4, r6, #16
 80024f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002502:	e885 0003 	stmia.w	r5, {r0, r1}
 8002506:	1d33      	adds	r3, r6, #4
 8002508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250a:	6838      	ldr	r0, [r7, #0]
 800250c:	f004 fe96 	bl	800723c <USB_CoreInit>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0d7      	b.n	80026d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f004 ff06 	bl	800733a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e04a      	b.n	80025ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	333d      	adds	r3, #61	; 0x3d
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	333c      	adds	r3, #60	; 0x3c
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b298      	uxth	r0, r3
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3342      	adds	r3, #66	; 0x42
 8002570:	4602      	mov	r2, r0
 8002572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	333f      	adds	r3, #63	; 0x3f
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3344      	adds	r3, #68	; 0x44
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3348      	adds	r3, #72	; 0x48
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3350      	adds	r3, #80	; 0x50
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d3af      	bcc.n	8002534 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e044      	b.n	8002664 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	3301      	adds	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d3b5      	bcc.n	80025da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	687e      	ldr	r6, [r7, #4]
 8002676:	466d      	mov	r5, sp
 8002678:	f106 0410 	add.w	r4, r6, #16
 800267c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002688:	e885 0003 	stmia.w	r5, {r0, r1}
 800268c:	1d33      	adds	r3, r6, #4
 800268e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f004 fe7d 	bl	8007390 <USB_DevInit>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e014      	b.n	80026d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f80b 	bl	80026dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 f81f 	bl	800770e <USB_DevDisconnect>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_PCDEx_ActivateLPM+0x44>)
 800270c:	4313      	orrs	r3, r2
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	10000003 	.word	0x10000003

08002724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_PWREx_ConfigSupply+0x70>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00a      	beq.n	800274e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_PWREx_ConfigSupply+0x70>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e01f      	b.n	800278a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e01d      	b.n	800278a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_PWREx_ConfigSupply+0x70>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	490f      	ldr	r1, [pc, #60]	; (8002794 <HAL_PWREx_ConfigSupply+0x70>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800275e:	f7fe ff59 	bl	8001614 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002764:	e009      	b.n	800277a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002766:	f7fe ff55 	bl	8001614 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002774:	d901      	bls.n	800277a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_PWREx_ConfigSupply+0x70>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d1ee      	bne.n	8002766 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	58024800 	.word	0x58024800

08002798 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	58024800 	.word	0x58024800

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e3ff      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e2:	4b97      	ldr	r3, [pc, #604]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d007      	beq.n	80027fe <HAL_RCC_OscConfig+0x46>
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	2b18      	cmp	r3, #24
 80027f2:	d110      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d10b      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x12c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d168      	bne.n	80028e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3d9      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x76>
 8002820:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a86      	ldr	r2, [pc, #536]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e02e      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a81      	ldr	r2, [pc, #516]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7e      	ldr	r2, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0xbc>
 800285a:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a78      	ldr	r2, [pc, #480]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002874:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe febe 	bl	8001614 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe feba 	bl	8001614 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e38d      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ae:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xe4>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe feaa 	bl	8001614 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe fea6 	bl	8001614 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e379      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x10c>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80ae 	beq.w	8002a50 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f4:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_RCC_OscConfig+0x162>
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b18      	cmp	r3, #24
 800290e:	d13a      	bne.n	8002986 <HAL_RCC_OscConfig+0x1ce>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d135      	bne.n	8002986 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x17a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e34b      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	f7fe fe9f 	bl	8001674 <HAL_GetREVID>
 8002936:	4603      	mov	r3, r0
 8002938:	f241 0203 	movw	r2, #4099	; 0x1003
 800293c:	4293      	cmp	r3, r2
 800293e:	d817      	bhi.n	8002970 <HAL_RCC_OscConfig+0x1b8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d108      	bne.n	800295a <HAL_RCC_OscConfig+0x1a2>
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002950:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002956:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	e07a      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296e:	e06f      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	4930      	ldr	r1, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	e064      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d045      	beq.n	8002a1a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0219 	bic.w	r2, r3, #25
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fe38 	bl	8001614 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a8:	f7fe fe34 	bl	8001614 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e307      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	f7fe fe55 	bl	8001674 <HAL_GetREVID>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d817      	bhi.n	8002a04 <HAL_RCC_OscConfig+0x24c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d108      	bne.n	80029ee <HAL_RCC_OscConfig+0x236>
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	6053      	str	r3, [r2, #4]
 80029ec:	e030      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	031b      	lsls	r3, r3, #12
 80029fc:	4910      	ldr	r1, [pc, #64]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
 8002a02:	e025      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	490b      	ldr	r1, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	e01a      	b.n	8002a50 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_RCC_OscConfig+0x288>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fdf5 	bl	8001614 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fdf1 	bl	8001614 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d903      	bls.n	8002a44 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e2c4      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
 8002a40:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a44:	4ba4      	ldr	r3, [pc, #656]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a9 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a68:	4b9b      	ldr	r3, [pc, #620]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d007      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2cc>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b18      	cmp	r3, #24
 8002a78:	d13a      	bne.n	8002af0 <HAL_RCC_OscConfig+0x338>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d135      	bne.n	8002af0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a84:	4b94      	ldr	r3, [pc, #592]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2e4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e296      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a9c:	f7fe fdea 	bl	8001674 <HAL_GetREVID>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d817      	bhi.n	8002ada <HAL_RCC_OscConfig+0x322>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002ab2:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aba:	4a87      	ldr	r2, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ac0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ac2:	e075      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac4:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	069b      	lsls	r3, r3, #26
 8002ad2:	4981      	ldr	r1, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad8:	e06a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ada:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	497b      	ldr	r1, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aee:	e05f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d042      	beq.n	8002b7e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002af8:	4b77      	ldr	r3, [pc, #476]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a76      	ldr	r2, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fd86 	bl	8001614 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fd82 	bl	8001614 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e255      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b1e:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b2a:	f7fe fda3 	bl	8001674 <HAL_GetREVID>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d817      	bhi.n	8002b68 <HAL_RCC_OscConfig+0x3b0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d108      	bne.n	8002b52 <HAL_RCC_OscConfig+0x39a>
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b4e:	6053      	str	r3, [r2, #4]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
 8002b52:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	495d      	ldr	r1, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	e023      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	4958      	ldr	r1, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
 8002b7c:	e018      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fd43 	bl	8001614 <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b92:	f7fe fd3f 	bl	8001614 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e212      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d036      	beq.n	8002c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d019      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc4:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fd20 	bl	8001614 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fd1c 	bl	8001614 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1ef      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x420>
 8002bf6:	e018      	b.n	8002c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf8:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	4a36      	ldr	r2, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fd06 	bl	8001614 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fd02 	bl	8001614 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1d5      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d036      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fce3 	bl	8001614 <HAL_GetTick>
 8002c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c52:	f7fe fcdf 	bl	8001614 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1b2      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x49a>
 8002c70:	e018      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fcc9 	bl	8001614 <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c86:	f7fe fcc5 	bl	8001614 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e198      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCC_OscConfig+0x520>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8085 	beq.w	8002dbc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_RCC_OscConfig+0x524>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_OscConfig+0x524>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fca9 	bl	8001614 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc4:	e00c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cc6:	f7fe fca5 	bl	8001614 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	; 0x64
 8002cd2:	d905      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e178      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce0:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <HAL_RCC_OscConfig+0x784>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ec      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x54a>
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a91      	ldr	r2, [pc, #580]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e02d      	b.n	8002d5e <HAL_RCC_OscConfig+0x5a6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x56c>
 8002d0a:	4b8d      	ldr	r3, [pc, #564]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a8c      	ldr	r2, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	4b8a      	ldr	r3, [pc, #552]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x5a6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x58e>
 8002d2c:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a83      	ldr	r2, [pc, #524]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x5a6>
 8002d46:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a7d      	ldr	r2, [pc, #500]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe fc55 	bl	8001614 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fc51 	bl	8001614 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e122      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d84:	4b6e      	ldr	r3, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x5b6>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe fc3f 	bl	8001614 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fc3b 	bl	8001614 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e10c      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002db0:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8101 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dc6:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dce:	2b18      	cmp	r3, #24
 8002dd0:	f000 80bc 	beq.w	8002f4c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	f040 8095 	bne.w	8002f08 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe fc13 	bl	8001614 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe fc0f 	bl	8001614 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0e2      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e10:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e14:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCC_OscConfig+0x78c>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	430a      	orrs	r2, r1
 8002e24:	4946      	ldr	r1, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	628b      	str	r3, [r1, #40]	; 0x28
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	3b01      	subs	r3, #1
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	3b01      	subs	r3, #1
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e5a:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x790>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e78:	00d2      	lsls	r2, r2, #3
 8002e7a:	4931      	ldr	r1, [pc, #196]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e80:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f023 020c 	bic.w	r2, r3, #12
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	492c      	ldr	r1, [pc, #176]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f023 0202 	bic.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4928      	ldr	r1, [pc, #160]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fb98 	bl	8001614 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fb94 	bl	8001614 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e067      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x730>
 8002f06:	e05f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fb7e 	bl	8001614 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fb7a 	bl	8001614 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e04d      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_OscConfig+0x788>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x764>
 8002f3a:	e045      	b.n	8002fc8 <HAL_RCC_OscConfig+0x810>
 8002f3c:	58024800 	.word	0x58024800
 8002f40:	58024400 	.word	0x58024400
 8002f44:	fffffc0c 	.word	0xfffffc0c
 8002f48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x81c>)
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_OscConfig+0x81c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d031      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d12a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d122      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0a5b      	lsrs	r3, r3, #9
 8002f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d108      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3730      	adds	r7, #48	; 0x30
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400

08002fd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e19c      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d910      	bls.n	800301c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b87      	ldr	r3, [pc, #540]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 020f 	bic.w	r2, r3, #15
 8003002:	4985      	ldr	r1, [pc, #532]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b83      	ldr	r3, [pc, #524]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e184      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	4b7b      	ldr	r3, [pc, #492]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003034:	429a      	cmp	r2, r3
 8003036:	d908      	bls.n	800304a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003038:	4b78      	ldr	r3, [pc, #480]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4975      	ldr	r1, [pc, #468]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003046:	4313      	orrs	r3, r2
 8003048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	4b70      	ldr	r3, [pc, #448]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003062:	429a      	cmp	r2, r3
 8003064:	d908      	bls.n	8003078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003066:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	496a      	ldr	r1, [pc, #424]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003090:	429a      	cmp	r2, r3
 8003092:	d908      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	495e      	ldr	r1, [pc, #376]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d908      	bls.n	80030d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030c2:	4b56      	ldr	r3, [pc, #344]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4953      	ldr	r1, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d908      	bls.n	8003102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f023 020f 	bic.w	r2, r3, #15
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4947      	ldr	r1, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d055      	beq.n	80031ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800310e:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4940      	ldr	r1, [pc, #256]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d107      	bne.n	8003138 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003128:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d121      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0f6      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d107      	bne.n	8003150 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d115      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0ea      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0de      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d6      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f023 0207 	bic.w	r2, r3, #7
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4925      	ldr	r1, [pc, #148]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 8003186:	4313      	orrs	r3, r2
 8003188:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe fa43 	bl	8001614 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003192:	f7fe fa3f 	bl	8001614 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0be      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d1eb      	bne.n	8003192 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d208      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f023 020f 	bic.w	r2, r3, #15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d214      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4906      	ldr	r1, [pc, #24]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_RCC_ClockConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e086      	b.n	8003326 <HAL_RCC_ClockConfig+0x34e>
 8003218:	52002000 	.word	0x52002000
 800321c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003238:	429a      	cmp	r2, r3
 800323a:	d208      	bcs.n	800324e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800323c:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4939      	ldr	r1, [pc, #228]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 800324a:	4313      	orrs	r3, r2
 800324c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003266:	429a      	cmp	r2, r3
 8003268:	d208      	bcs.n	800327c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	492e      	ldr	r1, [pc, #184]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4922      	ldr	r1, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4917      	ldr	r1, [pc, #92]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032d8:	f000 f834 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	4912      	ldr	r1, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x35c>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCC_ClockConfig+0x358>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_RCC_ClockConfig+0x35c>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x360>)
 800330e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x364>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_RCC_ClockConfig+0x368>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe f930 	bl	8001580 <HAL_InitTick>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400
 8003334:	08007a00 	.word	0x08007a00
 8003338:	20000004 	.word	0x20000004
 800333c:	20000000 	.word	0x20000000
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334a:	4bb3      	ldr	r3, [pc, #716]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003352:	2b18      	cmp	r3, #24
 8003354:	f200 8155 	bhi.w	8003602 <HAL_RCC_GetSysClockFreq+0x2be>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_RCC_GetSysClockFreq+0x1c>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	080033c5 	.word	0x080033c5
 8003364:	08003603 	.word	0x08003603
 8003368:	08003603 	.word	0x08003603
 800336c:	08003603 	.word	0x08003603
 8003370:	08003603 	.word	0x08003603
 8003374:	08003603 	.word	0x08003603
 8003378:	08003603 	.word	0x08003603
 800337c:	08003603 	.word	0x08003603
 8003380:	080033eb 	.word	0x080033eb
 8003384:	08003603 	.word	0x08003603
 8003388:	08003603 	.word	0x08003603
 800338c:	08003603 	.word	0x08003603
 8003390:	08003603 	.word	0x08003603
 8003394:	08003603 	.word	0x08003603
 8003398:	08003603 	.word	0x08003603
 800339c:	08003603 	.word	0x08003603
 80033a0:	080033f1 	.word	0x080033f1
 80033a4:	08003603 	.word	0x08003603
 80033a8:	08003603 	.word	0x08003603
 80033ac:	08003603 	.word	0x08003603
 80033b0:	08003603 	.word	0x08003603
 80033b4:	08003603 	.word	0x08003603
 80033b8:	08003603 	.word	0x08003603
 80033bc:	08003603 	.word	0x08003603
 80033c0:	080033f7 	.word	0x080033f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c4:	4b94      	ldr	r3, [pc, #592]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d009      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d0:	4b91      	ldr	r3, [pc, #580]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	08db      	lsrs	r3, r3, #3
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	4a90      	ldr	r2, [pc, #576]	; (800361c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033e2:	e111      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033e4:	4b8d      	ldr	r3, [pc, #564]	; (800361c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e6:	61bb      	str	r3, [r7, #24]
    break;
 80033e8:	e10e      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033ea:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033ec:	61bb      	str	r3, [r7, #24]
    break;
 80033ee:	e10b      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033f2:	61bb      	str	r3, [r7, #24]
    break;
 80033f4:	e108      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003400:	4b85      	ldr	r3, [pc, #532]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003416:	4b80      	ldr	r3, [pc, #512]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341a:	08db      	lsrs	r3, r3, #3
 800341c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80e1 	beq.w	80035fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f000 8083 	beq.w	8003548 <HAL_RCC_GetSysClockFreq+0x204>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b02      	cmp	r3, #2
 8003446:	f200 80a1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x248>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x114>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d056      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003456:	e099      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003464:	4b6c      	ldr	r3, [pc, #432]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b62      	ldr	r3, [pc, #392]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034be:	e087      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800362c <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003502:	e065      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b40      	ldr	r3, [pc, #256]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a02 	vldr	s12, [r7, #8]
 800352a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003628 <HAL_RCC_GetSysClockFreq+0x2e4>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003546:	e043      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003634 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355a:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356a:	ed97 6a02 	vldr	s12, [r7, #8]
 800356e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003628 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800358a:	e021      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2ec>
 800359a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	0a5b      	lsrs	r3, r3, #9
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035da:	3301      	adds	r3, #1
 80035dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f4:	ee17 3a90 	vmov	r3, s15
 80035f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    break;
 8003600:	e002      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003604:	61bb      	str	r3, [r7, #24]
    break;
 8003606:	bf00      	nop
  }

  return sysclockfreq;
 8003608:	69bb      	ldr	r3, [r7, #24]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
 800361c:	03d09000 	.word	0x03d09000
 8003620:	003d0900 	.word	0x003d0900
 8003624:	007a1200 	.word	0x007a1200
 8003628:	46000000 	.word	0x46000000
 800362c:	4c742400 	.word	0x4c742400
 8003630:	4a742400 	.word	0x4a742400
 8003634:	4af42400 	.word	0x4af42400

08003638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800363e:	f7ff fe81 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_GetHCLKFreq+0x50>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490f      	ldr	r1, [pc, #60]	; (800368c <HAL_RCC_GetHCLKFreq+0x54>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_GetHCLKFreq+0x50>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_RCC_GetHCLKFreq+0x54>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HAL_RCC_GetHCLKFreq+0x58>)
 8003674:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003676:	4a07      	ldr	r2, [pc, #28]	; (8003694 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RCC_GetHCLKFreq+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58024400 	.word	0x58024400
 800368c:	08007a00 	.word	0x08007a00
 8003690:	20000004 	.word	0x20000004
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800369c:	f7ff ffcc 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4904      	ldr	r1, [pc, #16]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024400 	.word	0x58024400
 80036c0:	08007a00 	.word	0x08007a00

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036c8:	f7ff ffb6 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4904      	ldr	r1, [pc, #16]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	58024400 	.word	0x58024400
 80036ec:	08007a00 	.word	0x08007a00

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003714:	d02a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800371a:	d824      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800371c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003720:	d018      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003726:	d81e      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800372c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003730:	d007      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003732:	e018      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003734:	4bab      	ldr	r3, [pc, #684]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	4aaa      	ldr	r2, [pc, #680]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003740:	e015      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 f9cf 	bl	8004aec <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003752:	e00c      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fa78 	bl	8004c50 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
      break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800376c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003774:	4b9b      	ldr	r3, [pc, #620]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003780:	4998      	ldr	r1, [pc, #608]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	650b      	str	r3, [r1, #80]	; 0x50
 8003786:	e001      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03d      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	2b04      	cmp	r3, #4
 800379e:	d826      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037bd 	.word	0x080037bd
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037f5 	.word	0x080037f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4a88      	ldr	r2, [pc, #544]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 f98b 	bl	8004aec <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fa34 	bl	8004c50 <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037fc:	4b79      	ldr	r3, [pc, #484]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	4976      	ldr	r1, [pc, #472]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	650b      	str	r3, [r1, #80]	; 0x50
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d042      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d02b      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d825      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003830:	2bc0      	cmp	r3, #192	; 0xc0
 8003832:	d028      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003834:	2bc0      	cmp	r3, #192	; 0xc0
 8003836:	d821      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d016      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d81d      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d007      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003848:	e018      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384a:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003856:	e017      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f944 	bl	8004aec <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003868:	e00e      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3324      	adds	r3, #36	; 0x24
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f9ed 	bl	8004c50 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800387a:	e005      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	e002      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800388e:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	4952      	ldr	r1, [pc, #328]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	650b      	str	r3, [r1, #80]	; 0x50
 80038a0:	e001      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d049      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038bc:	d030      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80038be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c2:	d82a      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038c8:	d02c      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80038ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ce:	d824      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d4:	d018      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038da:	d81e      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e4:	d007      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80038e6:	e018      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a3d      	ldr	r2, [pc, #244]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038f4:	e017      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f8f5 	bl	8004aec <RCCEx_PLL2_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003906:	e00e      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f99e 	bl	8004c50 <RCCEx_PLL3_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003918:	e005      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800393a:	492a      	ldr	r1, [pc, #168]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	658b      	str	r3, [r1, #88]	; 0x58
 8003940:	e001      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394e:	2b00      	cmp	r3, #0
 8003950:	d04c      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800395c:	d030      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800395e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003962:	d82a      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003968:	d02c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800396a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800396e:	d824      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003974:	d018      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800397a:	d81e      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003984:	d007      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003986:	e018      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003994:	e017      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f001 f8a5 	bl	8004aec <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039a6:	e00e      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3324      	adds	r3, #36	; 0x24
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f94e 	bl	8004c50 <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039b8:	e005      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039da:	4902      	ldr	r1, [pc, #8]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	658b      	str	r3, [r1, #88]	; 0x58
 80039e0:	e004      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d032      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	2b30      	cmp	r3, #48	; 0x30
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d817      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d00c      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d813      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d016      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d10f      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a14:	4baf      	ldr	r3, [pc, #700]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4aae      	ldr	r2, [pc, #696]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a20:	e00e      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f85f 	bl	8004aec <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	e002      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a46:	4ba3      	ldr	r3, [pc, #652]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	49a0      	ldr	r1, [pc, #640]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a58:	e001      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d047      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a72:	d030      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a78:	d82a      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a7e:	d02c      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a84:	d824      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	d018      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a90:	d81e      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d007      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a9c:	e018      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9e:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a8c      	ldr	r2, [pc, #560]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003aaa:	e017      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f81a 	bl	8004aec <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003abc:	e00e      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3324      	adds	r3, #36	; 0x24
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f8c3 	bl	8004c50 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ace:	e005      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ae2:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	4979      	ldr	r1, [pc, #484]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	650b      	str	r3, [r1, #80]	; 0x50
 8003af4:	e001      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d049      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0e:	d02e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d828      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b1a:	d02a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003b1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b20:	d822      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b26:	d026      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b2c:	d81c      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b32:	d010      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b38:	d816      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01d      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b42:	d111      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 ffce 	bl	8004aec <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b54:	e012      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3324      	adds	r3, #36	; 0x24
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f877 	bl	8004c50 <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b66:	e009      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6c:	e006      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e004      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b82:	4b54      	ldr	r3, [pc, #336]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	4951      	ldr	r1, [pc, #324]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	650b      	str	r3, [r1, #80]	; 0x50
 8003b94:	e001      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb0:	d02e      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb6:	d828      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d02a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d822      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc8:	d026      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003bca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bce:	d81c      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d816      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01d      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be4:	d111      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ff7d 	bl	8004aec <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bf6:	e012      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f826 	bl	8004c50 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c08:	e009      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0e:	e006      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c10:	bf00      	nop
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c14:	bf00      	nop
 8003c16:	e002      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c32:	4928      	ldr	r1, [pc, #160]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	658b      	str	r3, [r1, #88]	; 0x58
 8003c38:	e001      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02f      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c52:	d00e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c58:	d814      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d015      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c62:	d10f      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c70:	e00c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff37 	bl	8004aec <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d033      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d81c      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cff 	.word	0x08003cff
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce7 	.word	0x08003ce7
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd8:	4bb8      	ldr	r3, [pc, #736]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4ab7      	ldr	r2, [pc, #732]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ce4:	e00c      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	2102      	movs	r1, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fefd 	bl	8004aec <RCCEx_PLL2_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d06:	4bad      	ldr	r3, [pc, #692]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	49aa      	ldr	r1, [pc, #680]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d18:	e001      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8086 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2c:	4ba4      	ldr	r3, [pc, #656]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4aa3      	ldr	r2, [pc, #652]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d38:	f7fd fc6c 	bl	8001614 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3e:	e009      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fd fc68 	bl	8001614 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d902      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	75fb      	strb	r3, [r7, #23]
        break;
 8003d52:	e005      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d54:	4b9a      	ldr	r3, [pc, #616]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d166      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d66:	4b95      	ldr	r3, [pc, #596]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d70:	4053      	eors	r3, r2
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d013      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7a:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d90:	4b8a      	ldr	r3, [pc, #552]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a89      	ldr	r2, [pc, #548]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d9c:	4a87      	ldr	r2, [pc, #540]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d115      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fc31 	bl	8001614 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db4:	e00b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd fc2d 	bl	8001614 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	75fb      	strb	r3, [r7, #23]
            break;
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dce:	4b7b      	ldr	r3, [pc, #492]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ed      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d126      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003df0:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dfe:	0919      	lsrs	r1, r3, #4
 8003e00:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003e02:	400b      	ands	r3, r1
 8003e04:	496d      	ldr	r1, [pc, #436]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
 8003e0a:	e005      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e0c:	4b6b      	ldr	r3, [pc, #428]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e16:	6113      	str	r3, [r2, #16]
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e26:	4965      	ldr	r1, [pc, #404]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	670b      	str	r3, [r1, #112]	; 0x70
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	75bb      	strb	r3, [r7, #22]
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d07e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e48:	2b28      	cmp	r3, #40	; 0x28
 8003e4a:	d867      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003f23 	.word	0x08003f23
 8003e58:	08003f1d 	.word	0x08003f1d
 8003e5c:	08003f1d 	.word	0x08003f1d
 8003e60:	08003f1d 	.word	0x08003f1d
 8003e64:	08003f1d 	.word	0x08003f1d
 8003e68:	08003f1d 	.word	0x08003f1d
 8003e6c:	08003f1d 	.word	0x08003f1d
 8003e70:	08003f1d 	.word	0x08003f1d
 8003e74:	08003ef9 	.word	0x08003ef9
 8003e78:	08003f1d 	.word	0x08003f1d
 8003e7c:	08003f1d 	.word	0x08003f1d
 8003e80:	08003f1d 	.word	0x08003f1d
 8003e84:	08003f1d 	.word	0x08003f1d
 8003e88:	08003f1d 	.word	0x08003f1d
 8003e8c:	08003f1d 	.word	0x08003f1d
 8003e90:	08003f1d 	.word	0x08003f1d
 8003e94:	08003f0b 	.word	0x08003f0b
 8003e98:	08003f1d 	.word	0x08003f1d
 8003e9c:	08003f1d 	.word	0x08003f1d
 8003ea0:	08003f1d 	.word	0x08003f1d
 8003ea4:	08003f1d 	.word	0x08003f1d
 8003ea8:	08003f1d 	.word	0x08003f1d
 8003eac:	08003f1d 	.word	0x08003f1d
 8003eb0:	08003f1d 	.word	0x08003f1d
 8003eb4:	08003f23 	.word	0x08003f23
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003f1d 	.word	0x08003f1d
 8003ec0:	08003f1d 	.word	0x08003f1d
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f23 	.word	0x08003f23
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f1d 	.word	0x08003f1d
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f23 	.word	0x08003f23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fdf4 	bl	8004aec <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe9d 	bl	8004c50 <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	4921      	ldr	r1, [pc, #132]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f3c:	e001      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03e      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	d820      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f9f 	.word	0x08003f9f
 8003f60:	08003f75 	.word	0x08003f75
 8003f64:	08003f87 	.word	0x08003f87
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003f9f 	.word	0x08003f9f
 8003f70:	08003f9f 	.word	0x08003f9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fdb6 	bl	8004aec <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f84:	e00c      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3324      	adds	r3, #36	; 0x24
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fe5f 	bl	8004c50 <RCCEx_PLL3_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d110      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	4902      	ldr	r1, [pc, #8]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	654b      	str	r3, [r1, #84]	; 0x54
 8003fb8:	e008      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	58024800 	.word	0x58024800
 8003fc4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d039      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d820      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800402b 	.word	0x0800402b
 8003fec:	08004001 	.word	0x08004001
 8003ff0:	08004013 	.word	0x08004013
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd70 	bl	8004aec <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004010:	e00c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fe19 	bl	8004c50 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800402a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004032:	4bb7      	ldr	r3, [pc, #732]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	f023 0207 	bic.w	r2, r3, #7
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	49b3      	ldr	r1, [pc, #716]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004042:	4313      	orrs	r3, r2
 8004044:	658b      	str	r3, [r1, #88]	; 0x58
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d04b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004062:	d02e      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004068:	d828      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d02a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d822      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800407a:	d026      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800407c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004080:	d81c      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004086:	d010      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408c:	d816      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01d      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004096:	d111      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd24 	bl	8004aec <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040a8:	e012      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fdcd 	bl	8004c50 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040c2:	bf00      	nop
 80040c4:	e004      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d6:	4b8e      	ldr	r3, [pc, #568]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	498a      	ldr	r1, [pc, #552]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	654b      	str	r3, [r1, #84]	; 0x54
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d04b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004102:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004106:	d02e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004108:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800410c:	d828      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004112:	d02a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d822      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800411a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800411e:	d026      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004124:	d81c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412a:	d010      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	d816      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fcd2 	bl	8004aec <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800414c:	e012      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd7b 	bl	8004c50 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004188:	4961      	ldr	r1, [pc, #388]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800418a:	4313      	orrs	r3, r2
 800418c:	658b      	str	r3, [r1, #88]	; 0x58
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d04b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041aa:	d02e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80041ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041b0:	d828      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d02a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041bc:	d822      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c2:	d026      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80041c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c8:	d81c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ce:	d010      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d4:	d816      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	d111      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fc80 	bl	8004aec <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041f0:	e012      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fd29 	bl	8004c50 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800421e:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422c:	4938      	ldr	r1, [pc, #224]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800422e:	4313      	orrs	r3, r2
 8004230:	658b      	str	r3, [r1, #88]	; 0x58
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d10a      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3324      	adds	r3, #36	; 0x24
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fcfa 	bl	8004c50 <RCCEx_PLL3_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004274:	4926      	ldr	r1, [pc, #152]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004276:	4313      	orrs	r3, r2
 8004278:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d10a      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fcd9 	bl	8004c50 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b6:	4916      	ldr	r1, [pc, #88]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d036      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d2:	d01f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80042d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d8:	d817      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80042de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80042e4:	e011      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fbfd 	bl	8004aec <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042f6:	e00e      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fca6 	bl	8004c50 <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004308:	e005      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004310:	58024400 	.word	0x58024400
      break;
 8004314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431c:	4b93      	ldr	r3, [pc, #588]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800432a:	4990      	ldr	r1, [pc, #576]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	658b      	str	r3, [r1, #88]	; 0x58
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d033      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800434c:	d01c      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800434e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004352:	d816      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004358:	d003      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800435a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435e:	d007      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004360:	e00f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004362:	4b82      	ldr	r3, [pc, #520]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	4a81      	ldr	r2, [pc, #516]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800436e:	e00c      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fc6a 	bl	8004c50 <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
      break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439e:	4973      	ldr	r1, [pc, #460]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	654b      	str	r3, [r1, #84]	; 0x54
 80043a4:	e001      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d029      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80043be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c2:	d007      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c6:	4b69      	ldr	r3, [pc, #420]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	4a68      	ldr	r2, [pc, #416]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043d2:	e00b      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb86 	bl	8004aec <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043f2:	4b5e      	ldr	r3, [pc, #376]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	495b      	ldr	r1, [pc, #364]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004404:	e001      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	2102      	movs	r1, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fc17 	bl	8004c50 <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d030      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004440:	d017      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004446:	d811      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444c:	d013      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800444e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004452:	d80b      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d010      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445c:	d106      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	4a42      	ldr	r2, [pc, #264]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800446a:	e007      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
      break;
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800447a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004482:	4b3a      	ldr	r3, [pc, #232]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448e:	4937      	ldr	r1, [pc, #220]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	654b      	str	r3, [r1, #84]	; 0x54
 8004494:	e001      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	492e      	ldr	r1, [pc, #184]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044d2:	4926      	ldr	r1, [pc, #152]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f0:	491e      	ldr	r1, [pc, #120]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800450c:	6113      	str	r3, [r2, #16]
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004518:	4914      	ldr	r1, [pc, #80]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da08      	bge.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	490e      	ldr	r1, [pc, #56]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	4906      	ldr	r1, [pc, #24]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004558:	7dbb      	ldrb	r3, [r7, #22]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	58024400 	.word	0x58024400

08004570 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004574:	f7ff f860 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	; (8004598 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	58024400 	.word	0x58024400
 8004598:	08007a00 	.word	0x08007a00

0800459c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a4:	4ba1      	ldr	r3, [pc, #644]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80045ae:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	0b1b      	lsrs	r3, r3, #12
 80045b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045c6:	4b99      	ldr	r3, [pc, #612]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8111 	beq.w	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004606:	e099      	b.n	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004614:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a84      	ldr	r2, [pc, #528]	; (8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800466e:	e087      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046b2:	e065      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046f6:	e043      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473a:	e021      	b.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800477e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479a:	edd7 6a07 	vldr	s13, [r7, #28]
 800479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a6:	ee17 2a90 	vmov	r2, s15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047ae:	4b1f      	ldr	r3, [pc, #124]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 2a90 	vmov	r2, s15
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800480a:	e008      	b.n	800481e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	; 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	03d09000 	.word	0x03d09000
 8004834:	46000000 	.word	0x46000000
 8004838:	4c742400 	.word	0x4c742400
 800483c:	4a742400 	.word	0x4a742400
 8004840:	4af42400 	.word	0x4af42400

08004844 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800484c:	4ba1      	ldr	r3, [pc, #644]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004856:	4b9f      	ldr	r3, [pc, #636]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004862:	4b9c      	ldr	r3, [pc, #624]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800486e:	4b99      	ldr	r3, [pc, #612]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8111 	beq.w	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b02      	cmp	r3, #2
 8004896:	f000 8083 	beq.w	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b02      	cmp	r3, #2
 800489e:	f200 80a1 	bhi.w	80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d056      	beq.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048ae:	e099      	b.n	80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02d      	beq.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048bc:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	4a84      	ldr	r2, [pc, #528]	; (8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004916:	e087      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800495a:	e065      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496e:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004982:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800499e:	e043      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b2:	4b48      	ldr	r3, [pc, #288]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049e2:	e021      	b.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	0a5b      	lsrs	r3, r3, #9
 8004a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 2a90 	vmov	r2, s15
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a56:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7c:	ee17 2a90 	vmov	r2, s15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a84:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	0e1b      	lsrs	r3, r3, #24
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aaa:	ee17 2a90 	vmov	r2, s15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	03d09000 	.word	0x03d09000
 8004adc:	46000000 	.word	0x46000000
 8004ae0:	4c742400 	.word	0x4c742400
 8004ae4:	4a742400 	.word	0x4a742400
 8004ae8:	4af42400 	.word	0x4af42400

08004aec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004afa:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d101      	bne.n	8004b0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e099      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b0a:	4b4f      	ldr	r3, [pc, #316]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4e      	ldr	r2, [pc, #312]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b16:	f7fc fd7d 	bl	8001614 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b1e:	f7fc fd79 	bl	8001614 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e086      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b30:	4b45      	ldr	r3, [pc, #276]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	493f      	ldr	r1, [pc, #252]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b80:	4931      	ldr	r1, [pc, #196]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b86:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	492d      	ldr	r1, [pc, #180]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f023 0220 	bic.w	r2, r3, #32
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4928      	ldr	r1, [pc, #160]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	f023 0310 	bic.w	r3, r3, #16
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <RCCEx_PLL2_Config+0x160>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	69d2      	ldr	r2, [r2, #28]
 8004bc2:	00d2      	lsls	r2, r2, #3
 8004bc4:	4920      	ldr	r1, [pc, #128]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f043 0310 	orr.w	r3, r3, #16
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004be8:	e00f      	b.n	8004c0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bfc:	e005      	b.n	8004c0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c16:	f7fc fcfd 	bl	8001614 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c1e:	f7fc fcf9 	bl	8001614 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	ffff0007 	.word	0xffff0007

08004c50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c5e:	4b53      	ldr	r3, [pc, #332]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d101      	bne.n	8004c6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e099      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c6e:	4b4f      	ldr	r3, [pc, #316]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4e      	ldr	r2, [pc, #312]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fccb 	bl	8001614 <HAL_GetTick>
 8004c7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c82:	f7fc fcc7 	bl	8001614 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e086      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ca0:	4b42      	ldr	r3, [pc, #264]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	051b      	lsls	r3, r3, #20
 8004cae:	493f      	ldr	r1, [pc, #252]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ce4:	4931      	ldr	r1, [pc, #196]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	492d      	ldr	r1, [pc, #180]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4928      	ldr	r1, [pc, #160]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d0e:	4b27      	ldr	r3, [pc, #156]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a26      	ldr	r2, [pc, #152]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <RCCEx_PLL3_Config+0x160>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	69d2      	ldr	r2, [r2, #28]
 8004d26:	00d2      	lsls	r2, r2, #3
 8004d28:	4920      	ldr	r1, [pc, #128]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d4c:	e00f      	b.n	8004d6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d60:	e005      	b.n	8004d6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	4a11      	ldr	r2, [pc, #68]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7a:	f7fc fc4b 	bl	8001614 <HAL_GetTick>
 8004d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d82:	f7fc fc47 	bl	8001614 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <RCCEx_PLL3_Config+0x15c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	ffff0007 	.word	0xffff0007

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e049      	b.n	8004e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc f90e 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fd30 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e049      	b.n	8004f08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f841 	bl	8004f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fcd9 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_TIM_PWM_Start_IT+0x24>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e03c      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d109      	bne.n	8004f62 <HAL_TIM_PWM_Start_IT+0x3e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e02f      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start_IT+0x58>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start_IT+0x72>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0e2      	b.n	8005190 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start_IT+0xb6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e023      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0xfe>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start_IT+0xc6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e01b      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0xfe>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start_IT+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e013      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0xfe>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start_IT+0xe6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	e00b      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0xfe>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b10      	cmp	r3, #16
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start_IT+0xf6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	e003      	b.n	8005022 <HAL_TIM_PWM_Start_IT+0xfe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d841      	bhi.n	80050ac <HAL_TIM_PWM_Start_IT+0x188>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <HAL_TIM_PWM_Start_IT+0x10c>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005065 	.word	0x08005065
 8005034:	080050ad 	.word	0x080050ad
 8005038:	080050ad 	.word	0x080050ad
 800503c:	080050ad 	.word	0x080050ad
 8005040:	08005077 	.word	0x08005077
 8005044:	080050ad 	.word	0x080050ad
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080050ad 	.word	0x080050ad
 8005050:	08005089 	.word	0x08005089
 8005054:	080050ad 	.word	0x080050ad
 8005058:	080050ad 	.word	0x080050ad
 800505c:	080050ad 	.word	0x080050ad
 8005060:	0800509b 	.word	0x0800509b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0202 	orr.w	r2, r2, #2
 8005072:	60da      	str	r2, [r3, #12]
      break;
 8005074:	e01b      	b.n	80050ae <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0204 	orr.w	r2, r2, #4
 8005084:	60da      	str	r2, [r3, #12]
      break;
 8005086:	e012      	b.n	80050ae <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	60da      	str	r2, [r3, #12]
      break;
 8005098:	e009      	b.n	80050ae <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0210 	orr.w	r2, r2, #16
 80050a8:	60da      	str	r2, [r3, #12]
      break;
 80050aa:	e000      	b.n	80050ae <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80050ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 ffd4 	bl	8006064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a35      	ldr	r2, [pc, #212]	; (8005198 <HAL_TIM_PWM_Start_IT+0x274>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_TIM_PWM_Start_IT+0x1ca>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_TIM_PWM_Start_IT+0x278>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIM_PWM_Start_IT+0x1ca>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a32      	ldr	r2, [pc, #200]	; (80051a0 <HAL_TIM_PWM_Start_IT+0x27c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIM_PWM_Start_IT+0x1ca>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a31      	ldr	r2, [pc, #196]	; (80051a4 <HAL_TIM_PWM_Start_IT+0x280>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIM_PWM_Start_IT+0x1ca>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <HAL_TIM_PWM_Start_IT+0x284>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_Start_IT+0x1ce>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a22      	ldr	r2, [pc, #136]	; (8005198 <HAL_TIM_PWM_Start_IT+0x274>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d018      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a22      	ldr	r2, [pc, #136]	; (80051ac <HAL_TIM_PWM_Start_IT+0x288>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <HAL_TIM_PWM_Start_IT+0x290>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_TIM_PWM_Start_IT+0x278>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start_IT+0x22a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_TIM_PWM_Start_IT+0x294>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d115      	bne.n	800517a <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b19      	ldr	r3, [pc, #100]	; (80051bc <HAL_TIM_PWM_Start_IT+0x298>)
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d015      	beq.n	800518c <HAL_TIM_PWM_Start_IT+0x268>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d011      	beq.n	800518c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	e008      	b.n	800518c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e000      	b.n	800518e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40001800 	.word	0x40001800
 80051bc:	00010007 	.word	0x00010007

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fb14 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb06 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fb fdbb 	bl	8000d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 faea 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fadc 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fd91 	bl	8000d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fac0 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fab2 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fb fd67 	bl	8000d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa96 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa88 	bl	800581c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fb fd3d 	bl	8000d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa62 	bl	8005808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 ff32 	bl	80061d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 ff25 	bl	80061e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa3d 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0220 	mvn.w	r2, #32
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fee5 	bl	80061c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005416:	2302      	movs	r3, #2
 8005418:	e0fd      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x216>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b14      	cmp	r3, #20
 8005426:	f200 80f0 	bhi.w	800560a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005485 	.word	0x08005485
 8005434:	0800560b 	.word	0x0800560b
 8005438:	0800560b 	.word	0x0800560b
 800543c:	0800560b 	.word	0x0800560b
 8005440:	080054c5 	.word	0x080054c5
 8005444:	0800560b 	.word	0x0800560b
 8005448:	0800560b 	.word	0x0800560b
 800544c:	0800560b 	.word	0x0800560b
 8005450:	08005507 	.word	0x08005507
 8005454:	0800560b 	.word	0x0800560b
 8005458:	0800560b 	.word	0x0800560b
 800545c:	0800560b 	.word	0x0800560b
 8005460:	08005547 	.word	0x08005547
 8005464:	0800560b 	.word	0x0800560b
 8005468:	0800560b 	.word	0x0800560b
 800546c:	0800560b 	.word	0x0800560b
 8005470:	08005589 	.word	0x08005589
 8005474:	0800560b 	.word	0x0800560b
 8005478:	0800560b 	.word	0x0800560b
 800547c:	0800560b 	.word	0x0800560b
 8005480:	080055c9 	.word	0x080055c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa7e 	bl	800598c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0208 	orr.w	r2, r2, #8
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0204 	bic.w	r2, r2, #4
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	619a      	str	r2, [r3, #24]
      break;
 80054c2:	e0a3      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 faee 	bl	8005aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6999      	ldr	r1, [r3, #24]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	619a      	str	r2, [r3, #24]
      break;
 8005504:	e082      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fb57 	bl	8005bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0208 	orr.w	r2, r2, #8
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0204 	bic.w	r2, r2, #4
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	61da      	str	r2, [r3, #28]
      break;
 8005544:	e062      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fbbd 	bl	8005ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69d9      	ldr	r1, [r3, #28]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	021a      	lsls	r2, r3, #8
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	61da      	str	r2, [r3, #28]
      break;
 8005586:	e041      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fc04 	bl	8005d9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0208 	orr.w	r2, r2, #8
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0204 	bic.w	r2, r2, #4
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055c6:	e021      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fc46 	bl	8005e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005608:	e000      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800560a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop

08005620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e0db      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4b69      	ldr	r3, [pc, #420]	; (80057f8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005654:	4013      	ands	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a63      	ldr	r2, [pc, #396]	; (80057fc <HAL_TIM_ConfigClockSource+0x1dc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f000 80a9 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005674:	4a61      	ldr	r2, [pc, #388]	; (80057fc <HAL_TIM_ConfigClockSource+0x1dc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	f200 80ae 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800567c:	4a60      	ldr	r2, [pc, #384]	; (8005800 <HAL_TIM_ConfigClockSource+0x1e0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f000 80a1 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005684:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f200 80a6 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800568c:	4a5d      	ldr	r2, [pc, #372]	; (8005804 <HAL_TIM_ConfigClockSource+0x1e4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	f000 8099 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005694:	4a5b      	ldr	r2, [pc, #364]	; (8005804 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f200 809e 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 800569c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a0:	f000 8091 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 80056a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056a8:	f200 8096 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b0:	f000 8089 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	f200 808e 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c0:	d03e      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0x120>
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c6:	f200 8087 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ce:	f000 8085 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x1bc>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d87f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d01a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0xf2>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d87b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056e0:	2b60      	cmp	r3, #96	; 0x60
 80056e2:	d050      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x166>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d877      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056e8:	2b50      	cmp	r3, #80	; 0x50
 80056ea:	d03c      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x146>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d873      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d058      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d86f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d064      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d86b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d060      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d867      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d05c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
 800570c:	2b10      	cmp	r3, #16
 800570e:	d05a      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005710:	e062      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f000 fc7f 	bl	8006024 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005734:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	609a      	str	r2, [r3, #8]
      break;
 800573e:	e04e      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6899      	ldr	r1, [r3, #8]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f000 fc68 	bl	8006024 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e03b      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	f000 fbd8 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2150      	movs	r1, #80	; 0x50
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fc32 	bl	8005fe8 <TIM_ITRx_SetConfig>
      break;
 8005784:	e02b      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 fbf7 	bl	8005f86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2160      	movs	r1, #96	; 0x60
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fc22 	bl	8005fe8 <TIM_ITRx_SetConfig>
      break;
 80057a4:	e01b      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 fbb8 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2140      	movs	r1, #64	; 0x40
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fc12 	bl	8005fe8 <TIM_ITRx_SetConfig>
      break;
 80057c4:	e00b      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 fc09 	bl	8005fe8 <TIM_ITRx_SetConfig>
        break;
 80057d6:	e002      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80057dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	ffceff88 	.word	0xffceff88
 80057fc:	00100040 	.word	0x00100040
 8005800:	00100030 	.word	0x00100030
 8005804:	00100020 	.word	0x00100020

08005808 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TIM_Base_SetConfig+0x128>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <TIM_Base_SetConfig+0x130>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <TIM_OC1_SetConfig+0x108>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 0302 	bic.w	r3, r3, #2
 80059d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a2d      	ldr	r2, [pc, #180]	; (8005a98 <TIM_OC1_SetConfig+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00f      	beq.n	8005a08 <TIM_OC1_SetConfig+0x7c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <TIM_OC1_SetConfig+0x110>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_OC1_SetConfig+0x7c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <TIM_OC1_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC1_SetConfig+0x7c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <TIM_OC1_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC1_SetConfig+0x7c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_OC1_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10c      	bne.n	8005a22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0308 	bic.w	r3, r3, #8
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 0304 	bic.w	r3, r3, #4
 8005a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <TIM_OC1_SetConfig+0x10c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_OC1_SetConfig+0xbe>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <TIM_OC1_SetConfig+0x110>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_OC1_SetConfig+0xbe>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <TIM_OC1_SetConfig+0x114>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_OC1_SetConfig+0xbe>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <TIM_OC1_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_OC1_SetConfig+0xbe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <TIM_OC1_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d111      	bne.n	8005a6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	fffeff8f 	.word	0xfffeff8f
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0210 	bic.w	r2, r3, #16
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <TIM_OC2_SetConfig+0xfc>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f023 0320 	bic.w	r3, r3, #32
 8005af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a29      	ldr	r2, [pc, #164]	; (8005bac <TIM_OC2_SetConfig+0x100>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC2_SetConfig+0x68>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <TIM_OC2_SetConfig+0x104>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10d      	bne.n	8005b30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <TIM_OC2_SetConfig+0x100>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00f      	beq.n	8005b58 <TIM_OC2_SetConfig+0xac>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <TIM_OC2_SetConfig+0x104>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_OC2_SetConfig+0xac>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <TIM_OC2_SetConfig+0x108>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_OC2_SetConfig+0xac>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <TIM_OC2_SetConfig+0x10c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC2_SetConfig+0xac>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <TIM_OC2_SetConfig+0x110>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d113      	bne.n	8005b80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	feff8fff 	.word	0xfeff8fff
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <TIM_OC3_SetConfig+0xf8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x66>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <TIM_OC3_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10d      	bne.n	8005c42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <TIM_OC3_SetConfig+0xf8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_OC3_SetConfig+0xaa>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <TIM_OC3_SetConfig+0xfc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_OC3_SetConfig+0xaa>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <TIM_OC3_SetConfig+0x100>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_OC3_SetConfig+0xaa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <TIM_OC3_SetConfig+0x104>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_OC3_SetConfig+0xaa>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <TIM_OC3_SetConfig+0x108>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d113      	bne.n	8005c92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800

08005ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	031b      	lsls	r3, r3, #12
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <TIM_OC4_SetConfig+0xbc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_OC4_SetConfig+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <TIM_OC4_SetConfig+0xc0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <TIM_OC4_SetConfig+0x80>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <TIM_OC4_SetConfig+0xc4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_OC4_SetConfig+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <TIM_OC4_SetConfig+0xc8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <TIM_OC4_SetConfig+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <TIM_OC5_SetConfig+0xb0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_OC5_SetConfig+0x76>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <TIM_OC5_SetConfig+0xb4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_OC5_SetConfig+0x76>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <TIM_OC5_SetConfig+0xb8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_OC5_SetConfig+0x76>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <TIM_OC5_SetConfig+0xbc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC5_SetConfig+0x76>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <TIM_OC5_SetConfig+0xc0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d109      	bne.n	8005e26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	051b      	lsls	r3, r3, #20
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a18      	ldr	r2, [pc, #96]	; (8005f14 <TIM_OC6_SetConfig+0xb4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_OC6_SetConfig+0x78>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <TIM_OC6_SetConfig+0xb8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_OC6_SetConfig+0x78>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <TIM_OC6_SetConfig+0xbc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_OC6_SetConfig+0x78>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <TIM_OC6_SetConfig+0xc0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC6_SetConfig+0x78>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <TIM_OC6_SetConfig+0xc4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d109      	bne.n	8005eec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800

08005f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 030a 	bic.w	r3, r3, #10
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b087      	sub	sp, #28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0210 	bic.w	r2, r3, #16
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <TIM_ITRx_SetConfig+0x38>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	f043 0307 	orr.w	r3, r3, #7
 800600a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	609a      	str	r2, [r3, #8]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	ffcfff8f 	.word	0xffcfff8f

08006024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	431a      	orrs	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2201      	movs	r2, #1
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	43db      	mvns	r3, r3
 8006086:	401a      	ands	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e068      	b.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2e      	ldr	r2, [pc, #184]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2d      	ldr	r2, [pc, #180]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01d      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d018      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a13      	ldr	r2, [pc, #76]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10c      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4313      	orrs	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	40001800 	.word	0x40001800

080061c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e042      	b.n	8006294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fa ff4f 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2224      	movs	r2, #36	; 0x24
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f82c 	bl	800629c <UART_SetConfig>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e022      	b.n	8006294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd80 	bl	8006d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fe07 	bl	8006ea0 <UART_CheckIdleState>
 8006292:	4603      	mov	r3, r0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b08e      	sub	sp, #56	; 0x38
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4313      	orrs	r3, r2
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4bbf      	ldr	r3, [pc, #764]	; (80065c8 <UART_SetConfig+0x32c>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4ab5      	ldr	r2, [pc, #724]	; (80065cc <UART_SetConfig+0x330>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006302:	4313      	orrs	r3, r2
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	4bb0      	ldr	r3, [pc, #704]	; (80065d0 <UART_SetConfig+0x334>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006316:	430b      	orrs	r3, r1
 8006318:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	f023 010f 	bic.w	r1, r3, #15
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4aa7      	ldr	r2, [pc, #668]	; (80065d4 <UART_SetConfig+0x338>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d176      	bne.n	8006428 <UART_SetConfig+0x18c>
 800633a:	4ba7      	ldr	r3, [pc, #668]	; (80065d8 <UART_SetConfig+0x33c>)
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006342:	2b28      	cmp	r3, #40	; 0x28
 8006344:	d86c      	bhi.n	8006420 <UART_SetConfig+0x184>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0xb0>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063f1 	.word	0x080063f1
 8006350:	08006421 	.word	0x08006421
 8006354:	08006421 	.word	0x08006421
 8006358:	08006421 	.word	0x08006421
 800635c:	08006421 	.word	0x08006421
 8006360:	08006421 	.word	0x08006421
 8006364:	08006421 	.word	0x08006421
 8006368:	08006421 	.word	0x08006421
 800636c:	080063f9 	.word	0x080063f9
 8006370:	08006421 	.word	0x08006421
 8006374:	08006421 	.word	0x08006421
 8006378:	08006421 	.word	0x08006421
 800637c:	08006421 	.word	0x08006421
 8006380:	08006421 	.word	0x08006421
 8006384:	08006421 	.word	0x08006421
 8006388:	08006421 	.word	0x08006421
 800638c:	08006401 	.word	0x08006401
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006421 	.word	0x08006421
 80063a4:	08006421 	.word	0x08006421
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006409 	.word	0x08006409
 80063b0:	08006421 	.word	0x08006421
 80063b4:	08006421 	.word	0x08006421
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006411 	.word	0x08006411
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006421 	.word	0x08006421
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006421 	.word	0x08006421
 80063e4:	08006421 	.word	0x08006421
 80063e8:	08006421 	.word	0x08006421
 80063ec:	08006419 	.word	0x08006419
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f6:	e222      	b.n	800683e <UART_SetConfig+0x5a2>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fe:	e21e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006406:	e21a      	b.n	800683e <UART_SetConfig+0x5a2>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800640e:	e216      	b.n	800683e <UART_SetConfig+0x5a2>
 8006410:	2320      	movs	r3, #32
 8006412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006416:	e212      	b.n	800683e <UART_SetConfig+0x5a2>
 8006418:	2340      	movs	r3, #64	; 0x40
 800641a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800641e:	e20e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006426:	e20a      	b.n	800683e <UART_SetConfig+0x5a2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6b      	ldr	r2, [pc, #428]	; (80065dc <UART_SetConfig+0x340>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d130      	bne.n	8006494 <UART_SetConfig+0x1f8>
 8006432:	4b69      	ldr	r3, [pc, #420]	; (80065d8 <UART_SetConfig+0x33c>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b05      	cmp	r3, #5
 800643c:	d826      	bhi.n	800648c <UART_SetConfig+0x1f0>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x1a8>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	0800645d 	.word	0x0800645d
 8006448:	08006465 	.word	0x08006465
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006475 	.word	0x08006475
 8006454:	0800647d 	.word	0x0800647d
 8006458:	08006485 	.word	0x08006485
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006462:	e1ec      	b.n	800683e <UART_SetConfig+0x5a2>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e1e8      	b.n	800683e <UART_SetConfig+0x5a2>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e1e4      	b.n	800683e <UART_SetConfig+0x5a2>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647a:	e1e0      	b.n	800683e <UART_SetConfig+0x5a2>
 800647c:	2320      	movs	r3, #32
 800647e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006482:	e1dc      	b.n	800683e <UART_SetConfig+0x5a2>
 8006484:	2340      	movs	r3, #64	; 0x40
 8006486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648a:	e1d8      	b.n	800683e <UART_SetConfig+0x5a2>
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006492:	e1d4      	b.n	800683e <UART_SetConfig+0x5a2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a51      	ldr	r2, [pc, #324]	; (80065e0 <UART_SetConfig+0x344>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d130      	bne.n	8006500 <UART_SetConfig+0x264>
 800649e:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <UART_SetConfig+0x33c>)
 80064a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	d826      	bhi.n	80064f8 <UART_SetConfig+0x25c>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x214>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064c9 	.word	0x080064c9
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064d9 	.word	0x080064d9
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ce:	e1b6      	b.n	800683e <UART_SetConfig+0x5a2>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d6:	e1b2      	b.n	800683e <UART_SetConfig+0x5a2>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e1ae      	b.n	800683e <UART_SetConfig+0x5a2>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e6:	e1aa      	b.n	800683e <UART_SetConfig+0x5a2>
 80064e8:	2320      	movs	r3, #32
 80064ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ee:	e1a6      	b.n	800683e <UART_SetConfig+0x5a2>
 80064f0:	2340      	movs	r3, #64	; 0x40
 80064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f6:	e1a2      	b.n	800683e <UART_SetConfig+0x5a2>
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fe:	e19e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <UART_SetConfig+0x348>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d130      	bne.n	800656c <UART_SetConfig+0x2d0>
 800650a:	4b33      	ldr	r3, [pc, #204]	; (80065d8 <UART_SetConfig+0x33c>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b05      	cmp	r3, #5
 8006514:	d826      	bhi.n	8006564 <UART_SetConfig+0x2c8>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0x280>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006535 	.word	0x08006535
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006545 	.word	0x08006545
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
 8006534:	2300      	movs	r3, #0
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e180      	b.n	800683e <UART_SetConfig+0x5a2>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e17c      	b.n	800683e <UART_SetConfig+0x5a2>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e178      	b.n	800683e <UART_SetConfig+0x5a2>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006552:	e174      	b.n	800683e <UART_SetConfig+0x5a2>
 8006554:	2320      	movs	r3, #32
 8006556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655a:	e170      	b.n	800683e <UART_SetConfig+0x5a2>
 800655c:	2340      	movs	r3, #64	; 0x40
 800655e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006562:	e16c      	b.n	800683e <UART_SetConfig+0x5a2>
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656a:	e168      	b.n	800683e <UART_SetConfig+0x5a2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <UART_SetConfig+0x34c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d142      	bne.n	80065fc <UART_SetConfig+0x360>
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <UART_SetConfig+0x33c>)
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b05      	cmp	r3, #5
 8006580:	d838      	bhi.n	80065f4 <UART_SetConfig+0x358>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <UART_SetConfig+0x2ec>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065a1 	.word	0x080065a1
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065b1 	.word	0x080065b1
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a6:	e14a      	b.n	800683e <UART_SetConfig+0x5a2>
 80065a8:	2304      	movs	r3, #4
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e146      	b.n	800683e <UART_SetConfig+0x5a2>
 80065b0:	2308      	movs	r3, #8
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e142      	b.n	800683e <UART_SetConfig+0x5a2>
 80065b8:	2310      	movs	r3, #16
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e13e      	b.n	800683e <UART_SetConfig+0x5a2>
 80065c0:	2320      	movs	r3, #32
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e13a      	b.n	800683e <UART_SetConfig+0x5a2>
 80065c8:	cfff69f3 	.word	0xcfff69f3
 80065cc:	58000c00 	.word	0x58000c00
 80065d0:	11fff4ff 	.word	0x11fff4ff
 80065d4:	40011000 	.word	0x40011000
 80065d8:	58024400 	.word	0x58024400
 80065dc:	40004400 	.word	0x40004400
 80065e0:	40004800 	.word	0x40004800
 80065e4:	40004c00 	.word	0x40004c00
 80065e8:	40005000 	.word	0x40005000
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e124      	b.n	800683e <UART_SetConfig+0x5a2>
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e120      	b.n	800683e <UART_SetConfig+0x5a2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4acc      	ldr	r2, [pc, #816]	; (8006934 <UART_SetConfig+0x698>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d176      	bne.n	80066f4 <UART_SetConfig+0x458>
 8006606:	4bcc      	ldr	r3, [pc, #816]	; (8006938 <UART_SetConfig+0x69c>)
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800660e:	2b28      	cmp	r3, #40	; 0x28
 8006610:	d86c      	bhi.n	80066ec <UART_SetConfig+0x450>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <UART_SetConfig+0x37c>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	080066bd 	.word	0x080066bd
 800661c:	080066ed 	.word	0x080066ed
 8006620:	080066ed 	.word	0x080066ed
 8006624:	080066ed 	.word	0x080066ed
 8006628:	080066ed 	.word	0x080066ed
 800662c:	080066ed 	.word	0x080066ed
 8006630:	080066ed 	.word	0x080066ed
 8006634:	080066ed 	.word	0x080066ed
 8006638:	080066c5 	.word	0x080066c5
 800663c:	080066ed 	.word	0x080066ed
 8006640:	080066ed 	.word	0x080066ed
 8006644:	080066ed 	.word	0x080066ed
 8006648:	080066ed 	.word	0x080066ed
 800664c:	080066ed 	.word	0x080066ed
 8006650:	080066ed 	.word	0x080066ed
 8006654:	080066ed 	.word	0x080066ed
 8006658:	080066cd 	.word	0x080066cd
 800665c:	080066ed 	.word	0x080066ed
 8006660:	080066ed 	.word	0x080066ed
 8006664:	080066ed 	.word	0x080066ed
 8006668:	080066ed 	.word	0x080066ed
 800666c:	080066ed 	.word	0x080066ed
 8006670:	080066ed 	.word	0x080066ed
 8006674:	080066ed 	.word	0x080066ed
 8006678:	080066d5 	.word	0x080066d5
 800667c:	080066ed 	.word	0x080066ed
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080066ed 	.word	0x080066ed
 8006688:	080066ed 	.word	0x080066ed
 800668c:	080066ed 	.word	0x080066ed
 8006690:	080066ed 	.word	0x080066ed
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066ed 	.word	0x080066ed
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066ed 	.word	0x080066ed
 80066ac:	080066ed 	.word	0x080066ed
 80066b0:	080066ed 	.word	0x080066ed
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c2:	e0bc      	b.n	800683e <UART_SetConfig+0x5a2>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	e0b8      	b.n	800683e <UART_SetConfig+0x5a2>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e0b4      	b.n	800683e <UART_SetConfig+0x5a2>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e0b0      	b.n	800683e <UART_SetConfig+0x5a2>
 80066dc:	2320      	movs	r3, #32
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e0ac      	b.n	800683e <UART_SetConfig+0x5a2>
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ea:	e0a8      	b.n	800683e <UART_SetConfig+0x5a2>
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e0a4      	b.n	800683e <UART_SetConfig+0x5a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a90      	ldr	r2, [pc, #576]	; (800693c <UART_SetConfig+0x6a0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d130      	bne.n	8006760 <UART_SetConfig+0x4c4>
 80066fe:	4b8e      	ldr	r3, [pc, #568]	; (8006938 <UART_SetConfig+0x69c>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b05      	cmp	r3, #5
 8006708:	d826      	bhi.n	8006758 <UART_SetConfig+0x4bc>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0x474>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006729 	.word	0x08006729
 8006714:	08006731 	.word	0x08006731
 8006718:	08006739 	.word	0x08006739
 800671c:	08006741 	.word	0x08006741
 8006720:	08006749 	.word	0x08006749
 8006724:	08006751 	.word	0x08006751
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e086      	b.n	800683e <UART_SetConfig+0x5a2>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e082      	b.n	800683e <UART_SetConfig+0x5a2>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e07e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e07a      	b.n	800683e <UART_SetConfig+0x5a2>
 8006748:	2320      	movs	r3, #32
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e076      	b.n	800683e <UART_SetConfig+0x5a2>
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006756:	e072      	b.n	800683e <UART_SetConfig+0x5a2>
 8006758:	2380      	movs	r3, #128	; 0x80
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e06e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a76      	ldr	r2, [pc, #472]	; (8006940 <UART_SetConfig+0x6a4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d130      	bne.n	80067cc <UART_SetConfig+0x530>
 800676a:	4b73      	ldr	r3, [pc, #460]	; (8006938 <UART_SetConfig+0x69c>)
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b05      	cmp	r3, #5
 8006774:	d826      	bhi.n	80067c4 <UART_SetConfig+0x528>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <UART_SetConfig+0x4e0>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	08006795 	.word	0x08006795
 8006780:	0800679d 	.word	0x0800679d
 8006784:	080067a5 	.word	0x080067a5
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	2300      	movs	r3, #0
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679a:	e050      	b.n	800683e <UART_SetConfig+0x5a2>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e04c      	b.n	800683e <UART_SetConfig+0x5a2>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e048      	b.n	800683e <UART_SetConfig+0x5a2>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e044      	b.n	800683e <UART_SetConfig+0x5a2>
 80067b4:	2320      	movs	r3, #32
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e040      	b.n	800683e <UART_SetConfig+0x5a2>
 80067bc:	2340      	movs	r3, #64	; 0x40
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e03c      	b.n	800683e <UART_SetConfig+0x5a2>
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e038      	b.n	800683e <UART_SetConfig+0x5a2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5c      	ldr	r2, [pc, #368]	; (8006944 <UART_SetConfig+0x6a8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d130      	bne.n	8006838 <UART_SetConfig+0x59c>
 80067d6:	4b58      	ldr	r3, [pc, #352]	; (8006938 <UART_SetConfig+0x69c>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d826      	bhi.n	8006830 <UART_SetConfig+0x594>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x54c>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006801 	.word	0x08006801
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006811 	.word	0x08006811
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0x5a2>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e016      	b.n	800683e <UART_SetConfig+0x5a2>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x5a2>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681e:	e00e      	b.n	800683e <UART_SetConfig+0x5a2>
 8006820:	2320      	movs	r3, #32
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e00a      	b.n	800683e <UART_SetConfig+0x5a2>
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682e:	e006      	b.n	800683e <UART_SetConfig+0x5a2>
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e002      	b.n	800683e <UART_SetConfig+0x5a2>
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a40      	ldr	r2, [pc, #256]	; (8006944 <UART_SetConfig+0x6a8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	f040 80ef 	bne.w	8006a28 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800684a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800684e:	2b20      	cmp	r3, #32
 8006850:	dc46      	bgt.n	80068e0 <UART_SetConfig+0x644>
 8006852:	2b02      	cmp	r3, #2
 8006854:	f2c0 8081 	blt.w	800695a <UART_SetConfig+0x6be>
 8006858:	3b02      	subs	r3, #2
 800685a:	2b1e      	cmp	r3, #30
 800685c:	d87d      	bhi.n	800695a <UART_SetConfig+0x6be>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <UART_SetConfig+0x5c8>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	080068e7 	.word	0x080068e7
 8006868:	0800695b 	.word	0x0800695b
 800686c:	080068ef 	.word	0x080068ef
 8006870:	0800695b 	.word	0x0800695b
 8006874:	0800695b 	.word	0x0800695b
 8006878:	0800695b 	.word	0x0800695b
 800687c:	080068ff 	.word	0x080068ff
 8006880:	0800695b 	.word	0x0800695b
 8006884:	0800695b 	.word	0x0800695b
 8006888:	0800695b 	.word	0x0800695b
 800688c:	0800695b 	.word	0x0800695b
 8006890:	0800695b 	.word	0x0800695b
 8006894:	0800695b 	.word	0x0800695b
 8006898:	0800695b 	.word	0x0800695b
 800689c:	0800690f 	.word	0x0800690f
 80068a0:	0800695b 	.word	0x0800695b
 80068a4:	0800695b 	.word	0x0800695b
 80068a8:	0800695b 	.word	0x0800695b
 80068ac:	0800695b 	.word	0x0800695b
 80068b0:	0800695b 	.word	0x0800695b
 80068b4:	0800695b 	.word	0x0800695b
 80068b8:	0800695b 	.word	0x0800695b
 80068bc:	0800695b 	.word	0x0800695b
 80068c0:	0800695b 	.word	0x0800695b
 80068c4:	0800695b 	.word	0x0800695b
 80068c8:	0800695b 	.word	0x0800695b
 80068cc:	0800695b 	.word	0x0800695b
 80068d0:	0800695b 	.word	0x0800695b
 80068d4:	0800695b 	.word	0x0800695b
 80068d8:	0800695b 	.word	0x0800695b
 80068dc:	0800694d 	.word	0x0800694d
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d036      	beq.n	8006952 <UART_SetConfig+0x6b6>
 80068e4:	e039      	b.n	800695a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068e6:	f7fd fe43 	bl	8004570 <HAL_RCCEx_GetD3PCLK1Freq>
 80068ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80068ec:	e03b      	b.n	8006966 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ee:	f107 0314 	add.w	r3, r7, #20
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fd fe52 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068fc:	e033      	b.n	8006966 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd ff9e 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800690c:	e02b      	b.n	8006966 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <UART_SetConfig+0x69c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <UART_SetConfig+0x69c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	4a08      	ldr	r2, [pc, #32]	; (8006948 <UART_SetConfig+0x6ac>)
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800692c:	e01b      	b.n	8006966 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <UART_SetConfig+0x6ac>)
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006932:	e018      	b.n	8006966 <UART_SetConfig+0x6ca>
 8006934:	40011400 	.word	0x40011400
 8006938:	58024400 	.word	0x58024400
 800693c:	40007800 	.word	0x40007800
 8006940:	40007c00 	.word	0x40007c00
 8006944:	58000c00 	.word	0x58000c00
 8006948:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800694c:	4bc4      	ldr	r3, [pc, #784]	; (8006c60 <UART_SetConfig+0x9c4>)
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006950:	e009      	b.n	8006966 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006958:	e005      	b.n	8006966 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006964:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81da 	beq.w	8006d22 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4abc      	ldr	r2, [pc, #752]	; (8006c64 <UART_SetConfig+0x9c8>)
 8006974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006978:	461a      	mov	r2, r3
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006980:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	4413      	add	r3, r2
 800698c:	6a3a      	ldr	r2, [r7, #32]
 800698e:	429a      	cmp	r2, r3
 8006990:	d305      	bcc.n	800699e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	429a      	cmp	r2, r3
 800699c:	d903      	bls.n	80069a6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80069a4:	e1bd      	b.n	8006d22 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	4618      	mov	r0, r3
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	4aac      	ldr	r2, [pc, #688]	; (8006c64 <UART_SetConfig+0x9c8>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	f7f9 fc8b 	bl	80002d8 <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	020b      	lsls	r3, r1, #8
 80069d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069d8:	0202      	lsls	r2, r0, #8
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	6849      	ldr	r1, [r1, #4]
 80069de:	0849      	lsrs	r1, r1, #1
 80069e0:	4608      	mov	r0, r1
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	1814      	adds	r4, r2, r0
 80069e8:	eb43 0501 	adc.w	r5, r3, r1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fc6d 	bl	80002d8 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4613      	mov	r3, r2
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0c:	d308      	bcc.n	8006a20 <UART_SetConfig+0x784>
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a14:	d204      	bcs.n	8006a20 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	e180      	b.n	8006d22 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a26:	e17c      	b.n	8006d22 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	f040 80bf 	bne.w	8006bb2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	dc49      	bgt.n	8006ad0 <UART_SetConfig+0x834>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	db7c      	blt.n	8006b3a <UART_SetConfig+0x89e>
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d87a      	bhi.n	8006b3a <UART_SetConfig+0x89e>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <UART_SetConfig+0x7b0>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006ad7 	.word	0x08006ad7
 8006a50:	08006adf 	.word	0x08006adf
 8006a54:	08006b3b 	.word	0x08006b3b
 8006a58:	08006b3b 	.word	0x08006b3b
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006b3b 	.word	0x08006b3b
 8006a64:	08006b3b 	.word	0x08006b3b
 8006a68:	08006b3b 	.word	0x08006b3b
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006b3b 	.word	0x08006b3b
 8006a74:	08006b3b 	.word	0x08006b3b
 8006a78:	08006b3b 	.word	0x08006b3b
 8006a7c:	08006b3b 	.word	0x08006b3b
 8006a80:	08006b3b 	.word	0x08006b3b
 8006a84:	08006b3b 	.word	0x08006b3b
 8006a88:	08006b3b 	.word	0x08006b3b
 8006a8c:	08006b07 	.word	0x08006b07
 8006a90:	08006b3b 	.word	0x08006b3b
 8006a94:	08006b3b 	.word	0x08006b3b
 8006a98:	08006b3b 	.word	0x08006b3b
 8006a9c:	08006b3b 	.word	0x08006b3b
 8006aa0:	08006b3b 	.word	0x08006b3b
 8006aa4:	08006b3b 	.word	0x08006b3b
 8006aa8:	08006b3b 	.word	0x08006b3b
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b3b 	.word	0x08006b3b
 8006ab4:	08006b3b 	.word	0x08006b3b
 8006ab8:	08006b3b 	.word	0x08006b3b
 8006abc:	08006b3b 	.word	0x08006b3b
 8006ac0:	08006b3b 	.word	0x08006b3b
 8006ac4:	08006b3b 	.word	0x08006b3b
 8006ac8:	08006b3b 	.word	0x08006b3b
 8006acc:	08006b2d 	.word	0x08006b2d
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d02e      	beq.n	8006b32 <UART_SetConfig+0x896>
 8006ad4:	e031      	b.n	8006b3a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad6:	f7fc fddf 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8006ada:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006adc:	e033      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ade:	f7fc fdf1 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8006ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ae4:	e02f      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fd fd56 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af4:	e027      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006af6:	f107 0308 	add.w	r3, r7, #8
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fd fea2 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b04:	e01f      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b06:	4b58      	ldr	r3, [pc, #352]	; (8006c68 <UART_SetConfig+0x9cc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b12:	4b55      	ldr	r3, [pc, #340]	; (8006c68 <UART_SetConfig+0x9cc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	4a53      	ldr	r2, [pc, #332]	; (8006c6c <UART_SetConfig+0x9d0>)
 8006b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b24:	e00f      	b.n	8006b46 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006b26:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <UART_SetConfig+0x9d0>)
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2a:	e00c      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b2c:	4b4c      	ldr	r3, [pc, #304]	; (8006c60 <UART_SetConfig+0x9c4>)
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b30:	e009      	b.n	8006b46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b38:	e005      	b.n	8006b46 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80ea 	beq.w	8006d22 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	4a44      	ldr	r2, [pc, #272]	; (8006c64 <UART_SetConfig+0x9c8>)
 8006b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b60:	005a      	lsls	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	441a      	add	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2b0f      	cmp	r3, #15
 8006b7a:	d916      	bls.n	8006baa <UART_SetConfig+0x90e>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b82:	d212      	bcs.n	8006baa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f023 030f 	bic.w	r3, r3, #15
 8006b8c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	e0bb      	b.n	8006d22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006bb0:	e0b7      	b.n	8006d22 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	dc4a      	bgt.n	8006c50 <UART_SetConfig+0x9b4>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f2c0 8086 	blt.w	8006ccc <UART_SetConfig+0xa30>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	f200 8083 	bhi.w	8006ccc <UART_SetConfig+0xa30>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x930>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c57 	.word	0x08006c57
 8006bd0:	08006c71 	.word	0x08006c71
 8006bd4:	08006ccd 	.word	0x08006ccd
 8006bd8:	08006ccd 	.word	0x08006ccd
 8006bdc:	08006c79 	.word	0x08006c79
 8006be0:	08006ccd 	.word	0x08006ccd
 8006be4:	08006ccd 	.word	0x08006ccd
 8006be8:	08006ccd 	.word	0x08006ccd
 8006bec:	08006c89 	.word	0x08006c89
 8006bf0:	08006ccd 	.word	0x08006ccd
 8006bf4:	08006ccd 	.word	0x08006ccd
 8006bf8:	08006ccd 	.word	0x08006ccd
 8006bfc:	08006ccd 	.word	0x08006ccd
 8006c00:	08006ccd 	.word	0x08006ccd
 8006c04:	08006ccd 	.word	0x08006ccd
 8006c08:	08006ccd 	.word	0x08006ccd
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006ccd 	.word	0x08006ccd
 8006c14:	08006ccd 	.word	0x08006ccd
 8006c18:	08006ccd 	.word	0x08006ccd
 8006c1c:	08006ccd 	.word	0x08006ccd
 8006c20:	08006ccd 	.word	0x08006ccd
 8006c24:	08006ccd 	.word	0x08006ccd
 8006c28:	08006ccd 	.word	0x08006ccd
 8006c2c:	08006ccd 	.word	0x08006ccd
 8006c30:	08006ccd 	.word	0x08006ccd
 8006c34:	08006ccd 	.word	0x08006ccd
 8006c38:	08006ccd 	.word	0x08006ccd
 8006c3c:	08006ccd 	.word	0x08006ccd
 8006c40:	08006ccd 	.word	0x08006ccd
 8006c44:	08006ccd 	.word	0x08006ccd
 8006c48:	08006ccd 	.word	0x08006ccd
 8006c4c:	08006cbf 	.word	0x08006cbf
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d037      	beq.n	8006cc4 <UART_SetConfig+0xa28>
 8006c54:	e03a      	b.n	8006ccc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c56:	f7fc fd1f 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8006c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c5c:	e03c      	b.n	8006cd8 <UART_SetConfig+0xa3c>
 8006c5e:	bf00      	nop
 8006c60:	003d0900 	.word	0x003d0900
 8006c64:	08007a10 	.word	0x08007a10
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fc fd28 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8006c74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c76:	e02f      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c78:	f107 0314 	add.w	r3, r7, #20
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fc8d 	bl	800459c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c86:	e027      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd fdd9 	bl	8004844 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c96:	e01f      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c98:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <UART_SetConfig+0xab0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ca4:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <UART_SetConfig+0xab0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	08db      	lsrs	r3, r3, #3
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <UART_SetConfig+0xab4>)
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cb6:	e00f      	b.n	8006cd8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <UART_SetConfig+0xab4>)
 8006cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cbc:	e00c      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cbe:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <UART_SetConfig+0xab8>)
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cc2:	e009      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cca:	e005      	b.n	8006cd8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006cd6:	bf00      	nop
    }

    if (pclk != 0U)
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d021      	beq.n	8006d22 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <UART_SetConfig+0xabc>)
 8006ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d908      	bls.n	8006d1c <UART_SetConfig+0xa80>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d204      	bcs.n	8006d1c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e002      	b.n	8006d22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3738      	adds	r7, #56	; 0x38
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bdb0      	pop	{r4, r5, r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	58024400 	.word	0x58024400
 8006d50:	03d09000 	.word	0x03d09000
 8006d54:	003d0900 	.word	0x003d0900
 8006d58:	08007a10 	.word	0x08007a10

08006d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d10a      	bne.n	8006e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eb0:	f7fa fbb0 	bl	8001614 <HAL_GetTick>
 8006eb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10e      	bne.n	8006ee2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f82f 	bl	8006f36 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e025      	b.n	8006f2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d10e      	bne.n	8006f0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f819 	bl	8006f36 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e00f      	b.n	8006f2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f46:	e062      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4e:	d05e      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f50:	f7fa fb60 	bl	8001614 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d302      	bcc.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d11d      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0201 	bic.w	r2, r2, #1
 8006f84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e045      	b.n	800702e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02e      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fbe:	d126      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e00f      	b.n	800702e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4013      	ands	r3, r2
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	bf0c      	ite	eq
 800701e:	2301      	moveq	r3, #1
 8007020:	2300      	movne	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	429a      	cmp	r2, r3
 800702a:	d08d      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_UARTEx_DisableFifoMode+0x16>
 8007048:	2302      	movs	r3, #2
 800704a:	e027      	b.n	800709c <HAL_UARTEx_DisableFifoMode+0x66>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800707a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e02d      	b.n	800711c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2224      	movs	r2, #36	; 0x24
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f84f 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e02d      	b.n	8007198 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2224      	movs	r2, #36	; 0x24
 8007148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f811 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071c0:	e031      	b.n	8007226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071c2:	2310      	movs	r3, #16
 80071c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071c6:	2310      	movs	r3, #16
 80071c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0e5b      	lsrs	r3, r3, #25
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	0f5b      	lsrs	r3, r3, #29
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	7b3a      	ldrb	r2, [r7, #12]
 80071ee:	4911      	ldr	r1, [pc, #68]	; (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 80071f0:	5c8a      	ldrb	r2, [r1, r2]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071f6:	7b3a      	ldrb	r2, [r7, #12]
 80071f8:	490f      	ldr	r1, [pc, #60]	; (8007238 <UARTEx_SetNbDataToProcess+0x98>)
 80071fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	7b7a      	ldrb	r2, [r7, #13]
 800720c:	4909      	ldr	r1, [pc, #36]	; (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 800720e:	5c8a      	ldrb	r2, [r1, r2]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	4908      	ldr	r1, [pc, #32]	; (8007238 <UARTEx_SetNbDataToProcess+0x98>)
 8007218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800721a:	fb93 f3f2 	sdiv	r3, r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	08007a28 	.word	0x08007a28
 8007238:	08007a30 	.word	0x08007a30

0800723c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f107 001c 	add.w	r0, r7, #28
 800724a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d120      	bne.n	8007296 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	4b2a      	ldr	r3, [pc, #168]	; (8007310 <USB_CoreInit+0xd4>)
 8007266:	4013      	ands	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa60 	bl	8007750 <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
 8007294:	e01a      	b.n	80072cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa54 	bl	8007750 <USB_CoreReset>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
 80072be:	e005      	b.n	80072cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d116      	bne.n	8007300 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072e0:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <USB_CoreInit+0xd8>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f043 0206 	orr.w	r2, r3, #6
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f043 0220 	orr.w	r2, r3, #32
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800730c:	b004      	add	sp, #16
 800730e:	4770      	bx	lr
 8007310:	ffbdffbf 	.word	0xffbdffbf
 8007314:	03ee0000 	.word	0x03ee0000

08007318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f023 0201 	bic.w	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d106      	bne.n	8007366 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	e00b      	b.n	800737e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e001      	b.n	800737e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e003      	b.n	8007386 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800737e:	2032      	movs	r0, #50	; 0x32
 8007380:	f7fa f954 	bl	800162c <HAL_Delay>

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007390:	b084      	sub	sp, #16
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800739e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e009      	b.n	80073c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3340      	adds	r3, #64	; 0x40
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3301      	adds	r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b0e      	cmp	r3, #14
 80073c8:	d9f2      	bls.n	80073b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11c      	bne.n	800740a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073de:	f043 0302 	orr.w	r3, r3, #2
 80073e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e005      	b.n	8007416 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	4619      	mov	r1, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007430:	461a      	mov	r2, r3
 8007432:	680b      	ldr	r3, [r1, #0]
 8007434:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10c      	bne.n	8007456 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007442:	2100      	movs	r1, #0
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f949 	bl	80076dc <USB_SetDevSpeed>
 800744a:	e008      	b.n	800745e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800744c:	2101      	movs	r1, #1
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f944 	bl	80076dc <USB_SetDevSpeed>
 8007454:	e003      	b.n	800745e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007456:	2103      	movs	r1, #3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f93f 	bl	80076dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800745e:	2110      	movs	r1, #16
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f8f3 	bl	800764c <USB_FlushTxFifo>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f911 	bl	8007698 <USB_FlushRxFifo>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	461a      	mov	r2, r3
 8007488:	2300      	movs	r3, #0
 800748a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	461a      	mov	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	e043      	b.n	8007532 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c0:	d118      	bne.n	80074f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d4:	461a      	mov	r2, r3
 80074d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e013      	b.n	8007506 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	461a      	mov	r2, r3
 80074ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e008      	b.n	8007506 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	461a      	mov	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007524:	461a      	mov	r2, r3
 8007526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800752a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d3b7      	bcc.n	80074aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	e043      	b.n	80075c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007556:	d118      	bne.n	800758a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	461a      	mov	r2, r3
 800756c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e013      	b.n	800759c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	461a      	mov	r2, r3
 8007582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e008      	b.n	800759c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	461a      	mov	r2, r3
 8007598:	2300      	movs	r3, #0
 800759a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	461a      	mov	r2, r3
 80075aa:	2300      	movs	r3, #0
 80075ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ba:	461a      	mov	r2, r3
 80075bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d3b7      	bcc.n	8007540 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f043 0210 	orr.w	r2, r3, #16
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <USB_DevInit+0x2b4>)
 800760a:	4313      	orrs	r3, r2
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f043 0208 	orr.w	r2, r3, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d105      	bne.n	8007634 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <USB_DevInit+0x2b8>)
 800762e:	4313      	orrs	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007640:	b004      	add	sp, #16
 8007642:	4770      	bx	lr
 8007644:	803c3800 	.word	0x803c3800
 8007648:	40000004 	.word	0x40000004

0800764c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	019b      	lsls	r3, r3, #6
 800765e:	f043 0220 	orr.w	r2, r3, #32
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <USB_FlushTxFifo+0x48>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d901      	bls.n	8007678 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e006      	b.n	8007686 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b20      	cmp	r3, #32
 8007682:	d0f0      	beq.n	8007666 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	00030d40 	.word	0x00030d40

08007698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2210      	movs	r2, #16
 80076a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <USB_FlushRxFifo+0x40>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d901      	bls.n	80076bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e006      	b.n	80076ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d0f0      	beq.n	80076aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	00030d40 	.word	0x00030d40

080076dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fc:	4313      	orrs	r3, r2
 80076fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007728:	f023 0303 	bic.w	r3, r3, #3
 800772c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <USB_CoreReset+0x64>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e01b      	b.n	80077a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	daf2      	bge.n	800775c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f043 0201 	orr.w	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a09      	ldr	r2, [pc, #36]	; (80077b4 <USB_CoreReset+0x64>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d901      	bls.n	8007798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e006      	b.n	80077a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d0f0      	beq.n	8007786 <USB_CoreReset+0x36>

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	00030d40 	.word	0x00030d40

080077b8 <_Znwj>:
 80077b8:	2801      	cmp	r0, #1
 80077ba:	bf38      	it	cc
 80077bc:	2001      	movcc	r0, #1
 80077be:	b510      	push	{r4, lr}
 80077c0:	4604      	mov	r4, r0
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 f844 	bl	8007850 <malloc>
 80077c8:	b930      	cbnz	r0, 80077d8 <_Znwj+0x20>
 80077ca:	f000 f807 	bl	80077dc <_ZSt15get_new_handlerv>
 80077ce:	b908      	cbnz	r0, 80077d4 <_Znwj+0x1c>
 80077d0:	f000 f80c 	bl	80077ec <abort>
 80077d4:	4780      	blx	r0
 80077d6:	e7f4      	b.n	80077c2 <_Znwj+0xa>
 80077d8:	bd10      	pop	{r4, pc}
	...

080077dc <_ZSt15get_new_handlerv>:
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <_ZSt15get_new_handlerv+0xc>)
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	f3bf 8f5b 	dmb	ish
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200006f8 	.word	0x200006f8

080077ec <abort>:
 80077ec:	b508      	push	{r3, lr}
 80077ee:	2006      	movs	r0, #6
 80077f0:	f000 f8d0 	bl	8007994 <raise>
 80077f4:	2001      	movs	r0, #1
 80077f6:	f7f9 fd91 	bl	800131c <_exit>
	...

080077fc <__errno>:
 80077fc:	4b01      	ldr	r3, [pc, #4]	; (8007804 <__errno+0x8>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000010 	.word	0x20000010

08007808 <__libc_init_array>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4d0d      	ldr	r5, [pc, #52]	; (8007840 <__libc_init_array+0x38>)
 800780c:	4c0d      	ldr	r4, [pc, #52]	; (8007844 <__libc_init_array+0x3c>)
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	2600      	movs	r6, #0
 8007814:	42a6      	cmp	r6, r4
 8007816:	d109      	bne.n	800782c <__libc_init_array+0x24>
 8007818:	4d0b      	ldr	r5, [pc, #44]	; (8007848 <__libc_init_array+0x40>)
 800781a:	4c0c      	ldr	r4, [pc, #48]	; (800784c <__libc_init_array+0x44>)
 800781c:	f000 f8e4 	bl	80079e8 <_init>
 8007820:	1b64      	subs	r4, r4, r5
 8007822:	10a4      	asrs	r4, r4, #2
 8007824:	2600      	movs	r6, #0
 8007826:	42a6      	cmp	r6, r4
 8007828:	d105      	bne.n	8007836 <__libc_init_array+0x2e>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007830:	4798      	blx	r3
 8007832:	3601      	adds	r6, #1
 8007834:	e7ee      	b.n	8007814 <__libc_init_array+0xc>
 8007836:	f855 3b04 	ldr.w	r3, [r5], #4
 800783a:	4798      	blx	r3
 800783c:	3601      	adds	r6, #1
 800783e:	e7f2      	b.n	8007826 <__libc_init_array+0x1e>
 8007840:	08007a40 	.word	0x08007a40
 8007844:	08007a40 	.word	0x08007a40
 8007848:	08007a40 	.word	0x08007a40
 800784c:	08007a48 	.word	0x08007a48

08007850 <malloc>:
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <malloc+0xc>)
 8007852:	4601      	mov	r1, r0
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f000 b80b 	b.w	8007870 <_malloc_r>
 800785a:	bf00      	nop
 800785c:	20000010 	.word	0x20000010

08007860 <memset>:
 8007860:	4402      	add	r2, r0
 8007862:	4603      	mov	r3, r0
 8007864:	4293      	cmp	r3, r2
 8007866:	d100      	bne.n	800786a <memset+0xa>
 8007868:	4770      	bx	lr
 800786a:	f803 1b01 	strb.w	r1, [r3], #1
 800786e:	e7f9      	b.n	8007864 <memset+0x4>

08007870 <_malloc_r>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	1ccd      	adds	r5, r1, #3
 8007874:	f025 0503 	bic.w	r5, r5, #3
 8007878:	3508      	adds	r5, #8
 800787a:	2d0c      	cmp	r5, #12
 800787c:	bf38      	it	cc
 800787e:	250c      	movcc	r5, #12
 8007880:	2d00      	cmp	r5, #0
 8007882:	4606      	mov	r6, r0
 8007884:	db01      	blt.n	800788a <_malloc_r+0x1a>
 8007886:	42a9      	cmp	r1, r5
 8007888:	d903      	bls.n	8007892 <_malloc_r+0x22>
 800788a:	230c      	movs	r3, #12
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	2000      	movs	r0, #0
 8007890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007892:	f000 f89b 	bl	80079cc <__malloc_lock>
 8007896:	4921      	ldr	r1, [pc, #132]	; (800791c <_malloc_r+0xac>)
 8007898:	680a      	ldr	r2, [r1, #0]
 800789a:	4614      	mov	r4, r2
 800789c:	b99c      	cbnz	r4, 80078c6 <_malloc_r+0x56>
 800789e:	4f20      	ldr	r7, [pc, #128]	; (8007920 <_malloc_r+0xb0>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b923      	cbnz	r3, 80078ae <_malloc_r+0x3e>
 80078a4:	4621      	mov	r1, r4
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 f83c 	bl	8007924 <_sbrk_r>
 80078ac:	6038      	str	r0, [r7, #0]
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 f837 	bl	8007924 <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d123      	bne.n	8007902 <_malloc_r+0x92>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f88a 	bl	80079d8 <__malloc_unlock>
 80078c4:	e7e3      	b.n	800788e <_malloc_r+0x1e>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	1b5b      	subs	r3, r3, r5
 80078ca:	d417      	bmi.n	80078fc <_malloc_r+0x8c>
 80078cc:	2b0b      	cmp	r3, #11
 80078ce:	d903      	bls.n	80078d8 <_malloc_r+0x68>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	441c      	add	r4, r3
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	e004      	b.n	80078e2 <_malloc_r+0x72>
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	42a2      	cmp	r2, r4
 80078dc:	bf0c      	ite	eq
 80078de:	600b      	streq	r3, [r1, #0]
 80078e0:	6053      	strne	r3, [r2, #4]
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f878 	bl	80079d8 <__malloc_unlock>
 80078e8:	f104 000b 	add.w	r0, r4, #11
 80078ec:	1d23      	adds	r3, r4, #4
 80078ee:	f020 0007 	bic.w	r0, r0, #7
 80078f2:	1ac2      	subs	r2, r0, r3
 80078f4:	d0cc      	beq.n	8007890 <_malloc_r+0x20>
 80078f6:	1a1b      	subs	r3, r3, r0
 80078f8:	50a3      	str	r3, [r4, r2]
 80078fa:	e7c9      	b.n	8007890 <_malloc_r+0x20>
 80078fc:	4622      	mov	r2, r4
 80078fe:	6864      	ldr	r4, [r4, #4]
 8007900:	e7cc      	b.n	800789c <_malloc_r+0x2c>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d0e3      	beq.n	80078d4 <_malloc_r+0x64>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4630      	mov	r0, r6
 8007910:	f000 f808 	bl	8007924 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d1dd      	bne.n	80078d4 <_malloc_r+0x64>
 8007918:	e7cf      	b.n	80078ba <_malloc_r+0x4a>
 800791a:	bf00      	nop
 800791c:	200006fc 	.word	0x200006fc
 8007920:	20000700 	.word	0x20000700

08007924 <_sbrk_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_sbrk_r+0x1c>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 fcfe 	bl	8001330 <_sbrk>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_sbrk_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_sbrk_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20000708 	.word	0x20000708

08007944 <_raise_r>:
 8007944:	291f      	cmp	r1, #31
 8007946:	b538      	push	{r3, r4, r5, lr}
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	d904      	bls.n	8007958 <_raise_r+0x14>
 800794e:	2316      	movs	r3, #22
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800795a:	b112      	cbz	r2, 8007962 <_raise_r+0x1e>
 800795c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007960:	b94b      	cbnz	r3, 8007976 <_raise_r+0x32>
 8007962:	4620      	mov	r0, r4
 8007964:	f000 f830 	bl	80079c8 <_getpid_r>
 8007968:	462a      	mov	r2, r5
 800796a:	4601      	mov	r1, r0
 800796c:	4620      	mov	r0, r4
 800796e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007972:	f000 b817 	b.w	80079a4 <_kill_r>
 8007976:	2b01      	cmp	r3, #1
 8007978:	d00a      	beq.n	8007990 <_raise_r+0x4c>
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	d103      	bne.n	8007986 <_raise_r+0x42>
 800797e:	2316      	movs	r3, #22
 8007980:	6003      	str	r3, [r0, #0]
 8007982:	2001      	movs	r0, #1
 8007984:	e7e7      	b.n	8007956 <_raise_r+0x12>
 8007986:	2400      	movs	r4, #0
 8007988:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800798c:	4628      	mov	r0, r5
 800798e:	4798      	blx	r3
 8007990:	2000      	movs	r0, #0
 8007992:	e7e0      	b.n	8007956 <_raise_r+0x12>

08007994 <raise>:
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <raise+0xc>)
 8007996:	4601      	mov	r1, r0
 8007998:	6818      	ldr	r0, [r3, #0]
 800799a:	f7ff bfd3 	b.w	8007944 <_raise_r>
 800799e:	bf00      	nop
 80079a0:	20000010 	.word	0x20000010

080079a4 <_kill_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d07      	ldr	r5, [pc, #28]	; (80079c4 <_kill_r+0x20>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	4611      	mov	r1, r2
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	f7f9 fca3 	bl	80012fc <_kill>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d102      	bne.n	80079c0 <_kill_r+0x1c>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b103      	cbz	r3, 80079c0 <_kill_r+0x1c>
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	bd38      	pop	{r3, r4, r5, pc}
 80079c2:	bf00      	nop
 80079c4:	20000708 	.word	0x20000708

080079c8 <_getpid_r>:
 80079c8:	f7f9 bc90 	b.w	80012ec <_getpid>

080079cc <__malloc_lock>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__malloc_lock+0x8>)
 80079ce:	f000 b809 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 80079d2:	bf00      	nop
 80079d4:	20000710 	.word	0x20000710

080079d8 <__malloc_unlock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__malloc_unlock+0x8>)
 80079da:	f000 b804 	b.w	80079e6 <__retarget_lock_release_recursive>
 80079de:	bf00      	nop
 80079e0:	20000710 	.word	0x20000710

080079e4 <__retarget_lock_acquire_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_release_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
