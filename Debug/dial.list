
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007878  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08007bd0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08007c30  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000134  08007c90  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007c90  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f404  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044bb  00000000  00000000  0004f566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00053a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00055030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb1c  00000000  00000000  00056500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2bc  00000000  00000000  0009301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016db4c  00000000  00000000  000ad2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021ae24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e4  00000000  00000000  0021ae78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000134 	.word	0x20000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007af8 	.word	0x08007af8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000138 	.word	0x20000138
 80002d4:	08007af8 	.word	0x08007af8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	705a      	strb	r2, [r3, #1]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_ZNSt4Dial14CalculateStepsE9Directionhh>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	4608      	mov	r0, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	461a      	mov	r2, r3
 8000600:	4603      	mov	r3, r0
 8000602:	70fb      	strb	r3, [r7, #3]
 8000604:	460b      	mov	r3, r1
 8000606:	70bb      	strb	r3, [r7, #2]
 8000608:	4613      	mov	r3, r2
 800060a:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	787a      	ldrb	r2, [r7, #1]
 8000610:	705a      	strb	r2, [r3, #1]
   int m_dial_temp = 0; // Temporary location to collect dial displacement
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d105      	bne.n	8000628 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x36>
 800061c:	787b      	ldrb	r3, [r7, #1]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e005      	b.n	8000634 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x42>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	da02      	bge.n	8000640 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x4e>
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3364      	adds	r3, #100	; 0x64
 800063e:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 8000640:	78ba      	ldrb	r2, [r7, #2]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	015b      	lsls	r3, r3, #5

}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZNSt4Dial14UpdatePositionEh>:

void Dial::UpdatePosition(uint8_t new_position){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
   m_dial_location = new_position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	78fa      	ldrb	r2, [r7, #3]
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]

}
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	715a      	strb	r2, [r3, #5]
   }
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f022 0201 	bic.w	r2, r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	711a      	strb	r2, [r3, #4]

}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4613      	mov	r3, r2
 8000714:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2201      	movs	r2, #1
 8000726:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 800072e:	2301      	movs	r3, #1
 8000730:	75fb      	strb	r3, [r7, #23]
 8000732:	e001      	b.n	8000738 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	461a      	mov	r2, r3
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 8000742:	f001 ff15 	bl	8002570 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f042 0201 	orr.w	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	58020800 	.word	0x58020800

0800076c <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
   return m_status;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	795b      	ldrb	r3, [r3, #5]
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80007a2:	f000 ff39 	bl	8001618 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 80007a6:	f000 f835 	bl	8000814 <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 80007aa:	f000 fa3f 	bl	8000c2c <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 80007ae:	f000 f8bf 	bl	8000930 <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 80007b2:	f000 f9a5 	bl	8000b00 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 80007b6:	f000 fa03 	bl	8000bc0 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 80007ba:	f000 f911 	bl	80009e0 <_ZL12MX_TIM3_Initv>
   /* USER CODE BEGIN 2 */

   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80007be:	2108      	movs	r1, #8
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <main+0x70>)
 80007c2:	f004 fc37 	bl	8005034 <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN);
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <main+0x74>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <main+0x74>)
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6013      	str	r3, [r2, #0]

   /* USER CODE END 2 */

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   int newnum = 90;
 80007d2:	235a      	movs	r3, #90	; 0x5a
 80007d4:	607b      	str	r3, [r7, #4]
   enum Direction dir = CW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	70fb      	strb	r3, [r7, #3]
   while (1) {

      // Routine to demo stepper control
      Move_Stepper(dir, 0, newnum);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb37 	bl	8000e54 <_Z12Move_Stepper9Directionii>

      if (newnum > 0) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dd03      	ble.n	80007f4 <main+0x58>
         newnum -= 10;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b0a      	subs	r3, #10
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	e7f2      	b.n	80007da <main+0x3e>
      } else {
         newnum = 90;
 80007f4:	235a      	movs	r3, #90	; 0x5a
 80007f6:	607b      	str	r3, [r7, #4]
         if (dir == CCW) {
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d102      	bne.n	8000804 <main+0x68>
            dir = CW;
 80007fe:	2300      	movs	r3, #0
 8000800:	70fb      	strb	r3, [r7, #3]
 8000802:	e7ea      	b.n	80007da <main+0x3e>
         } else
            (dir = CCW);
 8000804:	2301      	movs	r3, #1
 8000806:	70fb      	strb	r3, [r7, #3]
      Move_Stepper(dir, 0, newnum);
 8000808:	e7e7      	b.n	80007da <main+0x3e>
 800080a:	bf00      	nop
 800080c:	2000020c 	.word	0x2000020c
 8000810:	40000400 	.word	0x40000400

08000814 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f8a4 	bl	8007970 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 f89e 	bl	8007970 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000834:	2002      	movs	r0, #2
 8000836:	f001 fffd 	bl	8002834 <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <_Z18SystemClock_Configv+0x114>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	4a39      	ldr	r2, [pc, #228]	; (8000928 <_Z18SystemClock_Configv+0x114>)
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <_Z18SystemClock_Configv+0x114>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b35      	ldr	r3, [pc, #212]	; (800092c <_Z18SystemClock_Configv+0x118>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a33      	ldr	r2, [pc, #204]	; (800092c <_Z18SystemClock_Configv+0x118>)
 800085e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <_Z18SystemClock_Configv+0x118>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <_Z18SystemClock_Configv+0x118>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d000      	beq.n	800088a <_Z18SystemClock_Configv+0x76>
 8000888:	e7f2      	b.n	8000870 <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800088a:	2303      	movs	r3, #3
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000894:	2301      	movs	r3, #1
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 80008a8:	2318      	movs	r3, #24
 80008aa:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b8:	230c      	movs	r3, #12
 80008ba:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008bc:	2300      	movs	r3, #0
 80008be:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fffd 	bl	80028c8 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 80008de:	f000 faf3 	bl	8000ec8 <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008e2:	233f      	movs	r3, #63	; 0x3f
 80008e4:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fbee 	bl	80030e8 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 800091c:	f000 fad4 	bl	8000ec8 <Error_Handler>
   }
}
 8000920:	bf00      	nop
 8000922:	3770      	adds	r7, #112	; 0x70
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58000400 	.word	0x58000400
 800092c:	58024800 	.word	0x58024800

08000930 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <_ZL11MX_ETH_Initv+0xa0>)
 8000938:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	3301      	adds	r3, #1
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	3302      	adds	r3, #2
 8000952:	22e1      	movs	r2, #225	; 0xe1
 8000954:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	3303      	adds	r3, #3
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	3305      	adds	r3, #5
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000976:	2201      	movs	r2, #1
 8000978:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 800097c:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <_ZL11MX_ETH_Initv+0xa4>)
 800097e:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <_ZL11MX_ETH_Initv+0xa8>)
 8000984:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000988:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800098c:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <_ZL11MX_ETH_Initv+0x9c>)
 8000990:	f001 f828 	bl	80019e4 <HAL_ETH_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	bf14      	ite	ne
 800099a:	2301      	movne	r3, #1
 800099c:	2300      	moveq	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 80009a4:	f000 fa90 	bl	8000ec8 <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80009a8:	2234      	movs	r2, #52	; 0x34
 80009aa:	2100      	movs	r1, #0
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <_ZL11MX_ETH_Initv+0xac>)
 80009ae:	f006 ffdf 	bl	8007970 <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <_ZL11MX_ETH_Initv+0xac>)
 80009b4:	2221      	movs	r2, #33	; 0x21
 80009b6:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_ZL11MX_ETH_Initv+0xac>)
 80009ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009be:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <_ZL11MX_ETH_Initv+0xac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000184 	.word	0x20000184
 80009d0:	40028000 	.word	0x40028000
 80009d4:	200000d4 	.word	0x200000d4
 80009d8:	20000074 	.word	0x20000074
 80009dc:	20000150 	.word	0x20000150

080009e0 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <_ZL12MX_TIM3_Initv+0x11c>)
 8000a16:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000a18:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a1a:	223f      	movs	r2, #63	; 0x3f
 8000a1c:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a1e:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000a24:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a26:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000a2a:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000a38:	482f      	ldr	r0, [pc, #188]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a3a:	f004 fa43 	bl	8004ec4 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000a4e:	f000 fa3b 	bl	8000ec8 <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4826      	ldr	r0, [pc, #152]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a60:	f004 fe66 	bl	8005730 <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000a74:	f000 fa28 	bl	8000ec8 <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000a78:	481f      	ldr	r0, [pc, #124]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000a7a:	f004 fa7a 	bl	8004f72 <HAL_TIM_PWM_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000a8e:	f000 fa1b 	bl	8000ec8 <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a92:	2320      	movs	r3, #32
 8000a94:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4815      	ldr	r0, [pc, #84]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000aa2:	f005 fb8d 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
         != HAL_OK) {
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf14      	ite	ne
 8000aac:	2301      	movne	r3, #1
 8000aae:	2300      	moveq	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000ab6:	f000 fa07 	bl	8000ec8 <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	; 0x60
 8000abc:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000abe:	2328      	movs	r3, #40	; 0x28
 8000ac0:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000aca:	463b      	mov	r3, r7
 8000acc:	2208      	movs	r2, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ad2:	f004 fd1d 	bl	8005510 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000ae6:	f000 f9ef 	bl	8000ec8 <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <_ZL12MX_TIM3_Initv+0x118>)
 8000aec:	f000 fb36 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	; 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000020c 	.word	0x2000020c
 8000afc:	40000400 	.word	0x40000400

08000b00 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b08:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b48:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b4a:	f005 fbdf 	bl	800630c <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8000b5e:	f000 f9b3 	bl	8000ec8 <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b66:	f006 fb27 	bl	80071b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8000b7a:	f000 f9a5 	bl	8000ec8 <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b82:	f006 fb57 	bl	8007234 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
         != HAL_OK) {
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8000b96:	f000 f997 	bl	8000ec8 <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b9c:	f006 fad3 	bl	8007146 <HAL_UARTEx_DisableFifoMode>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8000bb0:	f000 f98a 	bl	8000ec8 <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000258 	.word	0x20000258
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bcc:	2209      	movs	r2, #9
 8000bce:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c08:	f001 fccb 	bl	80025a2 <HAL_PCD_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8000c1c:	f000 f954 	bl	8000ec8 <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200002e8 	.word	0x200002e8
 8000c28:	40080000 	.word	0x40080000

08000c2c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a6a      	ldr	r2, [pc, #424]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b68      	ldr	r3, [pc, #416]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c60:	4b64      	ldr	r3, [pc, #400]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a63      	ldr	r2, [pc, #396]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a5b      	ldr	r2, [pc, #364]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b59      	ldr	r3, [pc, #356]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d1a:	4837      	ldr	r0, [pc, #220]	; (8000df8 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000d1c:	f001 fc28 	bl	8002570 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d26:	4835      	ldr	r0, [pc, #212]	; (8000dfc <_ZL12MX_GPIO_Initv+0x1d0>)
 8000d28:	f001 fc22 	bl	8002570 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d32:	4833      	ldr	r0, [pc, #204]	; (8000e00 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000d34:	f001 fc1c 	bl	8002570 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4831      	ldr	r0, [pc, #196]	; (8000e04 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000d3e:	f001 fc17 	bl	8002570 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	482a      	ldr	r0, [pc, #168]	; (8000e00 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000d58:	f001 fa5a 	bl	8002210 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000d5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d60:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000d76:	f001 fa4b 	bl	8002210 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	481a      	ldr	r0, [pc, #104]	; (8000dfc <_ZL12MX_GPIO_Initv+0x1d0>)
 8000d94:	f001 fa3c 	bl	8002210 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <_ZL12MX_GPIO_Initv+0x1dc>)
 8000d9e:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4818      	ldr	r0, [pc, #96]	; (8000e0c <_ZL12MX_GPIO_Initv+0x1e0>)
 8000dac:	f001 fa30 	bl	8002210 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8000db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db4:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000dca:	f001 fa21 	bl	8002210 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000de6:	f001 fa13 	bl	8002210 <HAL_GPIO_Init>

}
 8000dea:	bf00      	nop
 8000dec:	3730      	adds	r7, #48	; 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58020c00 	.word	0x58020c00
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58021000 	.word	0x58021000
 8000e08:	11110000 	.word	0x11110000
 8000e0c:	58021800 	.word	0x58021800

08000e10 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
   // Interrupt service routine for TIMER3
   // Counts pulses until the desired number have been sent
   // Then it disables the timer to end the output.
   Stepper->UpdateStep();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc40 	bl	80006a2 <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fcac 	bl	8000784 <_ZNSt12StepperMotor12MoveCompleteEv>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
      Stepper->Stop();
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fc44 	bl	80006ce <_ZNSt12StepperMotor4StopEv>
   }
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200006f0 	.word	0x200006f0

08000e54 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    *
    *
    */
   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <_Z12Move_Stepper9Directionii+0x6c>)
 8000e64:	681c      	ldr	r4, [r3, #0]
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <_Z12Move_Stepper9Directionii+0x70>)
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	7bf9      	ldrb	r1, [r7, #15]
 8000e74:	f7ff fbbd 	bl	80005f2 <_ZNSt4Dial14CalculateStepsE9Directionhh>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff fc42 	bl	8000708 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_Z12Move_Stepper9Directionii+0x6c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fc6f 	bl	800076c <_ZNSt12StepperMotor6StatusEv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d000      	beq.n	8000ea0 <_Z12Move_Stepper9Directionii+0x4c>
 8000e9e:	e7f1      	b.n	8000e84 <_Z12Move_Stepper9Directionii+0x30>
   } // Wait for move to finish

   // [TODO] Compare expected and measured positions here.

   Dial->UpdatePosition(next_number); // Expected and measured are in agreement.
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_Z12Move_Stepper9Directionii+0x70>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fbd2 	bl	8000654 <_ZNSt4Dial14UpdatePositionEh>
   HAL_Delay(DELAY_MS);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f000 fc42 	bl	800173c <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	200006f0 	.word	0x200006f0
 8000ec4:	200006f4 	.word	0x200006f4

08000ec8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d119      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d114      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 8000eee:	200c      	movs	r0, #12
 8000ef0:	f006 fcea 	bl	80078c8 <_Znwj>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	4909      	ldr	r1, [pc, #36]	; (8000f20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fbb9 	bl	8000672 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000f02:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 8000f04:	2002      	movs	r0, #2
 8000f06:	f006 fcdf 	bl	80078c8 <_Znwj>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461c      	mov	r4, r3
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fb5e 	bl	80005d0 <_ZNSt4DialC1Ev>
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000f16:	601c      	str	r4, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	40000400 	.word	0x40000400
 8000f24:	200006f0 	.word	0x200006f0
 8000f28:	200006f4 	.word	0x200006f4

08000f2c <_GLOBAL__sub_I_DMARxDscrTab>:
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff ffcd 	bl	8000ed4 <_Z41__static_initialization_and_destruction_0ii>
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x30>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x30>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	58024400 	.word	0x58024400

08000f70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a59      	ldr	r2, [pc, #356]	; (80010f4 <HAL_ETH_MspInit+0x184>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	f040 80ab 	bne.w	80010ea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f94:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9a:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa4:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fb2:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc2:	4b4d      	ldr	r3, [pc, #308]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd6:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fe0:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 8001050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_ETH_MspInit+0x188>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001066:	2332      	movs	r3, #50	; 0x32
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001076:	230b      	movs	r3, #11
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <HAL_ETH_MspInit+0x18c>)
 8001082:	f001 f8c5 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001086:	2386      	movs	r3, #134	; 0x86
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4817      	ldr	r0, [pc, #92]	; (8001100 <HAL_ETH_MspInit+0x190>)
 80010a2:	f001 f8b5 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <HAL_ETH_MspInit+0x194>)
 80010c4:	f001 f8a4 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010da:	230b      	movs	r3, #11
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <HAL_ETH_MspInit+0x198>)
 80010e6:	f001 f893 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3738      	adds	r7, #56	; 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40028000 	.word	0x40028000
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020800 	.word	0x58020800
 8001100:	58020000 	.word	0x58020000
 8001104:	58020400 	.word	0x58020400
 8001108:	58021800 	.word	0x58021800

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d116      	bne.n	800114c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_TIM_Base_MspInit+0x4c>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_TIM_Base_MspInit+0x4c>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_TIM_Base_MspInit+0x4c>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	201d      	movs	r0, #29
 8001142:	f000 fc1a 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001146:	201d      	movs	r0, #29
 8001148:	f000 fc31 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40000400 	.word	0x40000400
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_TIM_MspPostInit+0x6c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11f      	bne.n	80011be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_TIM_MspPostInit+0x74>)
 80011ba:	f001 f829 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40000400 	.word	0x40000400
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020800 	.word	0x58020800

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0b8      	sub	sp, #224	; 0xe0
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	22bc      	movs	r2, #188	; 0xbc
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f006 fbbb 	bl	8007970 <memset>
  if(huart->Instance==USART3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a25      	ldr	r2, [pc, #148]	; (8001294 <HAL_UART_MspInit+0xc0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d142      	bne.n	800128a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001204:	2302      	movs	r3, #2
 8001206:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4618      	mov	r0, r3
 8001214:	f002 faf4 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800121e:	f7ff fe53 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_UART_MspInit+0xc4>)
 8001224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_UART_MspInit+0xc4>)
 800122a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_UART_MspInit+0xc4>)
 8001234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_UART_MspInit+0xc4>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_UART_MspInit+0xc4>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0xc4>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800125e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_MspInit+0xc8>)
 8001286:	f000 ffc3 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	37e0      	adds	r7, #224	; 0xe0
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004800 	.word	0x40004800
 8001298:	58024400 	.word	0x58024400
 800129c:	58020c00 	.word	0x58020c00

080012a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0b8      	sub	sp, #224	; 0xe0
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	22bc      	movs	r2, #188	; 0xbc
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fb55 	bl	8007970 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_PCD_MspInit+0xe8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d156      	bne.n	800137e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fa8c 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80012ee:	f7ff fdeb 	bl	8000ec8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012f2:	f001 fad9 	bl	80028a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_PCD_MspInit+0xec>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_PCD_MspInit+0xec>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_PCD_MspInit+0xec>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001314:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800132e:	230a      	movs	r3, #10
 8001330:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001338:	4619      	mov	r1, r3
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <HAL_PCD_MspInit+0xf0>)
 800133c:	f000 ff68 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <HAL_PCD_MspInit+0xf0>)
 800135c:	f000 ff58 	bl	8002210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_PCD_MspInit+0xec>)
 8001362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_PCD_MspInit+0xec>)
 8001368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800136c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_PCD_MspInit+0xec>)
 8001372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	37e0      	adds	r7, #224	; 0xe0
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40080000 	.word	0x40080000
 800138c:	58024400 	.word	0x58024400
 8001390:	58020000 	.word	0x58020000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f98c 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM3_IRQHandler+0x10>)
 80013ee:	f003 ff6f 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000020c 	.word	0x2000020c

080013fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_kill>:

int _kill(int pid, int sig)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001416:	f006 fa79 	bl	800790c <__errno>
 800141a:	4603      	mov	r3, r0
 800141c:	2216      	movs	r2, #22
 800141e:	601a      	str	r2, [r3, #0]
	return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_exit>:

void _exit (int status)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffe7 	bl	800140c <_kill>
	while (1) {}		/* Make sure we hang here */
 800143e:	e7fe      	b.n	800143e <_exit+0x12>

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f006 fa4c 	bl	800790c <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20020000 	.word	0x20020000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	200006f8 	.word	0x200006f8
 80014a8:	20000720 	.word	0x20000720

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <SystemInit+0xec>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <SystemInit+0xec>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <SystemInit+0xf0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d807      	bhi.n	80014dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <SystemInit+0xf0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 030f 	bic.w	r3, r3, #15
 80014d4:	4a31      	ldr	r2, [pc, #196]	; (800159c <SystemInit+0xf0>)
 80014d6:	f043 0307 	orr.w	r3, r3, #7
 80014da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <SystemInit+0xf4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <SystemInit+0xf4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <SystemInit+0xf4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <SystemInit+0xf4>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	492b      	ldr	r1, [pc, #172]	; (80015a0 <SystemInit+0xf4>)
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <SystemInit+0xf8>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <SystemInit+0xf0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <SystemInit+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 030f 	bic.w	r3, r3, #15
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <SystemInit+0xf0>)
 8001510:	f043 0307 	orr.w	r3, r3, #7
 8001514:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <SystemInit+0xf4>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <SystemInit+0xf4>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <SystemInit+0xf4>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <SystemInit+0xf4>)
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <SystemInit+0xfc>)
 800152c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <SystemInit+0xf4>)
 8001530:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <SystemInit+0x100>)
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <SystemInit+0xf4>)
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <SystemInit+0x104>)
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <SystemInit+0xf4>)
 800153c:	2200      	movs	r2, #0
 800153e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <SystemInit+0xf4>)
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <SystemInit+0x104>)
 8001544:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <SystemInit+0xf4>)
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <SystemInit+0xf4>)
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <SystemInit+0x104>)
 8001550:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <SystemInit+0xf4>)
 8001554:	2200      	movs	r2, #0
 8001556:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <SystemInit+0xf4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <SystemInit+0xf4>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <SystemInit+0xf4>)
 8001566:	2200      	movs	r2, #0
 8001568:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <SystemInit+0x108>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0x10c>)
 8001570:	4013      	ands	r3, r2
 8001572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001576:	d202      	bcs.n	800157e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <SystemInit+0x110>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <SystemInit+0x114>)
 8001580:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001584:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0xec>)
 8001588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	52002000 	.word	0x52002000
 80015a0:	58024400 	.word	0x58024400
 80015a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015a8:	02020200 	.word	0x02020200
 80015ac:	01ff0000 	.word	0x01ff0000
 80015b0:	01010280 	.word	0x01010280
 80015b4:	5c001000 	.word	0x5c001000
 80015b8:	ffff0000 	.word	0xffff0000
 80015bc:	51008108 	.word	0x51008108
 80015c0:	52004000 	.word	0x52004000

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c8:	f7ff ff70 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f006 f991 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f8d1 	bl	800079c <main>
  bx  lr
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001608:	08007b5c 	.word	0x08007b5c
  ldr r2, =_sbss
 800160c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001610:	2000071c 	.word	0x2000071c

08001614 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC3_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f9a0 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001624:	f001 ff16 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <HAL_Init+0x6c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_Init+0x6c>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x70>)
 800165a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f814 	bl	8001690 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e002      	b.n	8001678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fc63 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	08007b10 	.word	0x08007b10
 8001688:	20000004 	.word	0x20000004
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_InitTick+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e021      	b.n	80016e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_InitTick+0x64>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_InitTick+0x60>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f985 	bl	80019ca <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	f000 f94f 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x68>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000708 	.word	0x20000708

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000708 	.word	0x20000708

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000000c 	.word	0x2000000c

08001784 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetREVID+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1b      	lsrs	r3, r3, #16
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	5c001000 	.word	0x5c001000

0800179c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017ac:	4904      	ldr	r1, [pc, #16]	; (80017c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	58000400 	.word	0x58000400

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	05fa0000 	.word	0x05fa0000

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff40 	bl	800180c <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff33 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa4 	bl	8001920 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c6      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fab6 	bl	8000f70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2223      	movs	r2, #35	; 0x23
 8001a08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a10:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_ETH_Init+0x1a8>)
 8001a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff feb3 	bl	800179c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a36:	e003      	b.n	8001a40 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a3c:	f7ff feae 	bl	800179c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fe64 	bl	8001724 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a5e:	e00f      	b.n	8001a80 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a60:	f7ff fe60 	bl	8001724 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a6e:	d907      	bls.n	8001a80 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	22e0      	movs	r2, #224	; 0xe0
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e081      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e6      	bne.n	8001a60 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fac0 	bl	8002018 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a98:	f001 fe56 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <HAL_ETH_Init+0x1ac>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9a      	lsrs	r2, r3, #18
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa13 	bl	8001edc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001acc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	22e0      	movs	r2, #224	; 0xe0
 8001ae8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e04a      	b.n	8001b84 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001af6:	4413      	add	r3, r2
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_ETH_Init+0x1b0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6952      	ldr	r2, [r2, #20]
 8001b02:	0052      	lsls	r2, r2, #1
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b0e:	440b      	add	r3, r1
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fad8 	bl	80020c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fb1c 	bl	8002156 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	3305      	adds	r3, #5
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	021a      	lsls	r2, r3, #8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	3303      	adds	r3, #3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	061a      	lsls	r2, r3, #24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	ffff8001 	.word	0xffff8001

08001b98 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001baa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001bb2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	7b5b      	ldrb	r3, [r3, #13]
 8001bc0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bc2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7b9b      	ldrb	r3, [r3, #14]
 8001bc8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7bdb      	ldrb	r3, [r3, #15]
 8001bd0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bd2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	7c12      	ldrb	r2, [r2, #16]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0x4a>
 8001bdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x4c>
 8001be2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001be4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	7c52      	ldrb	r2, [r2, #17]
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d102      	bne.n	8001bf4 <ETH_SetMACConfig+0x5c>
 8001bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf2:	e000      	b.n	8001bf6 <ETH_SetMACConfig+0x5e>
 8001bf4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bf6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	7c9b      	ldrb	r3, [r3, #18]
 8001bfc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bfe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c04:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001c0a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	7f1b      	ldrb	r3, [r3, #28]
 8001c10:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c12:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7f5b      	ldrb	r3, [r3, #29]
 8001c18:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c1a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	7f92      	ldrb	r2, [r2, #30]
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d102      	bne.n	8001c2a <ETH_SetMACConfig+0x92>
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0x94>
 8001c2a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c2c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7fdb      	ldrb	r3, [r3, #31]
 8001c32:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c34:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d102      	bne.n	8001c46 <ETH_SetMACConfig+0xae>
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	e000      	b.n	8001c48 <ETH_SetMACConfig+0xb0>
 8001c46:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c48:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c4e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c56:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c58:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <ETH_SetMACConfig+0x22c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c84:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c8e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c96:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c98:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d102      	bne.n	8001caa <ETH_SetMACConfig+0x112>
 8001ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x114>
 8001caa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001cac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <ETH_SetMACConfig+0x230>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <ETH_SetMACConfig+0x234>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cf4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cfa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d101      	bne.n	8001d0a <ETH_SetMACConfig+0x172>
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	e000      	b.n	8001d0c <ETH_SetMACConfig+0x174>
 8001d0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d0c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f023 0103 	bic.w	r1, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d101      	bne.n	8001d86 <ETH_SetMACConfig+0x1ee>
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	e000      	b.n	8001d88 <ETH_SetMACConfig+0x1f0>
 8001d86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d88:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d92:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001da8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	00048083 	.word	0x00048083
 8001dc8:	c0f88000 	.word	0xc0f88000
 8001dcc:	fffffef0 	.word	0xfffffef0

08001dd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <ETH_SetDMAConfig+0xf8>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
 8001e08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e16:	4413      	add	r3, r2
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <ETH_SetDMAConfig+0xfc>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e2a:	440b      	add	r3, r1
 8001e2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	7b5b      	ldrb	r3, [r3, #13]
 8001e32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <ETH_SetDMAConfig+0x100>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e56:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7d1b      	ldrb	r3, [r3, #20]
 8001e60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e62:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7f5b      	ldrb	r3, [r3, #29]
 8001e68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e76:	4413      	add	r3, r2
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <ETH_SetDMAConfig+0x104>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e8a:	440b      	add	r3, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <ETH_SetDMAConfig+0x108>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6811      	ldr	r1, [r2, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eb8:	440b      	add	r3, r1
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	ffff87fd 	.word	0xffff87fd
 8001ecc:	ffff2ffe 	.word	0xffff2ffe
 8001ed0:	fffec000 	.word	0xfffec000
 8001ed4:	ffc0efef 	.word	0xffc0efef
 8001ed8:	7fc0ffff 	.word	0x7fc0ffff

08001edc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0a4      	sub	sp, #144	; 0x90
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eea:	2300      	movs	r3, #0
 8001eec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f56:	2300      	movs	r3, #0
 8001f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f74:	2320      	movs	r3, #32
 8001f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fde6 	bl	8001b98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ffc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fee1 	bl	8001dd0 <ETH_SetDMAConfig>
}
 800200e:	bf00      	nop
 8002010:	3790      	adds	r7, #144	; 0x90
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002028:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002030:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002032:	f001 fb89 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8002036:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d908      	bls.n	8002052 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d804      	bhi.n	8002052 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e027      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d908      	bls.n	800206c <ETH_MAC_MDIO_ClkConfig+0x54>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d204      	bcs.n	800206c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e01a      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d303      	bcc.n	800207c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d911      	bls.n	80020a0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d908      	bls.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d804      	bhi.n	8002096 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e005      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e000      	b.n	80020a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80020a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	01312cff 	.word	0x01312cff
 80020b8:	02160ebf 	.word	0x02160ebf
 80020bc:	03938700 	.word	0x03938700
 80020c0:	05f5e0ff 	.word	0x05f5e0ff
 80020c4:	08f0d17f 	.word	0x08f0d17f

080020c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e01d      	b.n	8002112 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	3206      	adds	r2, #6
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d9de      	bls.n	80020d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f241 132c 	movw	r3, #4396	; 0x112c
 8002126:	4413      	add	r3, r2
 8002128:	2203      	movs	r2, #3
 800212a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f241 1314 	movw	r3, #4372	; 0x1114
 8002138:	4413      	add	r3, r2
 800213a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e024      	b.n	80021ae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3310      	adds	r3, #16
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d9d7      	bls.n	8002164 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f241 1330 	movw	r3, #4400	; 0x1130
 80021da:	4413      	add	r3, r2
 80021dc:	2203      	movs	r2, #3
 80021de:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80021ec:	4413      	add	r3, r2
 80021ee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002200:	4413      	add	r3, r2
 8002202:	6019      	str	r1, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_GPIO_Init+0x234>)
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002222:	e194      	b.n	800254e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8186 	beq.w	8002548 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d00b      	beq.n	800225c <HAL_GPIO_Init+0x4c>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d007      	beq.n	800225c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002250:	2b11      	cmp	r3, #17
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b12      	cmp	r3, #18
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0xee>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	69b9      	ldr	r1, [r7, #24]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80e0 	beq.w	8002548 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x238>)
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_GPIO_Init+0x238>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_GPIO_Init+0x238>)
 800239a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <HAL_GPIO_Init+0x23c>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x240>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d052      	beq.n	8002478 <HAL_GPIO_Init+0x268>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_GPIO_Init+0x244>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_GPIO_Init+0x248>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_GPIO_Init+0x24c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_GPIO_Init+0x250>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x258>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_GPIO_Init+0x25c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x260>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_GPIO_Init+0x264>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x20e>
 800241a:	2309      	movs	r3, #9
 800241c:	e02d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800241e:	230a      	movs	r3, #10
 8002420:	e02b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002422:	2308      	movs	r3, #8
 8002424:	e029      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002426:	2307      	movs	r3, #7
 8002428:	e027      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242a:	2306      	movs	r3, #6
 800242c:	e025      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242e:	2305      	movs	r3, #5
 8002430:	e023      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002432:	2304      	movs	r3, #4
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002436:	2303      	movs	r3, #3
 8002438:	e01f      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243a:	2302      	movs	r3, #2
 800243c:	e01d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243e:	2301      	movs	r3, #1
 8002440:	e01b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002442:	bf00      	nop
 8002444:	58000080 	.word	0x58000080
 8002448:	58024400 	.word	0x58024400
 800244c:	58000400 	.word	0x58000400
 8002450:	58020000 	.word	0x58020000
 8002454:	58020400 	.word	0x58020400
 8002458:	58020800 	.word	0x58020800
 800245c:	58020c00 	.word	0x58020c00
 8002460:	58021000 	.word	0x58021000
 8002464:	58021400 	.word	0x58021400
 8002468:	58021800 	.word	0x58021800
 800246c:	58021c00 	.word	0x58021c00
 8002470:	58022000 	.word	0x58022000
 8002474:	58022400 	.word	0x58022400
 8002478:	2300      	movs	r3, #0
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248a:	4938      	ldr	r1, [pc, #224]	; (800256c <HAL_GPIO_Init+0x35c>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f ae63 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3724      	adds	r7, #36	; 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58000400 	.word	0x58000400

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a4:	b08f      	sub	sp, #60	; 0x3c
 80025a6:	af0a      	add	r7, sp, #40	; 0x28
 80025a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e116      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fe66 	bl	80012a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 ff18 	bl	8007428 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	687e      	ldr	r6, [r7, #4]
 8002600:	466d      	mov	r5, sp
 8002602:	f106 0410 	add.w	r4, r6, #16
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002612:	e885 0003 	stmia.w	r5, {r0, r1}
 8002616:	1d33      	adds	r3, r6, #4
 8002618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f004 fe96 	bl	800734c <USB_CoreInit>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0d7      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f004 ff06 	bl	800744a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e04a      	b.n	80026da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	333d      	adds	r3, #61	; 0x3d
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	333c      	adds	r3, #60	; 0x3c
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	b298      	uxth	r0, r3
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3342      	adds	r3, #66	; 0x42
 8002680:	4602      	mov	r2, r0
 8002682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3344      	adds	r3, #68	; 0x44
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3348      	adds	r3, #72	; 0x48
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3350      	adds	r3, #80	; 0x50
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3301      	adds	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3af      	bcc.n	8002644 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e044      	b.n	8002774 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3301      	adds	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3b5      	bcc.n	80026ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	687e      	ldr	r6, [r7, #4]
 8002786:	466d      	mov	r5, sp
 8002788:	f106 0410 	add.w	r4, r6, #16
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002798:	e885 0003 	stmia.w	r5, {r0, r1}
 800279c:	1d33      	adds	r3, r6, #4
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f004 fe7d 	bl	80074a0 <USB_DevInit>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e014      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d102      	bne.n	80027d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f80b 	bl	80027ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 f81f 	bl	800781e <USB_DevDisconnect>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_PCDEx_ActivateLPM+0x44>)
 800281c:	4313      	orrs	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	10000003 	.word	0x10000003

08002834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_PWREx_ConfigSupply+0x70>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00a      	beq.n	800285e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_PWREx_ConfigSupply+0x70>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01f      	b.n	800289a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e01d      	b.n	800289a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	490f      	ldr	r1, [pc, #60]	; (80028a4 <HAL_PWREx_ConfigSupply+0x70>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800286e:	f7fe ff59 	bl	8001724 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002874:	e009      	b.n	800288a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002876:	f7fe ff55 	bl	8001724 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002884:	d901      	bls.n	800288a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e007      	b.n	800289a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_PWREx_ConfigSupply+0x70>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	d1ee      	bne.n	8002876 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	58024800 	.word	0x58024800

080028a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	58024800 	.word	0x58024800

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e3ff      	b.n	80030da <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8087 	beq.w	80029f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e8:	4b99      	ldr	r3, [pc, #612]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028f2:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d007      	beq.n	800290e <HAL_RCC_OscConfig+0x46>
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	2b18      	cmp	r3, #24
 8002902:	d110      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d10b      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x12c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d168      	bne.n	80029f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e3d9      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x76>
 8002930:	4b87      	ldr	r3, [pc, #540]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a86      	ldr	r2, [pc, #536]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e02e      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a81      	ldr	r2, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7e      	ldr	r2, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0xbc>
 800296a:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002984:	4b72      	ldr	r3, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a71      	ldr	r2, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe febe 	bl	8001724 <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe feba 	bl	8001724 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e38d      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xe4>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe feaa 	bl	8001724 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fea6 	bl	8001724 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e379      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e6:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80ae 	beq.w	8002b60 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4b52      	ldr	r3, [pc, #328]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_RCC_OscConfig+0x162>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	2b18      	cmp	r3, #24
 8002a1e:	d13a      	bne.n	8002a96 <HAL_RCC_OscConfig+0x1ce>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d135      	bne.n	8002a96 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x17a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e34b      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	f7fe fe9f 	bl	8001784 <HAL_GetREVID>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d817      	bhi.n	8002a80 <HAL_RCC_OscConfig+0x1b8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d108      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1a2>
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a60:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a68:	e07a      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	031b      	lsls	r3, r3, #12
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7e:	e06f      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	4930      	ldr	r1, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	e064      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d045      	beq.n	8002b2a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 0219 	bic.w	r2, r3, #25
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4929      	ldr	r1, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fe38 	bl	8001724 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fe34 	bl	8001724 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e307      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	f7fe fe55 	bl	8001784 <HAL_GetREVID>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d817      	bhi.n	8002b14 <HAL_RCC_OscConfig+0x24c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d108      	bne.n	8002afe <HAL_RCC_OscConfig+0x236>
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002af4:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	e030      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	031b      	lsls	r3, r3, #12
 8002b0c:	4910      	ldr	r1, [pc, #64]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	e025      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	490b      	ldr	r1, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e01a      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x288>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fdf5 	bl	8001724 <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fdf1 	bl	8001724 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e2c4      	b.n	80030da <HAL_RCC_OscConfig+0x812>
 8002b50:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b54:	4ba4      	ldr	r3, [pc, #656]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a9 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b9e      	ldr	r3, [pc, #632]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b78:	4b9b      	ldr	r3, [pc, #620]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d007      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2cc>
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b18      	cmp	r3, #24
 8002b88:	d13a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x338>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d135      	bne.n	8002c00 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b94:	4b94      	ldr	r3, [pc, #592]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_OscConfig+0x2e4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e296      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bac:	f7fe fdea 	bl	8001784 <HAL_GetREVID>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d817      	bhi.n	8002bea <HAL_RCC_OscConfig+0x322>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bc2:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bca:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bd2:	e075      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	4981      	ldr	r1, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be8:	e06a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bea:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	497b      	ldr	r1, [pc, #492]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bfe:	e05f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d042      	beq.n	8002c8e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c08:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a76      	ldr	r2, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fd86 	bl	8001724 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fd82 	bl	8001724 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e255      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2e:	4b6e      	ldr	r3, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c3a:	f7fe fda3 	bl	8001784 <HAL_GetREVID>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d817      	bhi.n	8002c78 <HAL_RCC_OscConfig+0x3b0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d108      	bne.n	8002c62 <HAL_RCC_OscConfig+0x39a>
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c58:	4a63      	ldr	r2, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c5e:	6053      	str	r3, [r2, #4]
 8002c60:	e02e      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
 8002c62:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	069b      	lsls	r3, r3, #26
 8002c70:	495d      	ldr	r1, [pc, #372]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
 8002c76:	e023      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
 8002c78:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4958      	ldr	r1, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a55      	ldr	r2, [pc, #340]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fd43 	bl	8001724 <HAL_GetTick>
 8002c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fd3f 	bl	8001724 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e212      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d036      	beq.n	8002d3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd4:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd8:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fd20 	bl	8001724 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fd1c 	bl	8001724 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1ef      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x420>
 8002d06:	e018      	b.n	8002d3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fd06 	bl	8001724 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fd02 	bl	8001724 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1d5      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fce3 	bl	8001724 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d62:	f7fe fcdf 	bl	8001724 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1b2      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x49a>
 8002d80:	e018      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fcc9 	bl	8001724 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d96:	f7fe fcc5 	bl	8001724 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e198      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x520>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8085 	beq.w	8002ecc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_OscConfig+0x524>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_OscConfig+0x524>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fca9 	bl	8001724 <HAL_GetTick>
 8002dd2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe fca5 	bl	8001724 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	; 0x64
 8002de2:	d905      	bls.n	8002df0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e178      	b.n	80030da <HAL_RCC_OscConfig+0x812>
 8002de8:	58024400 	.word	0x58024400
 8002dec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df0:	4b96      	ldr	r3, [pc, #600]	; (800304c <HAL_RCC_OscConfig+0x784>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ec      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x54a>
 8002e04:	4b92      	ldr	r3, [pc, #584]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a91      	ldr	r2, [pc, #580]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_OscConfig+0x5a6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x56c>
 8002e1a:	4b8d      	ldr	r3, [pc, #564]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a8c      	ldr	r2, [pc, #560]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a89      	ldr	r2, [pc, #548]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e01c      	b.n	8002e6e <HAL_RCC_OscConfig+0x5a6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x58e>
 8002e3c:	4b84      	ldr	r3, [pc, #528]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a83      	ldr	r2, [pc, #524]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e00b      	b.n	8002e6e <HAL_RCC_OscConfig+0x5a6>
 8002e56:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a7d      	ldr	r2, [pc, #500]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe fc55 	bl	8001724 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fc51 	bl	8001724 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e122      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e94:	4b6e      	ldr	r3, [pc, #440]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCC_OscConfig+0x5b6>
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fc3f 	bl	8001724 <HAL_GetTick>
 8002ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe fc3b 	bl	8001724 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e10c      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ec0:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8101 	beq.w	80030d8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ed6:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ede:	2b18      	cmp	r3, #24
 8002ee0:	f000 80bc 	beq.w	800305c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	f040 8095 	bne.w	8003018 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fc13 	bl	8001724 <HAL_GetTick>
 8002efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe fc0f 	bl	8001724 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0e2      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f14:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f24:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_RCC_OscConfig+0x78c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	430a      	orrs	r2, r1
 8002f34:	4946      	ldr	r1, [pc, #280]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	628b      	str	r3, [r1, #40]	; 0x28
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	025b      	lsls	r3, r3, #9
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	3b01      	subs	r3, #1
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	3b01      	subs	r3, #1
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f6a:	4939      	ldr	r1, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_RCC_OscConfig+0x790>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f88:	00d2      	lsls	r2, r2, #3
 8002f8a:	4931      	ldr	r1, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f023 020c 	bic.w	r2, r3, #12
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	492c      	ldr	r1, [pc, #176]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f023 0202 	bic.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4928      	ldr	r1, [pc, #160]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a25      	ldr	r2, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fb98 	bl	8001724 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe fb94 	bl	8001724 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e067      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x730>
 8003016:	e05f      	b.n	80030d8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fb7e 	bl	8001724 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fb7a 	bl	8001724 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04d      	b.n	80030da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_RCC_OscConfig+0x788>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x764>
 800304a:	e045      	b.n	80030d8 <HAL_RCC_OscConfig+0x810>
 800304c:	58024800 	.word	0x58024800
 8003050:	58024400 	.word	0x58024400
 8003054:	fffffc0c 	.word	0xfffffc0c
 8003058:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x81c>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_OscConfig+0x81c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d031      	beq.n	80030d4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d12a      	bne.n	80030d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d122      	bne.n	80030d4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d11a      	bne.n	80030d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0a5b      	lsrs	r3, r3, #9
 80030a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d111      	bne.n	80030d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d108      	bne.n	80030d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3730      	adds	r7, #48	; 0x30
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400

080030e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e19c      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b87      	ldr	r3, [pc, #540]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 020f 	bic.w	r2, r3, #15
 8003112:	4985      	ldr	r1, [pc, #532]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b83      	ldr	r3, [pc, #524]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e184      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	4b7b      	ldr	r3, [pc, #492]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003144:	429a      	cmp	r2, r3
 8003146:	d908      	bls.n	800315a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003148:	4b78      	ldr	r3, [pc, #480]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	4975      	ldr	r1, [pc, #468]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003156:	4313      	orrs	r3, r2
 8003158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003172:	429a      	cmp	r2, r3
 8003174:	d908      	bls.n	8003188 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	496a      	ldr	r1, [pc, #424]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003184:	4313      	orrs	r3, r2
 8003186:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	4b64      	ldr	r3, [pc, #400]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d908      	bls.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	495e      	ldr	r1, [pc, #376]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d908      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031d2:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4953      	ldr	r1, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d908      	bls.n	8003212 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f023 020f 	bic.w	r2, r3, #15
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4947      	ldr	r1, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800320e:	4313      	orrs	r3, r2
 8003210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d055      	beq.n	80032ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4940      	ldr	r1, [pc, #256]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800322c:	4313      	orrs	r3, r2
 800322e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003238:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d121      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0f6      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d107      	bne.n	8003260 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d115      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0ea      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0de      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d6      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f023 0207 	bic.w	r2, r3, #7
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4925      	ldr	r1, [pc, #148]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 8003296:	4313      	orrs	r3, r2
 8003298:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe fa43 	bl	8001724 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f7fe fa3f 	bl	8001724 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0be      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d1eb      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d010      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d208      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	490e      	ldr	r1, [pc, #56]	; (800332c <HAL_RCC_ClockConfig+0x244>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d214      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	4906      	ldr	r1, [pc, #24]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_ClockConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e086      	b.n	8003436 <HAL_RCC_ClockConfig+0x34e>
 8003328:	52002000 	.word	0x52002000
 800332c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003348:	429a      	cmp	r2, r3
 800334a:	d208      	bcs.n	800335e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800334c:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4939      	ldr	r1, [pc, #228]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 800335a:	4313      	orrs	r3, r2
 800335c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003376:	429a      	cmp	r2, r3
 8003378:	d208      	bcs.n	800338c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	492e      	ldr	r1, [pc, #184]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 8003388:	4313      	orrs	r3, r2
 800338a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d208      	bcs.n	80033ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4922      	ldr	r1, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d208      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4917      	ldr	r1, [pc, #92]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033e8:	f000 f834 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	4912      	ldr	r1, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x35c>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x358>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_ClockConfig+0x35c>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x360>)
 800341e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003420:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x364>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x368>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe f930 	bl	8001690 <HAL_InitTick>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	58024400 	.word	0x58024400
 8003444:	08007b10 	.word	0x08007b10
 8003448:	20000004 	.word	0x20000004
 800344c:	20000000 	.word	0x20000000
 8003450:	20000008 	.word	0x20000008

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345a:	4bb3      	ldr	r3, [pc, #716]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003462:	2b18      	cmp	r3, #24
 8003464:	f200 8155 	bhi.w	8003712 <HAL_RCC_GetSysClockFreq+0x2be>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_RCC_GetSysClockFreq+0x1c>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	080034d5 	.word	0x080034d5
 8003474:	08003713 	.word	0x08003713
 8003478:	08003713 	.word	0x08003713
 800347c:	08003713 	.word	0x08003713
 8003480:	08003713 	.word	0x08003713
 8003484:	08003713 	.word	0x08003713
 8003488:	08003713 	.word	0x08003713
 800348c:	08003713 	.word	0x08003713
 8003490:	080034fb 	.word	0x080034fb
 8003494:	08003713 	.word	0x08003713
 8003498:	08003713 	.word	0x08003713
 800349c:	08003713 	.word	0x08003713
 80034a0:	08003713 	.word	0x08003713
 80034a4:	08003713 	.word	0x08003713
 80034a8:	08003713 	.word	0x08003713
 80034ac:	08003713 	.word	0x08003713
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003713 	.word	0x08003713
 80034b8:	08003713 	.word	0x08003713
 80034bc:	08003713 	.word	0x08003713
 80034c0:	08003713 	.word	0x08003713
 80034c4:	08003713 	.word	0x08003713
 80034c8:	08003713 	.word	0x08003713
 80034cc:	08003713 	.word	0x08003713
 80034d0:	08003507 	.word	0x08003507
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034d4:	4b94      	ldr	r3, [pc, #592]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034e0:	4b91      	ldr	r3, [pc, #580]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	4a90      	ldr	r2, [pc, #576]	; (800372c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034f2:	e111      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034f4:	4b8d      	ldr	r3, [pc, #564]	; (800372c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034f6:	61bb      	str	r3, [r7, #24]
    break;
 80034f8:	e10e      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034fa:	4b8d      	ldr	r3, [pc, #564]	; (8003730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034fc:	61bb      	str	r3, [r7, #24]
    break;
 80034fe:	e10b      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003500:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003502:	61bb      	str	r3, [r7, #24]
    break;
 8003504:	e108      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003510:	4b85      	ldr	r3, [pc, #532]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800351a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800351c:	4b82      	ldr	r3, [pc, #520]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003526:	4b80      	ldr	r3, [pc, #512]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80e1 	beq.w	800370c <HAL_RCC_GetSysClockFreq+0x2b8>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b02      	cmp	r3, #2
 800354e:	f000 8083 	beq.w	8003658 <HAL_RCC_GetSysClockFreq+0x204>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b02      	cmp	r3, #2
 8003556:	f200 80a1 	bhi.w	800369c <HAL_RCC_GetSysClockFreq+0x248>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x114>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d056      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003566:	e099      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02d      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003574:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	08db      	lsrs	r3, r3, #3
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	4a6b      	ldr	r2, [pc, #428]	; (800372c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359e:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035ce:	e087      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800373c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e2:	4b51      	ldr	r3, [pc, #324]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003612:	e065      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003740 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003636:	ed97 6a02 	vldr	s12, [r7, #8]
 800363a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2e4>
 800363e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003656:	e043      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003744 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	ed97 6a02 	vldr	s12, [r7, #8]
 800367e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800369a:	e021      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003740 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	0a5b      	lsrs	r3, r3, #9
 80036e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ea:	3301      	adds	r3, #1
 80036ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003704:	ee17 3a90 	vmov	r3, s15
 8003708:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800370a:	e005      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
    break;
 8003710:	e002      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003714:	61bb      	str	r3, [r7, #24]
    break;
 8003716:	bf00      	nop
  }

  return sysclockfreq;
 8003718:	69bb      	ldr	r3, [r7, #24]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
 800372c:	03d09000 	.word	0x03d09000
 8003730:	003d0900 	.word	0x003d0900
 8003734:	007a1200 	.word	0x007a1200
 8003738:	46000000 	.word	0x46000000
 800373c:	4c742400 	.word	0x4c742400
 8003740:	4a742400 	.word	0x4a742400
 8003744:	4af42400 	.word	0x4af42400

08003748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800374e:	f7ff fe81 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_GetHCLKFreq+0x50>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490f      	ldr	r1, [pc, #60]	; (800379c <HAL_RCC_GetHCLKFreq+0x54>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_RCC_GetHCLKFreq+0x50>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_GetHCLKFreq+0x54>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003784:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	08007b10 	.word	0x08007b10
 80037a0:	20000004 	.word	0x20000004
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037ac:	f7ff ffcc 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4904      	ldr	r1, [pc, #16]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	58024400 	.word	0x58024400
 80037d0:	08007b10 	.word	0x08007b10

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037d8:	f7ff ffb6 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4904      	ldr	r1, [pc, #16]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	08007b10 	.word	0x08007b10

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003808:	2300      	movs	r3, #0
 800380a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800380c:	2300      	movs	r3, #0
 800380e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003824:	d02a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003826:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800382a:	d824      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800382c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003830:	d018      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003836:	d81e      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003840:	d007      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003842:	e018      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4bab      	ldr	r3, [pc, #684]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4aaa      	ldr	r2, [pc, #680]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003850:	e015      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f001 f9cf 	bl	8004bfc <RCCEx_PLL2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003862:	e00c      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	2102      	movs	r1, #2
 800386a:	4618      	mov	r0, r3
 800386c:	f001 fa78 	bl	8004d60 <RCCEx_PLL3_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
      break;
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800387c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003884:	4b9b      	ldr	r3, [pc, #620]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003890:	4998      	ldr	r1, [pc, #608]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	650b      	str	r3, [r1, #80]	; 0x50
 8003896:	e001      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d826      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038cd 	.word	0x080038cd
 80038bc:	080038db 	.word	0x080038db
 80038c0:	080038ed 	.word	0x080038ed
 80038c4:	08003905 	.word	0x08003905
 80038c8:	08003905 	.word	0x08003905
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4b89      	ldr	r3, [pc, #548]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a88      	ldr	r2, [pc, #544]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038d8:	e015      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 f98b 	bl	8004bfc <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038ea:	e00c      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fa34 	bl	8004d60 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
      break;
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800390c:	4b79      	ldr	r3, [pc, #484]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	f023 0207 	bic.w	r2, r3, #7
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	4976      	ldr	r1, [pc, #472]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	650b      	str	r3, [r1, #80]	; 0x50
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d042      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003938:	d02b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d825      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003940:	2bc0      	cmp	r3, #192	; 0xc0
 8003942:	d028      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003944:	2bc0      	cmp	r3, #192	; 0xc0
 8003946:	d821      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d016      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d81d      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d007      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003958:	e018      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003966:	e017      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f944 	bl	8004bfc <RCCEx_PLL2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003978:	e00e      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3324      	adds	r3, #36	; 0x24
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f9ed 	bl	8004d60 <RCCEx_PLL3_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800398a:	e005      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800399e:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	4952      	ldr	r1, [pc, #328]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	650b      	str	r3, [r1, #80]	; 0x50
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d049      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039cc:	d030      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d2:	d82a      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039d8:	d02c      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039de:	d824      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d018      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ea:	d81e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f4:	d007      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e017      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f8f5 	bl	8004bfc <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a16:	e00e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f99e 	bl	8004d60 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a4a:	492a      	ldr	r1, [pc, #168]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a50:	e001      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04c      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a6c:	d030      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a72:	d82a      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a78:	d02c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a7e:	d824      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a84:	d018      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a8a:	d81e      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a96:	e018      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e017      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f8a5 	bl	8004bfc <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e00e      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f94e 	bl	8004d60 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aea:	4902      	ldr	r1, [pc, #8]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	658b      	str	r3, [r1, #88]	; 0x58
 8003af0:	e004      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d032      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d01c      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d817      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d00c      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d813      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d10f      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4baf      	ldr	r3, [pc, #700]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4aae      	ldr	r2, [pc, #696]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b30:	e00e      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 f85f 	bl	8004bfc <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b42:	e005      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
      break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b56:	4ba3      	ldr	r3, [pc, #652]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	49a0      	ldr	r1, [pc, #640]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d047      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b82:	d030      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b88:	d82a      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8e:	d02c      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b94:	d824      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9a:	d018      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba0:	d81e      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d007      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003bac:	e018      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bae:	4b8d      	ldr	r3, [pc, #564]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	4a8c      	ldr	r2, [pc, #560]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bba:	e017      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f81a 	bl	8004bfc <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bcc:	e00e      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3324      	adds	r3, #36	; 0x24
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f8c3 	bl	8004d60 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bde:	e005      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
      break;
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	4979      	ldr	r1, [pc, #484]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	650b      	str	r3, [r1, #80]	; 0x50
 8003c04:	e001      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d049      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1e:	d02e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c24:	d828      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c2a:	d02a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003c2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c30:	d822      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c36:	d026      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c3c:	d81c      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c42:	d010      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c48:	d816      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01d      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d111      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ffce 	bl	8004bfc <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c64:	e012      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3324      	adds	r3, #36	; 0x24
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 f877 	bl	8004d60 <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c76:	e009      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c92:	4b54      	ldr	r3, [pc, #336]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	4951      	ldr	r1, [pc, #324]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc0:	d02e      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc6:	d828      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d02a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d822      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cd8:	d026      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003cda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cde:	d81c      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cea:	d816      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01d      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf4:	d111      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ff7d 	bl	8004bfc <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d06:	e012      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 f826 	bl	8004d60 <RCCEx_PLL3_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d18:	e009      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1e:	e006      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d34:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d42:	4928      	ldr	r1, [pc, #160]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	658b      	str	r3, [r1, #88]	; 0x58
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02f      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d62:	d00e      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d68:	d814      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d72:	d10f      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ff37 	bl	8004bfc <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	490d      	ldr	r1, [pc, #52]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	650b      	str	r3, [r1, #80]	; 0x50
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d033      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d81c      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003e0f 	.word	0x08003e0f
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003df7 	.word	0x08003df7
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4bb8      	ldr	r3, [pc, #736]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4ab7      	ldr	r2, [pc, #732]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003df4:	e00c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fefd 	bl	8004bfc <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e16:	4bad      	ldr	r3, [pc, #692]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	49aa      	ldr	r1, [pc, #680]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e28:	e001      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8086 	beq.w	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4ba4      	ldr	r3, [pc, #656]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4aa3      	ldr	r2, [pc, #652]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e48:	f7fd fc6c 	bl	8001724 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e4e:	e009      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd fc68 	bl	8001724 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d902      	bls.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	75fb      	strb	r3, [r7, #23]
        break;
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e64:	4b9a      	ldr	r3, [pc, #616]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d166      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e76:	4b95      	ldr	r3, [pc, #596]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e80:	4053      	eors	r3, r2
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d013      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e8a:	4b90      	ldr	r3, [pc, #576]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e94:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a8c      	ldr	r2, [pc, #560]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea0:	4b8a      	ldr	r3, [pc, #552]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a89      	ldr	r2, [pc, #548]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003eac:	4a87      	ldr	r2, [pc, #540]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebc:	d115      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fc31 	bl	8001724 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fc2d 	bl	8001724 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d902      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	75fb      	strb	r3, [r7, #23]
            break;
 8003edc:	e005      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ed      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d126      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efe:	d10d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f00:	4b72      	ldr	r3, [pc, #456]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f0e:	0919      	lsrs	r1, r3, #4
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	496d      	ldr	r1, [pc, #436]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]
 8003f1a:	e005      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f26:	6113      	str	r3, [r2, #16]
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	4965      	ldr	r1, [pc, #404]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	670b      	str	r3, [r1, #112]	; 0x70
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	75bb      	strb	r3, [r7, #22]
 8003f42:	e001      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d07e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f58:	2b28      	cmp	r3, #40	; 0x28
 8003f5a:	d867      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08004033 	.word	0x08004033
 8003f68:	0800402d 	.word	0x0800402d
 8003f6c:	0800402d 	.word	0x0800402d
 8003f70:	0800402d 	.word	0x0800402d
 8003f74:	0800402d 	.word	0x0800402d
 8003f78:	0800402d 	.word	0x0800402d
 8003f7c:	0800402d 	.word	0x0800402d
 8003f80:	0800402d 	.word	0x0800402d
 8003f84:	08004009 	.word	0x08004009
 8003f88:	0800402d 	.word	0x0800402d
 8003f8c:	0800402d 	.word	0x0800402d
 8003f90:	0800402d 	.word	0x0800402d
 8003f94:	0800402d 	.word	0x0800402d
 8003f98:	0800402d 	.word	0x0800402d
 8003f9c:	0800402d 	.word	0x0800402d
 8003fa0:	0800402d 	.word	0x0800402d
 8003fa4:	0800401b 	.word	0x0800401b
 8003fa8:	0800402d 	.word	0x0800402d
 8003fac:	0800402d 	.word	0x0800402d
 8003fb0:	0800402d 	.word	0x0800402d
 8003fb4:	0800402d 	.word	0x0800402d
 8003fb8:	0800402d 	.word	0x0800402d
 8003fbc:	0800402d 	.word	0x0800402d
 8003fc0:	0800402d 	.word	0x0800402d
 8003fc4:	08004033 	.word	0x08004033
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	0800402d 	.word	0x0800402d
 8003fd0:	0800402d 	.word	0x0800402d
 8003fd4:	0800402d 	.word	0x0800402d
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	0800402d 	.word	0x0800402d
 8003fe0:	0800402d 	.word	0x0800402d
 8003fe4:	08004033 	.word	0x08004033
 8003fe8:	0800402d 	.word	0x0800402d
 8003fec:	0800402d 	.word	0x0800402d
 8003ff0:	0800402d 	.word	0x0800402d
 8003ff4:	0800402d 	.word	0x0800402d
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	0800402d 	.word	0x0800402d
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004033 	.word	0x08004033
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fdf4 	bl	8004bfc <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004018:	e00c      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3324      	adds	r3, #36	; 0x24
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fe9d 	bl	8004d60 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800402a:	e003      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	654b      	str	r3, [r1, #84]	; 0x54
 800404c:	e001      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d03e      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	2b05      	cmp	r3, #5
 8004064:	d820      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040af 	.word	0x080040af
 8004070:	08004085 	.word	0x08004085
 8004074:	08004097 	.word	0x08004097
 8004078:	080040af 	.word	0x080040af
 800407c:	080040af 	.word	0x080040af
 8004080:	080040af 	.word	0x080040af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fdb6 	bl	8004bfc <RCCEx_PLL2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004094:	e00c      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3324      	adds	r3, #36	; 0x24
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fe5f 	bl	8004d60 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040a6:	e003      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
      break;
 80040ac:	e000      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80040ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d110      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c2:	4902      	ldr	r1, [pc, #8]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	654b      	str	r3, [r1, #84]	; 0x54
 80040c8:	e008      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	58024800 	.word	0x58024800
 80040d4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d039      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d820      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800413b 	.word	0x0800413b
 80040fc:	08004111 	.word	0x08004111
 8004100:	08004123 	.word	0x08004123
 8004104:	0800413b 	.word	0x0800413b
 8004108:	0800413b 	.word	0x0800413b
 800410c:	0800413b 	.word	0x0800413b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fd70 	bl	8004bfc <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004120:	e00c      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fe19 	bl	8004d60 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800413a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004142:	4bb7      	ldr	r3, [pc, #732]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f023 0207 	bic.w	r2, r3, #7
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	49b3      	ldr	r1, [pc, #716]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004152:	4313      	orrs	r3, r2
 8004154:	658b      	str	r3, [r1, #88]	; 0x58
 8004156:	e001      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d04b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004172:	d02e      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d828      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d02a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d822      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004186:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800418a:	d026      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800418c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004190:	d81c      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004196:	d010      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419c:	d816      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01d      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a6:	d111      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd24 	bl	8004bfc <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041b8:	e012      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3324      	adds	r3, #36	; 0x24
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fdcd 	bl	8004d60 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041ca:	e009      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
      break;
 80041d0:	e006      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e6:	4b8e      	ldr	r3, [pc, #568]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	498a      	ldr	r1, [pc, #552]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	654b      	str	r3, [r1, #84]	; 0x54
 80041fa:	e001      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d04b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004212:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004216:	d02e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004218:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800421c:	d828      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004222:	d02a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d822      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800422a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422e:	d026      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004234:	d81c      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423a:	d010      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004240:	d816      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01d      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d111      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fcd2 	bl	8004bfc <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800425c:	e012      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3324      	adds	r3, #36	; 0x24
 8004262:	2102      	movs	r1, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fd7b 	bl	8004d60 <RCCEx_PLL3_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426e:	e009      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
      break;
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004276:	bf00      	nop
 8004278:	e004      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004298:	4961      	ldr	r1, [pc, #388]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800429a:	4313      	orrs	r3, r2
 800429c:	658b      	str	r3, [r1, #88]	; 0x58
 800429e:	e001      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d04b      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042ba:	d02e      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80042bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042c0:	d828      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	d02a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d822      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d2:	d026      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d8:	d81c      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042de:	d010      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d816      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01d      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d111      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fc80 	bl	8004bfc <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004300:	e012      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd29 	bl	8004d60 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004312:	e009      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433c:	4938      	ldr	r1, [pc, #224]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800433e:	4313      	orrs	r3, r2
 8004340:	658b      	str	r3, [r1, #88]	; 0x58
 8004342:	e001      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d10a      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fcfa 	bl	8004d60 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004384:	4926      	ldr	r1, [pc, #152]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004386:	4313      	orrs	r3, r2
 8004388:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fcd9 	bl	8004d60 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	4916      	ldr	r1, [pc, #88]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d036      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e2:	d01f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e8:	d817      	bhi.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d009      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80043f4:	e011      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fbfd 	bl	8004bfc <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004406:	e00e      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3324      	adds	r3, #36	; 0x24
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fca6 	bl	8004d60 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004418:	e005      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
      break;
 800441e:	e002      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004420:	58024400 	.word	0x58024400
      break;
 8004424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800442c:	4b93      	ldr	r3, [pc, #588]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800443a:	4990      	ldr	r1, [pc, #576]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	658b      	str	r3, [r1, #88]	; 0x58
 8004440:	e001      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d033      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800445c:	d01c      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800445e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004462:	d816      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004468:	d003      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800446a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446e:	d007      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004470:	e00f      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004472:	4b82      	ldr	r3, [pc, #520]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	4a81      	ldr	r2, [pc, #516]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800447e:	e00c      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3324      	adds	r3, #36	; 0x24
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fc6a 	bl	8004d60 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
      break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a0:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	4973      	ldr	r1, [pc, #460]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	654b      	str	r3, [r1, #84]	; 0x54
 80044b4:	e001      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d029      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d007      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d6:	4b69      	ldr	r3, [pc, #420]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	4a68      	ldr	r2, [pc, #416]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044e2:	e00b      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	2102      	movs	r1, #2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb86 	bl	8004bfc <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
      break;
 80044fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004502:	4b5e      	ldr	r3, [pc, #376]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	495b      	ldr	r1, [pc, #364]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004514:	e001      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3324      	adds	r3, #36	; 0x24
 800452a:	2102      	movs	r1, #2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fc17 	bl	8004d60 <RCCEx_PLL3_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d030      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004550:	d017      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004556:	d811      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d013      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800455e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004562:	d80b      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a42      	ldr	r2, [pc, #264]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800457a:	e007      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      break;
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004592:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459e:	4937      	ldr	r1, [pc, #220]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	654b      	str	r3, [r1, #84]	; 0x54
 80045a4:	e001      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	492e      	ldr	r1, [pc, #184]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045d4:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045e2:	4926      	ldr	r1, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004600:	491e      	ldr	r1, [pc, #120]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800461c:	6113      	str	r3, [r2, #16]
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004628:	4914      	ldr	r1, [pc, #80]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	da08      	bge.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	490e      	ldr	r1, [pc, #56]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	4906      	ldr	r1, [pc, #24]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004668:	7dbb      	ldrb	r3, [r7, #22]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	58024400 	.word	0x58024400

08004680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004684:	f7ff f860 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	58024400 	.word	0x58024400
 80046a8:	08007b10 	.word	0x08007b10

080046ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b4:	4ba1      	ldr	r3, [pc, #644]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046be:	4b9f      	ldr	r3, [pc, #636]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	0b1b      	lsrs	r3, r3, #12
 80046c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046ca:	4b9c      	ldr	r3, [pc, #624]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046d6:	4b99      	ldr	r3, [pc, #612]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8111 	beq.w	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f000 8083 	beq.w	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b02      	cmp	r3, #2
 8004706:	f200 80a1 	bhi.w	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d056      	beq.n	80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004716:	e099      	b.n	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	4b88      	ldr	r3, [pc, #544]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02d      	beq.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004724:	4b85      	ldr	r3, [pc, #532]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a84      	ldr	r2, [pc, #528]	; (8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b7b      	ldr	r3, [pc, #492]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800477e:	e087      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c2:	e065      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b59      	ldr	r3, [pc, #356]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004806:	e043      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b48      	ldr	r3, [pc, #288]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484a:	e021      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b37      	ldr	r3, [pc, #220]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800488e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	0a5b      	lsrs	r3, r3, #9
 8004896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b6:	ee17 2a90 	vmov	r2, s15
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048be:	4b1f      	ldr	r3, [pc, #124]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e4:	ee17 2a90 	vmov	r2, s15
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	0e1b      	lsrs	r3, r3, #24
 80048f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004906:	edd7 6a07 	vldr	s13, [r7, #28]
 800490a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004912:	ee17 2a90 	vmov	r2, s15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800491a:	e008      	b.n	800492e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	bf00      	nop
 8004930:	3724      	adds	r7, #36	; 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
 8004940:	03d09000 	.word	0x03d09000
 8004944:	46000000 	.word	0x46000000
 8004948:	4c742400 	.word	0x4c742400
 800494c:	4a742400 	.word	0x4a742400
 8004950:	4af42400 	.word	0x4af42400

08004954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800495c:	4ba1      	ldr	r3, [pc, #644]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004966:	4b9f      	ldr	r3, [pc, #636]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	0d1b      	lsrs	r3, r3, #20
 800496c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004972:	4b9c      	ldr	r3, [pc, #624]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800497e:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8111 	beq.w	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f000 8083 	beq.w	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f200 80a1 	bhi.w	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d056      	beq.n	8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049be:	e099      	b.n	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c0:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02d      	beq.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049cc:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	08db      	lsrs	r3, r3, #3
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	4a84      	ldr	r2, [pc, #528]	; (8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a26:	e087      	b.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a6a:	e065      	b.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aae:	e043      	b.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af2:	e021      	b.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b38:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	0a5b      	lsrs	r3, r3, #9
 8004b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5e:	ee17 2a90 	vmov	r2, s15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b66:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8c:	ee17 2a90 	vmov	r2, s15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bba:	ee17 2a90 	vmov	r2, s15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
}
 8004bd6:	bf00      	nop
 8004bd8:	3724      	adds	r7, #36	; 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	46000000 	.word	0x46000000
 8004bf0:	4c742400 	.word	0x4c742400
 8004bf4:	4a742400 	.word	0x4a742400
 8004bf8:	4af42400 	.word	0x4af42400

08004bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d101      	bne.n	8004c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e099      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c1a:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4e      	ldr	r2, [pc, #312]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fc fd7d 	bl	8001724 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c2e:	f7fc fd79 	bl	8001724 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e086      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c40:	4b45      	ldr	r3, [pc, #276]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	493f      	ldr	r1, [pc, #252]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	025b      	lsls	r3, r3, #9
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c90:	4931      	ldr	r1, [pc, #196]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	492d      	ldr	r1, [pc, #180]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f023 0220 	bic.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	4928      	ldr	r1, [pc, #160]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL2_Config+0x160>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	69d2      	ldr	r2, [r2, #28]
 8004cd2:	00d2      	lsls	r2, r2, #3
 8004cd4:	4920      	ldr	r1, [pc, #128]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f043 0310 	orr.w	r3, r3, #16
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf8:	e00f      	b.n	8004d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d00:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d0c:	e005      	b.n	8004d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc fcfd 	bl	8001724 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d2e:	f7fc fcf9 	bl	8001724 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	ffff0007 	.word	0xffff0007

08004d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d101      	bne.n	8004d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e099      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4e      	ldr	r2, [pc, #312]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fccb 	bl	8001724 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d92:	f7fc fcc7 	bl	8001724 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e086      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	051b      	lsls	r3, r3, #20
 8004dbe:	493f      	ldr	r1, [pc, #252]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df4:	4931      	ldr	r1, [pc, #196]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	492d      	ldr	r1, [pc, #180]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	4928      	ldr	r1, [pc, #160]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <RCCEx_PLL3_Config+0x160>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	69d2      	ldr	r2, [r2, #28]
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	4920      	ldr	r1, [pc, #128]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e5c:	e00f      	b.n	8004e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e64:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e70:	e005      	b.n	8004e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fc4b 	bl	8001724 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e92:	f7fc fc47 	bl	8001724 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	ffff0007 	.word	0xffff0007

08004ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fc f90e 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fd30 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e049      	b.n	8005018 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f841 	bl	8005020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 fcd9 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start_IT+0x24>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e03c      	b.n	80050d2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d109      	bne.n	8005072 <HAL_TIM_PWM_Start_IT+0x3e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e02f      	b.n	80050d2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start_IT+0x58>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e022      	b.n	80050d2 <HAL_TIM_PWM_Start_IT+0x9e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d109      	bne.n	80050a6 <HAL_TIM_PWM_Start_IT+0x72>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e015      	b.n	80050d2 <HAL_TIM_PWM_Start_IT+0x9e>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start_IT+0x8c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_TIM_PWM_Start_IT+0x9e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0e2      	b.n	80052a0 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start_IT+0xb6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	e023      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0xfe>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start_IT+0xc6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e01b      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0xfe>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start_IT+0xd6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	e013      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0xfe>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start_IT+0xe6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	e00b      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0xfe>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b10      	cmp	r3, #16
 800511e:	d104      	bne.n	800512a <HAL_TIM_PWM_Start_IT+0xf6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005128:	e003      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0xfe>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d841      	bhi.n	80051bc <HAL_TIM_PWM_Start_IT+0x188>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_TIM_PWM_Start_IT+0x10c>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005175 	.word	0x08005175
 8005144:	080051bd 	.word	0x080051bd
 8005148:	080051bd 	.word	0x080051bd
 800514c:	080051bd 	.word	0x080051bd
 8005150:	08005187 	.word	0x08005187
 8005154:	080051bd 	.word	0x080051bd
 8005158:	080051bd 	.word	0x080051bd
 800515c:	080051bd 	.word	0x080051bd
 8005160:	08005199 	.word	0x08005199
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051bd 	.word	0x080051bd
 800516c:	080051bd 	.word	0x080051bd
 8005170:	080051ab 	.word	0x080051ab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0202 	orr.w	r2, r2, #2
 8005182:	60da      	str	r2, [r3, #12]
      break;
 8005184:	e01b      	b.n	80051be <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e012      	b.n	80051be <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	60da      	str	r2, [r3, #12]
      break;
 80051a8:	e009      	b.n	80051be <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0210 	orr.w	r2, r2, #16
 80051b8:	60da      	str	r2, [r3, #12]
      break;
 80051ba:	e000      	b.n	80051be <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80051bc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 ffd4 	bl	8006174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <HAL_TIM_PWM_Start_IT+0x274>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_TIM_PWM_Start_IT+0x1ca>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <HAL_TIM_PWM_Start_IT+0x278>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIM_PWM_Start_IT+0x1ca>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a32      	ldr	r2, [pc, #200]	; (80052b0 <HAL_TIM_PWM_Start_IT+0x27c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_TIM_PWM_Start_IT+0x1ca>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_TIM_PWM_Start_IT+0x280>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_PWM_Start_IT+0x1ca>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <HAL_TIM_PWM_Start_IT+0x284>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Start_IT+0x1ce>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_TIM_PWM_Start_IT+0x274>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d018      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_TIM_PWM_Start_IT+0x288>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_TIM_PWM_Start_IT+0x290>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_TIM_PWM_Start_IT+0x278>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start_IT+0x22a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_TIM_PWM_Start_IT+0x294>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d115      	bne.n	800528a <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <HAL_TIM_PWM_Start_IT+0x298>)
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d015      	beq.n	800529c <HAL_TIM_PWM_Start_IT+0x268>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005276:	d011      	beq.n	800529c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	e008      	b.n	800529c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e000      	b.n	800529e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40001800 	.word	0x40001800
 80052cc:	00010007 	.word	0x00010007

080052d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0202 	mvn.w	r2, #2
 80052fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb14 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb06 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fb fd75 	bl	8000e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0204 	mvn.w	r2, #4
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 faea 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fadc 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb fd4b 	bl	8000e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0208 	mvn.w	r2, #8
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fac0 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fab2 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fb fd21 	bl	8000e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0210 	mvn.w	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa96 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa88 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fb fcf7 	bl	8000e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0201 	mvn.w	r2, #1
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa62 	bl	8005918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 ff32 	bl	80062e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	d10e      	bne.n	80054ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d107      	bne.n	80054ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 ff25 	bl	80062f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d10e      	bne.n	80054da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d107      	bne.n	80054da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa3d 	bl	8005954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d10e      	bne.n	8005506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d107      	bne.n	8005506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0220 	mvn.w	r2, #32
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fee5 	bl	80062d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005526:	2302      	movs	r3, #2
 8005528:	e0fd      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x216>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b14      	cmp	r3, #20
 8005536:	f200 80f0 	bhi.w	800571a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005595 	.word	0x08005595
 8005544:	0800571b 	.word	0x0800571b
 8005548:	0800571b 	.word	0x0800571b
 800554c:	0800571b 	.word	0x0800571b
 8005550:	080055d5 	.word	0x080055d5
 8005554:	0800571b 	.word	0x0800571b
 8005558:	0800571b 	.word	0x0800571b
 800555c:	0800571b 	.word	0x0800571b
 8005560:	08005617 	.word	0x08005617
 8005564:	0800571b 	.word	0x0800571b
 8005568:	0800571b 	.word	0x0800571b
 800556c:	0800571b 	.word	0x0800571b
 8005570:	08005657 	.word	0x08005657
 8005574:	0800571b 	.word	0x0800571b
 8005578:	0800571b 	.word	0x0800571b
 800557c:	0800571b 	.word	0x0800571b
 8005580:	08005699 	.word	0x08005699
 8005584:	0800571b 	.word	0x0800571b
 8005588:	0800571b 	.word	0x0800571b
 800558c:	0800571b 	.word	0x0800571b
 8005590:	080056d9 	.word	0x080056d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa7e 	bl	8005a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e0a3      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 faee 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	021a      	lsls	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
      break;
 8005614:	e082      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fb57 	bl	8005cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0204 	bic.w	r2, r2, #4
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	61da      	str	r2, [r3, #28]
      break;
 8005654:	e062      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fbbd 	bl	8005ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021a      	lsls	r2, r3, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	61da      	str	r2, [r3, #28]
      break;
 8005696:	e041      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fc04 	bl	8005eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0204 	bic.w	r2, r2, #4
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056d6:	e021      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fc46 	bl	8005f70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005718:	e000      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800571a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop

08005730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIM_ConfigClockSource+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e0db      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x1d0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4b69      	ldr	r3, [pc, #420]	; (8005908 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a63      	ldr	r2, [pc, #396]	; (800590c <HAL_TIM_ConfigClockSource+0x1dc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f000 80a9 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005784:	4a61      	ldr	r2, [pc, #388]	; (800590c <HAL_TIM_ConfigClockSource+0x1dc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 80ae 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800578c:	4a60      	ldr	r2, [pc, #384]	; (8005910 <HAL_TIM_ConfigClockSource+0x1e0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f000 80a1 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005794:	4a5e      	ldr	r2, [pc, #376]	; (8005910 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f200 80a6 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 800579c:	4a5d      	ldr	r2, [pc, #372]	; (8005914 <HAL_TIM_ConfigClockSource+0x1e4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f000 8099 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057a4:	4a5b      	ldr	r2, [pc, #364]	; (8005914 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 809e 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057b0:	f000 8091 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057b8:	f200 8096 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	f000 8089 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c8:	f200 808e 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d03e      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0x120>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	f200 8087 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	f000 8085 	beq.w	80058ec <HAL_TIM_ConfigClockSource+0x1bc>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d87f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d01a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xf2>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d87b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d050      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x166>
 80057f4:	2b60      	cmp	r3, #96	; 0x60
 80057f6:	d877      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d03c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x146>
 80057fc:	2b50      	cmp	r3, #80	; 0x50
 80057fe:	d873      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d058      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x186>
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d86f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d064      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d86b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d060      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d867      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d05a      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005820:	e062      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fc7f 	bl	8006134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005844:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e04e      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fc68 	bl	8006134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e03b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 fbd8 	bl	8006038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fc32 	bl	80060f8 <TIM_ITRx_SetConfig>
      break;
 8005894:	e02b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fbf7 	bl	8006096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2160      	movs	r1, #96	; 0x60
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc22 	bl	80060f8 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e01b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fbb8 	bl	8006038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fc12 	bl	80060f8 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fc09 	bl	80060f8 <TIM_ITRx_SetConfig>
        break;
 80058e6:	e002      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80058ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	ffceff88 	.word	0xffceff88
 800590c:	00100040 	.word	0x00100040
 8005910:	00100030 	.word	0x00100030
 8005914:	00100020 	.word	0x00100020

08005918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d01b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d017      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0f      	ldr	r2, [pc, #60]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4b37      	ldr	r3, [pc, #220]	; (8005ba4 <TIM_OC1_SetConfig+0x108>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0302 	bic.w	r3, r3, #2
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <TIM_OC1_SetConfig+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_OC1_SetConfig+0x7c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <TIM_OC1_SetConfig+0x110>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC1_SetConfig+0x7c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <TIM_OC1_SetConfig+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC1_SetConfig+0x7c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <TIM_OC1_SetConfig+0x118>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC1_SetConfig+0x7c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <TIM_OC1_SetConfig+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0308 	bic.w	r3, r3, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <TIM_OC1_SetConfig+0x10c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_OC1_SetConfig+0xbe>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <TIM_OC1_SetConfig+0x110>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_OC1_SetConfig+0xbe>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <TIM_OC1_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_OC1_SetConfig+0xbe>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <TIM_OC1_SetConfig+0x118>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC1_SetConfig+0xbe>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <TIM_OC1_SetConfig+0x11c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d111      	bne.n	8005b7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	621a      	str	r2, [r3, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	fffeff8f 	.word	0xfffeff8f
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40010400 	.word	0x40010400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40014400 	.word	0x40014400
 8005bb8:	40014800 	.word	0x40014800

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0210 	bic.w	r2, r3, #16
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <TIM_OC2_SetConfig+0xfc>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0320 	bic.w	r3, r3, #32
 8005c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <TIM_OC2_SetConfig+0x100>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC2_SetConfig+0x68>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <TIM_OC2_SetConfig+0x104>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10d      	bne.n	8005c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <TIM_OC2_SetConfig+0x100>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00f      	beq.n	8005c68 <TIM_OC2_SetConfig+0xac>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <TIM_OC2_SetConfig+0x104>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_OC2_SetConfig+0xac>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <TIM_OC2_SetConfig+0x108>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <TIM_OC2_SetConfig+0xac>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <TIM_OC2_SetConfig+0x10c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC2_SetConfig+0xac>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <TIM_OC2_SetConfig+0x110>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d113      	bne.n	8005c90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	feff8fff 	.word	0xfeff8fff
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a27      	ldr	r2, [pc, #156]	; (8005dc8 <TIM_OC3_SetConfig+0xf8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC3_SetConfig+0x66>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <TIM_OC3_SetConfig+0xfc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10d      	bne.n	8005d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1c      	ldr	r2, [pc, #112]	; (8005dc8 <TIM_OC3_SetConfig+0xf8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_OC3_SetConfig+0xaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <TIM_OC3_SetConfig+0xfc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_OC3_SetConfig+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <TIM_OC3_SetConfig+0x100>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_OC3_SetConfig+0xaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <TIM_OC3_SetConfig+0x104>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC3_SetConfig+0xaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <TIM_OC3_SetConfig+0x108>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d113      	bne.n	8005da2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800

08005ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <TIM_OC4_SetConfig+0xbc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <TIM_OC4_SetConfig+0xc0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <TIM_OC4_SetConfig+0xc4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <TIM_OC4_SetConfig+0xc8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <TIM_OC4_SetConfig+0xcc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d109      	bne.n	8005e70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <TIM_OC5_SetConfig+0xb0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00f      	beq.n	8005f22 <TIM_OC5_SetConfig+0x76>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <TIM_OC5_SetConfig+0xb4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00b      	beq.n	8005f22 <TIM_OC5_SetConfig+0x76>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <TIM_OC5_SetConfig+0xb8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d007      	beq.n	8005f22 <TIM_OC5_SetConfig+0x76>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <TIM_OC5_SetConfig+0xbc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC5_SetConfig+0x76>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <TIM_OC5_SetConfig+0xc0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d109      	bne.n	8005f36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800

08005f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	051b      	lsls	r3, r3, #20
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a18      	ldr	r2, [pc, #96]	; (8006024 <TIM_OC6_SetConfig+0xb4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_OC6_SetConfig+0x78>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <TIM_OC6_SetConfig+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_OC6_SetConfig+0x78>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	; (800602c <TIM_OC6_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_OC6_SetConfig+0x78>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <TIM_OC6_SetConfig+0xc0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC6_SetConfig+0x78>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a14      	ldr	r2, [pc, #80]	; (8006034 <TIM_OC6_SetConfig+0xc4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0201 	bic.w	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 030a 	bic.w	r3, r3, #10
 8006074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f023 0210 	bic.w	r2, r3, #16
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <TIM_ITRx_SetConfig+0x38>)
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	f043 0307 	orr.w	r3, r3, #7
 800611a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	609a      	str	r2, [r3, #8]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	ffcfff8f 	.word	0xffcfff8f

08006134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2201      	movs	r2, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e068      	b.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2e      	ldr	r2, [pc, #184]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2d      	ldr	r2, [pc, #180]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d108      	bne.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006212:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624a:	d018      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a13      	ldr	r2, [pc, #76]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10c      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4313      	orrs	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40001800 	.word	0x40001800

080062d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e042      	b.n	80063a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fa ff4f 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f82c 	bl	80063ac <UART_SetConfig>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e022      	b.n	80063a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fd80 	bl	8006e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800638a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fe07 	bl	8006fb0 <UART_CheckIdleState>
 80063a2:	4603      	mov	r3, r0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ac:	b5b0      	push	{r4, r5, r7, lr}
 80063ae:	b08e      	sub	sp, #56	; 0x38
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4bbf      	ldr	r3, [pc, #764]	; (80066d8 <UART_SetConfig+0x32c>)
 80063da:	4013      	ands	r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063e2:	430b      	orrs	r3, r1
 80063e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4ab5      	ldr	r2, [pc, #724]	; (80066dc <UART_SetConfig+0x330>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006412:	4313      	orrs	r3, r2
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	4bb0      	ldr	r3, [pc, #704]	; (80066e0 <UART_SetConfig+0x334>)
 800641e:	4013      	ands	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006426:	430b      	orrs	r3, r1
 8006428:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f023 010f 	bic.w	r1, r3, #15
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4aa7      	ldr	r2, [pc, #668]	; (80066e4 <UART_SetConfig+0x338>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d176      	bne.n	8006538 <UART_SetConfig+0x18c>
 800644a:	4ba7      	ldr	r3, [pc, #668]	; (80066e8 <UART_SetConfig+0x33c>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006452:	2b28      	cmp	r3, #40	; 0x28
 8006454:	d86c      	bhi.n	8006530 <UART_SetConfig+0x184>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0xb0>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	08006501 	.word	0x08006501
 8006460:	08006531 	.word	0x08006531
 8006464:	08006531 	.word	0x08006531
 8006468:	08006531 	.word	0x08006531
 800646c:	08006531 	.word	0x08006531
 8006470:	08006531 	.word	0x08006531
 8006474:	08006531 	.word	0x08006531
 8006478:	08006531 	.word	0x08006531
 800647c:	08006509 	.word	0x08006509
 8006480:	08006531 	.word	0x08006531
 8006484:	08006531 	.word	0x08006531
 8006488:	08006531 	.word	0x08006531
 800648c:	08006531 	.word	0x08006531
 8006490:	08006531 	.word	0x08006531
 8006494:	08006531 	.word	0x08006531
 8006498:	08006531 	.word	0x08006531
 800649c:	08006511 	.word	0x08006511
 80064a0:	08006531 	.word	0x08006531
 80064a4:	08006531 	.word	0x08006531
 80064a8:	08006531 	.word	0x08006531
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006531 	.word	0x08006531
 80064b4:	08006531 	.word	0x08006531
 80064b8:	08006531 	.word	0x08006531
 80064bc:	08006519 	.word	0x08006519
 80064c0:	08006531 	.word	0x08006531
 80064c4:	08006531 	.word	0x08006531
 80064c8:	08006531 	.word	0x08006531
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006531 	.word	0x08006531
 80064d4:	08006531 	.word	0x08006531
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006521 	.word	0x08006521
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006531 	.word	0x08006531
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006531 	.word	0x08006531
 80064f0:	08006531 	.word	0x08006531
 80064f4:	08006531 	.word	0x08006531
 80064f8:	08006531 	.word	0x08006531
 80064fc:	08006529 	.word	0x08006529
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006506:	e222      	b.n	800694e <UART_SetConfig+0x5a2>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800650e:	e21e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006516:	e21a      	b.n	800694e <UART_SetConfig+0x5a2>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651e:	e216      	b.n	800694e <UART_SetConfig+0x5a2>
 8006520:	2320      	movs	r3, #32
 8006522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006526:	e212      	b.n	800694e <UART_SetConfig+0x5a2>
 8006528:	2340      	movs	r3, #64	; 0x40
 800652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652e:	e20e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006536:	e20a      	b.n	800694e <UART_SetConfig+0x5a2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a6b      	ldr	r2, [pc, #428]	; (80066ec <UART_SetConfig+0x340>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d130      	bne.n	80065a4 <UART_SetConfig+0x1f8>
 8006542:	4b69      	ldr	r3, [pc, #420]	; (80066e8 <UART_SetConfig+0x33c>)
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b05      	cmp	r3, #5
 800654c:	d826      	bhi.n	800659c <UART_SetConfig+0x1f0>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <UART_SetConfig+0x1a8>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	0800656d 	.word	0x0800656d
 8006558:	08006575 	.word	0x08006575
 800655c:	0800657d 	.word	0x0800657d
 8006560:	08006585 	.word	0x08006585
 8006564:	0800658d 	.word	0x0800658d
 8006568:	08006595 	.word	0x08006595
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006572:	e1ec      	b.n	800694e <UART_SetConfig+0x5a2>
 8006574:	2304      	movs	r3, #4
 8006576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800657a:	e1e8      	b.n	800694e <UART_SetConfig+0x5a2>
 800657c:	2308      	movs	r3, #8
 800657e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006582:	e1e4      	b.n	800694e <UART_SetConfig+0x5a2>
 8006584:	2310      	movs	r3, #16
 8006586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658a:	e1e0      	b.n	800694e <UART_SetConfig+0x5a2>
 800658c:	2320      	movs	r3, #32
 800658e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006592:	e1dc      	b.n	800694e <UART_SetConfig+0x5a2>
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659a:	e1d8      	b.n	800694e <UART_SetConfig+0x5a2>
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a2:	e1d4      	b.n	800694e <UART_SetConfig+0x5a2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a51      	ldr	r2, [pc, #324]	; (80066f0 <UART_SetConfig+0x344>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d130      	bne.n	8006610 <UART_SetConfig+0x264>
 80065ae:	4b4e      	ldr	r3, [pc, #312]	; (80066e8 <UART_SetConfig+0x33c>)
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d826      	bhi.n	8006608 <UART_SetConfig+0x25c>
 80065ba:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <UART_SetConfig+0x214>)
 80065bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c0:	080065d9 	.word	0x080065d9
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	080065e9 	.word	0x080065e9
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	08006601 	.word	0x08006601
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e1b6      	b.n	800694e <UART_SetConfig+0x5a2>
 80065e0:	2304      	movs	r3, #4
 80065e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e6:	e1b2      	b.n	800694e <UART_SetConfig+0x5a2>
 80065e8:	2308      	movs	r3, #8
 80065ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ee:	e1ae      	b.n	800694e <UART_SetConfig+0x5a2>
 80065f0:	2310      	movs	r3, #16
 80065f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f6:	e1aa      	b.n	800694e <UART_SetConfig+0x5a2>
 80065f8:	2320      	movs	r3, #32
 80065fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fe:	e1a6      	b.n	800694e <UART_SetConfig+0x5a2>
 8006600:	2340      	movs	r3, #64	; 0x40
 8006602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006606:	e1a2      	b.n	800694e <UART_SetConfig+0x5a2>
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660e:	e19e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <UART_SetConfig+0x348>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d130      	bne.n	800667c <UART_SetConfig+0x2d0>
 800661a:	4b33      	ldr	r3, [pc, #204]	; (80066e8 <UART_SetConfig+0x33c>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	2b05      	cmp	r3, #5
 8006624:	d826      	bhi.n	8006674 <UART_SetConfig+0x2c8>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0x280>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006645 	.word	0x08006645
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006655 	.word	0x08006655
 8006638:	0800665d 	.word	0x0800665d
 800663c:	08006665 	.word	0x08006665
 8006640:	0800666d 	.word	0x0800666d
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664a:	e180      	b.n	800694e <UART_SetConfig+0x5a2>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006652:	e17c      	b.n	800694e <UART_SetConfig+0x5a2>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665a:	e178      	b.n	800694e <UART_SetConfig+0x5a2>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006662:	e174      	b.n	800694e <UART_SetConfig+0x5a2>
 8006664:	2320      	movs	r3, #32
 8006666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666a:	e170      	b.n	800694e <UART_SetConfig+0x5a2>
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006672:	e16c      	b.n	800694e <UART_SetConfig+0x5a2>
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667a:	e168      	b.n	800694e <UART_SetConfig+0x5a2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <UART_SetConfig+0x34c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d142      	bne.n	800670c <UART_SetConfig+0x360>
 8006686:	4b18      	ldr	r3, [pc, #96]	; (80066e8 <UART_SetConfig+0x33c>)
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b05      	cmp	r3, #5
 8006690:	d838      	bhi.n	8006704 <UART_SetConfig+0x358>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0x2ec>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066b1 	.word	0x080066b1
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	080066c1 	.word	0x080066c1
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e14a      	b.n	800694e <UART_SetConfig+0x5a2>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066be:	e146      	b.n	800694e <UART_SetConfig+0x5a2>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c6:	e142      	b.n	800694e <UART_SetConfig+0x5a2>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ce:	e13e      	b.n	800694e <UART_SetConfig+0x5a2>
 80066d0:	2320      	movs	r3, #32
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d6:	e13a      	b.n	800694e <UART_SetConfig+0x5a2>
 80066d8:	cfff69f3 	.word	0xcfff69f3
 80066dc:	58000c00 	.word	0x58000c00
 80066e0:	11fff4ff 	.word	0x11fff4ff
 80066e4:	40011000 	.word	0x40011000
 80066e8:	58024400 	.word	0x58024400
 80066ec:	40004400 	.word	0x40004400
 80066f0:	40004800 	.word	0x40004800
 80066f4:	40004c00 	.word	0x40004c00
 80066f8:	40005000 	.word	0x40005000
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e124      	b.n	800694e <UART_SetConfig+0x5a2>
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670a:	e120      	b.n	800694e <UART_SetConfig+0x5a2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4acc      	ldr	r2, [pc, #816]	; (8006a44 <UART_SetConfig+0x698>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d176      	bne.n	8006804 <UART_SetConfig+0x458>
 8006716:	4bcc      	ldr	r3, [pc, #816]	; (8006a48 <UART_SetConfig+0x69c>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800671e:	2b28      	cmp	r3, #40	; 0x28
 8006720:	d86c      	bhi.n	80067fc <UART_SetConfig+0x450>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x37c>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	080067cd 	.word	0x080067cd
 800672c:	080067fd 	.word	0x080067fd
 8006730:	080067fd 	.word	0x080067fd
 8006734:	080067fd 	.word	0x080067fd
 8006738:	080067fd 	.word	0x080067fd
 800673c:	080067fd 	.word	0x080067fd
 8006740:	080067fd 	.word	0x080067fd
 8006744:	080067fd 	.word	0x080067fd
 8006748:	080067d5 	.word	0x080067d5
 800674c:	080067fd 	.word	0x080067fd
 8006750:	080067fd 	.word	0x080067fd
 8006754:	080067fd 	.word	0x080067fd
 8006758:	080067fd 	.word	0x080067fd
 800675c:	080067fd 	.word	0x080067fd
 8006760:	080067fd 	.word	0x080067fd
 8006764:	080067fd 	.word	0x080067fd
 8006768:	080067dd 	.word	0x080067dd
 800676c:	080067fd 	.word	0x080067fd
 8006770:	080067fd 	.word	0x080067fd
 8006774:	080067fd 	.word	0x080067fd
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067fd 	.word	0x080067fd
 8006780:	080067fd 	.word	0x080067fd
 8006784:	080067fd 	.word	0x080067fd
 8006788:	080067e5 	.word	0x080067e5
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080067fd 	.word	0x080067fd
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	080067ed 	.word	0x080067ed
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	080067fd 	.word	0x080067fd
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067f5 	.word	0x080067f5
 80067cc:	2301      	movs	r3, #1
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e0bc      	b.n	800694e <UART_SetConfig+0x5a2>
 80067d4:	2304      	movs	r3, #4
 80067d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067da:	e0b8      	b.n	800694e <UART_SetConfig+0x5a2>
 80067dc:	2308      	movs	r3, #8
 80067de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e2:	e0b4      	b.n	800694e <UART_SetConfig+0x5a2>
 80067e4:	2310      	movs	r3, #16
 80067e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ea:	e0b0      	b.n	800694e <UART_SetConfig+0x5a2>
 80067ec:	2320      	movs	r3, #32
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e0ac      	b.n	800694e <UART_SetConfig+0x5a2>
 80067f4:	2340      	movs	r3, #64	; 0x40
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e0a8      	b.n	800694e <UART_SetConfig+0x5a2>
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006802:	e0a4      	b.n	800694e <UART_SetConfig+0x5a2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a90      	ldr	r2, [pc, #576]	; (8006a4c <UART_SetConfig+0x6a0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d130      	bne.n	8006870 <UART_SetConfig+0x4c4>
 800680e:	4b8e      	ldr	r3, [pc, #568]	; (8006a48 <UART_SetConfig+0x69c>)
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	2b05      	cmp	r3, #5
 8006818:	d826      	bhi.n	8006868 <UART_SetConfig+0x4bc>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0x474>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006839 	.word	0x08006839
 8006824:	08006841 	.word	0x08006841
 8006828:	08006849 	.word	0x08006849
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	2300      	movs	r3, #0
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e086      	b.n	800694e <UART_SetConfig+0x5a2>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006846:	e082      	b.n	800694e <UART_SetConfig+0x5a2>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684e:	e07e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006856:	e07a      	b.n	800694e <UART_SetConfig+0x5a2>
 8006858:	2320      	movs	r3, #32
 800685a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685e:	e076      	b.n	800694e <UART_SetConfig+0x5a2>
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006866:	e072      	b.n	800694e <UART_SetConfig+0x5a2>
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686e:	e06e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a76      	ldr	r2, [pc, #472]	; (8006a50 <UART_SetConfig+0x6a4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d130      	bne.n	80068dc <UART_SetConfig+0x530>
 800687a:	4b73      	ldr	r3, [pc, #460]	; (8006a48 <UART_SetConfig+0x69c>)
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b05      	cmp	r3, #5
 8006884:	d826      	bhi.n	80068d4 <UART_SetConfig+0x528>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x4e0>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068a5 	.word	0x080068a5
 8006890:	080068ad 	.word	0x080068ad
 8006894:	080068b5 	.word	0x080068b5
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068c5 	.word	0x080068c5
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e050      	b.n	800694e <UART_SetConfig+0x5a2>
 80068ac:	2304      	movs	r3, #4
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b2:	e04c      	b.n	800694e <UART_SetConfig+0x5a2>
 80068b4:	2308      	movs	r3, #8
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ba:	e048      	b.n	800694e <UART_SetConfig+0x5a2>
 80068bc:	2310      	movs	r3, #16
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c2:	e044      	b.n	800694e <UART_SetConfig+0x5a2>
 80068c4:	2320      	movs	r3, #32
 80068c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ca:	e040      	b.n	800694e <UART_SetConfig+0x5a2>
 80068cc:	2340      	movs	r3, #64	; 0x40
 80068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d2:	e03c      	b.n	800694e <UART_SetConfig+0x5a2>
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068da:	e038      	b.n	800694e <UART_SetConfig+0x5a2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5c      	ldr	r2, [pc, #368]	; (8006a54 <UART_SetConfig+0x6a8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d130      	bne.n	8006948 <UART_SetConfig+0x59c>
 80068e6:	4b58      	ldr	r3, [pc, #352]	; (8006a48 <UART_SetConfig+0x69c>)
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d826      	bhi.n	8006940 <UART_SetConfig+0x594>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x54c>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	08006911 	.word	0x08006911
 80068fc:	08006919 	.word	0x08006919
 8006900:	08006921 	.word	0x08006921
 8006904:	08006929 	.word	0x08006929
 8006908:	08006931 	.word	0x08006931
 800690c:	08006939 	.word	0x08006939
 8006910:	2302      	movs	r3, #2
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e01a      	b.n	800694e <UART_SetConfig+0x5a2>
 8006918:	2304      	movs	r3, #4
 800691a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691e:	e016      	b.n	800694e <UART_SetConfig+0x5a2>
 8006920:	2308      	movs	r3, #8
 8006922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006926:	e012      	b.n	800694e <UART_SetConfig+0x5a2>
 8006928:	2310      	movs	r3, #16
 800692a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692e:	e00e      	b.n	800694e <UART_SetConfig+0x5a2>
 8006930:	2320      	movs	r3, #32
 8006932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006936:	e00a      	b.n	800694e <UART_SetConfig+0x5a2>
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693e:	e006      	b.n	800694e <UART_SetConfig+0x5a2>
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006946:	e002      	b.n	800694e <UART_SetConfig+0x5a2>
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a40      	ldr	r2, [pc, #256]	; (8006a54 <UART_SetConfig+0x6a8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	f040 80ef 	bne.w	8006b38 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800695a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800695e:	2b20      	cmp	r3, #32
 8006960:	dc46      	bgt.n	80069f0 <UART_SetConfig+0x644>
 8006962:	2b02      	cmp	r3, #2
 8006964:	f2c0 8081 	blt.w	8006a6a <UART_SetConfig+0x6be>
 8006968:	3b02      	subs	r3, #2
 800696a:	2b1e      	cmp	r3, #30
 800696c:	d87d      	bhi.n	8006a6a <UART_SetConfig+0x6be>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <UART_SetConfig+0x5c8>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	080069f7 	.word	0x080069f7
 8006978:	08006a6b 	.word	0x08006a6b
 800697c:	080069ff 	.word	0x080069ff
 8006980:	08006a6b 	.word	0x08006a6b
 8006984:	08006a6b 	.word	0x08006a6b
 8006988:	08006a6b 	.word	0x08006a6b
 800698c:	08006a0f 	.word	0x08006a0f
 8006990:	08006a6b 	.word	0x08006a6b
 8006994:	08006a6b 	.word	0x08006a6b
 8006998:	08006a6b 	.word	0x08006a6b
 800699c:	08006a6b 	.word	0x08006a6b
 80069a0:	08006a6b 	.word	0x08006a6b
 80069a4:	08006a6b 	.word	0x08006a6b
 80069a8:	08006a6b 	.word	0x08006a6b
 80069ac:	08006a1f 	.word	0x08006a1f
 80069b0:	08006a6b 	.word	0x08006a6b
 80069b4:	08006a6b 	.word	0x08006a6b
 80069b8:	08006a6b 	.word	0x08006a6b
 80069bc:	08006a6b 	.word	0x08006a6b
 80069c0:	08006a6b 	.word	0x08006a6b
 80069c4:	08006a6b 	.word	0x08006a6b
 80069c8:	08006a6b 	.word	0x08006a6b
 80069cc:	08006a6b 	.word	0x08006a6b
 80069d0:	08006a6b 	.word	0x08006a6b
 80069d4:	08006a6b 	.word	0x08006a6b
 80069d8:	08006a6b 	.word	0x08006a6b
 80069dc:	08006a6b 	.word	0x08006a6b
 80069e0:	08006a6b 	.word	0x08006a6b
 80069e4:	08006a6b 	.word	0x08006a6b
 80069e8:	08006a6b 	.word	0x08006a6b
 80069ec:	08006a5d 	.word	0x08006a5d
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d036      	beq.n	8006a62 <UART_SetConfig+0x6b6>
 80069f4:	e039      	b.n	8006a6a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069f6:	f7fd fe43 	bl	8004680 <HAL_RCCEx_GetD3PCLK1Freq>
 80069fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069fc:	e03b      	b.n	8006a76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fe:	f107 0314 	add.w	r3, r7, #20
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd fe52 	bl	80046ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a0c:	e033      	b.n	8006a76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd ff9e 	bl	8004954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a1c:	e02b      	b.n	8006a76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <UART_SetConfig+0x69c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <UART_SetConfig+0x69c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	08db      	lsrs	r3, r3, #3
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <UART_SetConfig+0x6ac>)
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a3c:	e01b      	b.n	8006a76 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <UART_SetConfig+0x6ac>)
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a42:	e018      	b.n	8006a76 <UART_SetConfig+0x6ca>
 8006a44:	40011400 	.word	0x40011400
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	40007800 	.word	0x40007800
 8006a50:	40007c00 	.word	0x40007c00
 8006a54:	58000c00 	.word	0x58000c00
 8006a58:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a5c:	4bc4      	ldr	r3, [pc, #784]	; (8006d70 <UART_SetConfig+0x9c4>)
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a60:	e009      	b.n	8006a76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a68:	e005      	b.n	8006a76 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 81da 	beq.w	8006e32 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	4abc      	ldr	r2, [pc, #752]	; (8006d74 <UART_SetConfig+0x9c8>)
 8006a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a90:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d305      	bcc.n	8006aae <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d903      	bls.n	8006ab6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ab4:	e1bd      	b.n	8006e32 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	4aac      	ldr	r2, [pc, #688]	; (8006d74 <UART_SetConfig+0x9c8>)
 8006ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	f7f9 fc03 	bl	80002d8 <__aeabi_uldivmod>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	020b      	lsls	r3, r1, #8
 8006ae4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ae8:	0202      	lsls	r2, r0, #8
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	6849      	ldr	r1, [r1, #4]
 8006aee:	0849      	lsrs	r1, r1, #1
 8006af0:	4608      	mov	r0, r1
 8006af2:	f04f 0100 	mov.w	r1, #0
 8006af6:	1814      	adds	r4, r2, r0
 8006af8:	eb43 0501 	adc.w	r5, r3, r1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	461a      	mov	r2, r3
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 fbe5 	bl	80002d8 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4613      	mov	r3, r2
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b1c:	d308      	bcc.n	8006b30 <UART_SetConfig+0x784>
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b24:	d204      	bcs.n	8006b30 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b2c:	60da      	str	r2, [r3, #12]
 8006b2e:	e180      	b.n	8006e32 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b36:	e17c      	b.n	8006e32 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b40:	f040 80bf 	bne.w	8006cc2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	dc49      	bgt.n	8006be0 <UART_SetConfig+0x834>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	db7c      	blt.n	8006c4a <UART_SetConfig+0x89e>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d87a      	bhi.n	8006c4a <UART_SetConfig+0x89e>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x7b0>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006be7 	.word	0x08006be7
 8006b60:	08006bef 	.word	0x08006bef
 8006b64:	08006c4b 	.word	0x08006c4b
 8006b68:	08006c4b 	.word	0x08006c4b
 8006b6c:	08006bf7 	.word	0x08006bf7
 8006b70:	08006c4b 	.word	0x08006c4b
 8006b74:	08006c4b 	.word	0x08006c4b
 8006b78:	08006c4b 	.word	0x08006c4b
 8006b7c:	08006c07 	.word	0x08006c07
 8006b80:	08006c4b 	.word	0x08006c4b
 8006b84:	08006c4b 	.word	0x08006c4b
 8006b88:	08006c4b 	.word	0x08006c4b
 8006b8c:	08006c4b 	.word	0x08006c4b
 8006b90:	08006c4b 	.word	0x08006c4b
 8006b94:	08006c4b 	.word	0x08006c4b
 8006b98:	08006c4b 	.word	0x08006c4b
 8006b9c:	08006c17 	.word	0x08006c17
 8006ba0:	08006c4b 	.word	0x08006c4b
 8006ba4:	08006c4b 	.word	0x08006c4b
 8006ba8:	08006c4b 	.word	0x08006c4b
 8006bac:	08006c4b 	.word	0x08006c4b
 8006bb0:	08006c4b 	.word	0x08006c4b
 8006bb4:	08006c4b 	.word	0x08006c4b
 8006bb8:	08006c4b 	.word	0x08006c4b
 8006bbc:	08006c4b 	.word	0x08006c4b
 8006bc0:	08006c4b 	.word	0x08006c4b
 8006bc4:	08006c4b 	.word	0x08006c4b
 8006bc8:	08006c4b 	.word	0x08006c4b
 8006bcc:	08006c4b 	.word	0x08006c4b
 8006bd0:	08006c4b 	.word	0x08006c4b
 8006bd4:	08006c4b 	.word	0x08006c4b
 8006bd8:	08006c4b 	.word	0x08006c4b
 8006bdc:	08006c3d 	.word	0x08006c3d
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d02e      	beq.n	8006c42 <UART_SetConfig+0x896>
 8006be4:	e031      	b.n	8006c4a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be6:	f7fc fddf 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8006bea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bec:	e033      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bee:	f7fc fdf1 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8006bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bf4:	e02f      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf6:	f107 0314 	add.w	r3, r7, #20
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fd fd56 	bl	80046ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c04:	e027      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd fea2 	bl	8004954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c14:	e01f      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c16:	4b58      	ldr	r3, [pc, #352]	; (8006d78 <UART_SetConfig+0x9cc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c22:	4b55      	ldr	r3, [pc, #340]	; (8006d78 <UART_SetConfig+0x9cc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	08db      	lsrs	r3, r3, #3
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	4a53      	ldr	r2, [pc, #332]	; (8006d7c <UART_SetConfig+0x9d0>)
 8006c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c34:	e00f      	b.n	8006c56 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006c36:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <UART_SetConfig+0x9d0>)
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3a:	e00c      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c3c:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <UART_SetConfig+0x9c4>)
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c40:	e009      	b.n	8006c56 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c48:	e005      	b.n	8006c56 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80ea 	beq.w	8006e32 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	4a44      	ldr	r2, [pc, #272]	; (8006d74 <UART_SetConfig+0x9c8>)
 8006c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c70:	005a      	lsls	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2b0f      	cmp	r3, #15
 8006c8a:	d916      	bls.n	8006cba <UART_SetConfig+0x90e>
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c92:	d212      	bcs.n	8006cba <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f023 030f 	bic.w	r3, r3, #15
 8006c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cac:	4313      	orrs	r3, r2
 8006cae:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cb6:	60da      	str	r2, [r3, #12]
 8006cb8:	e0bb      	b.n	8006e32 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cc0:	e0b7      	b.n	8006e32 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	dc4a      	bgt.n	8006d60 <UART_SetConfig+0x9b4>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f2c0 8086 	blt.w	8006ddc <UART_SetConfig+0xa30>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	f200 8083 	bhi.w	8006ddc <UART_SetConfig+0xa30>
 8006cd6:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0x930>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d67 	.word	0x08006d67
 8006ce0:	08006d81 	.word	0x08006d81
 8006ce4:	08006ddd 	.word	0x08006ddd
 8006ce8:	08006ddd 	.word	0x08006ddd
 8006cec:	08006d89 	.word	0x08006d89
 8006cf0:	08006ddd 	.word	0x08006ddd
 8006cf4:	08006ddd 	.word	0x08006ddd
 8006cf8:	08006ddd 	.word	0x08006ddd
 8006cfc:	08006d99 	.word	0x08006d99
 8006d00:	08006ddd 	.word	0x08006ddd
 8006d04:	08006ddd 	.word	0x08006ddd
 8006d08:	08006ddd 	.word	0x08006ddd
 8006d0c:	08006ddd 	.word	0x08006ddd
 8006d10:	08006ddd 	.word	0x08006ddd
 8006d14:	08006ddd 	.word	0x08006ddd
 8006d18:	08006ddd 	.word	0x08006ddd
 8006d1c:	08006da9 	.word	0x08006da9
 8006d20:	08006ddd 	.word	0x08006ddd
 8006d24:	08006ddd 	.word	0x08006ddd
 8006d28:	08006ddd 	.word	0x08006ddd
 8006d2c:	08006ddd 	.word	0x08006ddd
 8006d30:	08006ddd 	.word	0x08006ddd
 8006d34:	08006ddd 	.word	0x08006ddd
 8006d38:	08006ddd 	.word	0x08006ddd
 8006d3c:	08006ddd 	.word	0x08006ddd
 8006d40:	08006ddd 	.word	0x08006ddd
 8006d44:	08006ddd 	.word	0x08006ddd
 8006d48:	08006ddd 	.word	0x08006ddd
 8006d4c:	08006ddd 	.word	0x08006ddd
 8006d50:	08006ddd 	.word	0x08006ddd
 8006d54:	08006ddd 	.word	0x08006ddd
 8006d58:	08006ddd 	.word	0x08006ddd
 8006d5c:	08006dcf 	.word	0x08006dcf
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d037      	beq.n	8006dd4 <UART_SetConfig+0xa28>
 8006d64:	e03a      	b.n	8006ddc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d66:	f7fc fd1f 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8006d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d6c:	e03c      	b.n	8006de8 <UART_SetConfig+0xa3c>
 8006d6e:	bf00      	nop
 8006d70:	003d0900 	.word	0x003d0900
 8006d74:	08007b20 	.word	0x08007b20
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d80:	f7fc fd28 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8006d84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d86:	e02f      	b.n	8006de8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd fc8d 	bl	80046ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d96:	e027      	b.n	8006de8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d98:	f107 0308 	add.w	r3, r7, #8
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fd fdd9 	bl	8004954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006da6:	e01f      	b.n	8006de8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006da8:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <UART_SetConfig+0xab0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006db4:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <UART_SetConfig+0xab0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	08db      	lsrs	r3, r3, #3
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <UART_SetConfig+0xab4>)
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dc6:	e00f      	b.n	8006de8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <UART_SetConfig+0xab4>)
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dcc:	e00c      	b.n	8006de8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <UART_SetConfig+0xab8>)
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dd2:	e009      	b.n	8006de8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dda:	e005      	b.n	8006de8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006de6:	bf00      	nop
    }

    if (pclk != 0U)
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d021      	beq.n	8006e32 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <UART_SetConfig+0xabc>)
 8006df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	441a      	add	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d908      	bls.n	8006e2c <UART_SetConfig+0xa80>
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e20:	d204      	bcs.n	8006e2c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	e002      	b.n	8006e32 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3738      	adds	r7, #56	; 0x38
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	03d09000 	.word	0x03d09000
 8006e64:	003d0900 	.word	0x003d0900
 8006e68:	08007b20 	.word	0x08007b20

08006e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01a      	beq.n	8006f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6a:	d10a      	bne.n	8006f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc0:	f7fa fbb0 	bl	8001724 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d10e      	bne.n	8006ff2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f82f 	bl	8007046 <UART_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e025      	b.n	800703e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d10e      	bne.n	800701e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f819 	bl	8007046 <UART_WaitOnFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e00f      	b.n	800703e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007056:	e062      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800705e:	d05e      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007060:	f7fa fb60 	bl	8001724 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <UART_WaitOnFlagUntilTimeout+0x30>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11d      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007084:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e045      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d02e      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ce:	d126      	bne.n	800711e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e00f      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4013      	ands	r3, r2
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	bf0c      	ite	eq
 800712e:	2301      	moveq	r3, #1
 8007130:	2300      	movne	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	429a      	cmp	r2, r3
 800713a:	d08d      	beq.n	8007058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_UARTEx_DisableFifoMode+0x16>
 8007158:	2302      	movs	r3, #2
 800715a:	e027      	b.n	80071ac <HAL_UARTEx_DisableFifoMode+0x66>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2224      	movs	r2, #36	; 0x24
 8007168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800718a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e02d      	b.n	800722c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2224      	movs	r2, #36	; 0x24
 80071dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f84f 	bl	80072b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e02d      	b.n	80072a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2224      	movs	r2, #36	; 0x24
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f811 	bl	80072b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d108      	bne.n	80072d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072d0:	e031      	b.n	8007336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072d2:	2310      	movs	r3, #16
 80072d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072d6:	2310      	movs	r3, #16
 80072d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	0e5b      	lsrs	r3, r3, #25
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	0f5b      	lsrs	r3, r3, #29
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	7b3a      	ldrb	r2, [r7, #12]
 80072fe:	4911      	ldr	r1, [pc, #68]	; (8007344 <UARTEx_SetNbDataToProcess+0x94>)
 8007300:	5c8a      	ldrb	r2, [r1, r2]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007306:	7b3a      	ldrb	r2, [r7, #12]
 8007308:	490f      	ldr	r1, [pc, #60]	; (8007348 <UARTEx_SetNbDataToProcess+0x98>)
 800730a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800730c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	7b7a      	ldrb	r2, [r7, #13]
 800731c:	4909      	ldr	r1, [pc, #36]	; (8007344 <UARTEx_SetNbDataToProcess+0x94>)
 800731e:	5c8a      	ldrb	r2, [r1, r2]
 8007320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007324:	7b7a      	ldrb	r2, [r7, #13]
 8007326:	4908      	ldr	r1, [pc, #32]	; (8007348 <UARTEx_SetNbDataToProcess+0x98>)
 8007328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800732a:	fb93 f3f2 	sdiv	r3, r3, r2
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	08007b38 	.word	0x08007b38
 8007348:	08007b40 	.word	0x08007b40

0800734c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800734c:	b084      	sub	sp, #16
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	f107 001c 	add.w	r0, r7, #28
 800735a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2b01      	cmp	r3, #1
 8007362:	d120      	bne.n	80073a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	4b2a      	ldr	r3, [pc, #168]	; (8007420 <USB_CoreInit+0xd4>)
 8007376:	4013      	ands	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d105      	bne.n	800739a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa60 	bl	8007860 <USB_CoreReset>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e01a      	b.n	80073dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa54 	bl	8007860 <USB_CoreReset>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38
 80073ce:	e005      	b.n	80073dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d116      	bne.n	8007410 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <USB_CoreInit+0xd8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f043 0206 	orr.w	r2, r3, #6
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800741c:	b004      	add	sp, #16
 800741e:	4770      	bx	lr
 8007420:	ffbdffbf 	.word	0xffbdffbf
 8007424:	03ee0000 	.word	0x03ee0000

08007428 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f023 0201 	bic.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e00b      	b.n	800748e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e001      	b.n	800748e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e003      	b.n	8007496 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800748e:	2032      	movs	r0, #50	; 0x32
 8007490:	f7fa f954 	bl	800173c <HAL_Delay>

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074a0:	b084      	sub	sp, #16
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e009      	b.n	80074d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3340      	adds	r3, #64	; 0x40
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b0e      	cmp	r3, #14
 80074d8:	d9f2      	bls.n	80074c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11c      	bne.n	800751a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e005      	b.n	8007526 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	4619      	mov	r1, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	461a      	mov	r2, r3
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10c      	bne.n	8007566 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f949 	bl	80077ec <USB_SetDevSpeed>
 800755a:	e008      	b.n	800756e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800755c:	2101      	movs	r1, #1
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f944 	bl	80077ec <USB_SetDevSpeed>
 8007564:	e003      	b.n	800756e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007566:	2103      	movs	r1, #3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f93f 	bl	80077ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800756e:	2110      	movs	r1, #16
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f8f3 	bl	800775c <USB_FlushTxFifo>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f911 	bl	80077a8 <USB_FlushRxFifo>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	461a      	mov	r2, r3
 8007598:	2300      	movs	r3, #0
 800759a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	461a      	mov	r2, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	e043      	b.n	8007642 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d0:	d118      	bne.n	8007604 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	461a      	mov	r2, r3
 80075e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e013      	b.n	8007616 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e008      	b.n	8007616 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	461a      	mov	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	461a      	mov	r2, r3
 8007624:	2300      	movs	r3, #0
 8007626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	461a      	mov	r2, r3
 8007636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800763a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3301      	adds	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	d3b7      	bcc.n	80075ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e043      	b.n	80076d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007666:	d118      	bne.n	800769a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e013      	b.n	80076ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	461a      	mov	r2, r3
 8007692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e008      	b.n	80076ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	2300      	movs	r3, #0
 80076aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	461a      	mov	r2, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	461a      	mov	r2, r3
 80076cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3301      	adds	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3b7      	bcc.n	8007650 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f043 0210 	orr.w	r2, r3, #16
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <USB_DevInit+0x2b4>)
 800771a:	4313      	orrs	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f043 0208 	orr.w	r2, r3, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d105      	bne.n	8007744 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <USB_DevInit+0x2b8>)
 800773e:	4313      	orrs	r3, r2
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007750:	b004      	add	sp, #16
 8007752:	4770      	bx	lr
 8007754:	803c3800 	.word	0x803c3800
 8007758:	40000004 	.word	0x40000004

0800775c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	019b      	lsls	r3, r3, #6
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <USB_FlushTxFifo+0x48>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d901      	bls.n	8007788 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e006      	b.n	8007796 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b20      	cmp	r3, #32
 8007792:	d0f0      	beq.n	8007776 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	00030d40 	.word	0x00030d40

080077a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2210      	movs	r2, #16
 80077b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <USB_FlushRxFifo+0x40>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e006      	b.n	80077da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d0f0      	beq.n	80077ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00030d40 	.word	0x00030d40

080077ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <USB_CoreReset+0x64>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d901      	bls.n	800787e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e01b      	b.n	80078b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	daf2      	bge.n	800786c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f043 0201 	orr.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <USB_CoreReset+0x64>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e006      	b.n	80078b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d0f0      	beq.n	8007896 <USB_CoreReset+0x36>

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	00030d40 	.word	0x00030d40

080078c8 <_Znwj>:
 80078c8:	2801      	cmp	r0, #1
 80078ca:	bf38      	it	cc
 80078cc:	2001      	movcc	r0, #1
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 f844 	bl	8007960 <malloc>
 80078d8:	b930      	cbnz	r0, 80078e8 <_Znwj+0x20>
 80078da:	f000 f807 	bl	80078ec <_ZSt15get_new_handlerv>
 80078de:	b908      	cbnz	r0, 80078e4 <_Znwj+0x1c>
 80078e0:	f000 f80c 	bl	80078fc <abort>
 80078e4:	4780      	blx	r0
 80078e6:	e7f4      	b.n	80078d2 <_Znwj+0xa>
 80078e8:	bd10      	pop	{r4, pc}
	...

080078ec <_ZSt15get_new_handlerv>:
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <_ZSt15get_new_handlerv+0xc>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	f3bf 8f5b 	dmb	ish
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	200006fc 	.word	0x200006fc

080078fc <abort>:
 80078fc:	b508      	push	{r3, lr}
 80078fe:	2006      	movs	r0, #6
 8007900:	f000 f8d0 	bl	8007aa4 <raise>
 8007904:	2001      	movs	r0, #1
 8007906:	f7f9 fd91 	bl	800142c <_exit>
	...

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000010 	.word	0x20000010

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	; (800795c <__libc_init_array+0x44>)
 800792c:	f000 f8e4 	bl	8007af8 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	08007b50 	.word	0x08007b50
 8007954:	08007b50 	.word	0x08007b50
 8007958:	08007b50 	.word	0x08007b50
 800795c:	08007b58 	.word	0x08007b58

08007960 <malloc>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <malloc+0xc>)
 8007962:	4601      	mov	r1, r0
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f000 b80b 	b.w	8007980 <_malloc_r>
 800796a:	bf00      	nop
 800796c:	20000010 	.word	0x20000010

08007970 <memset>:
 8007970:	4402      	add	r2, r0
 8007972:	4603      	mov	r3, r0
 8007974:	4293      	cmp	r3, r2
 8007976:	d100      	bne.n	800797a <memset+0xa>
 8007978:	4770      	bx	lr
 800797a:	f803 1b01 	strb.w	r1, [r3], #1
 800797e:	e7f9      	b.n	8007974 <memset+0x4>

08007980 <_malloc_r>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	1ccd      	adds	r5, r1, #3
 8007984:	f025 0503 	bic.w	r5, r5, #3
 8007988:	3508      	adds	r5, #8
 800798a:	2d0c      	cmp	r5, #12
 800798c:	bf38      	it	cc
 800798e:	250c      	movcc	r5, #12
 8007990:	2d00      	cmp	r5, #0
 8007992:	4606      	mov	r6, r0
 8007994:	db01      	blt.n	800799a <_malloc_r+0x1a>
 8007996:	42a9      	cmp	r1, r5
 8007998:	d903      	bls.n	80079a2 <_malloc_r+0x22>
 800799a:	230c      	movs	r3, #12
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	2000      	movs	r0, #0
 80079a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a2:	f000 f89b 	bl	8007adc <__malloc_lock>
 80079a6:	4921      	ldr	r1, [pc, #132]	; (8007a2c <_malloc_r+0xac>)
 80079a8:	680a      	ldr	r2, [r1, #0]
 80079aa:	4614      	mov	r4, r2
 80079ac:	b99c      	cbnz	r4, 80079d6 <_malloc_r+0x56>
 80079ae:	4f20      	ldr	r7, [pc, #128]	; (8007a30 <_malloc_r+0xb0>)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	b923      	cbnz	r3, 80079be <_malloc_r+0x3e>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4630      	mov	r0, r6
 80079b8:	f000 f83c 	bl	8007a34 <_sbrk_r>
 80079bc:	6038      	str	r0, [r7, #0]
 80079be:	4629      	mov	r1, r5
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 f837 	bl	8007a34 <_sbrk_r>
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d123      	bne.n	8007a12 <_malloc_r+0x92>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 f88a 	bl	8007ae8 <__malloc_unlock>
 80079d4:	e7e3      	b.n	800799e <_malloc_r+0x1e>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	1b5b      	subs	r3, r3, r5
 80079da:	d417      	bmi.n	8007a0c <_malloc_r+0x8c>
 80079dc:	2b0b      	cmp	r3, #11
 80079de:	d903      	bls.n	80079e8 <_malloc_r+0x68>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	441c      	add	r4, r3
 80079e4:	6025      	str	r5, [r4, #0]
 80079e6:	e004      	b.n	80079f2 <_malloc_r+0x72>
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	42a2      	cmp	r2, r4
 80079ec:	bf0c      	ite	eq
 80079ee:	600b      	streq	r3, [r1, #0]
 80079f0:	6053      	strne	r3, [r2, #4]
 80079f2:	4630      	mov	r0, r6
 80079f4:	f000 f878 	bl	8007ae8 <__malloc_unlock>
 80079f8:	f104 000b 	add.w	r0, r4, #11
 80079fc:	1d23      	adds	r3, r4, #4
 80079fe:	f020 0007 	bic.w	r0, r0, #7
 8007a02:	1ac2      	subs	r2, r0, r3
 8007a04:	d0cc      	beq.n	80079a0 <_malloc_r+0x20>
 8007a06:	1a1b      	subs	r3, r3, r0
 8007a08:	50a3      	str	r3, [r4, r2]
 8007a0a:	e7c9      	b.n	80079a0 <_malloc_r+0x20>
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	6864      	ldr	r4, [r4, #4]
 8007a10:	e7cc      	b.n	80079ac <_malloc_r+0x2c>
 8007a12:	1cc4      	adds	r4, r0, #3
 8007a14:	f024 0403 	bic.w	r4, r4, #3
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d0e3      	beq.n	80079e4 <_malloc_r+0x64>
 8007a1c:	1a21      	subs	r1, r4, r0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 f808 	bl	8007a34 <_sbrk_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d1dd      	bne.n	80079e4 <_malloc_r+0x64>
 8007a28:	e7cf      	b.n	80079ca <_malloc_r+0x4a>
 8007a2a:	bf00      	nop
 8007a2c:	20000700 	.word	0x20000700
 8007a30:	20000704 	.word	0x20000704

08007a34 <_sbrk_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_sbrk_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7f9 fcfe 	bl	8001440 <_sbrk>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_sbrk_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_sbrk_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	2000070c 	.word	0x2000070c

08007a54 <_raise_r>:
 8007a54:	291f      	cmp	r1, #31
 8007a56:	b538      	push	{r3, r4, r5, lr}
 8007a58:	4604      	mov	r4, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	d904      	bls.n	8007a68 <_raise_r+0x14>
 8007a5e:	2316      	movs	r3, #22
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a6a:	b112      	cbz	r2, 8007a72 <_raise_r+0x1e>
 8007a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a70:	b94b      	cbnz	r3, 8007a86 <_raise_r+0x32>
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f830 	bl	8007ad8 <_getpid_r>
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a82:	f000 b817 	b.w	8007ab4 <_kill_r>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d00a      	beq.n	8007aa0 <_raise_r+0x4c>
 8007a8a:	1c59      	adds	r1, r3, #1
 8007a8c:	d103      	bne.n	8007a96 <_raise_r+0x42>
 8007a8e:	2316      	movs	r3, #22
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	2001      	movs	r0, #1
 8007a94:	e7e7      	b.n	8007a66 <_raise_r+0x12>
 8007a96:	2400      	movs	r4, #0
 8007a98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	4798      	blx	r3
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7e0      	b.n	8007a66 <_raise_r+0x12>

08007aa4 <raise>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <raise+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f7ff bfd3 	b.w	8007a54 <_raise_r>
 8007aae:	bf00      	nop
 8007ab0:	20000010 	.word	0x20000010

08007ab4 <_kill_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	; (8007ad4 <_kill_r+0x20>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f7f9 fca3 	bl	800140c <_kill>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d102      	bne.n	8007ad0 <_kill_r+0x1c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	b103      	cbz	r3, 8007ad0 <_kill_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000070c 	.word	0x2000070c

08007ad8 <_getpid_r>:
 8007ad8:	f7f9 bc90 	b.w	80013fc <_getpid>

08007adc <__malloc_lock>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__malloc_lock+0x8>)
 8007ade:	f000 b809 	b.w	8007af4 <__retarget_lock_acquire_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20000714 	.word	0x20000714

08007ae8 <__malloc_unlock>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__malloc_unlock+0x8>)
 8007aea:	f000 b804 	b.w	8007af6 <__retarget_lock_release_recursive>
 8007aee:	bf00      	nop
 8007af0:	20000714 	.word	0x20000714

08007af4 <__retarget_lock_acquire_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_release_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <_init>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr

08007b04 <_fini>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	bf00      	nop
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr
