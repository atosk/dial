
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009078  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009428  08009428  00019428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08009434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  080094a8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08009508  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000134  08009568  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  08009568  00020768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003852c  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dff  00000000  00000000  0005868e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0005d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0005eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dea3  00000000  00000000  00060558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecdf  00000000  00000000  0009e3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00175e0b  00000000  00000000  000bd0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00232ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  00232f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000134 	.word	0x20000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009300 	.word	0x08009300

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000138 	.word	0x20000138
 80002dc:	08009300 	.word	0x08009300

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	705a      	strb	r2, [r3, #1]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	4608      	mov	r0, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	460b      	mov	r3, r1
 80006be:	70bb      	strb	r3, [r7, #2]
 80006c0:	4613      	mov	r3, r2
 80006c2:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	787a      	ldrb	r2, [r7, #1]
 80006c8:	705a      	strb	r2, [r3, #1]
   int m_dial_temp = 0; // Temporary location to collect dial displacement
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d105      	bne.n	80006e0 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x36>
 80006d4:	787b      	ldrb	r3, [r7, #1]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e005      	b.n	80006ec <_ZNSt4Dial14CalculateStepsE9Directionhh+0x42>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	787b      	ldrb	r3, [r7, #1]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da02      	bge.n	80006f8 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x4e>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3364      	adds	r3, #100	; 0x64
 80006f6:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 80006f8:	78ba      	ldrb	r2, [r7, #2]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	015b      	lsls	r3, r3, #5
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZNSt4Dial14UpdatePositionEh>:

void Dial::UpdatePosition(uint8_t new_position){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
   m_dial_location = new_position;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]

}
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	715a      	strb	r2, [r3, #5]
   }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f022 0201 	bic.w	r2, r2, #1
 800079c:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2201      	movs	r2, #1
 80007de:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 80007e6:	2301      	movs	r3, #1
 80007e8:	75fb      	strb	r3, [r7, #23]
 80007ea:	e001      	b.n	80007f0 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	461a      	mov	r2, r3
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 80007fa:	f002 f8ff 	bl	80029fc <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f042 0201 	orr.w	r2, r2, #1
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58020800 	.word	0x58020800

08000824 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
   return m_status;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	795b      	ldrb	r3, [r3, #5]
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b0ac      	sub	sp, #176	; 0xb0
 8000858:	af04      	add	r7, sp, #16
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800085a:	f001 f923 	bl	8001aa4 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800085e:	f000 f937 	bl	8000ad0 <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000862:	f000 fb8f 	bl	8000f84 <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 8000866:	f000 f9c1 	bl	8000bec <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 800086a:	f000 faf5 	bl	8000e58 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 800086e:	f000 fb53 	bl	8000f18 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 8000872:	f000 fa61 	bl	8000d38 <_ZL12MX_TIM3_Initv>
   MX_I2C2_Init();
 8000876:	f000 fa11 	bl	8000c9c <_ZL12MX_I2C2_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800087a:	2108      	movs	r1, #8
 800087c:	488b      	ldr	r0, [pc, #556]	; (8000aac <main+0x258>)
 800087e:	f005 fb91 	bl	8005fa4 <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 8000882:	4b8b      	ldr	r3, [pc, #556]	; (8000ab0 <main+0x25c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a8a      	ldr	r2, [pc, #552]	; (8000ab0 <main+0x25c>)
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	6013      	str	r3, [r2, #0]

   // Control flow flags
   int move = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   int test_i2c = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

   // Character buffers
   char msg[100] = { 0 };
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2260      	movs	r2, #96	; 0x60
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f008 f8b0 	bl	8008a0c <memset>

   // Stepper
   int newnum = 90; // Next number to spin the dial to
 80008ac:	235a      	movs	r3, #90	; 0x5a
 80008ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   enum Direction dir = CW; // Direction of dial rotation.
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

   // Encoder
   uint8_t i2c_receive_buf[2]={0}; // Position data is 12 bits and requires two reads.
 80008b8:	2300      	movs	r3, #0
 80008ba:	843b      	strh	r3, [r7, #32]
   uint16_t encoder_angle = 0; //
 80008bc:	2300      	movs	r3, #0
 80008be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

#if DEBUG ==1
   uint8_t start_message[] = "\r\n\r\n..... Running .....\r\n";
 80008c2:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <main+0x260>)
 80008c4:	1d3c      	adds	r4, r7, #4
 80008c6:	461d      	mov	r5, r3
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d0:	c403      	stmia	r4!, {r0, r1}
 80008d2:	8022      	strh	r2, [r4, #0]
   HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), 10);
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	230a      	movs	r3, #10
 80008d8:	221a      	movs	r2, #26
 80008da:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <main+0x264>)
 80008dc:	f006 fd1e 	bl	800731c <HAL_UART_Transmit>
   int conf_flag = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   /* USER CODE BEGIN WHILE */

   while (1) {

// -------------------------------------------------------------------
      if (test_i2c == 1) {
 80008e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	f040 80b7 	bne.w	8000a5e <main+0x20a>
            // Read CONF Register
            // Reg is two bytes, but only the low one is useful for this application


            // ============================= Read ==========================================
            if (HAL_I2C_Mem_Read(&hi2c2, AS5600_ADDR, AS5600_REG_CONF_H, I2C_MEMADD_SIZE_16BIT ,i2c_receive_buf, 2, 200) != HAL_OK){
 80008f0:	23c8      	movs	r3, #200	; 0xc8
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2302      	movs	r3, #2
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2207      	movs	r2, #7
 8000902:	216c      	movs	r1, #108	; 0x6c
 8000904:	486d      	ldr	r0, [pc, #436]	; (8000abc <main+0x268>)
 8000906:	f002 fa37 	bl	8002d78 <HAL_I2C_Mem_Read>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d012      	beq.n	8000940 <main+0xec>
               sprintf(msg, "Read error\r\n");
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4968      	ldr	r1, [pc, #416]	; (8000ac0 <main+0x26c>)
 8000920:	4618      	mov	r0, r3
 8000922:	f008 f979 	bl	8008c18 <siprintf>
               HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fcd8 	bl	80002e0 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000938:	230a      	movs	r3, #10
 800093a:	485f      	ldr	r0, [pc, #380]	; (8000ab8 <main+0x264>)
 800093c:	f006 fcee 	bl	800731c <HAL_UART_Transmit>
            }
            sprintf(msg, "Startup values.  Conf_H: %02X  Conf_L %02X\r\n",i2c_receive_buf[0], i2c_receive_buf[1]);
 8000940:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000944:	461a      	mov	r2, r3
 8000946:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800094a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800094e:	495d      	ldr	r1, [pc, #372]	; (8000ac4 <main+0x270>)
 8000950:	f008 f962 	bl	8008c18 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fcc1 	bl	80002e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000966:	230a      	movs	r3, #10
 8000968:	4853      	ldr	r0, [pc, #332]	; (8000ab8 <main+0x264>)
 800096a:	f006 fcd7 	bl	800731c <HAL_UART_Transmit>

            HAL_Delay(0.01);
 800096e:	2000      	movs	r0, #0
 8000970:	f001 f92a 	bl	8001bc8 <HAL_Delay>


            // ============================= Write ===========================================
            uint8_t conf_write[2] = {0};
 8000974:	2300      	movs	r3, #0
 8000976:	803b      	strh	r3, [r7, #0]
            conf_write[0] = i2c_receive_buf[0]; // CONF_H
 8000978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800097c:	703b      	strb	r3, [r7, #0]
            conf_write[1] = i2c_receive_buf[1] | (1 << 2); // CONF_L Turn on 1LSB Hysteresis.
 800097e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	b2db      	uxtb	r3, r3
 8000988:	707b      	strb	r3, [r7, #1]
            if (HAL_I2C_Mem_Write(&hi2c2, AS5600_ADDR, AS5600_REG_CONF_H, I2C_MEMADD_SIZE_16BIT, conf_write, 2, 200) != HAL_OK){
 800098a:	23c8      	movs	r3, #200	; 0xc8
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2302      	movs	r3, #2
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	463b      	mov	r3, r7
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2302      	movs	r3, #2
 8000998:	2207      	movs	r2, #7
 800099a:	216c      	movs	r1, #108	; 0x6c
 800099c:	4847      	ldr	r0, [pc, #284]	; (8000abc <main+0x268>)
 800099e:	f002 f8d7 	bl	8002b50 <HAL_I2C_Mem_Write>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d012      	beq.n	80009d8 <main+0x184>
                           sprintf(msg, "Write error\r\n");
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4944      	ldr	r1, [pc, #272]	; (8000ac8 <main+0x274>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f008 f92d 	bl	8008c18 <siprintf>
                           HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc8c 	bl	80002e0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009d0:	230a      	movs	r3, #10
 80009d2:	4839      	ldr	r0, [pc, #228]	; (8000ab8 <main+0x264>)
 80009d4:	f006 fca2 	bl	800731c <HAL_UART_Transmit>



            // ============================= Read ==========================================

            if (HAL_I2C_Mem_Read(&hi2c2, AS5600_ADDR, AS5600_REG_CONF_H, I2C_MEMADD_SIZE_16BIT ,i2c_receive_buf, 2, 200) != HAL_OK){
 80009d8:	23c8      	movs	r3, #200	; 0xc8
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2302      	movs	r3, #2
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2302      	movs	r3, #2
 80009e8:	2207      	movs	r2, #7
 80009ea:	216c      	movs	r1, #108	; 0x6c
 80009ec:	4833      	ldr	r0, [pc, #204]	; (8000abc <main+0x268>)
 80009ee:	f002 f9c3 	bl	8002d78 <HAL_I2C_Mem_Read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf14      	ite	ne
 80009f8:	2301      	movne	r3, #1
 80009fa:	2300      	moveq	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d012      	beq.n	8000a28 <main+0x1d4>
               sprintf(msg, "Read error\r\n");
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	492e      	ldr	r1, [pc, #184]	; (8000ac0 <main+0x26c>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f008 f905 	bl	8008c18 <siprintf>
               HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fc64 	bl	80002e0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a20:	230a      	movs	r3, #10
 8000a22:	4825      	ldr	r0, [pc, #148]	; (8000ab8 <main+0x264>)
 8000a24:	f006 fc7a 	bl	800731c <HAL_UART_Transmit>
            }


            HAL_Delay(0.01);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f8cd 	bl	8001bc8 <HAL_Delay>

            sprintf(msg, "Modified values. Conf_H: %02X  Conf_L %02X\r\n",i2c_receive_buf[0], i2c_receive_buf[1]);
 8000a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a38:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000a3c:	4923      	ldr	r1, [pc, #140]	; (8000acc <main+0x278>)
 8000a3e:	f008 f8eb 	bl	8008c18 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fc4a 	bl	80002e0 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a54:	230a      	movs	r3, #10
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <main+0x264>)
 8000a58:	f006 fc60 	bl	800731c <HAL_UART_Transmit>

            while(1);
 8000a5c:	e7fe      	b.n	8000a5c <main+0x208>
         }

      }

// -------------------------------------------------------------------
      if (move == 1) {
 8000a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	f47f af3f 	bne.w	80008e6 <main+0x92>
         // Routine to demo stepper control
         Move_Stepper(dir, 0, newnum);
 8000a68:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000a6c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fbd0 	bl	8001218 <_Z12Move_Stepper9Directionii>

         if (newnum > 0) {
 8000a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dd05      	ble.n	8000a8c <main+0x238>
            newnum -= 10;
 8000a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a84:	3b0a      	subs	r3, #10
 8000a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000a8a:	e72c      	b.n	80008e6 <main+0x92>
         } else {
            newnum = 90;
 8000a8c:	235a      	movs	r3, #90	; 0x5a
 8000a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            if (dir == CCW) {
 8000a92:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d103      	bne.n	8000aa2 <main+0x24e>
               dir = CW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000aa0:	e721      	b.n	80008e6 <main+0x92>
            } else
               (dir = CCW);
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
      } // End if move == 1

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
   } // End main loop
 8000aa8:	e71d      	b.n	80008e6 <main+0x92>
 8000aaa:	bf00      	nop
 8000aac:	20000258 	.word	0x20000258
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	08009398 	.word	0x08009398
 8000ab8:	200002a4 	.word	0x200002a4
 8000abc:	2000020c 	.word	0x2000020c
 8000ac0:	08009318 	.word	0x08009318
 8000ac4:	08009328 	.word	0x08009328
 8000ac8:	08009358 	.word	0x08009358
 8000acc:	08009368 	.word	0x08009368

08000ad0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	224c      	movs	r2, #76	; 0x4c
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f007 ff94 	bl	8008a0c <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 ff8e 	bl	8008a0c <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f002 fe57 	bl	80037a4 <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <_Z18SystemClock_Configv+0x114>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	4a39      	ldr	r2, [pc, #228]	; (8000be4 <_Z18SystemClock_Configv+0x114>)
 8000b00:	f023 0301 	bic.w	r3, r3, #1
 8000b04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b06:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <_Z18SystemClock_Configv+0x114>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <_Z18SystemClock_Configv+0x118>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b18:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <_Z18SystemClock_Configv+0x118>)
 8000b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <_Z18SystemClock_Configv+0x118>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <_Z18SystemClock_Configv+0x118>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d000      	beq.n	8000b46 <_Z18SystemClock_Configv+0x76>
 8000b44:	e7f2      	b.n	8000b2c <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b46:	2303      	movs	r3, #3
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 8000b64:	2318      	movs	r3, #24
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b74:	230c      	movs	r3, #12
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fe57 	bl	8003838 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 8000b9a:	f000 fb77 	bl	800128c <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b9e:	233f      	movs	r3, #63	; 0x3f
 8000ba0:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fa48 	bl	8004058 <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000bd8:	f000 fb58 	bl	800128c <Error_Handler>
   }
}
 8000bdc:	bf00      	nop
 8000bde:	3770      	adds	r7, #112	; 0x70
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58000400 	.word	0x58000400
 8000be8:	58024800 	.word	0x58024800

08000bec <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <_ZL11MX_ETH_Initv+0xa0>)
 8000bf4:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	3301      	adds	r3, #1
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	22e1      	movs	r2, #225	; 0xe1
 8000c10:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	3303      	adds	r3, #3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	3305      	adds	r3, #5
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <_ZL11MX_ETH_Initv+0xa4>)
 8000c3a:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <_ZL11MX_ETH_Initv+0xa8>)
 8000c40:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c48:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <_ZL11MX_ETH_Initv+0x9c>)
 8000c4c:	f001 f910 	bl	8001e70 <HAL_ETH_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 8000c60:	f000 fb14 	bl	800128c <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <_ZL11MX_ETH_Initv+0xac>)
 8000c6a:	f007 fecf 	bl	8008a0c <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <_ZL11MX_ETH_Initv+0xac>)
 8000c70:	2221      	movs	r2, #33	; 0x21
 8000c72:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_ZL11MX_ETH_Initv+0xac>)
 8000c76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c7a:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <_ZL11MX_ETH_Initv+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000184 	.word	0x20000184
 8000c8c:	40028000 	.word	0x40028000
 8000c90:	200000d4 	.word	0x200000d4
 8000c94:	20000074 	.word	0x20000074
 8000c98:	20000150 	.word	0x20000150

08000c9c <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
   /* USER CODE END I2C2_Init 0 */

   /* USER CODE BEGIN I2C2_Init 1 */

   /* USER CODE END I2C2_Init 1 */
   hi2c2.Instance = I2C2;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <_ZL12MX_I2C2_Initv+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
   hi2c2.Init.Timing = 0x10707DBC;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <_ZL12MX_I2C2_Initv+0x98>)
 8000caa:	605a      	str	r2, [r3, #4]
   hi2c2.Init.OwnAddress1 = 0;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
   hi2c2.Init.OwnAddress2 = 0;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000cd6:	4815      	ldr	r0, [pc, #84]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cd8:	f001 feaa 	bl	8002a30 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <_ZL12MX_I2C2_Initv+0x54>
      Error_Handler();
 8000cec:	f000 face 	bl	800128c <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000cf4:	f002 fb76 	bl	80033e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf8:	4603      	mov	r3, r0
         != HAL_OK) {
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <_ZL12MX_I2C2_Initv+0x70>
      Error_Handler();
 8000d08:	f000 fac0 	bl	800128c <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <_ZL12MX_I2C2_Initv+0x90>)
 8000d10:	f002 fbb3 	bl	800347a <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <_ZL12MX_I2C2_Initv+0x8c>
      Error_Handler();
 8000d24:	f000 fab2 	bl	800128c <Error_Handler>
   }
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000020c 	.word	0x2000020c
 8000d30:	40005800 	.word	0x40005800
 8000d34:	10707dbc 	.word	0x10707dbc

08000d38 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d6c:	4a39      	ldr	r2, [pc, #228]	; (8000e54 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d6e:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000d70:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d72:	223f      	movs	r2, #63	; 0x3f
 8000d74:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d78:	2210      	movs	r2, #16
 8000d7a:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d7e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000d82:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d90:	482f      	ldr	r0, [pc, #188]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000d92:	f005 f84f 	bl	8005e34 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2301      	movne	r3, #1
 8000d9e:	2300      	moveq	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000da6:	f000 fa71 	bl	800128c <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000db8:	f005 fc72 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000dcc:	f000 fa5e 	bl	800128c <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000dd0:	481f      	ldr	r0, [pc, #124]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000dd2:	f005 f886 	bl	8005ee2 <HAL_TIM_PWM_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000de6:	f000 fa51 	bl	800128c <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dea:	2320      	movs	r3, #32
 8000dec:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000dfa:	f006 f999 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000e0e:	f000 fa3d 	bl	800128c <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000e16:	2328      	movs	r3, #40	; 0x28
 8000e18:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000e22:	463b      	mov	r3, r7
 8000e24:	2208      	movs	r2, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000e2a:	f005 fb29 	bl	8006480 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000e3e:	f000 fa25 	bl	800128c <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <_ZL12MX_TIM3_Initv+0x118>)
 8000e44:	f000 fbd0 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000258 	.word	0x20000258
 8000e54:	40000400 	.word	0x40000400

08000e58 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000e60:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ea0:	481b      	ldr	r0, [pc, #108]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ea2:	f006 f9eb 	bl	800727c <HAL_UART_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8000eb6:	f000 f9e9 	bl	800128c <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ebe:	f007 f9c9 	bl	8008254 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec2:	4603      	mov	r3, r0
         != HAL_OK) {
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8000ed2:	f000 f9db 	bl	800128c <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000eda:	f007 f9f9 	bl	80082d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
         != HAL_OK) {
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8000eee:	f000 f9cd 	bl	800128c <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ef4:	f007 f975 	bl	80081e2 <HAL_UARTEx_DisableFifoMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8000f08:	f000 f9c0 	bl	800128c <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200002a4 	.word	0x200002a4
 8000f14:	40004800 	.word	0x40004800

08000f18 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f24:	2209      	movs	r2, #9
 8000f26:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000f60:	f002 fad7 	bl	8003512 <HAL_PCD_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8000f74:	f000 f98a 	bl	800128c <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000334 	.word	0x20000334
 8000f80:	40080000 	.word	0x40080000

08000f84 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a71      	ldr	r2, [pc, #452]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
   __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a6a      	ldr	r2, [pc, #424]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b67      	ldr	r3, [pc, #412]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b64      	ldr	r3, [pc, #400]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a62      	ldr	r2, [pc, #392]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b60      	ldr	r3, [pc, #384]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b5c      	ldr	r3, [pc, #368]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a5b      	ldr	r2, [pc, #364]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b55      	ldr	r3, [pc, #340]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	4a53      	ldr	r2, [pc, #332]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001040:	4b49      	ldr	r3, [pc, #292]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	4a44      	ldr	r2, [pc, #272]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105e:	4b42      	ldr	r3, [pc, #264]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <_ZL12MX_GPIO_Initv+0x1e4>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001090:	4836      	ldr	r0, [pc, #216]	; (800116c <_ZL12MX_GPIO_Initv+0x1e8>)
 8001092:	f001 fcb3 	bl	80029fc <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <_ZL12MX_GPIO_Initv+0x1ec>)
 800109e:	f001 fcad 	bl	80029fc <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	4832      	ldr	r0, [pc, #200]	; (8001174 <_ZL12MX_GPIO_Initv+0x1f0>)
 80010aa:	f001 fca7 	bl	80029fc <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	4831      	ldr	r0, [pc, #196]	; (8001178 <_ZL12MX_GPIO_Initv+0x1f4>)
 80010b4:	f001 fca2 	bl	80029fc <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4829      	ldr	r0, [pc, #164]	; (8001174 <_ZL12MX_GPIO_Initv+0x1f0>)
 80010ce:	f001 fae5 	bl	800269c <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 80010d2:	f244 0301 	movw	r3, #16385	; 0x4001
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4820      	ldr	r0, [pc, #128]	; (800116c <_ZL12MX_GPIO_Initv+0x1e8>)
 80010ec:	f001 fad6 	bl	800269c <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <_ZL12MX_GPIO_Initv+0x1ec>)
 800110a:	f001 fac7 	bl	800269c <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <_ZL12MX_GPIO_Initv+0x1f8>)
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001122:	f001 fabb 	bl	800269c <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <_ZL12MX_GPIO_Initv+0x1f0>)
 8001140:	f001 faac 	bl	800269c <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 8001144:	2302      	movs	r3, #2
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <_ZL12MX_GPIO_Initv+0x1f4>)
 800115c:	f001 fa9e 	bl	800269c <HAL_GPIO_Init>

}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	; 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400
 800116c:	58020400 	.word	0x58020400
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020800 	.word	0x58020800
 8001178:	58021000 	.word	0x58021000
 800117c:	11110000 	.word	0x11110000
 8001180:	58021800 	.word	0x58021800

08001184 <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 0201 	bic.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

   // !! Only works now because TIM3 is the only PWM timer.
   // !! The complete solution is to check TIM status bits to see
   // !! who issued the interrupt.

   Stop_Timer(TIM3); // Freeze counter at zero
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80011ce:	f7ff ffd9 	bl	8001184 <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fabf 	bl	800075a <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fb2b 	bl	800083c <_ZNSt12StepperMotor12MoveCompleteEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fac3 	bl	8000786 <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 8001200:	e002      	b.n	8001208 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 8001202:	4803      	ldr	r0, [pc, #12]	; (8001210 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001204:	f7ff ffce 	bl	80011a4 <_Z11Start_TimerP11TIM_TypeDef>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40000400 	.word	0x40000400
 8001214:	2000073c 	.word	0x2000073c

08001218 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */

   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <_Z12Move_Stepper9Directionii+0x6c>)
 8001228:	681c      	ldr	r4, [r3, #0]
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <_Z12Move_Stepper9Directionii+0x70>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	7bf9      	ldrb	r1, [r7, #15]
 8001238:	f7ff fa37 	bl	80006aa <_ZNSt4Dial14CalculateStepsE9Directionhh>
 800123c:	4601      	mov	r1, r0
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	461a      	mov	r2, r3
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff fabc 	bl	80007c0 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <_Z12Move_Stepper9Directionii+0x6c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fae9 	bl	8000824 <_ZNSt12StepperMotor6StatusEv>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d000      	beq.n	8001264 <_Z12Move_Stepper9Directionii+0x4c>
 8001262:	e7f1      	b.n	8001248 <_Z12Move_Stepper9Directionii+0x30>
   } // Wait for move to finish
   HAL_Delay(DELAY_MS); // Brief delay after move to allow mechanical settling.
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f000 fcae 	bl	8001bc8 <HAL_Delay>

   // [TODO] Compare expected and measured positions here.

   Dial->UpdatePosition(next_number); // Expected and measured are in agreement.
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <_Z12Move_Stepper9Directionii+0x70>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fa48 	bl	800070c <_ZNSt4Dial14UpdatePositionEh>

}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	2000073c 	.word	0x2000073c
 8001288:	20000740 	.word	0x20000740

0800128c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d119      	bne.n	80012dc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d114      	bne.n	80012dc <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 80012b2:	200c      	movs	r0, #12
 80012b4:	f007 fb56 	bl	8008964 <_Znwj>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461c      	mov	r4, r3
 80012bc:	4909      	ldr	r1, [pc, #36]	; (80012e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff fa33 	bl	800072a <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80012c6:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 80012c8:	2002      	movs	r0, #2
 80012ca:	f007 fb4b 	bl	8008964 <_Znwj>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461c      	mov	r4, r3
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff f9d8 	bl	8000688 <_ZNSt4DialC1Ev>
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80012da:	601c      	str	r4, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	40000400 	.word	0x40000400
 80012e8:	2000073c 	.word	0x2000073c
 80012ec:	20000740 	.word	0x20000740

080012f0 <_GLOBAL__sub_I_DMARxDscrTab>:
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff ffcd 	bl	8001298 <_Z41__static_initialization_and_destruction_0ii>
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x30>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x30>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x30>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a59      	ldr	r2, [pc, #356]	; (80014b8 <HAL_ETH_MspInit+0x184>)
 8001352:	4293      	cmp	r3, r2
 8001354:	f040 80ab 	bne.w	80014ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001358:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800135a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800135e:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800136a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800136e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001376:	4b51      	ldr	r3, [pc, #324]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139a:	4a48      	ldr	r2, [pc, #288]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013a4:	4b45      	ldr	r3, [pc, #276]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	4a40      	ldr	r2, [pc, #256]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	4a39      	ldr	r2, [pc, #228]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_ETH_MspInit+0x188>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	4a2a      	ldr	r2, [pc, #168]	; (80014bc <HAL_ETH_MspInit+0x188>)
 8001414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_ETH_MspInit+0x188>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800142a:	2332      	movs	r3, #50	; 0x32
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143a:	230b      	movs	r3, #11
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <HAL_ETH_MspInit+0x18c>)
 8001446:	f001 f929 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800144a:	2386      	movs	r3, #134	; 0x86
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145a:	230b      	movs	r3, #11
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4817      	ldr	r0, [pc, #92]	; (80014c4 <HAL_ETH_MspInit+0x190>)
 8001466:	f001 f919 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800146a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <HAL_ETH_MspInit+0x194>)
 8001488:	f001 f908 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800148c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149e:	230b      	movs	r3, #11
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <HAL_ETH_MspInit+0x198>)
 80014aa:	f001 f8f7 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40028000 	.word	0x40028000
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58020800 	.word	0x58020800
 80014c4:	58020000 	.word	0x58020000
 80014c8:	58020400 	.word	0x58020400
 80014cc:	58021800 	.word	0x58021800

080014d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0b8      	sub	sp, #224	; 0xe0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	22bc      	movs	r2, #188	; 0xbc
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fa8b 	bl	8008a0c <memset>
  if(hi2c->Instance==I2C2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a24      	ldr	r2, [pc, #144]	; (800158c <HAL_I2C_MspInit+0xbc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d141      	bne.n	8001584 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001500:	2308      	movs	r3, #8
 8001502:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f003 f92e 	bl	8004770 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800151a:	f7ff feb7 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 8001526:	f043 0320 	orr.w	r3, r3, #32
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001542:	2312      	movs	r3, #18
 8001544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001554:	2304      	movs	r3, #4
 8001556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_I2C_MspInit+0xc4>)
 8001562:	f001 f89b 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 800156e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0xc0>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800157c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	37e0      	adds	r7, #224	; 0xe0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005800 	.word	0x40005800
 8001590:	58024400 	.word	0x58024400
 8001594:	58021400 	.word	0x58021400

08001598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_TIM_Base_MspInit+0x48>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d116      	bne.n	80015d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	201d      	movs	r0, #29
 80015ce:	f000 fc1a 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015d2:	201d      	movs	r0, #29
 80015d4:	f000 fc31 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40000400 	.word	0x40000400
 80015e4:	58024400 	.word	0x58024400

080015e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11f      	bne.n	800164a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_TIM_MspPostInit+0x70>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_TIM_MspPostInit+0x70>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_TIM_MspPostInit+0x70>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800163a:	2302      	movs	r3, #2
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_TIM_MspPostInit+0x74>)
 8001646:	f001 f829 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000400 	.word	0x40000400
 8001658:	58024400 	.word	0x58024400
 800165c:	58020800 	.word	0x58020800

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0b8      	sub	sp, #224	; 0xe0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	22bc      	movs	r2, #188	; 0xbc
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f007 f9c3 	bl	8008a0c <memset>
  if(huart->Instance==USART3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_UART_MspInit+0xc0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d142      	bne.n	8001716 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001690:	2302      	movs	r3, #2
 8001692:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 f866 	bl	8004770 <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016aa:	f7ff fdef 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_UART_MspInit+0xc4>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_UART_MspInit+0xc8>)
 8001712:	f000 ffc3 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	37e0      	adds	r7, #224	; 0xe0
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004800 	.word	0x40004800
 8001724:	58024400 	.word	0x58024400
 8001728:	58020c00 	.word	0x58020c00

0800172c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0b8      	sub	sp, #224	; 0xe0
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	22bc      	movs	r2, #188	; 0xbc
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f007 f95d 	bl	8008a0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_PCD_MspInit+0xe8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d156      	bne.n	800180a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800175c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001760:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001762:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fffe 	bl	8004770 <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800177a:	f7ff fd87 	bl	800128c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800177e:	f002 f84b 	bl	8003818 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_PCD_MspInit+0xec>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a23      	ldr	r2, [pc, #140]	; (8001818 <HAL_PCD_MspInit+0xec>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_PCD_MspInit+0xec>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017a0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017ba:	230a      	movs	r3, #10
 80017bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c4:	4619      	mov	r1, r3
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <HAL_PCD_MspInit+0xf0>)
 80017c8:	f000 ff68 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <HAL_PCD_MspInit+0xf0>)
 80017e8:	f000 ff58 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_PCD_MspInit+0xec>)
 80017ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_PCD_MspInit+0xec>)
 80017f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_PCD_MspInit+0xec>)
 80017fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	37e0      	adds	r7, #224	; 0xe0
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40080000 	.word	0x40080000
 8001818:	58024400 	.word	0x58024400
 800181c:	58020000 	.word	0x58020000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 f98c 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM3_IRQHandler+0x10>)
 800187a:	f004 fce1 	bl	8006240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000258 	.word	0x20000258

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a2:	f007 f881 	bl	80089a8 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
	return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f007 f854 	bl	80089a8 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20020000 	.word	0x20020000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000744 	.word	0x20000744
 8001934:	20000768 	.word	0x20000768

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <SystemInit+0xec>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <SystemInit+0xec>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <SystemInit+0xf0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	2b06      	cmp	r3, #6
 8001956:	d807      	bhi.n	8001968 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <SystemInit+0xf0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <SystemInit+0xf0>)
 8001962:	f043 0307 	orr.w	r3, r3, #7
 8001966:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <SystemInit+0xf4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <SystemInit+0xf4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <SystemInit+0xf4>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <SystemInit+0xf4>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	492b      	ldr	r1, [pc, #172]	; (8001a2c <SystemInit+0xf4>)
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <SystemInit+0xf8>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <SystemInit+0xf0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <SystemInit+0xf0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 030f 	bic.w	r3, r3, #15
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <SystemInit+0xf0>)
 800199c:	f043 0307 	orr.w	r3, r3, #7
 80019a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <SystemInit+0xf4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <SystemInit+0xf4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <SystemInit+0xf4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <SystemInit+0xf4>)
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <SystemInit+0xfc>)
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <SystemInit+0xf4>)
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <SystemInit+0x100>)
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <SystemInit+0xf4>)
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <SystemInit+0x104>)
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <SystemInit+0xf4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <SystemInit+0xf4>)
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <SystemInit+0x104>)
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <SystemInit+0xf4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <SystemInit+0xf4>)
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <SystemInit+0x104>)
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <SystemInit+0xf4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <SystemInit+0xf4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <SystemInit+0xf4>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <SystemInit+0xf4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <SystemInit+0x108>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <SystemInit+0x10c>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a02:	d202      	bcs.n	8001a0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <SystemInit+0x110>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <SystemInit+0x114>)
 8001a0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SystemInit+0xec>)
 8001a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00
 8001a28:	52002000 	.word	0x52002000
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a34:	02020200 	.word	0x02020200
 8001a38:	01ff0000 	.word	0x01ff0000
 8001a3c:	01010280 	.word	0x01010280
 8001a40:	5c001000 	.word	0x5c001000
 8001a44:	ffff0000 	.word	0xffff0000
 8001a48:	51008108 	.word	0x51008108
 8001a4c:	52004000 	.word	0x52004000

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a54:	f7ff ff70 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f006 ff99 	bl	80089b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7fe fee7 	bl	8000854 <main>
  bx  lr
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a94:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 8001a98:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001a9c:	20000768 	.word	0x20000768

08001aa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC3_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f000 f9a0 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ab0:	f002 fc88 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_Init+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	4913      	ldr	r1, [pc, #76]	; (8001b10 <HAL_Init+0x6c>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_Init+0x68>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_Init+0x6c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_Init+0x70>)
 8001ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_Init+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 f814 	bl	8001b1c <HAL_InitTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e002      	b.n	8001b04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001afe:	f7ff fbff 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	080093b4 	.word	0x080093b4
 8001b14:	20000004 	.word	0x20000004
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_InitTick+0x60>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e021      	b.n	8001b74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_InitTick+0x64>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_InitTick+0x60>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f985 	bl	8001e56 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f000 f94f 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x68>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000754 	.word	0x20000754

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000754 	.word	0x20000754

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetREVID+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0c1b      	lsrs	r3, r3, #16
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	5c001000 	.word	0x5c001000

08001c28 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c38:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	58000400 	.word	0x58000400

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff40 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff90 	bl	8001d44 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5f 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff33 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffa4 	bl	8001dac <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0c6      	b.n	8002010 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fa52 	bl	8001334 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2223      	movs	r2, #35	; 0x23
 8001e94:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_ETH_Init+0x1a8>)
 8001e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9c:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <HAL_ETH_Init+0x1a8>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_ETH_Init+0x1a8>)
 8001ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7a1b      	ldrb	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff feb3 	bl	8001c28 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ec2:	e003      	b.n	8001ecc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ec4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ec8:	f7ff feae 	bl	8001c28 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff fe64 	bl	8001bb0 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001eea:	e00f      	b.n	8001f0c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001eec:	f7ff fe60 	bl	8001bb0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001efa:	d907      	bls.n	8001f0c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2204      	movs	r2, #4
 8001f00:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	22e0      	movs	r2, #224	; 0xe0
 8001f06:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e081      	b.n	8002010 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e6      	bne.n	8001eec <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fac0 	bl	80024a4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001f24:	f002 fbc8 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	; (800201c <HAL_ETH_Init+0x1ac>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9a      	lsrs	r2, r3, #18
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3a01      	subs	r2, #1
 8001f38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fa13 	bl	8002368 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f58:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	22e0      	movs	r2, #224	; 0xe0
 8001f74:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e04a      	b.n	8002010 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f82:	4413      	add	r3, r2
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_ETH_Init+0x1b0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6952      	ldr	r2, [r2, #20]
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f9a:	440b      	add	r3, r1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fad8 	bl	8002554 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb1c 	bl	80025e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	3305      	adds	r3, #5
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	061a      	lsls	r2, r3, #24
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fe8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ff6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ff8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2210      	movs	r2, #16
 8002006:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2210      	movs	r2, #16
 800200c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58024400 	.word	0x58024400
 800201c:	431bde83 	.word	0x431bde83
 8002020:	ffff8001 	.word	0xffff8001

08002024 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002036:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	791b      	ldrb	r3, [r3, #4]
 800203c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800203e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	7b1b      	ldrb	r3, [r3, #12]
 8002044:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002046:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7b5b      	ldrb	r3, [r3, #13]
 800204c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800204e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	7b9b      	ldrb	r3, [r3, #14]
 8002054:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002056:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	7bdb      	ldrb	r3, [r3, #15]
 800205c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800205e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	7c12      	ldrb	r2, [r2, #16]
 8002064:	2a00      	cmp	r2, #0
 8002066:	d102      	bne.n	800206e <ETH_SetMACConfig+0x4a>
 8002068:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800206c:	e000      	b.n	8002070 <ETH_SetMACConfig+0x4c>
 800206e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002070:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	7c52      	ldrb	r2, [r2, #17]
 8002076:	2a00      	cmp	r2, #0
 8002078:	d102      	bne.n	8002080 <ETH_SetMACConfig+0x5c>
 800207a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207e:	e000      	b.n	8002082 <ETH_SetMACConfig+0x5e>
 8002080:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002082:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	7c9b      	ldrb	r3, [r3, #18]
 8002088:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800208a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002090:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002096:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	7f1b      	ldrb	r3, [r3, #28]
 800209c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800209e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	7f5b      	ldrb	r3, [r3, #29]
 80020a4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80020a6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	7f92      	ldrb	r2, [r2, #30]
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d102      	bne.n	80020b6 <ETH_SetMACConfig+0x92>
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	e000      	b.n	80020b8 <ETH_SetMACConfig+0x94>
 80020b6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80020b8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7fdb      	ldrb	r3, [r3, #31]
 80020be:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80020c0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d102      	bne.n	80020d2 <ETH_SetMACConfig+0xae>
 80020cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d0:	e000      	b.n	80020d4 <ETH_SetMACConfig+0xb0>
 80020d2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80020d4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80020da:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020e2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80020e4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b56      	ldr	r3, [pc, #344]	; (8002250 <ETH_SetMACConfig+0x22c>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	430b      	orrs	r3, r1
 8002100:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800210e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002110:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002118:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800211a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002122:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002124:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800212c:	2a00      	cmp	r2, #0
 800212e:	d102      	bne.n	8002136 <ETH_SetMACConfig+0x112>
 8002130:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002134:	e000      	b.n	8002138 <ETH_SetMACConfig+0x114>
 8002136:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002138:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4b42      	ldr	r3, [pc, #264]	; (8002254 <ETH_SetMACConfig+0x230>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	430b      	orrs	r3, r1
 8002154:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <ETH_SetMACConfig+0x234>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	430b      	orrs	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002180:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002186:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800218e:	2a00      	cmp	r2, #0
 8002190:	d101      	bne.n	8002196 <ETH_SetMACConfig+0x172>
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	e000      	b.n	8002198 <ETH_SetMACConfig+0x174>
 8002196:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002198:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021aa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80021c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80021c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f023 0103 	bic.w	r1, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80021ee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800220a:	2a00      	cmp	r2, #0
 800220c:	d101      	bne.n	8002212 <ETH_SetMACConfig+0x1ee>
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	e000      	b.n	8002214 <ETH_SetMACConfig+0x1f0>
 8002212:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002214:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800221c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800221e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002226:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002234:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	430a      	orrs	r2, r1
 8002240:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	00048083 	.word	0x00048083
 8002254:	c0f88000 	.word	0xc0f88000
 8002258:	fffffef0 	.word	0xfffffef0

0800225c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <ETH_SetDMAConfig+0xf8>)
 8002272:	4013      	ands	r3, r2
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	431a      	orrs	r2, r3
 800227e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002282:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	791b      	ldrb	r3, [r3, #4]
 8002288:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800228e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	7b1b      	ldrb	r3, [r3, #12]
 8002294:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f241 0304 	movw	r3, #4100	; 0x1004
 80022a2:	4413      	add	r3, r2
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <ETH_SetDMAConfig+0xfc>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6811      	ldr	r1, [r2, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80022b6:	440b      	add	r3, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	7b5b      	ldrb	r3, [r3, #13]
 80022be:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <ETH_SetDMAConfig+0x100>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6811      	ldr	r1, [r2, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	431a      	orrs	r2, r3
 80022de:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80022e2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7d1b      	ldrb	r3, [r3, #20]
 80022ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80022ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7f5b      	ldrb	r3, [r3, #29]
 80022f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8002302:	4413      	add	r3, r2
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <ETH_SetDMAConfig+0x104>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6811      	ldr	r1, [r2, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	f241 1304 	movw	r3, #4356	; 0x1104
 8002316:	440b      	add	r3, r1
 8002318:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7f1b      	ldrb	r3, [r3, #28]
 800231e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002330:	4413      	add	r3, r2
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <ETH_SetDMAConfig+0x108>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6811      	ldr	r1, [r2, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	431a      	orrs	r2, r3
 8002340:	f241 1308 	movw	r3, #4360	; 0x1108
 8002344:	440b      	add	r3, r1
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	ffff87fd 	.word	0xffff87fd
 8002358:	ffff2ffe 	.word	0xffff2ffe
 800235c:	fffec000 	.word	0xfffec000
 8002360:	ffc0efef 	.word	0xffc0efef
 8002364:	7fc0ffff 	.word	0x7fc0ffff

08002368 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0a4      	sub	sp, #144	; 0x90
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002376:	2300      	movs	r3, #0
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002392:	2301      	movs	r3, #1
 8002394:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80023c0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80023c4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80023e2:	2300      	movs	r3, #0
 80023e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80023ea:	2300      	movs	r3, #0
 80023ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002400:	2320      	movs	r3, #32
 8002402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002412:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800241c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002424:	2302      	movs	r3, #2
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002442:	2300      	movs	r3, #0
 8002444:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800244c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fde6 	bl	8002024 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002472:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002476:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800247c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002480:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002488:	f44f 7306 	mov.w	r3, #536	; 0x218
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fee1 	bl	800225c <ETH_SetDMAConfig>
}
 800249a:	bf00      	nop
 800249c:	3790      	adds	r7, #144	; 0x90
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024be:	f002 f8fb 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 80024c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d908      	bls.n	80024de <ETH_MAC_MDIO_ClkConfig+0x3a>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d804      	bhi.n	80024de <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e027      	b.n	800252e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d908      	bls.n	80024f8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4a17      	ldr	r2, [pc, #92]	; (8002548 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d204      	bcs.n	80024f8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e01a      	b.n	800252e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a13      	ldr	r2, [pc, #76]	; (8002548 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d303      	bcc.n	8002508 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4a12      	ldr	r2, [pc, #72]	; (800254c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d911      	bls.n	800252c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d908      	bls.n	8002522 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d804      	bhi.n	8002522 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	e005      	b.n	800252e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e000      	b.n	800252e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800252c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	01312cff 	.word	0x01312cff
 8002544:	02160ebf 	.word	0x02160ebf
 8002548:	03938700 	.word	0x03938700
 800254c:	05f5e0ff 	.word	0x05f5e0ff
 8002550:	08f0d17f 	.word	0x08f0d17f

08002554 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e01d      	b.n	800259e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	3206      	adds	r2, #6
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d9de      	bls.n	8002562 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f241 132c 	movw	r3, #4396	; 0x112c
 80025b2:	4413      	add	r3, r2
 80025b4:	2203      	movs	r2, #3
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68d9      	ldr	r1, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f241 1314 	movw	r3, #4372	; 0x1114
 80025c4:	4413      	add	r3, r2
 80025c6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80025d4:	601a      	str	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e024      	b.n	800263a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6919      	ldr	r1, [r3, #16]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3310      	adds	r3, #16
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d9d7      	bls.n	80025f0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f241 1330 	movw	r3, #4400	; 0x1130
 8002666:	4413      	add	r3, r2
 8002668:	2203      	movs	r2, #3
 800266a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6919      	ldr	r1, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f241 131c 	movw	r3, #4380	; 0x111c
 8002678:	4413      	add	r3, r2
 800267a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f241 1328 	movw	r3, #4392	; 0x1128
 800268c:	4413      	add	r3, r2
 800268e:	6019      	str	r1, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026aa:	4b89      	ldr	r3, [pc, #548]	; (80028d0 <HAL_GPIO_Init+0x234>)
 80026ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ae:	e194      	b.n	80029da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8186 	beq.w	80029d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d00b      	beq.n	80026e8 <HAL_GPIO_Init+0x4c>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d130      	bne.n	800274a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271e:	2201      	movs	r2, #1
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0201 	and.w	r2, r3, #1
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0xee>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b12      	cmp	r3, #18
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	69b9      	ldr	r1, [r7, #24]
 80027ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80e0 	beq.w	80029d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_GPIO_Init+0x238>)
 8002816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <HAL_GPIO_Init+0x238>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_GPIO_Init+0x238>)
 8002826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_GPIO_Init+0x23c>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_GPIO_Init+0x240>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d052      	beq.n	8002904 <HAL_GPIO_Init+0x268>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_GPIO_Init+0x244>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_GPIO_Init+0x248>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02b      	beq.n	80028c6 <HAL_GPIO_Init+0x22a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_GPIO_Init+0x24c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_GPIO_Init+0x250>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_GPIO_Init+0x254>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_GPIO_Init+0x258>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_GPIO_Init+0x25c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_GPIO_Init+0x260>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_GPIO_Init+0x264>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x20e>
 80028a6:	2309      	movs	r3, #9
 80028a8:	e02d      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028aa:	230a      	movs	r3, #10
 80028ac:	e02b      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028ae:	2308      	movs	r3, #8
 80028b0:	e029      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e027      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e025      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e023      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028be:	2304      	movs	r3, #4
 80028c0:	e021      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e01f      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e01d      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01b      	b.n	8002906 <HAL_GPIO_Init+0x26a>
 80028ce:	bf00      	nop
 80028d0:	58000080 	.word	0x58000080
 80028d4:	58024400 	.word	0x58024400
 80028d8:	58000400 	.word	0x58000400
 80028dc:	58020000 	.word	0x58020000
 80028e0:	58020400 	.word	0x58020400
 80028e4:	58020800 	.word	0x58020800
 80028e8:	58020c00 	.word	0x58020c00
 80028ec:	58021000 	.word	0x58021000
 80028f0:	58021400 	.word	0x58021400
 80028f4:	58021800 	.word	0x58021800
 80028f8:	58021c00 	.word	0x58021c00
 80028fc:	58022000 	.word	0x58022000
 8002900:	58022400 	.word	0x58022400
 8002904:	2300      	movs	r3, #0
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002916:	4938      	ldr	r1, [pc, #224]	; (80029f8 <HAL_GPIO_Init+0x35c>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800299e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f ae63 	bne.w	80026b0 <HAL_GPIO_Init+0x14>
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3724      	adds	r7, #36	; 0x24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	58000400 	.word	0x58000400

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fd3a 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d104      	bne.n	8002aca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_I2C_Init+0x11c>)
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	02008000 	.word	0x02008000

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 80f9 	bne.w	8002d6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x34>
 8002b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0ed      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Mem_Write+0x4e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0e6      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba6:	f7ff f803 	bl	8001bb0 <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fac3 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d1      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2221      	movs	r2, #33	; 0x21
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf0:	88f8      	ldrh	r0, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f9d3 	bl	8002fac <I2C_RequestMemoryWrite>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0a9      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2bff      	cmp	r3, #255	; 0xff
 8002c20:	d90e      	bls.n	8002c40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fba5 	bl	8003388 <I2C_TransferConfig>
 8002c3e:	e00f      	b.n	8002c60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	2300      	movs	r3, #0
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fb94 	bl	8003388 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 faad 	bl	80031c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e07b      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d034      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d130      	bne.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa3f 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04d      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d90e      	bls.n	8002cf8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fb49 	bl	8003388 <I2C_TransferConfig>
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb38 	bl	8003388 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d19e      	bne.n	8002c60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa8c 	bl	8003244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01a      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_I2C_Mem_Write+0x224>)
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	fe00e800 	.word	0xfe00e800

08002d78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	f040 80fd 	bne.w	8002f9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_I2C_Mem_Read+0x34>
 8002da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0f1      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Mem_Read+0x4e>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0ea      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dce:	f7fe feef 	bl	8001bb0 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f9af 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d5      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2222      	movs	r2, #34	; 0x22
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e18:	88f8      	ldrh	r0, [r7, #6]
 8002e1a:	893a      	ldrh	r2, [r7, #8]
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4603      	mov	r3, r0
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f913 	bl	8003054 <I2C_RequestMemoryRead>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0ad      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2bff      	cmp	r3, #255	; 0xff
 8002e48:	d90e      	bls.n	8002e68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <HAL_I2C_Mem_Read+0x22c>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fa91 	bl	8003388 <I2C_TransferConfig>
 8002e66:	e00f      	b.n	8002e88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_I2C_Mem_Read+0x22c>)
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa80 	bl	8003388 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2104      	movs	r1, #4
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f956 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e07c      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d034      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x1d0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d130      	bne.n	8002f48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f927 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e04d      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d90e      	bls.n	8002f28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	8979      	ldrh	r1, [r7, #10]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa31 	bl	8003388 <I2C_TransferConfig>
 8002f26:	e00f      	b.n	8002f48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa20 	bl	8003388 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d19a      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f974 	bl	8003244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e01a      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_I2C_Mem_Read+0x230>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	80002400 	.word	0x80002400
 8002fa8:	fe00e800 	.word	0xfe00e800

08002fac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	8979      	ldrh	r1, [r7, #10]
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <I2C_RequestMemoryWrite+0xa4>)
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f9d7 	bl	8003388 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	69b9      	ldr	r1, [r7, #24]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f8f0 	bl	80031c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e02c      	b.n	8003048 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffe:	e015      	b.n	800302c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b29b      	uxth	r3, r3
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	69b9      	ldr	r1, [r7, #24]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f8d6 	bl	80031c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e012      	b.n	8003048 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2200      	movs	r2, #0
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f884 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	80002000 	.word	0x80002000

08003054 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	460b      	mov	r3, r1
 8003068:	813b      	strh	r3, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <I2C_RequestMemoryRead+0xa4>)
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f984 	bl	8003388 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f89d 	bl	80031c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e02c      	b.n	80030ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
 80030a4:	e015      	b.n	80030d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f883 	bl	80031c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e012      	b.n	80030ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c8:	893b      	ldrh	r3, [r7, #8]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2200      	movs	r2, #0
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f831 	bl	8003144 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	80002000 	.word	0x80002000

080030fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	d103      	bne.n	800311a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d007      	beq.n	8003138 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	619a      	str	r2, [r3, #24]
  }
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003154:	e022      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315c:	d01e      	beq.n	800319c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fd27 	bl	8001bb0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d113      	bne.n	800319c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e00f      	b.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d0cd      	beq.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031d0:	e02c      	b.n	800322c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f870 	bl	80032bc <I2C_IsAcknowledgeFailed>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e02a      	b.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ec:	d01e      	beq.n	800322c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe fcdf 	bl	8001bb0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d113      	bne.n	800322c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d1cb      	bne.n	80031d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003250:	e028      	b.n	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f830 	bl	80032bc <I2C_IsAcknowledgeFailed>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e026      	b.n	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fe fca3 	bl	8001bb0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d113      	bne.n	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e007      	b.n	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d1cf      	bne.n	8003252 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d151      	bne.n	800337a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d6:	e022      	b.n	800331e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032de:	d01e      	beq.n	800331e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fe fc66 	bl	8001bb0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <I2C_IsAcknowledgeFailed+0x3a>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e02e      	b.n	800337c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d1d5      	bne.n	80032d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2210      	movs	r2, #16
 8003332:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fedd 	bl	80030fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <I2C_IsAcknowledgeFailed+0xc8>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	4613      	mov	r3, r2
 8003398:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	0d5b      	lsrs	r3, r3, #21
 80033a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <I2C_TransferConfig+0x58>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	43db      	mvns	r3, r3
 80033ae:	ea02 0103 	and.w	r1, r2, r3
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b8:	7a7b      	ldrb	r3, [r7, #9]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	03ff63ff 	.word	0x03ff63ff

080033e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d138      	bne.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003404:	2302      	movs	r3, #2
 8003406:	e032      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d139      	bne.n	8003504 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800349a:	2302      	movs	r3, #2
 800349c:	e033      	b.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003514:	b08f      	sub	sp, #60	; 0x3c
 8003516:	af0a      	add	r7, sp, #40	; 0x28
 8003518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e116      	b.n	8003752 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe f8f4 	bl	800172c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 ffae 	bl	80084c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	687e      	ldr	r6, [r7, #4]
 8003570:	466d      	mov	r5, sp
 8003572:	f106 0410 	add.w	r4, r6, #16
 8003576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003582:	e885 0003 	stmia.w	r5, {r0, r1}
 8003586:	1d33      	adds	r3, r6, #4
 8003588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f004 ff2c 	bl	80083e8 <USB_CoreInit>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0d7      	b.n	8003752 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 ff9c 	bl	80084e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e04a      	b.n	800364a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	333d      	adds	r3, #61	; 0x3d
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	333c      	adds	r3, #60	; 0x3c
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	b298      	uxth	r0, r3
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3342      	adds	r3, #66	; 0x42
 80035f0:	4602      	mov	r2, r0
 80035f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	333f      	adds	r3, #63	; 0x3f
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3344      	adds	r3, #68	; 0x44
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3348      	adds	r3, #72	; 0x48
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3350      	adds	r3, #80	; 0x50
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	3301      	adds	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d3af      	bcc.n	80035b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e044      	b.n	80036e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3301      	adds	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d3b5      	bcc.n	800365a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	687e      	ldr	r6, [r7, #4]
 80036f6:	466d      	mov	r5, sp
 80036f8:	f106 0410 	add.w	r4, r6, #16
 80036fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003708:	e885 0003 	stmia.w	r5, {r0, r1}
 800370c:	1d33      	adds	r3, r6, #4
 800370e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	f004 ff13 	bl	800853c <USB_DevInit>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e014      	b.n	8003752 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2b01      	cmp	r3, #1
 800373e:	d102      	bne.n	8003746 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f80b 	bl	800375c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f005 f8b5 	bl	80088ba <USB_DevDisconnect>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800375c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800378c:	4313      	orrs	r3, r2
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	10000003 	.word	0x10000003

080037a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_PWREx_ConfigSupply+0x70>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d00a      	beq.n	80037ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_PWREx_ConfigSupply+0x70>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e01f      	b.n	800380a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e01d      	b.n	800380a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_PWREx_ConfigSupply+0x70>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	490f      	ldr	r1, [pc, #60]	; (8003814 <HAL_PWREx_ConfigSupply+0x70>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037de:	f7fe f9e7 	bl	8001bb0 <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037e4:	e009      	b.n	80037fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037e6:	f7fe f9e3 	bl	8001bb0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037f4:	d901      	bls.n	80037fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_PWREx_ConfigSupply+0x70>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003806:	d1ee      	bne.n	80037e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	58024800 	.word	0x58024800

08003818 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	58024800 	.word	0x58024800

08003838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e3ff      	b.n	800404a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8087 	beq.w	8003966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003858:	4b99      	ldr	r3, [pc, #612]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003862:	4b97      	ldr	r3, [pc, #604]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b10      	cmp	r3, #16
 800386c:	d007      	beq.n	800387e <HAL_RCC_OscConfig+0x46>
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b18      	cmp	r3, #24
 8003872:	d110      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b90      	ldr	r3, [pc, #576]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x12c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e3d9      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x76>
 80038a0:	4b87      	ldr	r3, [pc, #540]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a86      	ldr	r2, [pc, #536]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b82      	ldr	r3, [pc, #520]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a81      	ldr	r2, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7e      	ldr	r2, [pc, #504]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xbc>
 80038da:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a78      	ldr	r2, [pc, #480]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a75      	ldr	r2, [pc, #468]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038f4:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a71      	ldr	r2, [pc, #452]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6e      	ldr	r2, [pc, #440]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe f94c 	bl	8001bb0 <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe f948 	bl	8001bb0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e38d      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800392e:	4b64      	ldr	r3, [pc, #400]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xe4>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe f938 	bl	8001bb0 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe f934 	bl	8001bb0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e379      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003956:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x10c>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80ae 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003974:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800397e:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_RCC_OscConfig+0x162>
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	2b18      	cmp	r3, #24
 800398e:	d13a      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1ce>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d135      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399a:	4b49      	ldr	r3, [pc, #292]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x17a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e34b      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	f7fe f92d 	bl	8001c10 <HAL_GetREVID>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80039bc:	4293      	cmp	r3, r2
 80039be:	d817      	bhi.n	80039f0 <HAL_RCC_OscConfig+0x1b8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d108      	bne.n	80039da <HAL_RCC_OscConfig+0x1a2>
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039d0:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d8:	e07a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	031b      	lsls	r3, r3, #12
 80039e8:	4935      	ldr	r1, [pc, #212]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ee:	e06f      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	4930      	ldr	r1, [pc, #192]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	e064      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d045      	beq.n	8003a9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0219 	bic.w	r2, r3, #25
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4929      	ldr	r1, [pc, #164]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe f8c6 	bl	8001bb0 <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe f8c2 	bl	8001bb0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e307      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	f7fe f8e3 	bl	8001c10 <HAL_GetREVID>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d817      	bhi.n	8003a84 <HAL_RCC_OscConfig+0x24c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d108      	bne.n	8003a6e <HAL_RCC_OscConfig+0x236>
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6a:	6053      	str	r3, [r2, #4]
 8003a6c:	e030      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	031b      	lsls	r3, r3, #12
 8003a7c:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	e025      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	490b      	ldr	r1, [pc, #44]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	e01a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f883 	bl	8001bb0 <HAL_GetTick>
 8003aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fe f87f 	bl	8001bb0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d903      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e2c4      	b.n	800404a <HAL_RCC_OscConfig+0x812>
 8003ac0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ac4:	4ba4      	ldr	r3, [pc, #656]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a9 	beq.w	8003c30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae8:	4b9b      	ldr	r3, [pc, #620]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d007      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2cc>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b18      	cmp	r3, #24
 8003af8:	d13a      	bne.n	8003b70 <HAL_RCC_OscConfig+0x338>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d135      	bne.n	8003b70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b04:	4b94      	ldr	r3, [pc, #592]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2e4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e296      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b1c:	f7fe f878 	bl	8001c10 <HAL_GetREVID>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d817      	bhi.n	8003b5a <HAL_RCC_OscConfig+0x322>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x30c>
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b3a:	4a87      	ldr	r2, [pc, #540]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b42:	e075      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b44:	4b84      	ldr	r3, [pc, #528]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	069b      	lsls	r3, r3, #26
 8003b52:	4981      	ldr	r1, [pc, #516]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b58:	e06a      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	497b      	ldr	r1, [pc, #492]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b6e:	e05f      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d042      	beq.n	8003bfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b78:	4b77      	ldr	r3, [pc, #476]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f814 	bl	8001bb0 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b8c:	f7fe f810 	bl	8001bb0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e255      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b9e:	4b6e      	ldr	r3, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003baa:	f7fe f831 	bl	8001c10 <HAL_GetREVID>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d817      	bhi.n	8003be8 <HAL_RCC_OscConfig+0x3b0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d108      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x39a>
 8003bc0:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bc8:	4a63      	ldr	r2, [pc, #396]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bce:	6053      	str	r3, [r2, #4]
 8003bd0:	e02e      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
 8003bd2:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	069b      	lsls	r3, r3, #26
 8003be0:	495d      	ldr	r1, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 8003be6:	e023      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
 8003be8:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4958      	ldr	r1, [pc, #352]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
 8003bfc:	e018      	b.n	8003c30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a55      	ldr	r2, [pc, #340]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd ffd1 	bl	8001bb0 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c12:	f7fd ffcd 	bl	8001bb0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e212      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c24:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d036      	beq.n	8003caa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c44:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	4a43      	ldr	r2, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fd ffae 	bl	8001bb0 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c58:	f7fd ffaa 	bl	8001bb0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1ef      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x420>
 8003c76:	e018      	b.n	8003caa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c78:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	4a36      	ldr	r2, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fd ff94 	bl	8001bb0 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd ff90 	bl	8001bb0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1d5      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d036      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cca:	f7fd ff71 	bl	8001bb0 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cd2:	f7fd ff6d 	bl	8001bb0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1b2      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x49a>
 8003cf0:	e018      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cfe:	f7fd ff57 	bl	8001bb0 <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d06:	f7fd ff53 	bl	8001bb0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e198      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_RCC_OscConfig+0x520>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8085 	beq.w	8003e3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_OscConfig+0x524>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_OscConfig+0x524>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d3e:	f7fd ff37 	bl	8001bb0 <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d44:	e00c      	b.n	8003d60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd ff33 	bl	8001bb0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	; 0x64
 8003d52:	d905      	bls.n	8003d60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e178      	b.n	800404a <HAL_RCC_OscConfig+0x812>
 8003d58:	58024400 	.word	0x58024400
 8003d5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <HAL_RCC_OscConfig+0x784>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ec      	beq.n	8003d46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x54a>
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a91      	ldr	r2, [pc, #580]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e02d      	b.n	8003dde <HAL_RCC_OscConfig+0x5a6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x56c>
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a8c      	ldr	r2, [pc, #560]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b8a      	ldr	r3, [pc, #552]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a89      	ldr	r2, [pc, #548]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e01c      	b.n	8003dde <HAL_RCC_OscConfig+0x5a6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x58e>
 8003dac:	4b84      	ldr	r3, [pc, #528]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a83      	ldr	r2, [pc, #524]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b81      	ldr	r3, [pc, #516]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x5a6>
 8003dc6:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a7d      	ldr	r2, [pc, #500]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b7b      	ldr	r3, [pc, #492]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd fee3 	bl	8001bb0 <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd fedf 	bl	8001bb0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e122      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e04:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCC_OscConfig+0x5b6>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fd fecd 	bl	8001bb0 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd fec9 	bl	8001bb0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e10c      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e30:	4b63      	ldr	r3, [pc, #396]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8101 	beq.w	8004048 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e46:	4b5e      	ldr	r3, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e4e:	2b18      	cmp	r3, #24
 8003e50:	f000 80bc 	beq.w	8003fcc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	f040 8095 	bne.w	8003f88 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a57      	ldr	r2, [pc, #348]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fea1 	bl	8001bb0 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fd fe9d 	bl	8001bb0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0e2      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e84:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCC_OscConfig+0x78c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	4946      	ldr	r1, [pc, #280]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	628b      	str	r3, [r1, #40]	; 0x28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	025b      	lsls	r3, r3, #9
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eda:	4939      	ldr	r1, [pc, #228]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCC_OscConfig+0x790>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ef8:	00d2      	lsls	r2, r2, #3
 8003efa:	4931      	ldr	r1, [pc, #196]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f023 020c 	bic.w	r2, r3, #12
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	492c      	ldr	r1, [pc, #176]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f023 0202 	bic.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4928      	ldr	r1, [pc, #160]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f24:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f30:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f3c:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd fe26 	bl	8001bb0 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fe22 	bl	8001bb0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e067      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x730>
 8003f86:	e05f      	b.n	8004048 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fe0c 	bl	8001bb0 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd fe08 	bl	8001bb0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04d      	b.n	800404a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_RCC_OscConfig+0x788>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x764>
 8003fba:	e045      	b.n	8004048 <HAL_RCC_OscConfig+0x810>
 8003fbc:	58024800 	.word	0x58024800
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	fffffc0c 	.word	0xfffffc0c
 8003fc8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x81c>)
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x81c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d031      	beq.n	8004044 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d12a      	bne.n	8004044 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d122      	bne.n	8004044 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d11a      	bne.n	8004044 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0a5b      	lsrs	r3, r3, #9
 8004012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d111      	bne.n	8004044 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d108      	bne.n	8004044 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3730      	adds	r7, #48	; 0x30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400

08004058 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e19c      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800406c:	4b8a      	ldr	r3, [pc, #552]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d910      	bls.n	800409c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b87      	ldr	r3, [pc, #540]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 020f 	bic.w	r2, r3, #15
 8004082:	4985      	ldr	r1, [pc, #532]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b83      	ldr	r3, [pc, #524]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e184      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	4b7b      	ldr	r3, [pc, #492]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d908      	bls.n	80040ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b8:	4b78      	ldr	r3, [pc, #480]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4975      	ldr	r1, [pc, #468]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	4b70      	ldr	r3, [pc, #448]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d908      	bls.n	80040f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040e6:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	496a      	ldr	r1, [pc, #424]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	4b64      	ldr	r3, [pc, #400]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004110:	429a      	cmp	r2, r3
 8004112:	d908      	bls.n	8004126 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	495e      	ldr	r1, [pc, #376]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004122:	4313      	orrs	r3, r2
 8004124:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d010      	beq.n	8004154 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413e:	429a      	cmp	r2, r3
 8004140:	d908      	bls.n	8004154 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4953      	ldr	r1, [pc, #332]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004150:	4313      	orrs	r3, r2
 8004152:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4b4d      	ldr	r3, [pc, #308]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	429a      	cmp	r2, r3
 800416e:	d908      	bls.n	8004182 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f023 020f 	bic.w	r2, r3, #15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4947      	ldr	r1, [pc, #284]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 800417e:	4313      	orrs	r3, r2
 8004180:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d055      	beq.n	800423a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800418e:	4b43      	ldr	r3, [pc, #268]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4940      	ldr	r1, [pc, #256]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 800419c:	4313      	orrs	r3, r2
 800419e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a8:	4b3c      	ldr	r3, [pc, #240]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d121      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0f6      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c0:	4b36      	ldr	r3, [pc, #216]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d115      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0ea      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d8:	4b30      	ldr	r3, [pc, #192]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0de      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e8:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0d6      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f023 0207 	bic.w	r2, r3, #7
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4925      	ldr	r1, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fcd1 	bl	8001bb0 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004210:	e00a      	b.n	8004228 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004212:	f7fd fccd 	bl	8001bb0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0be      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004228:	4b1c      	ldr	r3, [pc, #112]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	429a      	cmp	r2, r3
 8004238:	d1eb      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	429a      	cmp	r2, r3
 8004254:	d208      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f023 020f 	bic.w	r2, r3, #15
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	490e      	ldr	r1, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x244>)
 8004264:	4313      	orrs	r3, r2
 8004266:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d214      	bcs.n	80042a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 020f 	bic.w	r2, r3, #15
 800427e:	4906      	ldr	r1, [pc, #24]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCC_ClockConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e086      	b.n	80043a6 <HAL_RCC_ClockConfig+0x34e>
 8004298:	52002000 	.word	0x52002000
 800429c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d010      	beq.n	80042ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	4b3f      	ldr	r3, [pc, #252]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d208      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042bc:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4939      	ldr	r1, [pc, #228]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d208      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	492e      	ldr	r1, [pc, #184]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004314:	429a      	cmp	r2, r3
 8004316:	d208      	bcs.n	800432a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4922      	ldr	r1, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 8004326:	4313      	orrs	r3, r2
 8004328:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d010      	beq.n	8004358 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004342:	429a      	cmp	r2, r3
 8004344:	d208      	bcs.n	8004358 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4917      	ldr	r1, [pc, #92]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 8004354:	4313      	orrs	r3, r2
 8004356:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004358:	f000 f834 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	4912      	ldr	r1, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x35c>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_RCC_ClockConfig+0x358>)
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <HAL_RCC_ClockConfig+0x35c>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x360>)
 800438e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x364>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_ClockConfig+0x368>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fbbe 	bl	8001b1c <HAL_InitTick>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	58024400 	.word	0x58024400
 80043b4:	080093b4 	.word	0x080093b4
 80043b8:	20000004 	.word	0x20000004
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000008 	.word	0x20000008

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ca:	4bb3      	ldr	r3, [pc, #716]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043d2:	2b18      	cmp	r3, #24
 80043d4:	f200 8155 	bhi.w	8004682 <HAL_RCC_GetSysClockFreq+0x2be>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004683 	.word	0x08004683
 80043e8:	08004683 	.word	0x08004683
 80043ec:	08004683 	.word	0x08004683
 80043f0:	08004683 	.word	0x08004683
 80043f4:	08004683 	.word	0x08004683
 80043f8:	08004683 	.word	0x08004683
 80043fc:	08004683 	.word	0x08004683
 8004400:	0800446b 	.word	0x0800446b
 8004404:	08004683 	.word	0x08004683
 8004408:	08004683 	.word	0x08004683
 800440c:	08004683 	.word	0x08004683
 8004410:	08004683 	.word	0x08004683
 8004414:	08004683 	.word	0x08004683
 8004418:	08004683 	.word	0x08004683
 800441c:	08004683 	.word	0x08004683
 8004420:	08004471 	.word	0x08004471
 8004424:	08004683 	.word	0x08004683
 8004428:	08004683 	.word	0x08004683
 800442c:	08004683 	.word	0x08004683
 8004430:	08004683 	.word	0x08004683
 8004434:	08004683 	.word	0x08004683
 8004438:	08004683 	.word	0x08004683
 800443c:	08004683 	.word	0x08004683
 8004440:	08004477 	.word	0x08004477
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004444:	4b94      	ldr	r3, [pc, #592]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004450:	4b91      	ldr	r3, [pc, #580]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	4a90      	ldr	r2, [pc, #576]	; (800469c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004462:	e111      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004464:	4b8d      	ldr	r3, [pc, #564]	; (800469c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004466:	61bb      	str	r3, [r7, #24]
    break;
 8004468:	e10e      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800446a:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800446c:	61bb      	str	r3, [r7, #24]
    break;
 800446e:	e10b      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004470:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004472:	61bb      	str	r3, [r7, #24]
    break;
 8004474:	e108      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004476:	4b88      	ldr	r3, [pc, #544]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004480:	4b85      	ldr	r3, [pc, #532]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800448c:	4b82      	ldr	r3, [pc, #520]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004496:	4b80      	ldr	r3, [pc, #512]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	08db      	lsrs	r3, r3, #3
 800449c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80e1 	beq.w	800467c <HAL_RCC_GetSysClockFreq+0x2b8>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f000 8083 	beq.w	80045c8 <HAL_RCC_GetSysClockFreq+0x204>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f200 80a1 	bhi.w	800460c <HAL_RCC_GetSysClockFreq+0x248>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x114>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d056      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044d6:	e099      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02d      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044e4:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	08db      	lsrs	r3, r3, #3
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	4a6b      	ldr	r2, [pc, #428]	; (800469c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b62      	ldr	r3, [pc, #392]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004522:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800453e:	e087      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b51      	ldr	r3, [pc, #324]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a02 	vldr	s12, [r7, #8]
 8004566:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004582:	e065      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c6:	e043      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e021      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004632:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	0a5b      	lsrs	r3, r3, #9
 8004656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465a:	3301      	adds	r3, #1
 800465c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004668:	edd7 6a07 	vldr	s13, [r7, #28]
 800466c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004674:	ee17 3a90 	vmov	r3, s15
 8004678:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800467a:	e005      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    break;
 8004680:	e002      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004684:	61bb      	str	r3, [r7, #24]
    break;
 8004686:	bf00      	nop
  }

  return sysclockfreq;
 8004688:	69bb      	ldr	r3, [r7, #24]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	58024400 	.word	0x58024400
 800469c:	03d09000 	.word	0x03d09000
 80046a0:	003d0900 	.word	0x003d0900
 80046a4:	007a1200 	.word	0x007a1200
 80046a8:	46000000 	.word	0x46000000
 80046ac:	4c742400 	.word	0x4c742400
 80046b0:	4a742400 	.word	0x4a742400
 80046b4:	4af42400 	.word	0x4af42400

080046b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046be:	f7ff fe81 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_RCC_GetHCLKFreq+0x50>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490f      	ldr	r1, [pc, #60]	; (800470c <HAL_RCC_GetHCLKFreq+0x54>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_GetHCLKFreq+0x50>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_GetHCLKFreq+0x54>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	fa22 f303 	lsr.w	r3, r2, r3
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <HAL_RCC_GetHCLKFreq+0x58>)
 80046f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_GetHCLKFreq+0x58>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	58024400 	.word	0x58024400
 800470c:	080093b4 	.word	0x080093b4
 8004710:	20000004 	.word	0x20000004
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800471c:	f7ff ffcc 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58024400 	.word	0x58024400
 8004740:	080093b4 	.word	0x080093b4

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004748:	f7ff ffb6 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	58024400 	.word	0x58024400
 800476c:	080093b4 	.word	0x080093b4

08004770 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800477c:	2300      	movs	r3, #0
 800477e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d03f      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004790:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004794:	d02a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479a:	d824      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800479c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a0:	d018      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a6:	d81e      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b0:	d007      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047b2:	e018      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b4:	4bab      	ldr	r3, [pc, #684]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4aaa      	ldr	r2, [pc, #680]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047c0:	e015      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f9cf 	bl	8005b6c <RCCEx_PLL2_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047d2:	e00c      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 fa78 	bl	8005cd0 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047f4:	4b9b      	ldr	r3, [pc, #620]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004800:	4998      	ldr	r1, [pc, #608]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	650b      	str	r3, [r1, #80]	; 0x50
 8004806:	e001      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03d      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	2b04      	cmp	r3, #4
 800481e:	d826      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800483d 	.word	0x0800483d
 800482c:	0800484b 	.word	0x0800484b
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004875 	.word	0x08004875
 8004838:	08004875 	.word	0x08004875
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4b89      	ldr	r3, [pc, #548]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a88      	ldr	r2, [pc, #544]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004848:	e015      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f98b 	bl	8005b6c <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800485a:	e00c      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3324      	adds	r3, #36	; 0x24
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fa34 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
      break;
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487c:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	f023 0207 	bic.w	r2, r3, #7
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	4976      	ldr	r1, [pc, #472]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	650b      	str	r3, [r1, #80]	; 0x50
 800488e:	e001      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489c:	2b00      	cmp	r3, #0
 800489e:	d042      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a8:	d02b      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ae:	d825      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048b0:	2bc0      	cmp	r3, #192	; 0xc0
 80048b2:	d028      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048b4:	2bc0      	cmp	r3, #192	; 0xc0
 80048b6:	d821      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d016      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d81d      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d007      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80048c8:	e018      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048d6:	e017      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f944 	bl	8005b6c <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048e8:	e00e      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 f9ed 	bl	8005cd0 <RCCEx_PLL3_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800490e:	4b55      	ldr	r3, [pc, #340]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	4952      	ldr	r1, [pc, #328]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	650b      	str	r3, [r1, #80]	; 0x50
 8004920:	e001      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492e:	2b00      	cmp	r3, #0
 8004930:	d049      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004938:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800493c:	d030      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800493e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004942:	d82a      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004944:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004948:	d02c      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800494a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800494e:	d824      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004954:	d018      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495a:	d81e      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004964:	d007      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004966:	e018      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004974:	e017      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f8f5 	bl	8005b6c <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004986:	e00e      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3324      	adds	r3, #36	; 0x24
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f99e 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004998:	e005      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
      break;
 800499e:	e002      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049ba:	492a      	ldr	r1, [pc, #168]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	658b      	str	r3, [r1, #88]	; 0x58
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04c      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049dc:	d030      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80049de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e2:	d82a      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049e8:	d02c      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80049ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ee:	d824      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f4:	d018      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80049f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fa:	d81e      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d007      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a06:	e018      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a14:	e017      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 f8a5 	bl	8005b6c <RCCEx_PLL2_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a26:	e00e      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3324      	adds	r3, #36	; 0x24
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f94e 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a38:	e005      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10d      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a5a:	4902      	ldr	r1, [pc, #8]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004a60:	e004      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d032      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d01c      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d817      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d813      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d016      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d10f      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a94:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	4aae      	ldr	r2, [pc, #696]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004aa0:	e00e      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f85f 	bl	8005b6c <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ac6:	4ba3      	ldr	r3, [pc, #652]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	49a0      	ldr	r1, [pc, #640]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ad8:	e001      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d047      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af2:	d030      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af8:	d82a      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004afa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004afe:	d02c      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b04:	d824      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d018      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b10:	d81e      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004b1c:	e018      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a8c      	ldr	r2, [pc, #560]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b2a:	e017      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 f81a 	bl	8005b6c <RCCEx_PLL2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b3c:	e00e      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3324      	adds	r3, #36	; 0x24
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 f8c3 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b4e:	e005      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
      break;
 8004b54:	e002      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b62:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	4979      	ldr	r1, [pc, #484]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	650b      	str	r3, [r1, #80]	; 0x50
 8004b74:	e001      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d049      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b8e:	d02e      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b94:	d828      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004b96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b9a:	d02a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba0:	d822      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba6:	d026      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bac:	d81c      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb2:	d010      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb8:	d816      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01d      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc2:	d111      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 ffce 	bl	8005b6c <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bd4:	e012      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3324      	adds	r3, #36	; 0x24
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f877 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004be6:	e009      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
      break;
 8004bec:	e006      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e004      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c02:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	4951      	ldr	r1, [pc, #324]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	650b      	str	r3, [r1, #80]	; 0x50
 8004c14:	e001      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04b      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c30:	d02e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c36:	d828      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d02a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d822      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c48:	d026      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c4e:	d81c      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c54:	d010      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5a:	d816      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c64:	d111      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 ff7d 	bl	8005b6c <RCCEx_PLL2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c76:	e012      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3324      	adds	r3, #36	; 0x24
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f826 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c88:	e009      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8e:	e006      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c90:	bf00      	nop
 8004c92:	e004      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c94:	bf00      	nop
 8004c96:	e002      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cb2:	4928      	ldr	r1, [pc, #160]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8004cb8:	e001      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02f      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd8:	d814      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d015      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce2:	d10f      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ff37 	bl	8005b6c <RCCEx_PLL2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1e:	490d      	ldr	r1, [pc, #52]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	650b      	str	r3, [r1, #80]	; 0x50
 8004d24:	e001      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d033      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d81c      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d7f 	.word	0x08004d7f
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d67 	.word	0x08004d67
 8004d50:	08004d7f 	.word	0x08004d7f
 8004d54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d58:	4bb8      	ldr	r3, [pc, #736]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4ab7      	ldr	r2, [pc, #732]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d64:	e00c      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fefd 	bl	8005b6c <RCCEx_PLL2_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d76:	e003      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d86:	4bad      	ldr	r3, [pc, #692]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	49aa      	ldr	r1, [pc, #680]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d98:	e001      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8086 	beq.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dac:	4ba4      	ldr	r3, [pc, #656]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4aa3      	ldr	r2, [pc, #652]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004db8:	f7fc fefa 	bl	8001bb0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dbe:	e009      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7fc fef6 	bl	8001bb0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	; 0x64
 8004dcc:	d902      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd2:	e005      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd4:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d166      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004de6:	4b95      	ldr	r3, [pc, #596]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df0:	4053      	eors	r3, r2
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d013      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfa:	4b90      	ldr	r3, [pc, #576]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e04:	4b8d      	ldr	r3, [pc, #564]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a8c      	ldr	r2, [pc, #560]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a89      	ldr	r2, [pc, #548]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e1c:	4a87      	ldr	r2, [pc, #540]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d115      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fc febf 	bl	8001bb0 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e34:	e00b      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fc febb 	bl	8001bb0 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d902      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	75fb      	strb	r3, [r7, #23]
            break;
 8004e4c:	e005      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ed      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d126      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6e:	d10d      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004e70:	4b72      	ldr	r3, [pc, #456]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e7e:	0919      	lsrs	r1, r3, #4
 8004e80:	4b70      	ldr	r3, [pc, #448]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	496d      	ldr	r1, [pc, #436]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
 8004e8a:	e005      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004e8c:	4b6b      	ldr	r3, [pc, #428]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	4a6a      	ldr	r2, [pc, #424]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e96:	6113      	str	r3, [r2, #16]
 8004e98:	4b68      	ldr	r3, [pc, #416]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea6:	4965      	ldr	r1, [pc, #404]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	670b      	str	r3, [r1, #112]	; 0x70
 8004eac:	e004      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	75bb      	strb	r3, [r7, #22]
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d07e      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	d867      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004fa3 	.word	0x08004fa3
 8004ed8:	08004f9d 	.word	0x08004f9d
 8004edc:	08004f9d 	.word	0x08004f9d
 8004ee0:	08004f9d 	.word	0x08004f9d
 8004ee4:	08004f9d 	.word	0x08004f9d
 8004ee8:	08004f9d 	.word	0x08004f9d
 8004eec:	08004f9d 	.word	0x08004f9d
 8004ef0:	08004f9d 	.word	0x08004f9d
 8004ef4:	08004f79 	.word	0x08004f79
 8004ef8:	08004f9d 	.word	0x08004f9d
 8004efc:	08004f9d 	.word	0x08004f9d
 8004f00:	08004f9d 	.word	0x08004f9d
 8004f04:	08004f9d 	.word	0x08004f9d
 8004f08:	08004f9d 	.word	0x08004f9d
 8004f0c:	08004f9d 	.word	0x08004f9d
 8004f10:	08004f9d 	.word	0x08004f9d
 8004f14:	08004f8b 	.word	0x08004f8b
 8004f18:	08004f9d 	.word	0x08004f9d
 8004f1c:	08004f9d 	.word	0x08004f9d
 8004f20:	08004f9d 	.word	0x08004f9d
 8004f24:	08004f9d 	.word	0x08004f9d
 8004f28:	08004f9d 	.word	0x08004f9d
 8004f2c:	08004f9d 	.word	0x08004f9d
 8004f30:	08004f9d 	.word	0x08004f9d
 8004f34:	08004fa3 	.word	0x08004fa3
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08004f9d 	.word	0x08004f9d
 8004f40:	08004f9d 	.word	0x08004f9d
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004fa3 	.word	0x08004fa3
 8004f58:	08004f9d 	.word	0x08004f9d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f9d 	.word	0x08004f9d
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fa3 	.word	0x08004fa3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fdf4 	bl	8005b6c <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f88:	e00c      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe9d 	bl	8005cd0 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f9a:	e003      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb6:	4921      	ldr	r1, [pc, #132]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	654b      	str	r3, [r1, #84]	; 0x54
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03e      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d820      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	0800501f 	.word	0x0800501f
 8004fe0:	08004ff5 	.word	0x08004ff5
 8004fe4:	08005007 	.word	0x08005007
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	0800501f 	.word	0x0800501f
 8004ff0:	0800501f 	.word	0x0800501f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fdb6 	bl	8005b6c <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3324      	adds	r3, #36	; 0x24
 800500a:	2101      	movs	r1, #1
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fe5f 	bl	8005cd0 <RCCEx_PLL3_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800501e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f023 0207 	bic.w	r2, r3, #7
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005032:	4902      	ldr	r1, [pc, #8]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005034:	4313      	orrs	r3, r2
 8005036:	654b      	str	r3, [r1, #84]	; 0x54
 8005038:	e008      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400
 8005040:	58024800 	.word	0x58024800
 8005044:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d039      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	2b05      	cmp	r3, #5
 8005060:	d820      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	080050ab 	.word	0x080050ab
 800506c:	08005081 	.word	0x08005081
 8005070:	08005093 	.word	0x08005093
 8005074:	080050ab 	.word	0x080050ab
 8005078:	080050ab 	.word	0x080050ab
 800507c:	080050ab 	.word	0x080050ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fd70 	bl	8005b6c <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005090:	e00c      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3324      	adds	r3, #36	; 0x24
 8005096:	2101      	movs	r1, #1
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fe19 	bl	8005cd0 <RCCEx_PLL3_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050a2:	e003      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
      break;
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80050aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b2:	4bb7      	ldr	r3, [pc, #732]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f023 0207 	bic.w	r2, r3, #7
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	49b3      	ldr	r1, [pc, #716]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	658b      	str	r3, [r1, #88]	; 0x58
 80050c6:	e001      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d04b      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e2:	d02e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80050e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e8:	d828      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ee:	d02a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d822      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80050f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050fa:	d026      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80050fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005100:	d81c      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005106:	d010      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d816      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01d      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005116:	d111      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fd24 	bl	8005b6c <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005128:	e012      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3324      	adds	r3, #36	; 0x24
 800512e:	2102      	movs	r1, #2
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fdcd 	bl	8005cd0 <RCCEx_PLL3_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800513a:	e009      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	75fb      	strb	r3, [r7, #23]
      break;
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800514e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b8e      	ldr	r3, [pc, #568]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	498a      	ldr	r1, [pc, #552]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005166:	4313      	orrs	r3, r2
 8005168:	654b      	str	r3, [r1, #84]	; 0x54
 800516a:	e001      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d04b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005182:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005186:	d02e      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005188:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800518c:	d828      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005192:	d02a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d822      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800519a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519e:	d026      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80051a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051a4:	d81c      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d010      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80051ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b0:	d816      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01d      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d111      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fcd2 	bl	8005b6c <RCCEx_PLL2_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051cc:	e012      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3324      	adds	r3, #36	; 0x24
 80051d2:	2102      	movs	r1, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd7b 	bl	8005cd0 <RCCEx_PLL3_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051de:	e009      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
      break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051e6:	bf00      	nop
 80051e8:	e004      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051fa:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005208:	4961      	ldr	r1, [pc, #388]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800520a:	4313      	orrs	r3, r2
 800520c:	658b      	str	r3, [r1, #88]	; 0x58
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005226:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800522c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005230:	d828      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005236:	d02a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	d822      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800523e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005242:	d026      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005244:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005248:	d81c      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800524a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524e:	d010      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005254:	d816      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800525a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525e:	d111      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fc80 	bl	8005b6c <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005270:	e012      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fd29 	bl	8005cd0 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005282:	e009      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800529e:	4b3c      	ldr	r3, [pc, #240]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ac:	4938      	ldr	r1, [pc, #224]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	658b      	str	r3, [r1, #88]	; 0x58
 80052b2:	e001      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	d10a      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3324      	adds	r3, #36	; 0x24
 80052d4:	2102      	movs	r1, #2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fcfa 	bl	8005cd0 <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f4:	4926      	ldr	r1, [pc, #152]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005310:	d10a      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3324      	adds	r3, #36	; 0x24
 8005316:	2102      	movs	r1, #2
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fcd9 	bl	8005cd0 <RCCEx_PLL3_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005328:	4b19      	ldr	r3, [pc, #100]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005336:	4916      	ldr	r1, [pc, #88]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005338:	4313      	orrs	r3, r2
 800533a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d036      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800534e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005352:	d01f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005358:	d817      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	d009      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005364:	e011      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fbfd 	bl	8005b6c <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005376:	e00e      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fca6 	bl	8005cd0 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005388:	e005      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
      break;
 800538e:	e002      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005390:	58024400 	.word	0x58024400
      break;
 8005394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800539c:	4b93      	ldr	r3, [pc, #588]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053aa:	4990      	ldr	r1, [pc, #576]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	658b      	str	r3, [r1, #88]	; 0x58
 80053b0:	e001      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d033      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053cc:	d01c      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80053ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053d2:	d816      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d8:	d003      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80053da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053de:	d007      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e2:	4b82      	ldr	r3, [pc, #520]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4a81      	ldr	r2, [pc, #516]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053ee:	e00c      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3324      	adds	r3, #36	; 0x24
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fc6a 	bl	8005cd0 <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005400:	e003      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
      break;
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005410:	4b76      	ldr	r3, [pc, #472]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541e:	4973      	ldr	r1, [pc, #460]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	654b      	str	r3, [r1, #84]	; 0x54
 8005424:	e001      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d029      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800543e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005442:	d007      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005444:	e00f      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4b69      	ldr	r3, [pc, #420]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4a68      	ldr	r2, [pc, #416]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005452:	e00b      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb86 	bl	8005b6c <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
      break;
 800546a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005472:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	495b      	ldr	r1, [pc, #364]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005484:	e001      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	2102      	movs	r1, #2
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fc17 	bl	8005cd0 <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d030      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c0:	d017      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80054c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c6:	d811      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d013      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80054ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d2:	d80b      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80054d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054dc:	d106      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054de:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	4a42      	ldr	r2, [pc, #264]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054ea:	e007      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e004      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80054fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005502:	4b3a      	ldr	r3, [pc, #232]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	4937      	ldr	r1, [pc, #220]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	654b      	str	r3, [r1, #84]	; 0x54
 8005514:	e001      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	492e      	ldr	r1, [pc, #184]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005534:	4313      	orrs	r3, r2
 8005536:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d009      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005544:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005552:	4926      	ldr	r1, [pc, #152]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005554:	4313      	orrs	r3, r2
 8005556:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005564:	4b21      	ldr	r3, [pc, #132]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005570:	491e      	ldr	r1, [pc, #120]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800558c:	6113      	str	r3, [r2, #16]
 800558e:	4b17      	ldr	r3, [pc, #92]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005598:	4914      	ldr	r1, [pc, #80]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da08      	bge.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	4906      	ldr	r1, [pc, #24]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80055d8:	7dbb      	ldrb	r3, [r7, #22]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	58024400 	.word	0x58024400

080055f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80055f4:	f7ff f860 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4904      	ldr	r1, [pc, #16]	; (8005618 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	58024400 	.word	0x58024400
 8005618:	080093b4 	.word	0x080093b4

0800561c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005624:	4ba1      	ldr	r3, [pc, #644]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800562e:	4b9f      	ldr	r3, [pc, #636]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	0b1b      	lsrs	r3, r3, #12
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800563a:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005646:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564a:	08db      	lsrs	r3, r3, #3
 800564c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8111 	beq.w	800588c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b02      	cmp	r3, #2
 800566e:	f000 8083 	beq.w	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b02      	cmp	r3, #2
 8005676:	f200 80a1 	bhi.w	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d056      	beq.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005686:	e099      	b.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005688:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02d      	beq.n	80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005694:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	4a84      	ldr	r2, [pc, #528]	; (80058b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b7b      	ldr	r3, [pc, #492]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056ee:	e087      	b.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005732:	e065      	b.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a03 	vldr	s12, [r7, #12]
 800575a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005776:	e043      	b.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b48      	ldr	r3, [pc, #288]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a03 	vldr	s12, [r7, #12]
 800579e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ba:	e021      	b.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	0a5b      	lsrs	r3, r3, #9
 8005806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581a:	edd7 6a07 	vldr	s13, [r7, #28]
 800581e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005826:	ee17 2a90 	vmov	r2, s15
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800582e:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005848:	edd7 6a07 	vldr	s13, [r7, #28]
 800584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005854:	ee17 2a90 	vmov	r2, s15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005876:	edd7 6a07 	vldr	s13, [r7, #28]
 800587a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005882:	ee17 2a90 	vmov	r2, s15
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800588a:	e008      	b.n	800589e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	58024400 	.word	0x58024400
 80058b0:	03d09000 	.word	0x03d09000
 80058b4:	46000000 	.word	0x46000000
 80058b8:	4c742400 	.word	0x4c742400
 80058bc:	4a742400 	.word	0x4a742400
 80058c0:	4af42400 	.word	0x4af42400

080058c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	; 0x24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058cc:	4ba1      	ldr	r3, [pc, #644]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80058d6:	4b9f      	ldr	r3, [pc, #636]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	0d1b      	lsrs	r3, r3, #20
 80058dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058e2:	4b9c      	ldr	r3, [pc, #624]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058ee:	4b99      	ldr	r3, [pc, #612]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8111 	beq.w	8005b34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b02      	cmp	r3, #2
 8005916:	f000 8083 	beq.w	8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b02      	cmp	r3, #2
 800591e:	f200 80a1 	bhi.w	8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d056      	beq.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800592e:	e099      	b.n	8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005930:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02d      	beq.n	8005998 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800593c:	4b85      	ldr	r3, [pc, #532]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	4a84      	ldr	r2, [pc, #528]	; (8005b58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005976:	ed97 6a03 	vldr	s12, [r7, #12]
 800597a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800597e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005996:	e087      	b.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80059be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059da:	e065      	b.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ee:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1e:	e043      	b.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a32:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a62:	e021      	b.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005aa8:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ace:	ee17 2a90 	vmov	r2, s15
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ad6:	4b1f      	ldr	r3, [pc, #124]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afc:	ee17 2a90 	vmov	r2, s15
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	0e1b      	lsrs	r3, r3, #24
 8005b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2a:	ee17 2a90 	vmov	r2, s15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
}
 8005b46:	bf00      	nop
 8005b48:	3724      	adds	r7, #36	; 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	58024400 	.word	0x58024400
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	46000000 	.word	0x46000000
 8005b60:	4c742400 	.word	0x4c742400
 8005b64:	4a742400 	.word	0x4a742400
 8005b68:	4af42400 	.word	0x4af42400

08005b6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b7a:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d101      	bne.n	8005b8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e099      	b.n	8005cbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b8a:	4b4f      	ldr	r3, [pc, #316]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a4e      	ldr	r2, [pc, #312]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b96:	f7fc f80b 	bl	8001bb0 <HAL_GetTick>
 8005b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b9c:	e008      	b.n	8005bb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b9e:	f7fc f807 	bl	8001bb0 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e086      	b.n	8005cbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bb0:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bbc:	4b42      	ldr	r3, [pc, #264]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	493f      	ldr	r1, [pc, #252]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	025b      	lsls	r3, r3, #9
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c00:	4931      	ldr	r1, [pc, #196]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c06:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	492d      	ldr	r1, [pc, #180]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f023 0220 	bic.w	r2, r3, #32
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4928      	ldr	r1, [pc, #160]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <RCCEx_PLL2_Config+0x160>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	69d2      	ldr	r2, [r2, #28]
 8005c42:	00d2      	lsls	r2, r2, #3
 8005c44:	4920      	ldr	r1, [pc, #128]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c50:	f043 0310 	orr.w	r3, r3, #16
 8005c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c68:	e00f      	b.n	8005c8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d106      	bne.n	8005c7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c70:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c7c:	e005      	b.n	8005c8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c96:	f7fb ff8b 	bl	8001bb0 <HAL_GetTick>
 8005c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c9c:	e008      	b.n	8005cb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c9e:	f7fb ff87 	bl	8001bb0 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e006      	b.n	8005cbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	ffff0007 	.word	0xffff0007

08005cd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cde:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d101      	bne.n	8005cee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e099      	b.n	8005e22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cee:	4b4f      	ldr	r3, [pc, #316]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfa:	f7fb ff59 	bl	8001bb0 <HAL_GetTick>
 8005cfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d00:	e008      	b.n	8005d14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d02:	f7fb ff55 	bl	8001bb0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e086      	b.n	8005e22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d14:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1f0      	bne.n	8005d02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d20:	4b42      	ldr	r3, [pc, #264]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	493f      	ldr	r1, [pc, #252]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	628b      	str	r3, [r1, #40]	; 0x28
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	025b      	lsls	r3, r3, #9
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	061b      	lsls	r3, r3, #24
 8005d60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d64:	4931      	ldr	r1, [pc, #196]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d6a:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	492d      	ldr	r1, [pc, #180]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d7c:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	4928      	ldr	r1, [pc, #160]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d8e:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d9a:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <RCCEx_PLL3_Config+0x160>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	69d2      	ldr	r2, [r2, #28]
 8005da6:	00d2      	lsls	r2, r2, #3
 8005da8:	4920      	ldr	r1, [pc, #128]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dae:	4b1f      	ldr	r3, [pc, #124]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dcc:	e00f      	b.n	8005dee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005dda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005de0:	e005      	b.n	8005dee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fb fed9 	bl	8001bb0 <HAL_GetTick>
 8005dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e02:	f7fb fed5 	bl	8001bb0 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e006      	b.n	8005e22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <RCCEx_PLL3_Config+0x15c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	ffff0007 	.word	0xffff0007

08005e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e049      	b.n	8005eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fb9c 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 fd30 	bl	80068d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e049      	b.n	8005f88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f841 	bl	8005f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 fcd9 	bl	80068d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start_IT+0x24>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e03c      	b.n	8006042 <HAL_TIM_PWM_Start_IT+0x9e>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIM_PWM_Start_IT+0x3e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e02f      	b.n	8006042 <HAL_TIM_PWM_Start_IT+0x9e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start_IT+0x58>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e022      	b.n	8006042 <HAL_TIM_PWM_Start_IT+0x9e>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d109      	bne.n	8006016 <HAL_TIM_PWM_Start_IT+0x72>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e015      	b.n	8006042 <HAL_TIM_PWM_Start_IT+0x9e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b10      	cmp	r3, #16
 800601a:	d109      	bne.n	8006030 <HAL_TIM_PWM_Start_IT+0x8c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e008      	b.n	8006042 <HAL_TIM_PWM_Start_IT+0x9e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0e2      	b.n	8006210 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Start_IT+0xb6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006058:	e023      	b.n	80060a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start_IT+0xc6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	e01b      	b.n	80060a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start_IT+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006078:	e013      	b.n	80060a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start_IT+0xe6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b10      	cmp	r3, #16
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start_IT+0xf6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	e003      	b.n	80060a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d841      	bhi.n	800612c <HAL_TIM_PWM_Start_IT+0x188>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_TIM_PWM_Start_IT+0x10c>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	0800612d 	.word	0x0800612d
 80060c0:	080060f7 	.word	0x080060f7
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	0800612d 	.word	0x0800612d
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	08006109 	.word	0x08006109
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800611b 	.word	0x0800611b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0202 	orr.w	r2, r2, #2
 80060f2:	60da      	str	r2, [r3, #12]
      break;
 80060f4:	e01b      	b.n	800612e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0204 	orr.w	r2, r2, #4
 8006104:	60da      	str	r2, [r3, #12]
      break;
 8006106:	e012      	b.n	800612e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	60da      	str	r2, [r3, #12]
      break;
 8006118:	e009      	b.n	800612e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0210 	orr.w	r2, r2, #16
 8006128:	60da      	str	r2, [r3, #12]
      break;
 800612a:	e000      	b.n	800612e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800612c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 ffd4 	bl	80070e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a35      	ldr	r2, [pc, #212]	; (8006218 <HAL_TIM_PWM_Start_IT+0x274>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a34      	ldr	r2, [pc, #208]	; (800621c <HAL_TIM_PWM_Start_IT+0x278>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a32      	ldr	r2, [pc, #200]	; (8006220 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_TIM_PWM_Start_IT+0x1ca>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a31      	ldr	r2, [pc, #196]	; (8006224 <HAL_TIM_PWM_Start_IT+0x280>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <HAL_TIM_PWM_Start_IT+0x284>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_TIM_PWM_Start_IT+0x1ce>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006186:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a22      	ldr	r2, [pc, #136]	; (8006218 <HAL_TIM_PWM_Start_IT+0x274>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01d      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619a:	d018      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_TIM_PWM_Start_IT+0x288>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_TIM_PWM_Start_IT+0x28c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <HAL_TIM_PWM_Start_IT+0x290>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <HAL_TIM_PWM_Start_IT+0x278>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_TIM_PWM_Start_IT+0x22a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_TIM_PWM_Start_IT+0x294>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d115      	bne.n	80061fa <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <HAL_TIM_PWM_Start_IT+0x298>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d015      	beq.n	800620c <HAL_TIM_PWM_Start_IT+0x268>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e6:	d011      	beq.n	800620c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f8:	e008      	b.n	800620c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e000      	b.n	800620e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40010000 	.word	0x40010000
 800621c:	40010400 	.word	0x40010400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40001800 	.word	0x40001800
 800623c:	00010007 	.word	0x00010007

08006240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b02      	cmp	r3, #2
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0202 	mvn.w	r2, #2
 800626c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb14 	bl	80068b0 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fb06 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fa ff97 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0204 	mvn.w	r2, #4
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 faea 	bl	80068b0 <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fadc 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fa ff6d 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d122      	bne.n	8006344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b08      	cmp	r3, #8
 800630a:	d11b      	bne.n	8006344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0208 	mvn.w	r2, #8
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2204      	movs	r2, #4
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fac0 	bl	80068b0 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fab2 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fa ff43 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b10      	cmp	r3, #16
 8006350:	d122      	bne.n	8006398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b10      	cmp	r3, #16
 800635e:	d11b      	bne.n	8006398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0210 	mvn.w	r2, #16
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2208      	movs	r2, #8
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa96 	bl	80068b0 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa88 	bl	800689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fa ff19 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10e      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d107      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0201 	mvn.w	r2, #1
 80063bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa62 	bl	8006888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ce:	2b80      	cmp	r3, #128	; 0x80
 80063d0:	d10e      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d107      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 ff32 	bl	8007254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d10e      	bne.n	800641e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d107      	bne.n	800641e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 ff25 	bl	8007268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d10e      	bne.n	800644a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d107      	bne.n	800644a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa3d 	bl	80068c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d10e      	bne.n	8006476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b20      	cmp	r3, #32
 8006464:	d107      	bne.n	8006476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f06f 0220 	mvn.w	r2, #32
 800646e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fee5 	bl	8007240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006496:	2302      	movs	r3, #2
 8006498:	e0fd      	b.n	8006696 <HAL_TIM_PWM_ConfigChannel+0x216>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b14      	cmp	r3, #20
 80064a6:	f200 80f0 	bhi.w	800668a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	08006505 	.word	0x08006505
 80064b4:	0800668b 	.word	0x0800668b
 80064b8:	0800668b 	.word	0x0800668b
 80064bc:	0800668b 	.word	0x0800668b
 80064c0:	08006545 	.word	0x08006545
 80064c4:	0800668b 	.word	0x0800668b
 80064c8:	0800668b 	.word	0x0800668b
 80064cc:	0800668b 	.word	0x0800668b
 80064d0:	08006587 	.word	0x08006587
 80064d4:	0800668b 	.word	0x0800668b
 80064d8:	0800668b 	.word	0x0800668b
 80064dc:	0800668b 	.word	0x0800668b
 80064e0:	080065c7 	.word	0x080065c7
 80064e4:	0800668b 	.word	0x0800668b
 80064e8:	0800668b 	.word	0x0800668b
 80064ec:	0800668b 	.word	0x0800668b
 80064f0:	08006609 	.word	0x08006609
 80064f4:	0800668b 	.word	0x0800668b
 80064f8:	0800668b 	.word	0x0800668b
 80064fc:	0800668b 	.word	0x0800668b
 8006500:	08006649 	.word	0x08006649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fa7e 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0208 	orr.w	r2, r2, #8
 800651e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0204 	bic.w	r2, r2, #4
 800652e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6999      	ldr	r1, [r3, #24]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	619a      	str	r2, [r3, #24]
      break;
 8006542:	e0a3      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 faee 	bl	8006b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	619a      	str	r2, [r3, #24]
      break;
 8006584:	e082      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fb57 	bl	8006c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0208 	orr.w	r2, r2, #8
 80065a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0204 	bic.w	r2, r2, #4
 80065b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69d9      	ldr	r1, [r3, #28]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	61da      	str	r2, [r3, #28]
      break;
 80065c4:	e062      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fbbd 	bl	8006d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69d9      	ldr	r1, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	021a      	lsls	r2, r3, #8
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	61da      	str	r2, [r3, #28]
      break;
 8006606:	e041      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fc04 	bl	8006e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0208 	orr.w	r2, r2, #8
 8006622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0204 	bic.w	r2, r2, #4
 8006632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006646:	e021      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fc46 	bl	8006ee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	021a      	lsls	r2, r3, #8
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006688:	e000      	b.n	800668c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800668a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop

080066a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_ConfigClockSource+0x18>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0db      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1d0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4b69      	ldr	r3, [pc, #420]	; (8006878 <HAL_TIM_ConfigClockSource+0x1d8>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a63      	ldr	r2, [pc, #396]	; (800687c <HAL_TIM_ConfigClockSource+0x1dc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f000 80a9 	beq.w	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 80066f4:	4a61      	ldr	r2, [pc, #388]	; (800687c <HAL_TIM_ConfigClockSource+0x1dc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f200 80ae 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 80066fc:	4a60      	ldr	r2, [pc, #384]	; (8006880 <HAL_TIM_ConfigClockSource+0x1e0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f000 80a1 	beq.w	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 8006704:	4a5e      	ldr	r2, [pc, #376]	; (8006880 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f200 80a6 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 800670c:	4a5d      	ldr	r2, [pc, #372]	; (8006884 <HAL_TIM_ConfigClockSource+0x1e4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	f000 8099 	beq.w	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 8006714:	4a5b      	ldr	r2, [pc, #364]	; (8006884 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	f200 809e 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 800671c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006720:	f000 8091 	beq.w	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 8006724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006728:	f200 8096 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 800672c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006730:	f000 8089 	beq.w	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 8006734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006738:	f200 808e 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006740:	d03e      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0x120>
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	f200 8087 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	f000 8085 	beq.w	800685c <HAL_TIM_ConfigClockSource+0x1bc>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	d87f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006758:	2b70      	cmp	r3, #112	; 0x70
 800675a:	d01a      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0xf2>
 800675c:	2b70      	cmp	r3, #112	; 0x70
 800675e:	d87b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006760:	2b60      	cmp	r3, #96	; 0x60
 8006762:	d050      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x166>
 8006764:	2b60      	cmp	r3, #96	; 0x60
 8006766:	d877      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006768:	2b50      	cmp	r3, #80	; 0x50
 800676a:	d03c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x146>
 800676c:	2b50      	cmp	r3, #80	; 0x50
 800676e:	d873      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d058      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x186>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d86f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006778:	2b30      	cmp	r3, #48	; 0x30
 800677a:	d064      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d86b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d060      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d867      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d05c      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
 800678c:	2b10      	cmp	r3, #16
 800678e:	d05a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006790:	e062      	b.n	8006858 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6899      	ldr	r1, [r3, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f000 fc7f 	bl	80070a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	609a      	str	r2, [r3, #8]
      break;
 80067be:	e04e      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f000 fc68 	bl	80070a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067e2:	609a      	str	r2, [r3, #8]
      break;
 80067e4:	e03b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fbd8 	bl	8006fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2150      	movs	r1, #80	; 0x50
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fc32 	bl	8007068 <TIM_ITRx_SetConfig>
      break;
 8006804:	e02b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 fbf7 	bl	8007006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2160      	movs	r1, #96	; 0x60
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fc22 	bl	8007068 <TIM_ITRx_SetConfig>
      break;
 8006824:	e01b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fbb8 	bl	8006fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2140      	movs	r1, #64	; 0x40
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fc12 	bl	8007068 <TIM_ITRx_SetConfig>
      break;
 8006844:	e00b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 fc09 	bl	8007068 <TIM_ITRx_SetConfig>
        break;
 8006856:	e002      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800685c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	ffceff88 	.word	0xffceff88
 800687c:	00100040 	.word	0x00100040
 8006880:	00100030 	.word	0x00100030
 8006884:	00100020 	.word	0x00100020

08006888 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a40      	ldr	r2, [pc, #256]	; (80069ec <TIM_Base_SetConfig+0x114>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a3d      	ldr	r2, [pc, #244]	; (80069f0 <TIM_Base_SetConfig+0x118>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3c      	ldr	r2, [pc, #240]	; (80069f4 <TIM_Base_SetConfig+0x11c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3b      	ldr	r2, [pc, #236]	; (80069f8 <TIM_Base_SetConfig+0x120>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a3a      	ldr	r2, [pc, #232]	; (80069fc <TIM_Base_SetConfig+0x124>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d108      	bne.n	800692a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <TIM_Base_SetConfig+0x114>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01f      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006938:	d01b      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2c      	ldr	r2, [pc, #176]	; (80069f0 <TIM_Base_SetConfig+0x118>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d017      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2b      	ldr	r2, [pc, #172]	; (80069f4 <TIM_Base_SetConfig+0x11c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2a      	ldr	r2, [pc, #168]	; (80069f8 <TIM_Base_SetConfig+0x120>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a29      	ldr	r2, [pc, #164]	; (80069fc <TIM_Base_SetConfig+0x124>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <TIM_Base_SetConfig+0x128>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <TIM_Base_SetConfig+0x12c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <TIM_Base_SetConfig+0x130>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a10      	ldr	r2, [pc, #64]	; (80069ec <TIM_Base_SetConfig+0x114>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00f      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a12      	ldr	r2, [pc, #72]	; (80069fc <TIM_Base_SetConfig+0x124>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a11      	ldr	r2, [pc, #68]	; (8006a00 <TIM_Base_SetConfig+0x128>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <TIM_Base_SetConfig+0x12c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <TIM_Base_SetConfig+0x130>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	615a      	str	r2, [r3, #20]
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40010400 	.word	0x40010400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4b37      	ldr	r3, [pc, #220]	; (8006b14 <TIM_OC1_SetConfig+0x108>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0302 	bic.w	r3, r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2d      	ldr	r2, [pc, #180]	; (8006b18 <TIM_OC1_SetConfig+0x10c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00f      	beq.n	8006a88 <TIM_OC1_SetConfig+0x7c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <TIM_OC1_SetConfig+0x110>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_OC1_SetConfig+0x7c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a2b      	ldr	r2, [pc, #172]	; (8006b20 <TIM_OC1_SetConfig+0x114>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_OC1_SetConfig+0x7c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <TIM_OC1_SetConfig+0x118>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC1_SetConfig+0x7c>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a29      	ldr	r2, [pc, #164]	; (8006b28 <TIM_OC1_SetConfig+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10c      	bne.n	8006aa2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0308 	bic.w	r3, r3, #8
 8006a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 0304 	bic.w	r3, r3, #4
 8006aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <TIM_OC1_SetConfig+0x10c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00f      	beq.n	8006aca <TIM_OC1_SetConfig+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <TIM_OC1_SetConfig+0x110>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00b      	beq.n	8006aca <TIM_OC1_SetConfig+0xbe>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1a      	ldr	r2, [pc, #104]	; (8006b20 <TIM_OC1_SetConfig+0x114>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d007      	beq.n	8006aca <TIM_OC1_SetConfig+0xbe>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <TIM_OC1_SetConfig+0x118>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_OC1_SetConfig+0xbe>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <TIM_OC1_SetConfig+0x11c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d111      	bne.n	8006aee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	fffeff8f 	.word	0xfffeff8f
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800

08006b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0210 	bic.w	r2, r3, #16
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <TIM_OC2_SetConfig+0xfc>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 0320 	bic.w	r3, r3, #32
 8006b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <TIM_OC2_SetConfig+0x100>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <TIM_OC2_SetConfig+0x68>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a28      	ldr	r2, [pc, #160]	; (8006c30 <TIM_OC2_SetConfig+0x104>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d10d      	bne.n	8006bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1e      	ldr	r2, [pc, #120]	; (8006c2c <TIM_OC2_SetConfig+0x100>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00f      	beq.n	8006bd8 <TIM_OC2_SetConfig+0xac>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <TIM_OC2_SetConfig+0x104>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00b      	beq.n	8006bd8 <TIM_OC2_SetConfig+0xac>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <TIM_OC2_SetConfig+0x108>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_OC2_SetConfig+0xac>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <TIM_OC2_SetConfig+0x10c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_OC2_SetConfig+0xac>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <TIM_OC2_SetConfig+0x110>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d113      	bne.n	8006c00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	feff8fff 	.word	0xfeff8fff
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40010400 	.word	0x40010400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800

08006c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a27      	ldr	r2, [pc, #156]	; (8006d38 <TIM_OC3_SetConfig+0xf8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_OC3_SetConfig+0x66>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	; (8006d3c <TIM_OC3_SetConfig+0xfc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10d      	bne.n	8006cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <TIM_OC3_SetConfig+0xf8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00f      	beq.n	8006cea <TIM_OC3_SetConfig+0xaa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <TIM_OC3_SetConfig+0xfc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00b      	beq.n	8006cea <TIM_OC3_SetConfig+0xaa>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <TIM_OC3_SetConfig+0x100>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d007      	beq.n	8006cea <TIM_OC3_SetConfig+0xaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <TIM_OC3_SetConfig+0x104>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d003      	beq.n	8006cea <TIM_OC3_SetConfig+0xaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <TIM_OC3_SetConfig+0x108>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d113      	bne.n	8006d12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40010400 	.word	0x40010400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <TIM_OC4_SetConfig+0xbc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <TIM_OC4_SetConfig+0x80>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <TIM_OC4_SetConfig+0xc0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_OC4_SetConfig+0x80>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC4_SetConfig+0xc4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_OC4_SetConfig+0x80>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <TIM_OC4_SetConfig+0xc8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC4_SetConfig+0x80>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <TIM_OC4_SetConfig+0xcc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d109      	bne.n	8006de0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	019b      	lsls	r3, r3, #6
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40010400 	.word	0x40010400
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40014400 	.word	0x40014400
 8006e18:	40014800 	.word	0x40014800

08006e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <TIM_OC5_SetConfig+0xb0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00f      	beq.n	8006e92 <TIM_OC5_SetConfig+0x76>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <TIM_OC5_SetConfig+0xb4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00b      	beq.n	8006e92 <TIM_OC5_SetConfig+0x76>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <TIM_OC5_SetConfig+0xb8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d007      	beq.n	8006e92 <TIM_OC5_SetConfig+0x76>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <TIM_OC5_SetConfig+0xbc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC5_SetConfig+0x76>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a13      	ldr	r2, [pc, #76]	; (8006edc <TIM_OC5_SetConfig+0xc0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d109      	bne.n	8006ea6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	621a      	str	r2, [r3, #32]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	40010400 	.word	0x40010400
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40014400 	.word	0x40014400
 8006edc:	40014800 	.word	0x40014800

08006ee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	051b      	lsls	r3, r3, #20
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <TIM_OC6_SetConfig+0xb4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00f      	beq.n	8006f58 <TIM_OC6_SetConfig+0x78>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <TIM_OC6_SetConfig+0xb8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <TIM_OC6_SetConfig+0x78>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a16      	ldr	r2, [pc, #88]	; (8006f9c <TIM_OC6_SetConfig+0xbc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_OC6_SetConfig+0x78>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <TIM_OC6_SetConfig+0xc0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_OC6_SetConfig+0x78>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a14      	ldr	r2, [pc, #80]	; (8006fa4 <TIM_OC6_SetConfig+0xc4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d109      	bne.n	8006f6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f023 0201 	bic.w	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f023 030a 	bic.w	r3, r3, #10
 8006fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f023 0210 	bic.w	r2, r3, #16
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007042:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <TIM_ITRx_SetConfig+0x38>)
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	f043 0307 	orr.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	609a      	str	r2, [r3, #8]
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	ffcfff8f 	.word	0xffcfff8f

080070a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	021a      	lsls	r2, r3, #8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	2201      	movs	r2, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	43db      	mvns	r3, r3
 8007106:	401a      	ands	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	fa01 f303 	lsl.w	r3, r1, r3
 800711c:	431a      	orrs	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e068      	b.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2e      	ldr	r2, [pc, #184]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2d      	ldr	r2, [pc, #180]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ba:	d018      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a18      	ldr	r2, [pc, #96]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a13      	ldr	r2, [pc, #76]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d10c      	bne.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40001800 	.word	0x40001800

08007240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e042      	b.n	8007314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fa f9dd 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2224      	movs	r2, #36	; 0x24
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f8c2 	bl	8007448 <UART_SetConfig>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e022      	b.n	8007314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fe16 	bl	8007f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fe9d 	bl	800804c <UART_CheckIdleState>
 8007312:	4603      	mov	r3, r0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007332:	2b20      	cmp	r3, #32
 8007334:	f040 8083 	bne.w	800743e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Transmit+0x28>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e07b      	b.n	8007440 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_UART_Transmit+0x3a>
 8007352:	2302      	movs	r3, #2
 8007354:	e074      	b.n	8007440 <HAL_UART_Transmit+0x124>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2221      	movs	r2, #33	; 0x21
 800736a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800736e:	f7fa fc1f 	bl	8001bb0 <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738c:	d108      	bne.n	80073a0 <HAL_UART_Transmit+0x84>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d104      	bne.n	80073a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	e003      	b.n	80073a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80073b0:	e02c      	b.n	800740c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fe90 	bl	80080e2 <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e039      	b.n	8007440 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	3302      	adds	r3, #2
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	e007      	b.n	80073fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3301      	adds	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1cc      	bne.n	80073b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fe5d 	bl	80080e2 <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e006      	b.n	8007440 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	e000      	b.n	8007440 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800743e:	2302      	movs	r3, #2
  }
}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007448:	b5b0      	push	{r4, r5, r7, lr}
 800744a:	b08e      	sub	sp, #56	; 0x38
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	4313      	orrs	r3, r2
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4bbf      	ldr	r3, [pc, #764]	; (8007774 <UART_SetConfig+0x32c>)
 8007476:	4013      	ands	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800747e:	430b      	orrs	r3, r1
 8007480:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4ab5      	ldr	r2, [pc, #724]	; (8007778 <UART_SetConfig+0x330>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ae:	4313      	orrs	r3, r2
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	4bb0      	ldr	r3, [pc, #704]	; (800777c <UART_SetConfig+0x334>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074c2:	430b      	orrs	r3, r1
 80074c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f023 010f 	bic.w	r1, r3, #15
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4aa7      	ldr	r2, [pc, #668]	; (8007780 <UART_SetConfig+0x338>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d176      	bne.n	80075d4 <UART_SetConfig+0x18c>
 80074e6:	4ba7      	ldr	r3, [pc, #668]	; (8007784 <UART_SetConfig+0x33c>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ee:	2b28      	cmp	r3, #40	; 0x28
 80074f0:	d86c      	bhi.n	80075cc <UART_SetConfig+0x184>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0xb0>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800759d 	.word	0x0800759d
 80074fc:	080075cd 	.word	0x080075cd
 8007500:	080075cd 	.word	0x080075cd
 8007504:	080075cd 	.word	0x080075cd
 8007508:	080075cd 	.word	0x080075cd
 800750c:	080075cd 	.word	0x080075cd
 8007510:	080075cd 	.word	0x080075cd
 8007514:	080075cd 	.word	0x080075cd
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075cd 	.word	0x080075cd
 8007520:	080075cd 	.word	0x080075cd
 8007524:	080075cd 	.word	0x080075cd
 8007528:	080075cd 	.word	0x080075cd
 800752c:	080075cd 	.word	0x080075cd
 8007530:	080075cd 	.word	0x080075cd
 8007534:	080075cd 	.word	0x080075cd
 8007538:	080075ad 	.word	0x080075ad
 800753c:	080075cd 	.word	0x080075cd
 8007540:	080075cd 	.word	0x080075cd
 8007544:	080075cd 	.word	0x080075cd
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075cd 	.word	0x080075cd
 8007550:	080075cd 	.word	0x080075cd
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075b5 	.word	0x080075b5
 800755c:	080075cd 	.word	0x080075cd
 8007560:	080075cd 	.word	0x080075cd
 8007564:	080075cd 	.word	0x080075cd
 8007568:	080075cd 	.word	0x080075cd
 800756c:	080075cd 	.word	0x080075cd
 8007570:	080075cd 	.word	0x080075cd
 8007574:	080075cd 	.word	0x080075cd
 8007578:	080075bd 	.word	0x080075bd
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080075cd 	.word	0x080075cd
 8007584:	080075cd 	.word	0x080075cd
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075c5 	.word	0x080075c5
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a2:	e222      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075a4:	2304      	movs	r3, #4
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e21e      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075ac:	2308      	movs	r3, #8
 80075ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b2:	e21a      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075b4:	2310      	movs	r3, #16
 80075b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ba:	e216      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075bc:	2320      	movs	r3, #32
 80075be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c2:	e212      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ca:	e20e      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d2:	e20a      	b.n	80079ea <UART_SetConfig+0x5a2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a6b      	ldr	r2, [pc, #428]	; (8007788 <UART_SetConfig+0x340>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d130      	bne.n	8007640 <UART_SetConfig+0x1f8>
 80075de:	4b69      	ldr	r3, [pc, #420]	; (8007784 <UART_SetConfig+0x33c>)
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b05      	cmp	r3, #5
 80075e8:	d826      	bhi.n	8007638 <UART_SetConfig+0x1f0>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <UART_SetConfig+0x1a8>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007609 	.word	0x08007609
 80075f4:	08007611 	.word	0x08007611
 80075f8:	08007619 	.word	0x08007619
 80075fc:	08007621 	.word	0x08007621
 8007600:	08007629 	.word	0x08007629
 8007604:	08007631 	.word	0x08007631
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760e:	e1ec      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007610:	2304      	movs	r3, #4
 8007612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007616:	e1e8      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007618:	2308      	movs	r3, #8
 800761a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761e:	e1e4      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007626:	e1e0      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007628:	2320      	movs	r3, #32
 800762a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762e:	e1dc      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007636:	e1d8      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763e:	e1d4      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a51      	ldr	r2, [pc, #324]	; (800778c <UART_SetConfig+0x344>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d130      	bne.n	80076ac <UART_SetConfig+0x264>
 800764a:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <UART_SetConfig+0x33c>)
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b05      	cmp	r3, #5
 8007654:	d826      	bhi.n	80076a4 <UART_SetConfig+0x25c>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0x214>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007675 	.word	0x08007675
 8007660:	0800767d 	.word	0x0800767d
 8007664:	08007685 	.word	0x08007685
 8007668:	0800768d 	.word	0x0800768d
 800766c:	08007695 	.word	0x08007695
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	e1b6      	b.n	80079ea <UART_SetConfig+0x5a2>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e1b2      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768a:	e1ae      	b.n	80079ea <UART_SetConfig+0x5a2>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007692:	e1aa      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769a:	e1a6      	b.n	80079ea <UART_SetConfig+0x5a2>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a2:	e1a2      	b.n	80079ea <UART_SetConfig+0x5a2>
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076aa:	e19e      	b.n	80079ea <UART_SetConfig+0x5a2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a37      	ldr	r2, [pc, #220]	; (8007790 <UART_SetConfig+0x348>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d130      	bne.n	8007718 <UART_SetConfig+0x2d0>
 80076b6:	4b33      	ldr	r3, [pc, #204]	; (8007784 <UART_SetConfig+0x33c>)
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d826      	bhi.n	8007710 <UART_SetConfig+0x2c8>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x280>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e6:	e180      	b.n	80079ea <UART_SetConfig+0x5a2>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ee:	e17c      	b.n	80079ea <UART_SetConfig+0x5a2>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f6:	e178      	b.n	80079ea <UART_SetConfig+0x5a2>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fe:	e174      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007706:	e170      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770e:	e16c      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007716:	e168      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <UART_SetConfig+0x34c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d142      	bne.n	80077a8 <UART_SetConfig+0x360>
 8007722:	4b18      	ldr	r3, [pc, #96]	; (8007784 <UART_SetConfig+0x33c>)
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b05      	cmp	r3, #5
 800772c:	d838      	bhi.n	80077a0 <UART_SetConfig+0x358>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <UART_SetConfig+0x2ec>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800774d 	.word	0x0800774d
 8007738:	08007755 	.word	0x08007755
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007799 	.word	0x08007799
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007752:	e14a      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775a:	e146      	b.n	80079ea <UART_SetConfig+0x5a2>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007762:	e142      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776a:	e13e      	b.n	80079ea <UART_SetConfig+0x5a2>
 800776c:	2320      	movs	r3, #32
 800776e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007772:	e13a      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007774:	cfff69f3 	.word	0xcfff69f3
 8007778:	58000c00 	.word	0x58000c00
 800777c:	11fff4ff 	.word	0x11fff4ff
 8007780:	40011000 	.word	0x40011000
 8007784:	58024400 	.word	0x58024400
 8007788:	40004400 	.word	0x40004400
 800778c:	40004800 	.word	0x40004800
 8007790:	40004c00 	.word	0x40004c00
 8007794:	40005000 	.word	0x40005000
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779e:	e124      	b.n	80079ea <UART_SetConfig+0x5a2>
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a6:	e120      	b.n	80079ea <UART_SetConfig+0x5a2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4acc      	ldr	r2, [pc, #816]	; (8007ae0 <UART_SetConfig+0x698>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d176      	bne.n	80078a0 <UART_SetConfig+0x458>
 80077b2:	4bcc      	ldr	r3, [pc, #816]	; (8007ae4 <UART_SetConfig+0x69c>)
 80077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ba:	2b28      	cmp	r3, #40	; 0x28
 80077bc:	d86c      	bhi.n	8007898 <UART_SetConfig+0x450>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <UART_SetConfig+0x37c>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007899 	.word	0x08007899
 80077cc:	08007899 	.word	0x08007899
 80077d0:	08007899 	.word	0x08007899
 80077d4:	08007899 	.word	0x08007899
 80077d8:	08007899 	.word	0x08007899
 80077dc:	08007899 	.word	0x08007899
 80077e0:	08007899 	.word	0x08007899
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007899 	.word	0x08007899
 80077ec:	08007899 	.word	0x08007899
 80077f0:	08007899 	.word	0x08007899
 80077f4:	08007899 	.word	0x08007899
 80077f8:	08007899 	.word	0x08007899
 80077fc:	08007899 	.word	0x08007899
 8007800:	08007899 	.word	0x08007899
 8007804:	08007879 	.word	0x08007879
 8007808:	08007899 	.word	0x08007899
 800780c:	08007899 	.word	0x08007899
 8007810:	08007899 	.word	0x08007899
 8007814:	08007899 	.word	0x08007899
 8007818:	08007899 	.word	0x08007899
 800781c:	08007899 	.word	0x08007899
 8007820:	08007899 	.word	0x08007899
 8007824:	08007881 	.word	0x08007881
 8007828:	08007899 	.word	0x08007899
 800782c:	08007899 	.word	0x08007899
 8007830:	08007899 	.word	0x08007899
 8007834:	08007899 	.word	0x08007899
 8007838:	08007899 	.word	0x08007899
 800783c:	08007899 	.word	0x08007899
 8007840:	08007899 	.word	0x08007899
 8007844:	08007889 	.word	0x08007889
 8007848:	08007899 	.word	0x08007899
 800784c:	08007899 	.word	0x08007899
 8007850:	08007899 	.word	0x08007899
 8007854:	08007899 	.word	0x08007899
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
 8007864:	08007891 	.word	0x08007891
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786e:	e0bc      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007870:	2304      	movs	r3, #4
 8007872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007876:	e0b8      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007878:	2308      	movs	r3, #8
 800787a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787e:	e0b4      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007880:	2310      	movs	r3, #16
 8007882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007886:	e0b0      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007888:	2320      	movs	r3, #32
 800788a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788e:	e0ac      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007896:	e0a8      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789e:	e0a4      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a90      	ldr	r2, [pc, #576]	; (8007ae8 <UART_SetConfig+0x6a0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d130      	bne.n	800790c <UART_SetConfig+0x4c4>
 80078aa:	4b8e      	ldr	r3, [pc, #568]	; (8007ae4 <UART_SetConfig+0x69c>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d826      	bhi.n	8007904 <UART_SetConfig+0x4bc>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <UART_SetConfig+0x474>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	080078dd 	.word	0x080078dd
 80078c4:	080078e5 	.word	0x080078e5
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078f5 	.word	0x080078f5
 80078d0:	080078fd 	.word	0x080078fd
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078da:	e086      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078dc:	2304      	movs	r3, #4
 80078de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e2:	e082      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078e4:	2308      	movs	r3, #8
 80078e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ea:	e07e      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f2:	e07a      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078f4:	2320      	movs	r3, #32
 80078f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fa:	e076      	b.n	80079ea <UART_SetConfig+0x5a2>
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007902:	e072      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790a:	e06e      	b.n	80079ea <UART_SetConfig+0x5a2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a76      	ldr	r2, [pc, #472]	; (8007aec <UART_SetConfig+0x6a4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d130      	bne.n	8007978 <UART_SetConfig+0x530>
 8007916:	4b73      	ldr	r3, [pc, #460]	; (8007ae4 <UART_SetConfig+0x69c>)
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	2b05      	cmp	r3, #5
 8007920:	d826      	bhi.n	8007970 <UART_SetConfig+0x528>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0x4e0>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007941 	.word	0x08007941
 800792c:	08007949 	.word	0x08007949
 8007930:	08007951 	.word	0x08007951
 8007934:	08007959 	.word	0x08007959
 8007938:	08007961 	.word	0x08007961
 800793c:	08007969 	.word	0x08007969
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007946:	e050      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794e:	e04c      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007956:	e048      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795e:	e044      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007960:	2320      	movs	r3, #32
 8007962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007966:	e040      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796e:	e03c      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007976:	e038      	b.n	80079ea <UART_SetConfig+0x5a2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a5c      	ldr	r2, [pc, #368]	; (8007af0 <UART_SetConfig+0x6a8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d130      	bne.n	80079e4 <UART_SetConfig+0x59c>
 8007982:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <UART_SetConfig+0x69c>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b05      	cmp	r3, #5
 800798c:	d826      	bhi.n	80079dc <UART_SetConfig+0x594>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <UART_SetConfig+0x54c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079ad 	.word	0x080079ad
 8007998:	080079b5 	.word	0x080079b5
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b2:	e01a      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079b4:	2304      	movs	r3, #4
 80079b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ba:	e016      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079bc:	2308      	movs	r3, #8
 80079be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c2:	e012      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079c4:	2310      	movs	r3, #16
 80079c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ca:	e00e      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079cc:	2320      	movs	r3, #32
 80079ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079d2:	e00a      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079da:	e006      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079e2:	e002      	b.n	80079ea <UART_SetConfig+0x5a2>
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a40      	ldr	r2, [pc, #256]	; (8007af0 <UART_SetConfig+0x6a8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	f040 80ef 	bne.w	8007bd4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	dc46      	bgt.n	8007a8c <UART_SetConfig+0x644>
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	f2c0 8081 	blt.w	8007b06 <UART_SetConfig+0x6be>
 8007a04:	3b02      	subs	r3, #2
 8007a06:	2b1e      	cmp	r3, #30
 8007a08:	d87d      	bhi.n	8007b06 <UART_SetConfig+0x6be>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <UART_SetConfig+0x5c8>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a93 	.word	0x08007a93
 8007a14:	08007b07 	.word	0x08007b07
 8007a18:	08007a9b 	.word	0x08007a9b
 8007a1c:	08007b07 	.word	0x08007b07
 8007a20:	08007b07 	.word	0x08007b07
 8007a24:	08007b07 	.word	0x08007b07
 8007a28:	08007aab 	.word	0x08007aab
 8007a2c:	08007b07 	.word	0x08007b07
 8007a30:	08007b07 	.word	0x08007b07
 8007a34:	08007b07 	.word	0x08007b07
 8007a38:	08007b07 	.word	0x08007b07
 8007a3c:	08007b07 	.word	0x08007b07
 8007a40:	08007b07 	.word	0x08007b07
 8007a44:	08007b07 	.word	0x08007b07
 8007a48:	08007abb 	.word	0x08007abb
 8007a4c:	08007b07 	.word	0x08007b07
 8007a50:	08007b07 	.word	0x08007b07
 8007a54:	08007b07 	.word	0x08007b07
 8007a58:	08007b07 	.word	0x08007b07
 8007a5c:	08007b07 	.word	0x08007b07
 8007a60:	08007b07 	.word	0x08007b07
 8007a64:	08007b07 	.word	0x08007b07
 8007a68:	08007b07 	.word	0x08007b07
 8007a6c:	08007b07 	.word	0x08007b07
 8007a70:	08007b07 	.word	0x08007b07
 8007a74:	08007b07 	.word	0x08007b07
 8007a78:	08007b07 	.word	0x08007b07
 8007a7c:	08007b07 	.word	0x08007b07
 8007a80:	08007b07 	.word	0x08007b07
 8007a84:	08007b07 	.word	0x08007b07
 8007a88:	08007af9 	.word	0x08007af9
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d036      	beq.n	8007afe <UART_SetConfig+0x6b6>
 8007a90:	e039      	b.n	8007b06 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a92:	f7fd fdad 	bl	80055f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a98:	e03b      	b.n	8007b12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a9a:	f107 0314 	add.w	r3, r7, #20
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fdbc 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aa8:	e033      	b.n	8007b12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd ff08 	bl	80058c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ab8:	e02b      	b.n	8007b12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <UART_SetConfig+0x69c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <UART_SetConfig+0x69c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <UART_SetConfig+0x6ac>)
 8007ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ad8:	e01b      	b.n	8007b12 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <UART_SetConfig+0x6ac>)
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ade:	e018      	b.n	8007b12 <UART_SetConfig+0x6ca>
 8007ae0:	40011400 	.word	0x40011400
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	40007800 	.word	0x40007800
 8007aec:	40007c00 	.word	0x40007c00
 8007af0:	58000c00 	.word	0x58000c00
 8007af4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007af8:	4bc4      	ldr	r3, [pc, #784]	; (8007e0c <UART_SetConfig+0x9c4>)
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007afc:	e009      	b.n	8007b12 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b04:	e005      	b.n	8007b12 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 81da 	beq.w	8007ece <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	4abc      	ldr	r2, [pc, #752]	; (8007e10 <UART_SetConfig+0x9c8>)
 8007b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b2c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	4413      	add	r3, r2
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d305      	bcc.n	8007b4a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b44:	6a3a      	ldr	r2, [r7, #32]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d903      	bls.n	8007b52 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b50:	e1bd      	b.n	8007ece <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	4618      	mov	r0, r3
 8007b56:	f04f 0100 	mov.w	r1, #0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	4aac      	ldr	r2, [pc, #688]	; (8007e10 <UART_SetConfig+0x9c8>)
 8007b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	f7f8 fc11 	bl	8000390 <__aeabi_uldivmod>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4610      	mov	r0, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	020b      	lsls	r3, r1, #8
 8007b80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b84:	0202      	lsls	r2, r0, #8
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	6849      	ldr	r1, [r1, #4]
 8007b8a:	0849      	lsrs	r1, r1, #1
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	f04f 0100 	mov.w	r1, #0
 8007b92:	1814      	adds	r4, r2, r0
 8007b94:	eb43 0501 	adc.w	r5, r3, r1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fbf3 	bl	8000390 <__aeabi_uldivmod>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4613      	mov	r3, r2
 8007bb0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb8:	d308      	bcc.n	8007bcc <UART_SetConfig+0x784>
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc0:	d204      	bcs.n	8007bcc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bc8:	60da      	str	r2, [r3, #12]
 8007bca:	e180      	b.n	8007ece <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007bd2:	e17c      	b.n	8007ece <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bdc:	f040 80bf 	bne.w	8007d5e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	dc49      	bgt.n	8007c7c <UART_SetConfig+0x834>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db7c      	blt.n	8007ce6 <UART_SetConfig+0x89e>
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d87a      	bhi.n	8007ce6 <UART_SetConfig+0x89e>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x7b0>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007c83 	.word	0x08007c83
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007ce7 	.word	0x08007ce7
 8007c04:	08007ce7 	.word	0x08007ce7
 8007c08:	08007c93 	.word	0x08007c93
 8007c0c:	08007ce7 	.word	0x08007ce7
 8007c10:	08007ce7 	.word	0x08007ce7
 8007c14:	08007ce7 	.word	0x08007ce7
 8007c18:	08007ca3 	.word	0x08007ca3
 8007c1c:	08007ce7 	.word	0x08007ce7
 8007c20:	08007ce7 	.word	0x08007ce7
 8007c24:	08007ce7 	.word	0x08007ce7
 8007c28:	08007ce7 	.word	0x08007ce7
 8007c2c:	08007ce7 	.word	0x08007ce7
 8007c30:	08007ce7 	.word	0x08007ce7
 8007c34:	08007ce7 	.word	0x08007ce7
 8007c38:	08007cb3 	.word	0x08007cb3
 8007c3c:	08007ce7 	.word	0x08007ce7
 8007c40:	08007ce7 	.word	0x08007ce7
 8007c44:	08007ce7 	.word	0x08007ce7
 8007c48:	08007ce7 	.word	0x08007ce7
 8007c4c:	08007ce7 	.word	0x08007ce7
 8007c50:	08007ce7 	.word	0x08007ce7
 8007c54:	08007ce7 	.word	0x08007ce7
 8007c58:	08007ce7 	.word	0x08007ce7
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007ce7 	.word	0x08007ce7
 8007c64:	08007ce7 	.word	0x08007ce7
 8007c68:	08007ce7 	.word	0x08007ce7
 8007c6c:	08007ce7 	.word	0x08007ce7
 8007c70:	08007ce7 	.word	0x08007ce7
 8007c74:	08007ce7 	.word	0x08007ce7
 8007c78:	08007cd9 	.word	0x08007cd9
 8007c7c:	2b40      	cmp	r3, #64	; 0x40
 8007c7e:	d02e      	beq.n	8007cde <UART_SetConfig+0x896>
 8007c80:	e031      	b.n	8007ce6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c82:	f7fc fd49 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8007c86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c88:	e033      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c8a:	f7fc fd5b 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8007c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c90:	e02f      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd fcc0 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ca0:	e027      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd fe0c 	bl	80058c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cb0:	e01f      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cb2:	4b58      	ldr	r3, [pc, #352]	; (8007e14 <UART_SetConfig+0x9cc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cbe:	4b55      	ldr	r3, [pc, #340]	; (8007e14 <UART_SetConfig+0x9cc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	4a53      	ldr	r2, [pc, #332]	; (8007e18 <UART_SetConfig+0x9d0>)
 8007cca:	fa22 f303 	lsr.w	r3, r2, r3
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cd0:	e00f      	b.n	8007cf2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007cd2:	4b51      	ldr	r3, [pc, #324]	; (8007e18 <UART_SetConfig+0x9d0>)
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cd6:	e00c      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cd8:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <UART_SetConfig+0x9c4>)
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cdc:	e009      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ce4:	e005      	b.n	8007cf2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80ea 	beq.w	8007ece <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	4a44      	ldr	r2, [pc, #272]	; (8007e10 <UART_SetConfig+0x9c8>)
 8007d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0c:	005a      	lsls	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	441a      	add	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	2b0f      	cmp	r3, #15
 8007d26:	d916      	bls.n	8007d56 <UART_SetConfig+0x90e>
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2e:	d212      	bcs.n	8007d56 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f023 030f 	bic.w	r3, r3, #15
 8007d38:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d52:	60da      	str	r2, [r3, #12]
 8007d54:	e0bb      	b.n	8007ece <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d5c:	e0b7      	b.n	8007ece <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	dc4a      	bgt.n	8007dfc <UART_SetConfig+0x9b4>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f2c0 8086 	blt.w	8007e78 <UART_SetConfig+0xa30>
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	f200 8083 	bhi.w	8007e78 <UART_SetConfig+0xa30>
 8007d72:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x930>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007e03 	.word	0x08007e03
 8007d7c:	08007e1d 	.word	0x08007e1d
 8007d80:	08007e79 	.word	0x08007e79
 8007d84:	08007e79 	.word	0x08007e79
 8007d88:	08007e25 	.word	0x08007e25
 8007d8c:	08007e79 	.word	0x08007e79
 8007d90:	08007e79 	.word	0x08007e79
 8007d94:	08007e79 	.word	0x08007e79
 8007d98:	08007e35 	.word	0x08007e35
 8007d9c:	08007e79 	.word	0x08007e79
 8007da0:	08007e79 	.word	0x08007e79
 8007da4:	08007e79 	.word	0x08007e79
 8007da8:	08007e79 	.word	0x08007e79
 8007dac:	08007e79 	.word	0x08007e79
 8007db0:	08007e79 	.word	0x08007e79
 8007db4:	08007e79 	.word	0x08007e79
 8007db8:	08007e45 	.word	0x08007e45
 8007dbc:	08007e79 	.word	0x08007e79
 8007dc0:	08007e79 	.word	0x08007e79
 8007dc4:	08007e79 	.word	0x08007e79
 8007dc8:	08007e79 	.word	0x08007e79
 8007dcc:	08007e79 	.word	0x08007e79
 8007dd0:	08007e79 	.word	0x08007e79
 8007dd4:	08007e79 	.word	0x08007e79
 8007dd8:	08007e79 	.word	0x08007e79
 8007ddc:	08007e79 	.word	0x08007e79
 8007de0:	08007e79 	.word	0x08007e79
 8007de4:	08007e79 	.word	0x08007e79
 8007de8:	08007e79 	.word	0x08007e79
 8007dec:	08007e79 	.word	0x08007e79
 8007df0:	08007e79 	.word	0x08007e79
 8007df4:	08007e79 	.word	0x08007e79
 8007df8:	08007e6b 	.word	0x08007e6b
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d037      	beq.n	8007e70 <UART_SetConfig+0xa28>
 8007e00:	e03a      	b.n	8007e78 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e02:	f7fc fc89 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8007e06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e08:	e03c      	b.n	8007e84 <UART_SetConfig+0xa3c>
 8007e0a:	bf00      	nop
 8007e0c:	003d0900 	.word	0x003d0900
 8007e10:	080093c4 	.word	0x080093c4
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fc fc92 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8007e20:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e22:	e02f      	b.n	8007e84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd fbf7 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e32:	e027      	b.n	8007e84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e34:	f107 0308 	add.w	r3, r7, #8
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fd fd43 	bl	80058c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e42:	e01f      	b.n	8007e84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e44:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <UART_SetConfig+0xab0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e50:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <UART_SetConfig+0xab0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	08db      	lsrs	r3, r3, #3
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	4a28      	ldr	r2, [pc, #160]	; (8007efc <UART_SetConfig+0xab4>)
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e62:	e00f      	b.n	8007e84 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007e64:	4b25      	ldr	r3, [pc, #148]	; (8007efc <UART_SetConfig+0xab4>)
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e68:	e00c      	b.n	8007e84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <UART_SetConfig+0xab8>)
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e6e:	e009      	b.n	8007e84 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e76:	e005      	b.n	8007e84 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007e82:	bf00      	nop
    }

    if (pclk != 0U)
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d021      	beq.n	8007ece <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <UART_SetConfig+0xabc>)
 8007e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	441a      	add	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	2b0f      	cmp	r3, #15
 8007eb4:	d908      	bls.n	8007ec8 <UART_SetConfig+0xa80>
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ebc:	d204      	bcs.n	8007ec8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec4:	60da      	str	r2, [r3, #12]
 8007ec6:	e002      	b.n	8007ece <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007eea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3738      	adds	r7, #56	; 0x38
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	080093c4 	.word	0x080093c4

08007f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01a      	beq.n	800801e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008006:	d10a      	bne.n	800801e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af02      	add	r7, sp, #8
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800805c:	f7f9 fda8 	bl	8001bb0 <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b08      	cmp	r3, #8
 800806e:	d10e      	bne.n	800808e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f82f 	bl	80080e2 <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e025      	b.n	80080da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b04      	cmp	r3, #4
 800809a:	d10e      	bne.n	80080ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f819 	bl	80080e2 <UART_WaitOnFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e00f      	b.n	80080da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f2:	e062      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080fa:	d05e      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fc:	f7f9 fd58 	bl	8001bb0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <UART_WaitOnFlagUntilTimeout+0x30>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d11d      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008120:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e045      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02e      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d126      	bne.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008184:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0201 	bic.w	r2, r2, #1
 8008194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e00f      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4013      	ands	r3, r2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	bf0c      	ite	eq
 80081ca:	2301      	moveq	r3, #1
 80081cc:	2300      	movne	r3, #0
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d08d      	beq.n	80080f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e027      	b.n	8008248 <HAL_UARTEx_DisableFifoMode+0x66>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2224      	movs	r2, #36	; 0x24
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0201 	bic.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008226:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e02d      	b.n	80082c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0201 	bic.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f84f 	bl	800834c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e02d      	b.n	8008344 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2224      	movs	r2, #36	; 0x24
 80082f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0201 	bic.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f811 	bl	800834c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008358:	2b00      	cmp	r3, #0
 800835a:	d108      	bne.n	800836e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800836c:	e031      	b.n	80083d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800836e:	2310      	movs	r3, #16
 8008370:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008372:	2310      	movs	r3, #16
 8008374:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	0e5b      	lsrs	r3, r3, #25
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	0f5b      	lsrs	r3, r3, #29
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	7b3a      	ldrb	r2, [r7, #12]
 800839a:	4911      	ldr	r1, [pc, #68]	; (80083e0 <UARTEx_SetNbDataToProcess+0x94>)
 800839c:	5c8a      	ldrb	r2, [r1, r2]
 800839e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083a2:	7b3a      	ldrb	r2, [r7, #12]
 80083a4:	490f      	ldr	r1, [pc, #60]	; (80083e4 <UARTEx_SetNbDataToProcess+0x98>)
 80083a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	7b7a      	ldrb	r2, [r7, #13]
 80083b8:	4909      	ldr	r1, [pc, #36]	; (80083e0 <UARTEx_SetNbDataToProcess+0x94>)
 80083ba:	5c8a      	ldrb	r2, [r1, r2]
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083c0:	7b7a      	ldrb	r2, [r7, #13]
 80083c2:	4908      	ldr	r1, [pc, #32]	; (80083e4 <UARTEx_SetNbDataToProcess+0x98>)
 80083c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	080093dc 	.word	0x080093dc
 80083e4:	080093e4 	.word	0x080093e4

080083e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083e8:	b084      	sub	sp, #16
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	f107 001c 	add.w	r0, r7, #28
 80083f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d120      	bne.n	8008442 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <USB_CoreInit+0xd4>)
 8008412:	4013      	ands	r3, r2
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d105      	bne.n	8008436 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa60 	bl	80088fc <USB_CoreReset>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e01a      	b.n	8008478 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa54 	bl	80088fc <USB_CoreReset>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
 800846a:	e005      	b.n	8008478 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	2b01      	cmp	r3, #1
 800847c:	d116      	bne.n	80084ac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <USB_CoreInit+0xd8>)
 800848e:	4313      	orrs	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f043 0206 	orr.w	r2, r3, #6
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b8:	b004      	add	sp, #16
 80084ba:	4770      	bx	lr
 80084bc:	ffbdffbf 	.word	0xffbdffbf
 80084c0:	03ee0000 	.word	0x03ee0000

080084c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f023 0201 	bic.w	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d106      	bne.n	8008512 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	e00b      	b.n	800852a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]
 8008524:	e001      	b.n	800852a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e003      	b.n	8008532 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800852a:	2032      	movs	r0, #50	; 0x32
 800852c:	f7f9 fb4c 	bl	8001bc8 <HAL_Delay>

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800853c:	b084      	sub	sp, #16
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800854a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e009      	b.n	8008570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3340      	adds	r3, #64	; 0x40
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	2200      	movs	r2, #0
 8008568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3301      	adds	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b0e      	cmp	r3, #14
 8008574:	d9f2      	bls.n	800855c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11c      	bne.n	80085b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858a:	f043 0302 	orr.w	r3, r3, #2
 800858e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e005      	b.n	80085c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085c8:	461a      	mov	r2, r3
 80085ca:	2300      	movs	r3, #0
 80085cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d4:	4619      	mov	r1, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085dc:	461a      	mov	r2, r3
 80085de:	680b      	ldr	r3, [r1, #0]
 80085e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d10c      	bne.n	8008602 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f949 	bl	8008888 <USB_SetDevSpeed>
 80085f6:	e008      	b.n	800860a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085f8:	2101      	movs	r1, #1
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f944 	bl	8008888 <USB_SetDevSpeed>
 8008600:	e003      	b.n	800860a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008602:	2103      	movs	r1, #3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f93f 	bl	8008888 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800860a:	2110      	movs	r1, #16
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8f3 	bl	80087f8 <USB_FlushTxFifo>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f911 	bl	8008844 <USB_FlushRxFifo>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008632:	461a      	mov	r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	461a      	mov	r2, r3
 8008640:	2300      	movs	r3, #0
 8008642:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	461a      	mov	r2, r3
 800864c:	2300      	movs	r3, #0
 800864e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	e043      	b.n	80086de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800866c:	d118      	bne.n	80086a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	461a      	mov	r2, r3
 8008682:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	e013      	b.n	80086b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008696:	461a      	mov	r2, r3
 8008698:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e008      	b.n	80086b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ac:	461a      	mov	r2, r3
 80086ae:	2300      	movs	r3, #0
 80086b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	461a      	mov	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d0:	461a      	mov	r2, r3
 80086d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3301      	adds	r3, #1
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d3b7      	bcc.n	8008656 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
 80086ea:	e043      	b.n	8008774 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008702:	d118      	bne.n	8008736 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008716:	461a      	mov	r2, r3
 8008718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e013      	b.n	8008748 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	461a      	mov	r2, r3
 800872e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e008      	b.n	8008748 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	461a      	mov	r2, r3
 8008744:	2300      	movs	r3, #0
 8008746:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	461a      	mov	r2, r3
 8008756:	2300      	movs	r3, #0
 8008758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	461a      	mov	r2, r3
 8008768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800876c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3301      	adds	r3, #1
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	d3b7      	bcc.n	80086ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800878a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800878e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800879c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f043 0210 	orr.w	r2, r3, #16
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <USB_DevInit+0x2b4>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f043 0208 	orr.w	r2, r3, #8
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d105      	bne.n	80087e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <USB_DevInit+0x2b8>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087ec:	b004      	add	sp, #16
 80087ee:	4770      	bx	lr
 80087f0:	803c3800 	.word	0x803c3800
 80087f4:	40000004 	.word	0x40000004

080087f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	019b      	lsls	r3, r3, #6
 800880a:	f043 0220 	orr.w	r2, r3, #32
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <USB_FlushTxFifo+0x48>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d901      	bls.n	8008824 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b20      	cmp	r3, #32
 800882e:	d0f0      	beq.n	8008812 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00030d40 	.word	0x00030d40

08008844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2210      	movs	r2, #16
 8008854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <USB_FlushRxFifo+0x40>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d901      	bls.n	8008868 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e006      	b.n	8008876 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b10      	cmp	r3, #16
 8008872:	d0f0      	beq.n	8008856 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	00030d40 	.word	0x00030d40

08008888 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a8:	4313      	orrs	r3, r2
 80088aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088e8:	f043 0302 	orr.w	r3, r3, #2
 80088ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3301      	adds	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <USB_CoreReset+0x64>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e01b      	b.n	8008952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	daf2      	bge.n	8008908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f043 0201 	orr.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <USB_CoreReset+0x64>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d901      	bls.n	8008944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e006      	b.n	8008952 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b01      	cmp	r3, #1
 800894e:	d0f0      	beq.n	8008932 <USB_CoreReset+0x36>

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	00030d40 	.word	0x00030d40

08008964 <_Znwj>:
 8008964:	2801      	cmp	r0, #1
 8008966:	bf38      	it	cc
 8008968:	2001      	movcc	r0, #1
 800896a:	b510      	push	{r4, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	4620      	mov	r0, r4
 8008970:	f000 f844 	bl	80089fc <malloc>
 8008974:	b930      	cbnz	r0, 8008984 <_Znwj+0x20>
 8008976:	f000 f807 	bl	8008988 <_ZSt15get_new_handlerv>
 800897a:	b908      	cbnz	r0, 8008980 <_Znwj+0x1c>
 800897c:	f000 f80c 	bl	8008998 <abort>
 8008980:	4780      	blx	r0
 8008982:	e7f4      	b.n	800896e <_Znwj+0xa>
 8008984:	bd10      	pop	{r4, pc}
	...

08008988 <_ZSt15get_new_handlerv>:
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <_ZSt15get_new_handlerv+0xc>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	f3bf 8f5b 	dmb	ish
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000748 	.word	0x20000748

08008998 <abort>:
 8008998:	b508      	push	{r3, lr}
 800899a:	2006      	movs	r0, #6
 800899c:	f000 f920 	bl	8008be0 <raise>
 80089a0:	2001      	movs	r0, #1
 80089a2:	f7f8 ff89 	bl	80018b8 <_exit>
	...

080089a8 <__errno>:
 80089a8:	4b01      	ldr	r3, [pc, #4]	; (80089b0 <__errno+0x8>)
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	20000010 	.word	0x20000010

080089b4 <__libc_init_array>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4d0d      	ldr	r5, [pc, #52]	; (80089ec <__libc_init_array+0x38>)
 80089b8:	4c0d      	ldr	r4, [pc, #52]	; (80089f0 <__libc_init_array+0x3c>)
 80089ba:	1b64      	subs	r4, r4, r5
 80089bc:	10a4      	asrs	r4, r4, #2
 80089be:	2600      	movs	r6, #0
 80089c0:	42a6      	cmp	r6, r4
 80089c2:	d109      	bne.n	80089d8 <__libc_init_array+0x24>
 80089c4:	4d0b      	ldr	r5, [pc, #44]	; (80089f4 <__libc_init_array+0x40>)
 80089c6:	4c0c      	ldr	r4, [pc, #48]	; (80089f8 <__libc_init_array+0x44>)
 80089c8:	f000 fc9a 	bl	8009300 <_init>
 80089cc:	1b64      	subs	r4, r4, r5
 80089ce:	10a4      	asrs	r4, r4, #2
 80089d0:	2600      	movs	r6, #0
 80089d2:	42a6      	cmp	r6, r4
 80089d4:	d105      	bne.n	80089e2 <__libc_init_array+0x2e>
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089dc:	4798      	blx	r3
 80089de:	3601      	adds	r6, #1
 80089e0:	e7ee      	b.n	80089c0 <__libc_init_array+0xc>
 80089e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e6:	4798      	blx	r3
 80089e8:	3601      	adds	r6, #1
 80089ea:	e7f2      	b.n	80089d2 <__libc_init_array+0x1e>
 80089ec:	08009428 	.word	0x08009428
 80089f0:	08009428 	.word	0x08009428
 80089f4:	08009428 	.word	0x08009428
 80089f8:	08009430 	.word	0x08009430

080089fc <malloc>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <malloc+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f000 b85b 	b.w	8008abc <_malloc_r>
 8008a06:	bf00      	nop
 8008a08:	20000010 	.word	0x20000010

08008a0c <memset>:
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d100      	bne.n	8008a16 <memset+0xa>
 8008a14:	4770      	bx	lr
 8008a16:	f803 1b01 	strb.w	r1, [r3], #1
 8008a1a:	e7f9      	b.n	8008a10 <memset+0x4>

08008a1c <_free_r>:
 8008a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1e:	2900      	cmp	r1, #0
 8008a20:	d048      	beq.n	8008ab4 <_free_r+0x98>
 8008a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a2e:	bfb8      	it	lt
 8008a30:	18e4      	addlt	r4, r4, r3
 8008a32:	f000 f911 	bl	8008c58 <__malloc_lock>
 8008a36:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <_free_r+0x9c>)
 8008a38:	9801      	ldr	r0, [sp, #4]
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	b933      	cbnz	r3, 8008a4e <_free_r+0x32>
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6014      	str	r4, [r2, #0]
 8008a44:	b003      	add	sp, #12
 8008a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a4a:	f000 b90b 	b.w	8008c64 <__malloc_unlock>
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	d90b      	bls.n	8008a6a <_free_r+0x4e>
 8008a52:	6821      	ldr	r1, [r4, #0]
 8008a54:	1862      	adds	r2, r4, r1
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bf04      	itt	eq
 8008a5a:	681a      	ldreq	r2, [r3, #0]
 8008a5c:	685b      	ldreq	r3, [r3, #4]
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	bf04      	itt	eq
 8008a62:	1852      	addeq	r2, r2, r1
 8008a64:	6022      	streq	r2, [r4, #0]
 8008a66:	602c      	str	r4, [r5, #0]
 8008a68:	e7ec      	b.n	8008a44 <_free_r+0x28>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x58>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x4e>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1855      	adds	r5, r2, r1
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x78>
 8008a7c:	6824      	ldr	r4, [r4, #0]
 8008a7e:	4421      	add	r1, r4
 8008a80:	1854      	adds	r4, r2, r1
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1dd      	bne.n	8008a44 <_free_r+0x28>
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	4421      	add	r1, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	e7d7      	b.n	8008a44 <_free_r+0x28>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x80>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	e7d3      	b.n	8008a44 <_free_r+0x28>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf04      	itt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	bf04      	itt	eq
 8008aac:	1949      	addeq	r1, r1, r5
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	6054      	str	r4, [r2, #4]
 8008ab2:	e7c7      	b.n	8008a44 <_free_r+0x28>
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	2000074c 	.word	0x2000074c

08008abc <_malloc_r>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	1ccd      	adds	r5, r1, #3
 8008ac0:	f025 0503 	bic.w	r5, r5, #3
 8008ac4:	3508      	adds	r5, #8
 8008ac6:	2d0c      	cmp	r5, #12
 8008ac8:	bf38      	it	cc
 8008aca:	250c      	movcc	r5, #12
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	db01      	blt.n	8008ad6 <_malloc_r+0x1a>
 8008ad2:	42a9      	cmp	r1, r5
 8008ad4:	d903      	bls.n	8008ade <_malloc_r+0x22>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	6033      	str	r3, [r6, #0]
 8008ada:	2000      	movs	r0, #0
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	f000 f8bb 	bl	8008c58 <__malloc_lock>
 8008ae2:	4921      	ldr	r1, [pc, #132]	; (8008b68 <_malloc_r+0xac>)
 8008ae4:	680a      	ldr	r2, [r1, #0]
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	b99c      	cbnz	r4, 8008b12 <_malloc_r+0x56>
 8008aea:	4f20      	ldr	r7, [pc, #128]	; (8008b6c <_malloc_r+0xb0>)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	b923      	cbnz	r3, 8008afa <_malloc_r+0x3e>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4630      	mov	r0, r6
 8008af4:	f000 f83c 	bl	8008b70 <_sbrk_r>
 8008af8:	6038      	str	r0, [r7, #0]
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f000 f837 	bl	8008b70 <_sbrk_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d123      	bne.n	8008b4e <_malloc_r+0x92>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f000 f8aa 	bl	8008c64 <__malloc_unlock>
 8008b10:	e7e3      	b.n	8008ada <_malloc_r+0x1e>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	1b5b      	subs	r3, r3, r5
 8008b16:	d417      	bmi.n	8008b48 <_malloc_r+0x8c>
 8008b18:	2b0b      	cmp	r3, #11
 8008b1a:	d903      	bls.n	8008b24 <_malloc_r+0x68>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	441c      	add	r4, r3
 8008b20:	6025      	str	r5, [r4, #0]
 8008b22:	e004      	b.n	8008b2e <_malloc_r+0x72>
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	42a2      	cmp	r2, r4
 8008b28:	bf0c      	ite	eq
 8008b2a:	600b      	streq	r3, [r1, #0]
 8008b2c:	6053      	strne	r3, [r2, #4]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f000 f898 	bl	8008c64 <__malloc_unlock>
 8008b34:	f104 000b 	add.w	r0, r4, #11
 8008b38:	1d23      	adds	r3, r4, #4
 8008b3a:	f020 0007 	bic.w	r0, r0, #7
 8008b3e:	1ac2      	subs	r2, r0, r3
 8008b40:	d0cc      	beq.n	8008adc <_malloc_r+0x20>
 8008b42:	1a1b      	subs	r3, r3, r0
 8008b44:	50a3      	str	r3, [r4, r2]
 8008b46:	e7c9      	b.n	8008adc <_malloc_r+0x20>
 8008b48:	4622      	mov	r2, r4
 8008b4a:	6864      	ldr	r4, [r4, #4]
 8008b4c:	e7cc      	b.n	8008ae8 <_malloc_r+0x2c>
 8008b4e:	1cc4      	adds	r4, r0, #3
 8008b50:	f024 0403 	bic.w	r4, r4, #3
 8008b54:	42a0      	cmp	r0, r4
 8008b56:	d0e3      	beq.n	8008b20 <_malloc_r+0x64>
 8008b58:	1a21      	subs	r1, r4, r0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f808 	bl	8008b70 <_sbrk_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d1dd      	bne.n	8008b20 <_malloc_r+0x64>
 8008b64:	e7cf      	b.n	8008b06 <_malloc_r+0x4a>
 8008b66:	bf00      	nop
 8008b68:	2000074c 	.word	0x2000074c
 8008b6c:	20000750 	.word	0x20000750

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	; (8008b8c <_sbrk_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 fea6 	bl	80018cc <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000758 	.word	0x20000758

08008b90 <_raise_r>:
 8008b90:	291f      	cmp	r1, #31
 8008b92:	b538      	push	{r3, r4, r5, lr}
 8008b94:	4604      	mov	r4, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	d904      	bls.n	8008ba4 <_raise_r+0x14>
 8008b9a:	2316      	movs	r3, #22
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ba6:	b112      	cbz	r2, 8008bae <_raise_r+0x1e>
 8008ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bac:	b94b      	cbnz	r3, 8008bc2 <_raise_r+0x32>
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f000 f830 	bl	8008c14 <_getpid_r>
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	4620      	mov	r0, r4
 8008bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bbe:	f000 b817 	b.w	8008bf0 <_kill_r>
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d00a      	beq.n	8008bdc <_raise_r+0x4c>
 8008bc6:	1c59      	adds	r1, r3, #1
 8008bc8:	d103      	bne.n	8008bd2 <_raise_r+0x42>
 8008bca:	2316      	movs	r3, #22
 8008bcc:	6003      	str	r3, [r0, #0]
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e7e7      	b.n	8008ba2 <_raise_r+0x12>
 8008bd2:	2400      	movs	r4, #0
 8008bd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bd8:	4628      	mov	r0, r5
 8008bda:	4798      	blx	r3
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7e0      	b.n	8008ba2 <_raise_r+0x12>

08008be0 <raise>:
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <raise+0xc>)
 8008be2:	4601      	mov	r1, r0
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f7ff bfd3 	b.w	8008b90 <_raise_r>
 8008bea:	bf00      	nop
 8008bec:	20000010 	.word	0x20000010

08008bf0 <_kill_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	; (8008c10 <_kill_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7f8 fe4b 	bl	8001898 <_kill>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_kill_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_kill_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000758 	.word	0x20000758

08008c14 <_getpid_r>:
 8008c14:	f7f8 be38 	b.w	8001888 <_getpid>

08008c18 <siprintf>:
 8008c18:	b40e      	push	{r1, r2, r3}
 8008c1a:	b500      	push	{lr}
 8008c1c:	b09c      	sub	sp, #112	; 0x70
 8008c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c20:	9002      	str	r0, [sp, #8]
 8008c22:	9006      	str	r0, [sp, #24]
 8008c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c28:	4809      	ldr	r0, [pc, #36]	; (8008c50 <siprintf+0x38>)
 8008c2a:	9107      	str	r1, [sp, #28]
 8008c2c:	9104      	str	r1, [sp, #16]
 8008c2e:	4909      	ldr	r1, [pc, #36]	; (8008c54 <siprintf+0x3c>)
 8008c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c34:	9105      	str	r1, [sp, #20]
 8008c36:	6800      	ldr	r0, [r0, #0]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	a902      	add	r1, sp, #8
 8008c3c:	f000 f874 	bl	8008d28 <_svfiprintf_r>
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	b01c      	add	sp, #112	; 0x70
 8008c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c4c:	b003      	add	sp, #12
 8008c4e:	4770      	bx	lr
 8008c50:	20000010 	.word	0x20000010
 8008c54:	ffff0208 	.word	0xffff0208

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f000 baf9 	b.w	8009250 <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20000760 	.word	0x20000760

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f000 baf4 	b.w	8009252 <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20000760 	.word	0x20000760

08008c70 <__ssputs_r>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	688e      	ldr	r6, [r1, #8]
 8008c76:	429e      	cmp	r6, r3
 8008c78:	4682      	mov	sl, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4690      	mov	r8, r2
 8008c7e:	461f      	mov	r7, r3
 8008c80:	d838      	bhi.n	8008cf4 <__ssputs_r+0x84>
 8008c82:	898a      	ldrh	r2, [r1, #12]
 8008c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c88:	d032      	beq.n	8008cf0 <__ssputs_r+0x80>
 8008c8a:	6825      	ldr	r5, [r4, #0]
 8008c8c:	6909      	ldr	r1, [r1, #16]
 8008c8e:	eba5 0901 	sub.w	r9, r5, r1
 8008c92:	6965      	ldr	r5, [r4, #20]
 8008c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	444b      	add	r3, r9
 8008ca0:	106d      	asrs	r5, r5, #1
 8008ca2:	429d      	cmp	r5, r3
 8008ca4:	bf38      	it	cc
 8008ca6:	461d      	movcc	r5, r3
 8008ca8:	0553      	lsls	r3, r2, #21
 8008caa:	d531      	bpl.n	8008d10 <__ssputs_r+0xa0>
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7ff ff05 	bl	8008abc <_malloc_r>
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	b950      	cbnz	r0, 8008ccc <__ssputs_r+0x5c>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	f8ca 3000 	str.w	r3, [sl]
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	6921      	ldr	r1, [r4, #16]
 8008cce:	464a      	mov	r2, r9
 8008cd0:	f000 fac0 	bl	8009254 <memcpy>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	6126      	str	r6, [r4, #16]
 8008ce2:	6165      	str	r5, [r4, #20]
 8008ce4:	444e      	add	r6, r9
 8008ce6:	eba5 0509 	sub.w	r5, r5, r9
 8008cea:	6026      	str	r6, [r4, #0]
 8008cec:	60a5      	str	r5, [r4, #8]
 8008cee:	463e      	mov	r6, r7
 8008cf0:	42be      	cmp	r6, r7
 8008cf2:	d900      	bls.n	8008cf6 <__ssputs_r+0x86>
 8008cf4:	463e      	mov	r6, r7
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	6820      	ldr	r0, [r4, #0]
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	f000 fab8 	bl	8009270 <memmove>
 8008d00:	68a3      	ldr	r3, [r4, #8]
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	1b9b      	subs	r3, r3, r6
 8008d06:	4432      	add	r2, r6
 8008d08:	60a3      	str	r3, [r4, #8]
 8008d0a:	6022      	str	r2, [r4, #0]
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7db      	b.n	8008cc8 <__ssputs_r+0x58>
 8008d10:	462a      	mov	r2, r5
 8008d12:	f000 fac7 	bl	80092a4 <_realloc_r>
 8008d16:	4606      	mov	r6, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1e1      	bne.n	8008ce0 <__ssputs_r+0x70>
 8008d1c:	6921      	ldr	r1, [r4, #16]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	f7ff fe7c 	bl	8008a1c <_free_r>
 8008d24:	e7c7      	b.n	8008cb6 <__ssputs_r+0x46>
	...

08008d28 <_svfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4698      	mov	r8, r3
 8008d2e:	898b      	ldrh	r3, [r1, #12]
 8008d30:	061b      	lsls	r3, r3, #24
 8008d32:	b09d      	sub	sp, #116	; 0x74
 8008d34:	4607      	mov	r7, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	d50e      	bpl.n	8008d5a <_svfiprintf_r+0x32>
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b963      	cbnz	r3, 8008d5a <_svfiprintf_r+0x32>
 8008d40:	2140      	movs	r1, #64	; 0x40
 8008d42:	f7ff febb 	bl	8008abc <_malloc_r>
 8008d46:	6028      	str	r0, [r5, #0]
 8008d48:	6128      	str	r0, [r5, #16]
 8008d4a:	b920      	cbnz	r0, 8008d56 <_svfiprintf_r+0x2e>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d54:	e0d1      	b.n	8008efa <_svfiprintf_r+0x1d2>
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	616b      	str	r3, [r5, #20]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5e:	2320      	movs	r3, #32
 8008d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d68:	2330      	movs	r3, #48	; 0x30
 8008d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f14 <_svfiprintf_r+0x1ec>
 8008d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d72:	f04f 0901 	mov.w	r9, #1
 8008d76:	4623      	mov	r3, r4
 8008d78:	469a      	mov	sl, r3
 8008d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d7e:	b10a      	cbz	r2, 8008d84 <_svfiprintf_r+0x5c>
 8008d80:	2a25      	cmp	r2, #37	; 0x25
 8008d82:	d1f9      	bne.n	8008d78 <_svfiprintf_r+0x50>
 8008d84:	ebba 0b04 	subs.w	fp, sl, r4
 8008d88:	d00b      	beq.n	8008da2 <_svfiprintf_r+0x7a>
 8008d8a:	465b      	mov	r3, fp
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ff6d 	bl	8008c70 <__ssputs_r>
 8008d96:	3001      	adds	r0, #1
 8008d98:	f000 80aa 	beq.w	8008ef0 <_svfiprintf_r+0x1c8>
 8008d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9e:	445a      	add	r2, fp
 8008da0:	9209      	str	r2, [sp, #36]	; 0x24
 8008da2:	f89a 3000 	ldrb.w	r3, [sl]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80a2 	beq.w	8008ef0 <_svfiprintf_r+0x1c8>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db6:	f10a 0a01 	add.w	sl, sl, #1
 8008dba:	9304      	str	r3, [sp, #16]
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc4:	4654      	mov	r4, sl
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dcc:	4851      	ldr	r0, [pc, #324]	; (8008f14 <_svfiprintf_r+0x1ec>)
 8008dce:	f7f7 fa8f 	bl	80002f0 <memchr>
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	b9d8      	cbnz	r0, 8008e0e <_svfiprintf_r+0xe6>
 8008dd6:	06d0      	lsls	r0, r2, #27
 8008dd8:	bf44      	itt	mi
 8008dda:	2320      	movmi	r3, #32
 8008ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de0:	0711      	lsls	r1, r2, #28
 8008de2:	bf44      	itt	mi
 8008de4:	232b      	movmi	r3, #43	; 0x2b
 8008de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dea:	f89a 3000 	ldrb.w	r3, [sl]
 8008dee:	2b2a      	cmp	r3, #42	; 0x2a
 8008df0:	d015      	beq.n	8008e1e <_svfiprintf_r+0xf6>
 8008df2:	9a07      	ldr	r2, [sp, #28]
 8008df4:	4654      	mov	r4, sl
 8008df6:	2000      	movs	r0, #0
 8008df8:	f04f 0c0a 	mov.w	ip, #10
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e02:	3b30      	subs	r3, #48	; 0x30
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d94e      	bls.n	8008ea6 <_svfiprintf_r+0x17e>
 8008e08:	b1b0      	cbz	r0, 8008e38 <_svfiprintf_r+0x110>
 8008e0a:	9207      	str	r2, [sp, #28]
 8008e0c:	e014      	b.n	8008e38 <_svfiprintf_r+0x110>
 8008e0e:	eba0 0308 	sub.w	r3, r0, r8
 8008e12:	fa09 f303 	lsl.w	r3, r9, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	46a2      	mov	sl, r4
 8008e1c:	e7d2      	b.n	8008dc4 <_svfiprintf_r+0x9c>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	1d19      	adds	r1, r3, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	9103      	str	r1, [sp, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfbb      	ittet	lt
 8008e2a:	425b      	neglt	r3, r3
 8008e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e30:	9307      	strge	r3, [sp, #28]
 8008e32:	9307      	strlt	r3, [sp, #28]
 8008e34:	bfb8      	it	lt
 8008e36:	9204      	strlt	r2, [sp, #16]
 8008e38:	7823      	ldrb	r3, [r4, #0]
 8008e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e3c:	d10c      	bne.n	8008e58 <_svfiprintf_r+0x130>
 8008e3e:	7863      	ldrb	r3, [r4, #1]
 8008e40:	2b2a      	cmp	r3, #42	; 0x2a
 8008e42:	d135      	bne.n	8008eb0 <_svfiprintf_r+0x188>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	9203      	str	r2, [sp, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfb8      	it	lt
 8008e50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e54:	3402      	adds	r4, #2
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f24 <_svfiprintf_r+0x1fc>
 8008e5c:	7821      	ldrb	r1, [r4, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4650      	mov	r0, sl
 8008e62:	f7f7 fa45 	bl	80002f0 <memchr>
 8008e66:	b140      	cbz	r0, 8008e7a <_svfiprintf_r+0x152>
 8008e68:	2340      	movs	r3, #64	; 0x40
 8008e6a:	eba0 000a 	sub.w	r0, r0, sl
 8008e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	4303      	orrs	r3, r0
 8008e76:	3401      	adds	r4, #1
 8008e78:	9304      	str	r3, [sp, #16]
 8008e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7e:	4826      	ldr	r0, [pc, #152]	; (8008f18 <_svfiprintf_r+0x1f0>)
 8008e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e84:	2206      	movs	r2, #6
 8008e86:	f7f7 fa33 	bl	80002f0 <memchr>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d038      	beq.n	8008f00 <_svfiprintf_r+0x1d8>
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <_svfiprintf_r+0x1f4>)
 8008e90:	bb1b      	cbnz	r3, 8008eda <_svfiprintf_r+0x1b2>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	3307      	adds	r3, #7
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea0:	4433      	add	r3, r6
 8008ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea4:	e767      	b.n	8008d76 <_svfiprintf_r+0x4e>
 8008ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eaa:	460c      	mov	r4, r1
 8008eac:	2001      	movs	r0, #1
 8008eae:	e7a5      	b.n	8008dfc <_svfiprintf_r+0xd4>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f04f 0c0a 	mov.w	ip, #10
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec2:	3a30      	subs	r2, #48	; 0x30
 8008ec4:	2a09      	cmp	r2, #9
 8008ec6:	d903      	bls.n	8008ed0 <_svfiprintf_r+0x1a8>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0c5      	beq.n	8008e58 <_svfiprintf_r+0x130>
 8008ecc:	9105      	str	r1, [sp, #20]
 8008ece:	e7c3      	b.n	8008e58 <_svfiprintf_r+0x130>
 8008ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e7f0      	b.n	8008ebc <_svfiprintf_r+0x194>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <_svfiprintf_r+0x1f8>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f3af 8000 	nop.w
 8008eea:	1c42      	adds	r2, r0, #1
 8008eec:	4606      	mov	r6, r0
 8008eee:	d1d6      	bne.n	8008e9e <_svfiprintf_r+0x176>
 8008ef0:	89ab      	ldrh	r3, [r5, #12]
 8008ef2:	065b      	lsls	r3, r3, #25
 8008ef4:	f53f af2c 	bmi.w	8008d50 <_svfiprintf_r+0x28>
 8008ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008efa:	b01d      	add	sp, #116	; 0x74
 8008efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f00:	ab03      	add	r3, sp, #12
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	462a      	mov	r2, r5
 8008f06:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <_svfiprintf_r+0x1f8>)
 8008f08:	a904      	add	r1, sp, #16
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f000 f87a 	bl	8009004 <_printf_i>
 8008f10:	e7eb      	b.n	8008eea <_svfiprintf_r+0x1c2>
 8008f12:	bf00      	nop
 8008f14:	080093ec 	.word	0x080093ec
 8008f18:	080093f6 	.word	0x080093f6
 8008f1c:	00000000 	.word	0x00000000
 8008f20:	08008c71 	.word	0x08008c71
 8008f24:	080093f2 	.word	0x080093f2

08008f28 <_printf_common>:
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	4699      	mov	r9, r3
 8008f30:	688a      	ldr	r2, [r1, #8]
 8008f32:	690b      	ldr	r3, [r1, #16]
 8008f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	bfb8      	it	lt
 8008f3c:	4613      	movlt	r3, r2
 8008f3e:	6033      	str	r3, [r6, #0]
 8008f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f44:	4607      	mov	r7, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	b10a      	cbz	r2, 8008f4e <_printf_common+0x26>
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	6033      	str	r3, [r6, #0]
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	0699      	lsls	r1, r3, #26
 8008f52:	bf42      	ittt	mi
 8008f54:	6833      	ldrmi	r3, [r6, #0]
 8008f56:	3302      	addmi	r3, #2
 8008f58:	6033      	strmi	r3, [r6, #0]
 8008f5a:	6825      	ldr	r5, [r4, #0]
 8008f5c:	f015 0506 	ands.w	r5, r5, #6
 8008f60:	d106      	bne.n	8008f70 <_printf_common+0x48>
 8008f62:	f104 0a19 	add.w	sl, r4, #25
 8008f66:	68e3      	ldr	r3, [r4, #12]
 8008f68:	6832      	ldr	r2, [r6, #0]
 8008f6a:	1a9b      	subs	r3, r3, r2
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	dc26      	bgt.n	8008fbe <_printf_common+0x96>
 8008f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f74:	1e13      	subs	r3, r2, #0
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	bf18      	it	ne
 8008f7a:	2301      	movne	r3, #1
 8008f7c:	0692      	lsls	r2, r2, #26
 8008f7e:	d42b      	bmi.n	8008fd8 <_printf_common+0xb0>
 8008f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f84:	4649      	mov	r1, r9
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d01e      	beq.n	8008fcc <_printf_common+0xa4>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	68e5      	ldr	r5, [r4, #12]
 8008f92:	6832      	ldr	r2, [r6, #0]
 8008f94:	f003 0306 	and.w	r3, r3, #6
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	bf08      	it	eq
 8008f9c:	1aad      	subeq	r5, r5, r2
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	6922      	ldr	r2, [r4, #16]
 8008fa2:	bf0c      	ite	eq
 8008fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa8:	2500      	movne	r5, #0
 8008faa:	4293      	cmp	r3, r2
 8008fac:	bfc4      	itt	gt
 8008fae:	1a9b      	subgt	r3, r3, r2
 8008fb0:	18ed      	addgt	r5, r5, r3
 8008fb2:	2600      	movs	r6, #0
 8008fb4:	341a      	adds	r4, #26
 8008fb6:	42b5      	cmp	r5, r6
 8008fb8:	d11a      	bne.n	8008ff0 <_printf_common+0xc8>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e008      	b.n	8008fd0 <_printf_common+0xa8>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	47c0      	blx	r8
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d103      	bne.n	8008fd4 <_printf_common+0xac>
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	e7c6      	b.n	8008f66 <_printf_common+0x3e>
 8008fd8:	18e1      	adds	r1, r4, r3
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	2030      	movs	r0, #48	; 0x30
 8008fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fe2:	4422      	add	r2, r4
 8008fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fec:	3302      	adds	r3, #2
 8008fee:	e7c7      	b.n	8008f80 <_printf_common+0x58>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	47c0      	blx	r8
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d0e6      	beq.n	8008fcc <_printf_common+0xa4>
 8008ffe:	3601      	adds	r6, #1
 8009000:	e7d9      	b.n	8008fb6 <_printf_common+0x8e>
	...

08009004 <_printf_i>:
 8009004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	460c      	mov	r4, r1
 800900a:	4691      	mov	r9, r2
 800900c:	7e27      	ldrb	r7, [r4, #24]
 800900e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009010:	2f78      	cmp	r7, #120	; 0x78
 8009012:	4680      	mov	r8, r0
 8009014:	469a      	mov	sl, r3
 8009016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800901a:	d807      	bhi.n	800902c <_printf_i+0x28>
 800901c:	2f62      	cmp	r7, #98	; 0x62
 800901e:	d80a      	bhi.n	8009036 <_printf_i+0x32>
 8009020:	2f00      	cmp	r7, #0
 8009022:	f000 80d8 	beq.w	80091d6 <_printf_i+0x1d2>
 8009026:	2f58      	cmp	r7, #88	; 0x58
 8009028:	f000 80a3 	beq.w	8009172 <_printf_i+0x16e>
 800902c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009034:	e03a      	b.n	80090ac <_printf_i+0xa8>
 8009036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800903a:	2b15      	cmp	r3, #21
 800903c:	d8f6      	bhi.n	800902c <_printf_i+0x28>
 800903e:	a001      	add	r0, pc, #4	; (adr r0, 8009044 <_printf_i+0x40>)
 8009040:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009044:	0800909d 	.word	0x0800909d
 8009048:	080090b1 	.word	0x080090b1
 800904c:	0800902d 	.word	0x0800902d
 8009050:	0800902d 	.word	0x0800902d
 8009054:	0800902d 	.word	0x0800902d
 8009058:	0800902d 	.word	0x0800902d
 800905c:	080090b1 	.word	0x080090b1
 8009060:	0800902d 	.word	0x0800902d
 8009064:	0800902d 	.word	0x0800902d
 8009068:	0800902d 	.word	0x0800902d
 800906c:	0800902d 	.word	0x0800902d
 8009070:	080091bd 	.word	0x080091bd
 8009074:	080090e1 	.word	0x080090e1
 8009078:	0800919f 	.word	0x0800919f
 800907c:	0800902d 	.word	0x0800902d
 8009080:	0800902d 	.word	0x0800902d
 8009084:	080091df 	.word	0x080091df
 8009088:	0800902d 	.word	0x0800902d
 800908c:	080090e1 	.word	0x080090e1
 8009090:	0800902d 	.word	0x0800902d
 8009094:	0800902d 	.word	0x0800902d
 8009098:	080091a7 	.word	0x080091a7
 800909c:	680b      	ldr	r3, [r1, #0]
 800909e:	1d1a      	adds	r2, r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	600a      	str	r2, [r1, #0]
 80090a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090ac:	2301      	movs	r3, #1
 80090ae:	e0a3      	b.n	80091f8 <_printf_i+0x1f4>
 80090b0:	6825      	ldr	r5, [r4, #0]
 80090b2:	6808      	ldr	r0, [r1, #0]
 80090b4:	062e      	lsls	r6, r5, #24
 80090b6:	f100 0304 	add.w	r3, r0, #4
 80090ba:	d50a      	bpl.n	80090d2 <_printf_i+0xce>
 80090bc:	6805      	ldr	r5, [r0, #0]
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	da03      	bge.n	80090cc <_printf_i+0xc8>
 80090c4:	232d      	movs	r3, #45	; 0x2d
 80090c6:	426d      	negs	r5, r5
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090cc:	485e      	ldr	r0, [pc, #376]	; (8009248 <_printf_i+0x244>)
 80090ce:	230a      	movs	r3, #10
 80090d0:	e019      	b.n	8009106 <_printf_i+0x102>
 80090d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090d6:	6805      	ldr	r5, [r0, #0]
 80090d8:	600b      	str	r3, [r1, #0]
 80090da:	bf18      	it	ne
 80090dc:	b22d      	sxthne	r5, r5
 80090de:	e7ef      	b.n	80090c0 <_printf_i+0xbc>
 80090e0:	680b      	ldr	r3, [r1, #0]
 80090e2:	6825      	ldr	r5, [r4, #0]
 80090e4:	1d18      	adds	r0, r3, #4
 80090e6:	6008      	str	r0, [r1, #0]
 80090e8:	0628      	lsls	r0, r5, #24
 80090ea:	d501      	bpl.n	80090f0 <_printf_i+0xec>
 80090ec:	681d      	ldr	r5, [r3, #0]
 80090ee:	e002      	b.n	80090f6 <_printf_i+0xf2>
 80090f0:	0669      	lsls	r1, r5, #25
 80090f2:	d5fb      	bpl.n	80090ec <_printf_i+0xe8>
 80090f4:	881d      	ldrh	r5, [r3, #0]
 80090f6:	4854      	ldr	r0, [pc, #336]	; (8009248 <_printf_i+0x244>)
 80090f8:	2f6f      	cmp	r7, #111	; 0x6f
 80090fa:	bf0c      	ite	eq
 80090fc:	2308      	moveq	r3, #8
 80090fe:	230a      	movne	r3, #10
 8009100:	2100      	movs	r1, #0
 8009102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009106:	6866      	ldr	r6, [r4, #4]
 8009108:	60a6      	str	r6, [r4, #8]
 800910a:	2e00      	cmp	r6, #0
 800910c:	bfa2      	ittt	ge
 800910e:	6821      	ldrge	r1, [r4, #0]
 8009110:	f021 0104 	bicge.w	r1, r1, #4
 8009114:	6021      	strge	r1, [r4, #0]
 8009116:	b90d      	cbnz	r5, 800911c <_printf_i+0x118>
 8009118:	2e00      	cmp	r6, #0
 800911a:	d04d      	beq.n	80091b8 <_printf_i+0x1b4>
 800911c:	4616      	mov	r6, r2
 800911e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009122:	fb03 5711 	mls	r7, r3, r1, r5
 8009126:	5dc7      	ldrb	r7, [r0, r7]
 8009128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800912c:	462f      	mov	r7, r5
 800912e:	42bb      	cmp	r3, r7
 8009130:	460d      	mov	r5, r1
 8009132:	d9f4      	bls.n	800911e <_printf_i+0x11a>
 8009134:	2b08      	cmp	r3, #8
 8009136:	d10b      	bne.n	8009150 <_printf_i+0x14c>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	07df      	lsls	r7, r3, #31
 800913c:	d508      	bpl.n	8009150 <_printf_i+0x14c>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	6861      	ldr	r1, [r4, #4]
 8009142:	4299      	cmp	r1, r3
 8009144:	bfde      	ittt	le
 8009146:	2330      	movle	r3, #48	; 0x30
 8009148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800914c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009150:	1b92      	subs	r2, r2, r6
 8009152:	6122      	str	r2, [r4, #16]
 8009154:	f8cd a000 	str.w	sl, [sp]
 8009158:	464b      	mov	r3, r9
 800915a:	aa03      	add	r2, sp, #12
 800915c:	4621      	mov	r1, r4
 800915e:	4640      	mov	r0, r8
 8009160:	f7ff fee2 	bl	8008f28 <_printf_common>
 8009164:	3001      	adds	r0, #1
 8009166:	d14c      	bne.n	8009202 <_printf_i+0x1fe>
 8009168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800916c:	b004      	add	sp, #16
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	4835      	ldr	r0, [pc, #212]	; (8009248 <_printf_i+0x244>)
 8009174:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	680e      	ldr	r6, [r1, #0]
 800917c:	061f      	lsls	r7, r3, #24
 800917e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009182:	600e      	str	r6, [r1, #0]
 8009184:	d514      	bpl.n	80091b0 <_printf_i+0x1ac>
 8009186:	07d9      	lsls	r1, r3, #31
 8009188:	bf44      	itt	mi
 800918a:	f043 0320 	orrmi.w	r3, r3, #32
 800918e:	6023      	strmi	r3, [r4, #0]
 8009190:	b91d      	cbnz	r5, 800919a <_printf_i+0x196>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	f023 0320 	bic.w	r3, r3, #32
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	2310      	movs	r3, #16
 800919c:	e7b0      	b.n	8009100 <_printf_i+0xfc>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	f043 0320 	orr.w	r3, r3, #32
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	2378      	movs	r3, #120	; 0x78
 80091a8:	4828      	ldr	r0, [pc, #160]	; (800924c <_printf_i+0x248>)
 80091aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091ae:	e7e3      	b.n	8009178 <_printf_i+0x174>
 80091b0:	065e      	lsls	r6, r3, #25
 80091b2:	bf48      	it	mi
 80091b4:	b2ad      	uxthmi	r5, r5
 80091b6:	e7e6      	b.n	8009186 <_printf_i+0x182>
 80091b8:	4616      	mov	r6, r2
 80091ba:	e7bb      	b.n	8009134 <_printf_i+0x130>
 80091bc:	680b      	ldr	r3, [r1, #0]
 80091be:	6826      	ldr	r6, [r4, #0]
 80091c0:	6960      	ldr	r0, [r4, #20]
 80091c2:	1d1d      	adds	r5, r3, #4
 80091c4:	600d      	str	r5, [r1, #0]
 80091c6:	0635      	lsls	r5, r6, #24
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	d501      	bpl.n	80091d0 <_printf_i+0x1cc>
 80091cc:	6018      	str	r0, [r3, #0]
 80091ce:	e002      	b.n	80091d6 <_printf_i+0x1d2>
 80091d0:	0671      	lsls	r1, r6, #25
 80091d2:	d5fb      	bpl.n	80091cc <_printf_i+0x1c8>
 80091d4:	8018      	strh	r0, [r3, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	4616      	mov	r6, r2
 80091dc:	e7ba      	b.n	8009154 <_printf_i+0x150>
 80091de:	680b      	ldr	r3, [r1, #0]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	600a      	str	r2, [r1, #0]
 80091e4:	681e      	ldr	r6, [r3, #0]
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	2100      	movs	r1, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7f7 f880 	bl	80002f0 <memchr>
 80091f0:	b108      	cbz	r0, 80091f6 <_printf_i+0x1f2>
 80091f2:	1b80      	subs	r0, r0, r6
 80091f4:	6060      	str	r0, [r4, #4]
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	2300      	movs	r3, #0
 80091fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009200:	e7a8      	b.n	8009154 <_printf_i+0x150>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	4632      	mov	r2, r6
 8009206:	4649      	mov	r1, r9
 8009208:	4640      	mov	r0, r8
 800920a:	47d0      	blx	sl
 800920c:	3001      	adds	r0, #1
 800920e:	d0ab      	beq.n	8009168 <_printf_i+0x164>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	079b      	lsls	r3, r3, #30
 8009214:	d413      	bmi.n	800923e <_printf_i+0x23a>
 8009216:	68e0      	ldr	r0, [r4, #12]
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	4298      	cmp	r0, r3
 800921c:	bfb8      	it	lt
 800921e:	4618      	movlt	r0, r3
 8009220:	e7a4      	b.n	800916c <_printf_i+0x168>
 8009222:	2301      	movs	r3, #1
 8009224:	4632      	mov	r2, r6
 8009226:	4649      	mov	r1, r9
 8009228:	4640      	mov	r0, r8
 800922a:	47d0      	blx	sl
 800922c:	3001      	adds	r0, #1
 800922e:	d09b      	beq.n	8009168 <_printf_i+0x164>
 8009230:	3501      	adds	r5, #1
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	9903      	ldr	r1, [sp, #12]
 8009236:	1a5b      	subs	r3, r3, r1
 8009238:	42ab      	cmp	r3, r5
 800923a:	dcf2      	bgt.n	8009222 <_printf_i+0x21e>
 800923c:	e7eb      	b.n	8009216 <_printf_i+0x212>
 800923e:	2500      	movs	r5, #0
 8009240:	f104 0619 	add.w	r6, r4, #25
 8009244:	e7f5      	b.n	8009232 <_printf_i+0x22e>
 8009246:	bf00      	nop
 8009248:	080093fd 	.word	0x080093fd
 800924c:	0800940e 	.word	0x0800940e

08009250 <__retarget_lock_acquire_recursive>:
 8009250:	4770      	bx	lr

08009252 <__retarget_lock_release_recursive>:
 8009252:	4770      	bx	lr

08009254 <memcpy>:
 8009254:	440a      	add	r2, r1
 8009256:	4291      	cmp	r1, r2
 8009258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800925c:	d100      	bne.n	8009260 <memcpy+0xc>
 800925e:	4770      	bx	lr
 8009260:	b510      	push	{r4, lr}
 8009262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800926a:	4291      	cmp	r1, r2
 800926c:	d1f9      	bne.n	8009262 <memcpy+0xe>
 800926e:	bd10      	pop	{r4, pc}

08009270 <memmove>:
 8009270:	4288      	cmp	r0, r1
 8009272:	b510      	push	{r4, lr}
 8009274:	eb01 0402 	add.w	r4, r1, r2
 8009278:	d902      	bls.n	8009280 <memmove+0x10>
 800927a:	4284      	cmp	r4, r0
 800927c:	4623      	mov	r3, r4
 800927e:	d807      	bhi.n	8009290 <memmove+0x20>
 8009280:	1e43      	subs	r3, r0, #1
 8009282:	42a1      	cmp	r1, r4
 8009284:	d008      	beq.n	8009298 <memmove+0x28>
 8009286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800928a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928e:	e7f8      	b.n	8009282 <memmove+0x12>
 8009290:	4402      	add	r2, r0
 8009292:	4601      	mov	r1, r0
 8009294:	428a      	cmp	r2, r1
 8009296:	d100      	bne.n	800929a <memmove+0x2a>
 8009298:	bd10      	pop	{r4, pc}
 800929a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800929e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092a2:	e7f7      	b.n	8009294 <memmove+0x24>

080092a4 <_realloc_r>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	4607      	mov	r7, r0
 80092a8:	4614      	mov	r4, r2
 80092aa:	460e      	mov	r6, r1
 80092ac:	b921      	cbnz	r1, 80092b8 <_realloc_r+0x14>
 80092ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092b2:	4611      	mov	r1, r2
 80092b4:	f7ff bc02 	b.w	8008abc <_malloc_r>
 80092b8:	b922      	cbnz	r2, 80092c4 <_realloc_r+0x20>
 80092ba:	f7ff fbaf 	bl	8008a1c <_free_r>
 80092be:	4625      	mov	r5, r4
 80092c0:	4628      	mov	r0, r5
 80092c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c4:	f000 f814 	bl	80092f0 <_malloc_usable_size_r>
 80092c8:	42a0      	cmp	r0, r4
 80092ca:	d20f      	bcs.n	80092ec <_realloc_r+0x48>
 80092cc:	4621      	mov	r1, r4
 80092ce:	4638      	mov	r0, r7
 80092d0:	f7ff fbf4 	bl	8008abc <_malloc_r>
 80092d4:	4605      	mov	r5, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0f2      	beq.n	80092c0 <_realloc_r+0x1c>
 80092da:	4631      	mov	r1, r6
 80092dc:	4622      	mov	r2, r4
 80092de:	f7ff ffb9 	bl	8009254 <memcpy>
 80092e2:	4631      	mov	r1, r6
 80092e4:	4638      	mov	r0, r7
 80092e6:	f7ff fb99 	bl	8008a1c <_free_r>
 80092ea:	e7e9      	b.n	80092c0 <_realloc_r+0x1c>
 80092ec:	4635      	mov	r5, r6
 80092ee:	e7e7      	b.n	80092c0 <_realloc_r+0x1c>

080092f0 <_malloc_usable_size_r>:
 80092f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f4:	1f18      	subs	r0, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbc      	itt	lt
 80092fa:	580b      	ldrlt	r3, [r1, r0]
 80092fc:	18c0      	addlt	r0, r0, r3
 80092fe:	4770      	bx	lr

08009300 <_init>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr

0800930c <_fini>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr
