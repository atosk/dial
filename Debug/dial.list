
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08007ba0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08007c00  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000134  08007c60  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007c60  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f3f5  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004499  00000000  00000000  0004f557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000539f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00054ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb1c  00000000  00000000  000564c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2c5  00000000  00000000  00092fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016db4d  00000000  00000000  000ad2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021adf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e4  00000000  00000000  0021ae4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000134 	.word	0x20000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ac8 	.word	0x08007ac8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000138 	.word	0x20000138
 80002d4:	08007ac8 	.word	0x08007ac8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() { // Constructor
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]

   m_dial_location = 0;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
   m_next_number = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]

}
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZNSt4Dial14CalculateStepsE9Directionhh>:

int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, uint8_t next_number){
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	4608      	mov	r0, r1
 8000608:	4611      	mov	r1, r2
 800060a:	461a      	mov	r2, r3
 800060c:	4603      	mov	r3, r0
 800060e:	70fb      	strb	r3, [r7, #3]
 8000610:	460b      	mov	r3, r1
 8000612:	70bb      	strb	r3, [r7, #2]
 8000614:	4613      	mov	r3, r2
 8000616:	707b      	strb	r3, [r7, #1]
   m_next_number = next_number;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	787a      	ldrb	r2, [r7, #1]
 800061c:	701a      	strb	r2, [r3, #0]
   int m_dial_temp = next_number - m_dial_location; // Temporary location to collect arithmetic results
 800061e:	787a      	ldrb	r2, [r7, #1]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d105      	bne.n	800063a <_ZNSt4Dial14CalculateStepsE9Directionhh+0x3c>
 800062e:	787a      	ldrb	r2, [r7, #1]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e004      	b.n	8000644 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x46>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	787b      	ldrb	r3, [r7, #1]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	60fb      	str	r3, [r7, #12]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da02      	bge.n	8000650 <_ZNSt4Dial14CalculateStepsE9Directionhh+0x52>
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3364      	adds	r3, #100	; 0x64
 800064e:	60fb      	str	r3, [r7, #12]

   // Calculate the number of pulses to send with the next stepper move command.
   return ((full_turns + m_dial_temp) * 2 * MICROSTEP);
 8000650:	78ba      	ldrb	r2, [r7, #2]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4413      	add	r3, r2
 8000656:	015b      	lsls	r3, r3, #5

}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	711a      	strb	r2, [r3, #4]

}
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2201      	movs	r2, #1
 80006b2:	715a      	strb	r2, [r3, #5]
   }
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f022 0201 	bic.w	r2, r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	711a      	strb	r2, [r3, #4]

}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4613      	mov	r3, r2
 8000704:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 800071e:	2301      	movs	r3, #1
 8000720:	75fb      	strb	r3, [r7, #23]
 8000722:	e001      	b.n	8000728 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	461a      	mov	r2, r3
 800072c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 8000732:	f001 ff05 	bl	8002540 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f042 0201 	orr.w	r2, r2, #1
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58020800 	.word	0x58020800

0800075c <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
   return m_status;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;
   m_TIMx->CR1 |= TIM_CR1_CEN;

}

uint8_t StepperMotor::MoveComplete() {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	795b      	ldrb	r3, [r3, #5]
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b598      	push	{r3, r4, r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 ff2a 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f860 	bl	8000858 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 fa6a 	bl	8000c70 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 800079c:	f000 f8ea 	bl	8000974 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 80007a0:	f000 f9d0 	bl	8000b44 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 80007a4:	f000 fa2e 	bl	8000c04 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM3_Init();
 80007a8:	f000 f93c 	bl	8000a24 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80007ac:	2108      	movs	r1, #8
 80007ae:	4826      	ldr	r0, [pc, #152]	; (8000848 <main+0xbc>)
 80007b0:	f004 fc28 	bl	8005004 <HAL_TIM_PWM_Start_IT>
  TIM3->CR1 &= ~(TIM_CR1_CEN);
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <main+0xc0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <main+0xc0>)
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     //Stepper->Move(50*16, CW);
     Stepper->Move(Dial->CalculateSteps(CW, 0, 50),CW);
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <main+0xc4>)
 80007c2:	681c      	ldr	r4, [r3, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <main+0xc8>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	2332      	movs	r3, #50	; 0x32
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	f7ff ff16 	bl	80005fe <_ZNSt4Dial14CalculateStepsE9Directionhh>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4620      	mov	r0, r4
 80007da:	f7ff ff8d 	bl	80006f8 <_ZNSt12StepperMotor4MoveEi9Direction>
     while (Stepper->Status() == Running) {}
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <main+0xc4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffba 	bl	800075c <_ZNSt12StepperMotor6StatusEv>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	bf0c      	ite	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	2300      	movne	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d000      	beq.n	80007fa <main+0x6e>
 80007f8:	e7f1      	b.n	80007de <main+0x52>
     HAL_Delay(500);
 80007fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fe:	f000 ff85 	bl	800170c <HAL_Delay>
     //Stepper->Move(50*16, CCW);
     Stepper->Move(Dial->CalculateSteps(CCW, 0, 50),CCW);
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <main+0xc4>)
 8000804:	681c      	ldr	r4, [r3, #0]
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0xc8>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	2332      	movs	r3, #50	; 0x32
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	f7ff fef5 	bl	80005fe <_ZNSt4Dial14CalculateStepsE9Directionhh>
 8000814:	4603      	mov	r3, r0
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff6c 	bl	80006f8 <_ZNSt12StepperMotor4MoveEi9Direction>
     while (Stepper->Status() == Running) {}
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <main+0xc4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff99 	bl	800075c <_ZNSt12StepperMotor6StatusEv>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d000      	beq.n	800083c <main+0xb0>
 800083a:	e7f1      	b.n	8000820 <main+0x94>
     HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000840:	f000 ff64 	bl	800170c <HAL_Delay>
     Stepper->Move(Dial->CalculateSteps(CW, 0, 50),CW);
 8000844:	e7bc      	b.n	80007c0 <main+0x34>
 8000846:	bf00      	nop
 8000848:	2000020c 	.word	0x2000020c
 800084c:	40000400 	.word	0x40000400
 8000850:	200006f0 	.word	0x200006f0
 8000854:	200006f4 	.word	0x200006f4

08000858 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	; 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	224c      	movs	r2, #76	; 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 f86a 	bl	8007940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f007 f864 	bl	8007940 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000878:	2002      	movs	r0, #2
 800087a:	f001 ffc3 	bl	8002804 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <_Z18SystemClock_Configv+0x114>)
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	4a39      	ldr	r2, [pc, #228]	; (800096c <_Z18SystemClock_Configv+0x114>)
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <_Z18SystemClock_Configv+0x114>)
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <_Z18SystemClock_Configv+0x118>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a33      	ldr	r2, [pc, #204]	; (8000970 <_Z18SystemClock_Configv+0x118>)
 80008a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <_Z18SystemClock_Configv+0x118>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b4:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <_Z18SystemClock_Configv+0x118>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d000      	beq.n	80008ce <_Z18SystemClock_Configv+0x76>
 80008cc:	e7f2      	b.n	80008b4 <_Z18SystemClock_Configv+0x5c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008ce:	2303      	movs	r3, #3
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008d8:	2301      	movs	r3, #1
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008ec:	2318      	movs	r3, #24
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008fc:	230c      	movs	r3, #12
 80008fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000900:	2300      	movs	r3, #0
 8000902:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f001 ffc3 	bl	8002898 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000922:	f000 fab9 	bl	8000e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	233f      	movs	r3, #63	; 0x3f
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2101      	movs	r1, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fbb4 	bl	80030b8 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000960:	f000 fa9a 	bl	8000e98 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	; 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58000400 	.word	0x58000400
 8000970:	58024800 	.word	0x58024800

08000974 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 800097a:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <_ZL11MX_ETH_Initv+0xa0>)
 800097c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	3302      	adds	r3, #2
 8000996:	22e1      	movs	r2, #225	; 0xe1
 8000998:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	3303      	adds	r3, #3
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3305      	adds	r3, #5
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <_ZL11MX_ETH_Initv+0xa4>)
 80009c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <_ZL11MX_ETH_Initv+0xa8>)
 80009c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <_ZL11MX_ETH_Initv+0x9c>)
 80009d4:	f000 ffee 	bl	80019b4 <HAL_ETH_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bf14      	ite	ne
 80009de:	2301      	movne	r3, #1
 80009e0:	2300      	moveq	r3, #0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <_ZL11MX_ETH_Initv+0x78>
  {
    Error_Handler();
 80009e8:	f000 fa56 	bl	8000e98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ec:	2234      	movs	r2, #52	; 0x34
 80009ee:	2100      	movs	r1, #0
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <_ZL11MX_ETH_Initv+0xac>)
 80009f2:	f006 ffa5 	bl	8007940 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <_ZL11MX_ETH_Initv+0xac>)
 80009f8:	2221      	movs	r2, #33	; 0x21
 80009fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_ZL11MX_ETH_Initv+0xac>)
 80009fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a02:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <_ZL11MX_ETH_Initv+0xac>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000184 	.word	0x20000184
 8000a14:	40028000 	.word	0x40028000
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	20000074 	.word	0x20000074
 8000a20:	20000150 	.word	0x20000150

08000a24 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a58:	4a39      	ldr	r2, [pc, #228]	; (8000b40 <_ZL12MX_TIM3_Initv+0x11c>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a5e:	223f      	movs	r2, #63	; 0x3f
 8000a60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a64:	2210      	movs	r2, #16
 8000a66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 468;
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a6a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000a6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a7c:	482f      	ldr	r0, [pc, #188]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000a7e:	f004 fa09 	bl	8004e94 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000a92:	f000 fa01 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4826      	ldr	r0, [pc, #152]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000aa4:	f004 fe2c 	bl	8005700 <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf14      	ite	ne
 8000aae:	2301      	movne	r3, #1
 8000ab0:	2300      	moveq	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8000ab8:	f000 f9ee 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000abc:	481f      	ldr	r0, [pc, #124]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000abe:	f004 fa40 	bl	8004f42 <HAL_TIM_PWM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000ad2:	f000 f9e1 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000ae6:	f005 fb53 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000afa:	f000 f9cd 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	; 0x60
 8000b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 40;
 8000b02:	2328      	movs	r3, #40	; 0x28
 8000b04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2208      	movs	r2, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000b16:	f004 fce3 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000b2a:	f000 f9b5 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <_ZL12MX_TIM3_Initv+0x118>)
 8000b30:	f000 fafc 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000020c 	.word	0x2000020c
 8000b40:	40000400 	.word	0x40000400

08000b44 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8c:	481b      	ldr	r0, [pc, #108]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b8e:	f005 fba5 	bl	80062dc <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000ba2:	f000 f979 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000baa:	f006 faed 	bl	8007188 <HAL_UARTEx_SetTxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000bbe:	f000 f96b 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000bc6:	f006 fb1d 	bl	8007204 <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf14      	ite	ne
 8000bd0:	2301      	movne	r3, #1
 8000bd2:	2300      	moveq	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000bda:	f000 f95d 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000be0:	f006 fa99 	bl	8007116 <HAL_UARTEx_DisableFifoMode>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000bf4:	f000 f950 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000258 	.word	0x20000258
 8000c00:	40004800 	.word	0x40004800

08000c04 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c10:	2209      	movs	r2, #9
 8000c12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000c4c:	f001 fc91 	bl	8002572 <HAL_PCD_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000c60:	f000 f91a 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200002e8 	.word	0x200002e8
 8000c6c:	40080000 	.word	0x40080000

08000c70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a6a      	ldr	r2, [pc, #424]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b68      	ldr	r3, [pc, #416]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca4:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b5d      	ldr	r3, [pc, #372]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a5b      	ldr	r2, [pc, #364]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b59      	ldr	r3, [pc, #356]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b51      	ldr	r3, [pc, #324]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a4c      	ldr	r2, [pc, #304]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <_ZL12MX_GPIO_Initv+0x1c8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d5e:	4837      	ldr	r0, [pc, #220]	; (8000e3c <_ZL12MX_GPIO_Initv+0x1cc>)
 8000d60:	f001 fbee 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	4835      	ldr	r0, [pc, #212]	; (8000e40 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000d6c:	f001 fbe8 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d76:	4833      	ldr	r0, [pc, #204]	; (8000e44 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000d78:	f001 fbe2 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4831      	ldr	r0, [pc, #196]	; (8000e48 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000d82:	f001 fbdd 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	482a      	ldr	r0, [pc, #168]	; (8000e44 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000d9c:	f001 fa20 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000da0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	; (8000e3c <_ZL12MX_GPIO_Initv+0x1cc>)
 8000dba:	f001 fa11 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481a      	ldr	r0, [pc, #104]	; (8000e40 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000dd8:	f001 fa02 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <_ZL12MX_GPIO_Initv+0x1dc>)
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4818      	ldr	r0, [pc, #96]	; (8000e50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8000df0:	f001 f9f6 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin_Pin */
  GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000e0e:	f001 f9e7 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <_ZL12MX_GPIO_Initv+0x1d8>)
 8000e2a:	f001 f9d9 	bl	80021e0 <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	58024400 	.word	0x58024400
 8000e3c:	58020400 	.word	0x58020400
 8000e40:	58020c00 	.word	0x58020c00
 8000e44:	58020800 	.word	0x58020800
 8000e48:	58021000 	.word	0x58021000
 8000e4c:	11110000 	.word	0x11110000
 8000e50:	58021800 	.word	0x58021800

08000e54 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
   Stepper->UpdateStep();
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc17 	bl	8000694 <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()){
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fc82 	bl	8000774 <_ZNSt12StepperMotor12MoveCompleteEv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf14      	ite	ne
 8000e76:	2301      	movne	r3, #1
 8000e78:	2300      	moveq	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_TIM_PWM_PulseFinishedCallback+0x36>
      Stepper->Stop();
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc1b 	bl	80006c0 <_ZNSt12StepperMotor4StopEv>
   }
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200006f0 	.word	0x200006f0

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d119      	bne.n	8000ee8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d114      	bne.n	8000ee8 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);;
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f006 fcea 	bl	8007898 <_Znwj>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461c      	mov	r4, r3
 8000ec8:	4909      	ldr	r1, [pc, #36]	; (8000ef0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fbca 	bl	8000664 <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000ed2:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 8000ed4:	2008      	movs	r0, #8
 8000ed6:	f006 fcdf 	bl	8007898 <_Znwj>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461c      	mov	r4, r3
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fb76 	bl	80005d0 <_ZNSt4DialC1Ev>
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000ee6:	601c      	str	r4, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	200006f0 	.word	0x200006f0
 8000ef8:	200006f4 	.word	0x200006f4

08000efc <_GLOBAL__sub_I_DMARxDscrTab>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ffcd 	bl	8000ea4 <_Z41__static_initialization_and_destruction_0ii>
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x30>)
 8000f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x30>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x30>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a59      	ldr	r2, [pc, #356]	; (80010c4 <HAL_ETH_MspInit+0x184>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 80ab 	bne.w	80010ba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f64:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f92:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fa0:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001036:	2332      	movs	r3, #50	; 0x32
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001046:	230b      	movs	r3, #11
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <HAL_ETH_MspInit+0x18c>)
 8001052:	f001 f8c5 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001056:	2386      	movs	r3, #134	; 0x86
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <HAL_ETH_MspInit+0x190>)
 8001072:	f001 f8b5 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <HAL_ETH_MspInit+0x194>)
 8001094:	f001 f8a4 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <HAL_ETH_MspInit+0x198>)
 80010b6:	f001 f893 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40028000 	.word	0x40028000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020800 	.word	0x58020800
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58020400 	.word	0x58020400
 80010d8:	58021800 	.word	0x58021800

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_TIM_Base_MspInit+0x48>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d116      	bne.n	800111c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	201d      	movs	r0, #29
 8001112:	f000 fc1a 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001116:	201d      	movs	r0, #29
 8001118:	f000 fc31 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40000400 	.word	0x40000400
 8001128:	58024400 	.word	0x58024400

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_TIM_MspPostInit+0x6c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11f      	bne.n	800118e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_TIM_MspPostInit+0x70>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_TIM_MspPostInit+0x70>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_TIM_MspPostInit+0x70>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_TIM_MspPostInit+0x74>)
 800118a:	f001 f829 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40000400 	.word	0x40000400
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020800 	.word	0x58020800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0b8      	sub	sp, #224	; 0xe0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22bc      	movs	r2, #188	; 0xbc
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 fbbb 	bl	8007940 <memset>
  if(huart->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_UART_MspInit+0xc0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d142      	bne.n	800125a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 faf4 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ee:	f7ff fe53 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_UART_MspInit+0xc4>)
 80011f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_UART_MspInit+0xc4>)
 80011fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800122e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0xc8>)
 8001256:	f000 ffc3 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	37e0      	adds	r7, #224	; 0xe0
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004800 	.word	0x40004800
 8001268:	58024400 	.word	0x58024400
 800126c:	58020c00 	.word	0x58020c00

08001270 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0b8      	sub	sp, #224	; 0xe0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	22bc      	movs	r2, #188	; 0xbc
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fb55 	bl	8007940 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <HAL_PCD_MspInit+0xe8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d156      	bne.n	800134e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fa8c 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80012be:	f7ff fdeb 	bl	8000e98 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012c2:	f001 fad9 	bl	8002878 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_PCD_MspInit+0xec>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_PCD_MspInit+0xec>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_PCD_MspInit+0xec>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012fe:	230a      	movs	r3, #10
 8001300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001308:	4619      	mov	r1, r3
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <HAL_PCD_MspInit+0xf0>)
 800130c:	f000 ff68 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <HAL_PCD_MspInit+0xf0>)
 800132c:	f000 ff58 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_PCD_MspInit+0xec>)
 8001332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_PCD_MspInit+0xec>)
 8001338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_PCD_MspInit+0xec>)
 8001342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	37e0      	adds	r7, #224	; 0xe0
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40080000 	.word	0x40080000
 800135c:	58024400 	.word	0x58024400
 8001360:	58020000 	.word	0x58020000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f98c 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM3_IRQHandler+0x10>)
 80013be:	f003 ff6f 	bl	80052a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000020c 	.word	0x2000020c

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_kill>:

int _kill(int pid, int sig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013e6:	f006 fa79 	bl	80078dc <__errno>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
	return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_exit>:

void _exit (int status)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe7 	bl	80013dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800140e:	e7fe      	b.n	800140e <_exit+0x12>

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f006 fa4c 	bl	80078dc <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	200006f8 	.word	0x200006f8
 8001478:	20000720 	.word	0x20000720

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <SystemInit+0xec>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a38      	ldr	r2, [pc, #224]	; (8001568 <SystemInit+0xec>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <SystemInit+0xf0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	2b06      	cmp	r3, #6
 800149a:	d807      	bhi.n	80014ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <SystemInit+0xf0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 030f 	bic.w	r3, r3, #15
 80014a4:	4a31      	ldr	r2, [pc, #196]	; (800156c <SystemInit+0xf0>)
 80014a6:	f043 0307 	orr.w	r3, r3, #7
 80014aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <SystemInit+0xf4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <SystemInit+0xf4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <SystemInit+0xf4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <SystemInit+0xf4>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	492b      	ldr	r1, [pc, #172]	; (8001570 <SystemInit+0xf4>)
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <SystemInit+0xf8>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemInit+0xf0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemInit+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <SystemInit+0xf0>)
 80014e0:	f043 0307 	orr.w	r3, r3, #7
 80014e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemInit+0xf4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <SystemInit+0xf4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SystemInit+0xf4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <SystemInit+0xf4>)
 80014fa:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <SystemInit+0xfc>)
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <SystemInit+0xf4>)
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <SystemInit+0x100>)
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <SystemInit+0xf4>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <SystemInit+0x104>)
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <SystemInit+0xf4>)
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <SystemInit+0xf4>)
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <SystemInit+0x104>)
 8001514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <SystemInit+0xf4>)
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <SystemInit+0xf4>)
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <SystemInit+0x104>)
 8001520:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <SystemInit+0xf4>)
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <SystemInit+0xf4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <SystemInit+0xf4>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <SystemInit+0xf4>)
 8001536:	2200      	movs	r2, #0
 8001538:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <SystemInit+0x108>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <SystemInit+0x10c>)
 8001540:	4013      	ands	r3, r2
 8001542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001546:	d202      	bcs.n	800154e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <SystemInit+0x110>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <SystemInit+0x114>)
 8001550:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001554:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SystemInit+0xec>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	52002000 	.word	0x52002000
 8001570:	58024400 	.word	0x58024400
 8001574:	eaf6ed7f 	.word	0xeaf6ed7f
 8001578:	02020200 	.word	0x02020200
 800157c:	01ff0000 	.word	0x01ff0000
 8001580:	01010280 	.word	0x01010280
 8001584:	5c001000 	.word	0x5c001000
 8001588:	ffff0000 	.word	0xffff0000
 800158c:	51008108 	.word	0x51008108
 8001590:	52004000 	.word	0x52004000

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001598:	f7ff ff70 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f006 f991 	bl	80078e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff f8e1 	bl	800078c <main>
  bx  lr
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015d8:	08007b2c 	.word	0x08007b2c
  ldr r2, =_sbss
 80015dc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80015e0:	2000071c 	.word	0x2000071c

080015e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC3_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f000 f9a0 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f4:	f001 ff16 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_Init+0x68>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	4913      	ldr	r1, [pc, #76]	; (8001654 <HAL_Init+0x6c>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_Init+0x6c>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_Init+0x70>)
 800162a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x74>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f814 	bl	8001660 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e002      	b.n	8001648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001642:	f7ff fc63 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58024400 	.word	0x58024400
 8001654:	08007ae0 	.word	0x08007ae0
 8001658:	20000004 	.word	0x20000004
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_InitTick+0x60>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e021      	b.n	80016b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_InitTick+0x64>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_InitTick+0x60>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f985 	bl	800199a <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f000 f94f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x68>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000000c 	.word	0x2000000c
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	20000708 	.word	0x20000708

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000708 	.word	0x20000708

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000000c 	.word	0x2000000c

08001754 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetREVID+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0c1b      	lsrs	r3, r3, #16
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	5c001000 	.word	0x5c001000

0800176c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000400 	.word	0x58000400

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff40 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff33 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa4 	bl	80018f0 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0c6      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fab6 	bl	8000f40 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2223      	movs	r2, #35	; 0x23
 80019d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019e0:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ea:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_ETH_Init+0x1a8>)
 80019ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7a1b      	ldrb	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff feb3 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a06:	e003      	b.n	8001a10 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a0c:	f7ff feae 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fe64 	bl	80016f4 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a2e:	e00f      	b.n	8001a50 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a30:	f7ff fe60 	bl	80016f4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3e:	d907      	bls.n	8001a50 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	22e0      	movs	r2, #224	; 0xe0
 8001a4a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e081      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e6      	bne.n	8001a30 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fac0 	bl	8001fe8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a68:	f001 fe56 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <HAL_ETH_Init+0x1ac>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fa13 	bl	8001eac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	22e0      	movs	r2, #224	; 0xe0
 8001ab8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e04a      	b.n	8001b54 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_ETH_Init+0x1b0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6952      	ldr	r2, [r2, #20]
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fad8 	bl	8002098 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb1c 	bl	8002126 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	3305      	adds	r3, #5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	3303      	adds	r3, #3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	061a      	lsls	r2, r3, #24
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b3a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2210      	movs	r2, #16
 8001b50:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	ffff8001 	.word	0xffff8001

08001b68 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b7a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	791b      	ldrb	r3, [r3, #4]
 8001b80:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b82:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
 8001b88:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b8a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7b5b      	ldrb	r3, [r3, #13]
 8001b90:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b92:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7b9b      	ldrb	r3, [r3, #14]
 8001b98:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	7bdb      	ldrb	r3, [r3, #15]
 8001ba0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ba2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	7c12      	ldrb	r2, [r2, #16]
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x4a>
 8001bac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x4c>
 8001bb2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bb4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	7c52      	ldrb	r2, [r2, #17]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetMACConfig+0x5c>
 8001bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetMACConfig+0x5e>
 8001bc4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bc6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7c9b      	ldrb	r3, [r3, #18]
 8001bcc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bce:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bd4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001bda:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7f1b      	ldrb	r3, [r3, #28]
 8001be0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001be2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7f5b      	ldrb	r3, [r3, #29]
 8001be8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	7f92      	ldrb	r2, [r2, #30]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d102      	bne.n	8001bfa <ETH_SetMACConfig+0x92>
 8001bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf8:	e000      	b.n	8001bfc <ETH_SetMACConfig+0x94>
 8001bfa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bfc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7fdb      	ldrb	r3, [r3, #31]
 8001c02:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c04:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	d102      	bne.n	8001c16 <ETH_SetMACConfig+0xae>
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	e000      	b.n	8001c18 <ETH_SetMACConfig+0xb0>
 8001c16:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c18:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c1e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c26:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c28:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <ETH_SetMACConfig+0x22c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c54:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c5e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c66:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c68:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d102      	bne.n	8001c7a <ETH_SetMACConfig+0x112>
 8001c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c78:	e000      	b.n	8001c7c <ETH_SetMACConfig+0x114>
 8001c7a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c7c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <ETH_SetMACConfig+0x230>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <ETH_SetMACConfig+0x234>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d101      	bne.n	8001cda <ETH_SetMACConfig+0x172>
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	e000      	b.n	8001cdc <ETH_SetMACConfig+0x174>
 8001cda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cdc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d04:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d0c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f023 0103 	bic.w	r1, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d32:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d101      	bne.n	8001d56 <ETH_SetMACConfig+0x1ee>
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	e000      	b.n	8001d58 <ETH_SetMACConfig+0x1f0>
 8001d56:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d58:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d60:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d62:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d6a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d78:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	00048083 	.word	0x00048083
 8001d98:	c0f88000 	.word	0xc0f88000
 8001d9c:	fffffef0 	.word	0xfffffef0

08001da0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <ETH_SetDMAConfig+0xf8>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dc6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dd2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001de6:	4413      	add	r3, r2
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <ETH_SetDMAConfig+0xfc>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6811      	ldr	r1, [r2, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dfa:	440b      	add	r3, r1
 8001dfc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	7b5b      	ldrb	r3, [r3, #13]
 8001e02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <ETH_SetDMAConfig+0x100>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e26:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7d1b      	ldrb	r3, [r3, #20]
 8001e30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e32:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e46:	4413      	add	r3, r2
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <ETH_SetDMAConfig+0x104>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e5a:	440b      	add	r3, r1
 8001e5c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7f1b      	ldrb	r3, [r3, #28]
 8001e62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e74:	4413      	add	r3, r2
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <ETH_SetDMAConfig+0x108>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6811      	ldr	r1, [r2, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	ffff87fd 	.word	0xffff87fd
 8001e9c:	ffff2ffe 	.word	0xffff2ffe
 8001ea0:	fffec000 	.word	0xfffec000
 8001ea4:	ffc0efef 	.word	0xffc0efef
 8001ea8:	7fc0ffff 	.word	0x7fc0ffff

08001eac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0a4      	sub	sp, #144	; 0x90
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f26:	2300      	movs	r3, #0
 8001f28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f44:	2320      	movs	r3, #32
 8001f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f86:	2300      	movs	r3, #0
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fde6 	bl	8001b68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001fcc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fee1 	bl	8001da0 <ETH_SetDMAConfig>
}
 8001fde:	bf00      	nop
 8001fe0:	3790      	adds	r7, #144	; 0x90
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002000:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002002:	f001 fb89 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8002006:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d908      	bls.n	8002022 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d804      	bhi.n	8002022 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e027      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d908      	bls.n	800203c <ETH_MAC_MDIO_ClkConfig+0x54>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d204      	bcs.n	800203c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e01a      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d303      	bcc.n	800204c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d911      	bls.n	8002070 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d908      	bls.n	8002066 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d804      	bhi.n	8002066 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e005      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e000      	b.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002070:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	01312cff 	.word	0x01312cff
 8002088:	02160ebf 	.word	0x02160ebf
 800208c:	03938700 	.word	0x03938700
 8002090:	05f5e0ff 	.word	0x05f5e0ff
 8002094:	08f0d17f 	.word	0x08f0d17f

08002098 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e01d      	b.n	80020e2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	3206      	adds	r2, #6
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d9de      	bls.n	80020a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f241 132c 	movw	r3, #4396	; 0x112c
 80020f6:	4413      	add	r3, r2
 80020f8:	2203      	movs	r2, #3
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68d9      	ldr	r1, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f241 1314 	movw	r3, #4372	; 0x1114
 8002108:	4413      	add	r3, r2
 800210a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e024      	b.n	800217e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6919      	ldr	r1, [r3, #16]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3310      	adds	r3, #16
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d9d7      	bls.n	8002134 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f241 1330 	movw	r3, #4400	; 0x1130
 80021aa:	4413      	add	r3, r2
 80021ac:	2203      	movs	r2, #3
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6919      	ldr	r1, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80021bc:	4413      	add	r3, r2
 80021be:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f241 1328 	movw	r3, #4392	; 0x1128
 80021d0:	4413      	add	r3, r2
 80021d2:	6019      	str	r1, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_GPIO_Init+0x234>)
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f2:	e194      	b.n	800251e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8186 	beq.w	8002518 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d00b      	beq.n	800222c <HAL_GPIO_Init+0x4c>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002220:	2b11      	cmp	r3, #17
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b12      	cmp	r3, #18
 800222a:	d130      	bne.n	800228e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002262:	2201      	movs	r2, #1
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0201 	and.w	r2, r3, #1
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0xee>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	69b9      	ldr	r1, [r7, #24]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80e0 	beq.w	8002518 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x238>)
 800235a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235e:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <HAL_GPIO_Init+0x238>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_GPIO_Init+0x238>)
 800236a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a29      	ldr	r2, [pc, #164]	; (800241c <HAL_GPIO_Init+0x23c>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_GPIO_Init+0x240>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d052      	beq.n	8002448 <HAL_GPIO_Init+0x268>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_GPIO_Init+0x244>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0x22e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_GPIO_Init+0x248>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x22a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_GPIO_Init+0x24c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_GPIO_Init+0x250>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_GPIO_Init+0x254>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_GPIO_Init+0x258>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_GPIO_Init+0x25c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x260>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_GPIO_Init+0x264>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x20e>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e02d      	b.n	800244a <HAL_GPIO_Init+0x26a>
 80023ee:	230a      	movs	r3, #10
 80023f0:	e02b      	b.n	800244a <HAL_GPIO_Init+0x26a>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e029      	b.n	800244a <HAL_GPIO_Init+0x26a>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e027      	b.n	800244a <HAL_GPIO_Init+0x26a>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e025      	b.n	800244a <HAL_GPIO_Init+0x26a>
 80023fe:	2305      	movs	r3, #5
 8002400:	e023      	b.n	800244a <HAL_GPIO_Init+0x26a>
 8002402:	2304      	movs	r3, #4
 8002404:	e021      	b.n	800244a <HAL_GPIO_Init+0x26a>
 8002406:	2303      	movs	r3, #3
 8002408:	e01f      	b.n	800244a <HAL_GPIO_Init+0x26a>
 800240a:	2302      	movs	r3, #2
 800240c:	e01d      	b.n	800244a <HAL_GPIO_Init+0x26a>
 800240e:	2301      	movs	r3, #1
 8002410:	e01b      	b.n	800244a <HAL_GPIO_Init+0x26a>
 8002412:	bf00      	nop
 8002414:	58000080 	.word	0x58000080
 8002418:	58024400 	.word	0x58024400
 800241c:	58000400 	.word	0x58000400
 8002420:	58020000 	.word	0x58020000
 8002424:	58020400 	.word	0x58020400
 8002428:	58020800 	.word	0x58020800
 800242c:	58020c00 	.word	0x58020c00
 8002430:	58021000 	.word	0x58021000
 8002434:	58021400 	.word	0x58021400
 8002438:	58021800 	.word	0x58021800
 800243c:	58021c00 	.word	0x58021c00
 8002440:	58022000 	.word	0x58022000
 8002444:	58022400 	.word	0x58022400
 8002448:	2300      	movs	r3, #0
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245a:	4938      	ldr	r1, [pc, #224]	; (800253c <HAL_GPIO_Init+0x35c>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f47f ae63 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	58000400 	.word	0x58000400

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002574:	b08f      	sub	sp, #60	; 0x3c
 8002576:	af0a      	add	r7, sp, #40	; 0x28
 8002578:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e116      	b.n	80027b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fe66 	bl	8001270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 ff18 	bl	80073f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	687e      	ldr	r6, [r7, #4]
 80025d0:	466d      	mov	r5, sp
 80025d2:	f106 0410 	add.w	r4, r6, #16
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e6:	1d33      	adds	r3, r6, #4
 80025e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ea:	6838      	ldr	r0, [r7, #0]
 80025ec:	f004 fe96 	bl	800731c <USB_CoreInit>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0d7      	b.n	80027b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f004 ff06 	bl	800741a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e04a      	b.n	80026aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	333d      	adds	r3, #61	; 0x3d
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	333c      	adds	r3, #60	; 0x3c
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	b298      	uxth	r0, r3
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3342      	adds	r3, #66	; 0x42
 8002650:	4602      	mov	r2, r0
 8002652:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	333f      	adds	r3, #63	; 0x3f
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3344      	adds	r3, #68	; 0x44
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3348      	adds	r3, #72	; 0x48
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3350      	adds	r3, #80	; 0x50
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3af      	bcc.n	8002614 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e044      	b.n	8002744 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3b5      	bcc.n	80026ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	687e      	ldr	r6, [r7, #4]
 8002756:	466d      	mov	r5, sp
 8002758:	f106 0410 	add.w	r4, r6, #16
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002764:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002768:	e885 0003 	stmia.w	r5, {r0, r1}
 800276c:	1d33      	adds	r3, r6, #4
 800276e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002770:	6838      	ldr	r0, [r7, #0]
 8002772:	f004 fe7d 	bl	8007470 <USB_DevInit>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e014      	b.n	80027b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f80b 	bl	80027bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 f81f 	bl	80077ee <USB_DevDisconnect>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_PCDEx_ActivateLPM+0x44>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	10000003 	.word	0x10000003

08002804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_PWREx_ConfigSupply+0x70>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00a      	beq.n	800282e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_PWREx_ConfigSupply+0x70>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01f      	b.n	800286a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e01d      	b.n	800286a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_PWREx_ConfigSupply+0x70>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	490f      	ldr	r1, [pc, #60]	; (8002874 <HAL_PWREx_ConfigSupply+0x70>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4313      	orrs	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800283e:	f7fe ff59 	bl	80016f4 <HAL_GetTick>
 8002842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002844:	e009      	b.n	800285a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002846:	f7fe ff55 	bl	80016f4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002854:	d901      	bls.n	800285a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e007      	b.n	800286a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_PWREx_ConfigSupply+0x70>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	d1ee      	bne.n	8002846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	58024800 	.word	0x58024800

08002878 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	58024800 	.word	0x58024800

08002898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e3ff      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b8:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c2:	4b97      	ldr	r3, [pc, #604]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x46>
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	2b18      	cmp	r3, #24
 80028d2:	d110      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x12c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e3d9      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x76>
 8002900:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a86      	ldr	r2, [pc, #536]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a81      	ldr	r2, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xbc>
 800293a:	4b79      	ldr	r3, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a78      	ldr	r2, [pc, #480]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002954:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a71      	ldr	r2, [pc, #452]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6e      	ldr	r2, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe febe 	bl	80016f4 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe feba 	bl	80016f4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e38d      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298e:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe4>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe feaa 	bl	80016f4 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fea6 	bl	80016f4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e379      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b6:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x10c>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80ae 	beq.w	8002b30 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029de:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_RCC_OscConfig+0x162>
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	d13a      	bne.n	8002a66 <HAL_RCC_OscConfig+0x1ce>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d135      	bne.n	8002a66 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e34b      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	f7fe fe9f 	bl	8001754 <HAL_GetREVID>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d817      	bhi.n	8002a50 <HAL_RCC_OscConfig+0x1b8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d108      	bne.n	8002a3a <HAL_RCC_OscConfig+0x1a2>
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a30:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a36:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a38:	e07a      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	4935      	ldr	r1, [pc, #212]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4e:	e06f      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	4930      	ldr	r1, [pc, #192]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	e064      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d045      	beq.n	8002afa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0219 	bic.w	r2, r3, #25
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4929      	ldr	r1, [pc, #164]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fe38 	bl	80016f4 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fe34 	bl	80016f4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e307      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	f7fe fe55 	bl	8001754 <HAL_GetREVID>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d817      	bhi.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d108      	bne.n	8002ace <HAL_RCC_OscConfig+0x236>
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aca:	6053      	str	r3, [r2, #4]
 8002acc:	e030      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	e025      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	490b      	ldr	r1, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e01a      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_RCC_OscConfig+0x288>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fdf5 	bl	80016f4 <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fdf1 	bl	80016f4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d903      	bls.n	8002b24 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e2c4      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
 8002b20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b24:	4ba4      	ldr	r3, [pc, #656]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a9 	beq.w	8002c90 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3e:	4b9e      	ldr	r3, [pc, #632]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b48:	4b9b      	ldr	r3, [pc, #620]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d007      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2cc>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b18      	cmp	r3, #24
 8002b58:	d13a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x338>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d135      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b64:	4b94      	ldr	r3, [pc, #592]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2e4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e296      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7c:	f7fe fdea 	bl	8001754 <HAL_GetREVID>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d817      	bhi.n	8002bba <HAL_RCC_OscConfig+0x322>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b92:	4b89      	ldr	r3, [pc, #548]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b9a:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ba2:	e075      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ba4:	4b84      	ldr	r3, [pc, #528]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	069b      	lsls	r3, r3, #26
 8002bb2:	4981      	ldr	r1, [pc, #516]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb8:	e06a      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bba:	4b7f      	ldr	r3, [pc, #508]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	497b      	ldr	r1, [pc, #492]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bce:	e05f      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d042      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bd8:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a76      	ldr	r2, [pc, #472]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd86 	bl	80016f4 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bec:	f7fe fd82 	bl	80016f4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e255      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bfe:	4b6e      	ldr	r3, [pc, #440]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0a:	f7fe fda3 	bl	8001754 <HAL_GetREVID>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d817      	bhi.n	8002c48 <HAL_RCC_OscConfig+0x3b0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d108      	bne.n	8002c32 <HAL_RCC_OscConfig+0x39a>
 8002c20:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c28:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c2e:	6053      	str	r3, [r2, #4]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
 8002c32:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	495d      	ldr	r1, [pc, #372]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
 8002c46:	e023      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
 8002c48:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	4958      	ldr	r1, [pc, #352]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fd43 	bl	80016f4 <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c72:	f7fe fd3f 	bl	80016f4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e212      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d036      	beq.n	8002d0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d019      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca4:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fd20 	bl	80016f4 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fd1c 	bl	80016f4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1ef      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x420>
 8002cd6:	e018      	b.n	8002d0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fd06 	bl	80016f4 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd02 	bl	80016f4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1d5      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d036      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fce3 	bl	80016f4 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d32:	f7fe fcdf 	bl	80016f4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1b2      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x49a>
 8002d50:	e018      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fcc9 	bl	80016f4 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d66:	f7fe fcc5 	bl	80016f4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e198      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_RCC_OscConfig+0x520>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8085 	beq.w	8002e9c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_OscConfig+0x524>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_OscConfig+0x524>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fca9 	bl	80016f4 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da4:	e00c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe fca5 	bl	80016f4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d905      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e178      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc0:	4b96      	ldr	r3, [pc, #600]	; (800301c <HAL_RCC_OscConfig+0x784>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ec      	beq.n	8002da6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x54a>
 8002dd4:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a91      	ldr	r2, [pc, #580]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_OscConfig+0x5a6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x56c>
 8002dea:	4b8d      	ldr	r3, [pc, #564]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a8c      	ldr	r2, [pc, #560]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a89      	ldr	r2, [pc, #548]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x5a6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x58e>
 8002e0c:	4b84      	ldr	r3, [pc, #528]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a83      	ldr	r2, [pc, #524]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a80      	ldr	r2, [pc, #512]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x5a6>
 8002e26:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	4b7b      	ldr	r3, [pc, #492]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a7a      	ldr	r2, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fc55 	bl	80016f4 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fc51 	bl	80016f4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e122      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e64:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x5b6>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fc3f 	bl	80016f4 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fc3b 	bl	80016f4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e10c      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e90:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8101 	beq.w	80030a8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eae:	2b18      	cmp	r3, #24
 8002eb0:	f000 80bc 	beq.w	800302c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 8095 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe fc13 	bl	80016f4 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fc0f 	bl	80016f4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0e2      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef4:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_RCC_OscConfig+0x78c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	430a      	orrs	r2, r1
 8002f04:	4946      	ldr	r1, [pc, #280]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	628b      	str	r3, [r1, #40]	; 0x28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	025b      	lsls	r3, r3, #9
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	3b01      	subs	r3, #1
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f3a:	4939      	ldr	r1, [pc, #228]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f40:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f4c:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCC_OscConfig+0x790>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f58:	00d2      	lsls	r2, r2, #3
 8002f5a:	4931      	ldr	r1, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f023 020c 	bic.w	r2, r3, #12
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	492c      	ldr	r1, [pc, #176]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f023 0202 	bic.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4928      	ldr	r1, [pc, #160]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4a25      	ldr	r2, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fb98 	bl	80016f4 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fb94 	bl	80016f4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e067      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x730>
 8002fe6:	e05f      	b.n	80030a8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fb7e 	bl	80016f4 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fb7a 	bl	80016f4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e04d      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <HAL_RCC_OscConfig+0x788>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x764>
 800301a:	e045      	b.n	80030a8 <HAL_RCC_OscConfig+0x810>
 800301c:	58024800 	.word	0x58024800
 8003020:	58024400 	.word	0x58024400
 8003024:	fffffc0c 	.word	0xfffffc0c
 8003028:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x81c>)
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_OscConfig+0x81c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b01      	cmp	r3, #1
 800303e:	d031      	beq.n	80030a4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d12a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d122      	bne.n	80030a4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0a5b      	lsrs	r3, r3, #9
 8003072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0c1b      	lsrs	r3, r3, #16
 8003084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	; 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	58024400 	.word	0x58024400

080030b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e19c      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b8a      	ldr	r3, [pc, #552]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b87      	ldr	r3, [pc, #540]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 020f 	bic.w	r2, r3, #15
 80030e2:	4985      	ldr	r1, [pc, #532]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b83      	ldr	r3, [pc, #524]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e184      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003114:	429a      	cmp	r2, r3
 8003116:	d908      	bls.n	800312a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003118:	4b78      	ldr	r3, [pc, #480]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4975      	ldr	r1, [pc, #468]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003126:	4313      	orrs	r3, r2
 8003128:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003142:	429a      	cmp	r2, r3
 8003144:	d908      	bls.n	8003158 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	496a      	ldr	r1, [pc, #424]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003154:	4313      	orrs	r3, r2
 8003156:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003170:	429a      	cmp	r2, r3
 8003172:	d908      	bls.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003174:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	495e      	ldr	r1, [pc, #376]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003182:	4313      	orrs	r3, r2
 8003184:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800319e:	429a      	cmp	r2, r3
 80031a0:	d908      	bls.n	80031b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031a2:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4953      	ldr	r1, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d908      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f023 020f 	bic.w	r2, r3, #15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4947      	ldr	r1, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d055      	beq.n	800329a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4940      	ldr	r1, [pc, #256]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003208:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d121      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0f6      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d115      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0ea      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0de      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d6      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f023 0207 	bic.w	r2, r3, #7
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4925      	ldr	r1, [pc, #148]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 8003266:	4313      	orrs	r3, r2
 8003268:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fa43 	bl	80016f4 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	e00a      	b.n	8003288 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	f7fe fa3f 	bl	80016f4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0be      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	429a      	cmp	r2, r3
 8003298:	d1eb      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d208      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f023 020f 	bic.w	r2, r3, #15
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x244>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d214      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	4906      	ldr	r1, [pc, #24]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e086      	b.n	8003406 <HAL_RCC_ClockConfig+0x34e>
 80032f8:	52002000 	.word	0x52002000
 80032fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003318:	429a      	cmp	r2, r3
 800331a:	d208      	bcs.n	800332e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800331c:	4b3c      	ldr	r3, [pc, #240]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4939      	ldr	r1, [pc, #228]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800332a:	4313      	orrs	r3, r2
 800332c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003346:	429a      	cmp	r2, r3
 8003348:	d208      	bcs.n	800335c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	492e      	ldr	r1, [pc, #184]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 8003358:	4313      	orrs	r3, r2
 800335a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003374:	429a      	cmp	r2, r3
 8003376:	d208      	bcs.n	800338a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4922      	ldr	r1, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 8003386:	4313      	orrs	r3, r2
 8003388:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d208      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4917      	ldr	r1, [pc, #92]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b8:	f000 f834 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	4912      	ldr	r1, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x35c>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x358>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_RCC_ClockConfig+0x35c>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x360>)
 80033ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x364>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x368>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe f930 	bl	8001660 <HAL_InitTick>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	58024400 	.word	0x58024400
 8003414:	08007ae0 	.word	0x08007ae0
 8003418:	20000004 	.word	0x20000004
 800341c:	20000000 	.word	0x20000000
 8003420:	20000008 	.word	0x20000008

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342a:	4bb3      	ldr	r3, [pc, #716]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003432:	2b18      	cmp	r3, #24
 8003434:	f200 8155 	bhi.w	80036e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <HAL_RCC_GetSysClockFreq+0x1c>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	080034a5 	.word	0x080034a5
 8003444:	080036e3 	.word	0x080036e3
 8003448:	080036e3 	.word	0x080036e3
 800344c:	080036e3 	.word	0x080036e3
 8003450:	080036e3 	.word	0x080036e3
 8003454:	080036e3 	.word	0x080036e3
 8003458:	080036e3 	.word	0x080036e3
 800345c:	080036e3 	.word	0x080036e3
 8003460:	080034cb 	.word	0x080034cb
 8003464:	080036e3 	.word	0x080036e3
 8003468:	080036e3 	.word	0x080036e3
 800346c:	080036e3 	.word	0x080036e3
 8003470:	080036e3 	.word	0x080036e3
 8003474:	080036e3 	.word	0x080036e3
 8003478:	080036e3 	.word	0x080036e3
 800347c:	080036e3 	.word	0x080036e3
 8003480:	080034d1 	.word	0x080034d1
 8003484:	080036e3 	.word	0x080036e3
 8003488:	080036e3 	.word	0x080036e3
 800348c:	080036e3 	.word	0x080036e3
 8003490:	080036e3 	.word	0x080036e3
 8003494:	080036e3 	.word	0x080036e3
 8003498:	080036e3 	.word	0x080036e3
 800349c:	080036e3 	.word	0x080036e3
 80034a0:	080034d7 	.word	0x080034d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a4:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d009      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034b0:	4b91      	ldr	r3, [pc, #580]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	4a90      	ldr	r2, [pc, #576]	; (80036fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034c2:	e111      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034c4:	4b8d      	ldr	r3, [pc, #564]	; (80036fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034c6:	61bb      	str	r3, [r7, #24]
    break;
 80034c8:	e10e      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034ca:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034cc:	61bb      	str	r3, [r7, #24]
    break;
 80034ce:	e10b      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034d0:	4b8c      	ldr	r3, [pc, #560]	; (8003704 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034d2:	61bb      	str	r3, [r7, #24]
    break;
 80034d4:	e108      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034e0:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034ec:	4b82      	ldr	r3, [pc, #520]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034f6:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80e1 	beq.w	80036dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b02      	cmp	r3, #2
 800351e:	f000 8083 	beq.w	8003628 <HAL_RCC_GetSysClockFreq+0x204>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b02      	cmp	r3, #2
 8003526:	f200 80a1 	bhi.w	800366c <HAL_RCC_GetSysClockFreq+0x248>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x114>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d056      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003536:	e099      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02d      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003544:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	4a6b      	ldr	r2, [pc, #428]	; (80036fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003582:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800359e:	e087      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800370c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e2:	e065      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003710 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a02 	vldr	s12, [r7, #8]
 800360a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2e4>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003626:	e043      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003714 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a02 	vldr	s12, [r7, #8]
 800364e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800366a:	e021      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003710 <HAL_RCC_GetSysClockFreq+0x2ec>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003692:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	0a5b      	lsrs	r3, r3, #9
 80036b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ba:	3301      	adds	r3, #1
 80036bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d4:	ee17 3a90 	vmov	r3, s15
 80036d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e4:	61bb      	str	r3, [r7, #24]
    break;
 80036e6:	bf00      	nop
  }

  return sysclockfreq;
 80036e8:	69bb      	ldr	r3, [r7, #24]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
 80036fc:	03d09000 	.word	0x03d09000
 8003700:	003d0900 	.word	0x003d0900
 8003704:	007a1200 	.word	0x007a1200
 8003708:	46000000 	.word	0x46000000
 800370c:	4c742400 	.word	0x4c742400
 8003710:	4a742400 	.word	0x4a742400
 8003714:	4af42400 	.word	0x4af42400

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800371e:	f7ff fe81 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8003722:	4602      	mov	r2, r0
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCC_GetHCLKFreq+0x50>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	490f      	ldr	r1, [pc, #60]	; (800376c <HAL_RCC_GetHCLKFreq+0x54>)
 8003730:	5ccb      	ldrb	r3, [r1, r3]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_RCC_GetHCLKFreq+0x50>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_GetHCLKFreq+0x54>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_RCC_GetHCLKFreq+0x58>)
 8003754:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_GetHCLKFreq+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	58024400 	.word	0x58024400
 800376c:	08007ae0 	.word	0x08007ae0
 8003770:	20000004 	.word	0x20000004
 8003774:	20000000 	.word	0x20000000

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800377c:	f7ff ffcc 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	58024400 	.word	0x58024400
 80037a0:	08007ae0 	.word	0x08007ae0

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037a8:	f7ff ffb6 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58024400 	.word	0x58024400
 80037cc:	08007ae0 	.word	0x08007ae0

080037d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037dc:	2300      	movs	r3, #0
 80037de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d03f      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037f4:	d02a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037fa:	d824      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003800:	d018      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d81e      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800380c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003812:	e018      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4aaa      	ldr	r2, [pc, #680]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003820:	e015      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2102      	movs	r1, #2
 8003828:	4618      	mov	r0, r3
 800382a:	f001 f9cf 	bl	8004bcc <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003832:	e00c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fa78 	bl	8004d30 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800384c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003854:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003860:	4998      	ldr	r1, [pc, #608]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	650b      	str	r3, [r1, #80]	; 0x50
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03d      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	2b04      	cmp	r3, #4
 800387e:	d826      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	0800389d 	.word	0x0800389d
 800388c:	080038ab 	.word	0x080038ab
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d5 	.word	0x080038d5
 8003898:	080038d5 	.word	0x080038d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4a88      	ldr	r2, [pc, #544]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038a8:	e015      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f98b 	bl	8004bcc <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3324      	adds	r3, #36	; 0x24
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fa34 	bl	8004d30 <RCCEx_PLL3_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	f023 0207 	bic.w	r2, r3, #7
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	4976      	ldr	r1, [pc, #472]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	650b      	str	r3, [r1, #80]	; 0x50
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d042      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003908:	d02b      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d825      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003910:	2bc0      	cmp	r3, #192	; 0xc0
 8003912:	d028      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003914:	2bc0      	cmp	r3, #192	; 0xc0
 8003916:	d821      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d016      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d81d      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003924:	2b40      	cmp	r3, #64	; 0x40
 8003926:	d007      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003928:	e018      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392a:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	4a65      	ldr	r2, [pc, #404]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003936:	e017      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f944 	bl	8004bcc <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003948:	e00e      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3324      	adds	r3, #36	; 0x24
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f001 f9ed 	bl	8004d30 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800395a:	e005      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
      break;
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800396e:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4952      	ldr	r1, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	650b      	str	r3, [r1, #80]	; 0x50
 8003980:	e001      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d049      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399c:	d030      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a2:	d82a      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039a8:	d02c      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039ae:	d824      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b4:	d018      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ba:	d81e      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c4:	d007      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039c6:	e018      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4a3d      	ldr	r2, [pc, #244]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d4:	e017      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 f8f5 	bl	8004bcc <RCCEx_PLL2_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039e6:	e00e      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3324      	adds	r3, #36	; 0x24
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f99e 	bl	8004d30 <RCCEx_PLL3_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f8:	e005      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a1a:	492a      	ldr	r1, [pc, #168]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04c      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3c:	d030      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a42:	d82a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a48:	d02c      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a4e:	d824      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a54:	d018      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a5a:	d81e      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a64:	d007      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a66:	e018      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a74:	e017      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 f8a5 	bl	8004bcc <RCCEx_PLL2_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a86:	e00e      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f94e 	bl	8004d30 <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a98:	e005      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aba:	4902      	ldr	r1, [pc, #8]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	658b      	str	r3, [r1, #88]	; 0x58
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d032      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	2b30      	cmp	r3, #48	; 0x30
 8003ade:	d01c      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ae0:	2b30      	cmp	r3, #48	; 0x30
 8003ae2:	d817      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d00c      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d813      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4baf      	ldr	r3, [pc, #700]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4aae      	ldr	r2, [pc, #696]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b00:	e00e      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2102      	movs	r1, #2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 f85f 	bl	8004bcc <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	e002      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b26:	4ba3      	ldr	r3, [pc, #652]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	49a0      	ldr	r1, [pc, #640]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b38:	e001      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d047      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b52:	d030      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b58:	d82a      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b5e:	d02c      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b64:	d824      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6a:	d018      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b70:	d81e      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7e:	4b8d      	ldr	r3, [pc, #564]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	4a8c      	ldr	r2, [pc, #560]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e017      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f81a 	bl	8004bcc <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e00e      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3324      	adds	r3, #36	; 0x24
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f8c3 	bl	8004d30 <RCCEx_PLL3_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bae:	e005      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bc2:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	4979      	ldr	r1, [pc, #484]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	650b      	str	r3, [r1, #80]	; 0x50
 8003bd4:	e001      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d049      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bee:	d02e      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d828      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfa:	d02a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c00:	d822      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c06:	d026      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0c:	d81c      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c12:	d010      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c18:	d816      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c22:	d111      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 ffce 	bl	8004bcc <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c34:	e012      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3324      	adds	r3, #36	; 0x24
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f877 	bl	8004d30 <RCCEx_PLL3_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c46:	e009      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e004      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c52:	bf00      	nop
 8003c54:	e002      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c62:	4b54      	ldr	r3, [pc, #336]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	4951      	ldr	r1, [pc, #324]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	650b      	str	r3, [r1, #80]	; 0x50
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d04b      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c90:	d02e      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c96:	d828      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d822      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca8:	d026      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cae:	d81c      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cba:	d816      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01d      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc4:	d111      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 ff7d 	bl	8004bcc <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e012      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f826 	bl	8004d30 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ce8:	e009      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      break;
 8003cee:	e006      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf0:	bf00      	nop
 8003cf2:	e004      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d12:	4928      	ldr	r1, [pc, #160]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	658b      	str	r3, [r1, #88]	; 0x58
 8003d18:	e001      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02f      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d00e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d814      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d10f      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d50:	e00c      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 ff37 	bl	8004bcc <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	490d      	ldr	r1, [pc, #52]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	650b      	str	r3, [r1, #80]	; 0x50
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d033      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d81c      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003ddf 	.word	0x08003ddf
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dc7 	.word	0x08003dc7
 8003db0:	08003ddf 	.word	0x08003ddf
 8003db4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4bb8      	ldr	r3, [pc, #736]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4ab7      	ldr	r2, [pc, #732]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dc4:	e00c      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fefd 	bl	8004bcc <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
      break;
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003de6:	4bad      	ldr	r3, [pc, #692]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	f023 0203 	bic.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	49aa      	ldr	r1, [pc, #680]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003df8:	e001      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8086 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0c:	4ba4      	ldr	r3, [pc, #656]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4aa3      	ldr	r2, [pc, #652]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e18:	f7fd fc6c 	bl	80016f4 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fd fc68 	bl	80016f4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d902      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	75fb      	strb	r3, [r7, #23]
        break;
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e34:	4b9a      	ldr	r3, [pc, #616]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d166      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e46:	4b95      	ldr	r3, [pc, #596]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e50:	4053      	eors	r3, r2
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d013      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e5a:	4b90      	ldr	r3, [pc, #576]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e64:	4b8d      	ldr	r3, [pc, #564]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a8c      	ldr	r2, [pc, #560]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b8a      	ldr	r3, [pc, #552]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a89      	ldr	r2, [pc, #548]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e7c:	4a87      	ldr	r2, [pc, #540]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d115      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fc31 	bl	80016f4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e94:	e00b      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd fc2d 	bl	80016f4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d902      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8003eac:	e005      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ed      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d126      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d10d      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ed0:	4b72      	ldr	r3, [pc, #456]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ede:	0919      	lsrs	r1, r3, #4
 8003ee0:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	496d      	ldr	r1, [pc, #436]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	610b      	str	r3, [r1, #16]
 8003eea:	e005      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003eec:	4b6b      	ldr	r3, [pc, #428]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ef6:	6113      	str	r3, [r2, #16]
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f06:	4965      	ldr	r1, [pc, #404]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	670b      	str	r3, [r1, #112]	; 0x70
 8003f0c:	e004      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	75bb      	strb	r3, [r7, #22]
 8003f12:	e001      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d07e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f28:	2b28      	cmp	r3, #40	; 0x28
 8003f2a:	d867      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08004003 	.word	0x08004003
 8003f38:	08003ffd 	.word	0x08003ffd
 8003f3c:	08003ffd 	.word	0x08003ffd
 8003f40:	08003ffd 	.word	0x08003ffd
 8003f44:	08003ffd 	.word	0x08003ffd
 8003f48:	08003ffd 	.word	0x08003ffd
 8003f4c:	08003ffd 	.word	0x08003ffd
 8003f50:	08003ffd 	.word	0x08003ffd
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	08003ffd 	.word	0x08003ffd
 8003f5c:	08003ffd 	.word	0x08003ffd
 8003f60:	08003ffd 	.word	0x08003ffd
 8003f64:	08003ffd 	.word	0x08003ffd
 8003f68:	08003ffd 	.word	0x08003ffd
 8003f6c:	08003ffd 	.word	0x08003ffd
 8003f70:	08003ffd 	.word	0x08003ffd
 8003f74:	08003feb 	.word	0x08003feb
 8003f78:	08003ffd 	.word	0x08003ffd
 8003f7c:	08003ffd 	.word	0x08003ffd
 8003f80:	08003ffd 	.word	0x08003ffd
 8003f84:	08003ffd 	.word	0x08003ffd
 8003f88:	08003ffd 	.word	0x08003ffd
 8003f8c:	08003ffd 	.word	0x08003ffd
 8003f90:	08003ffd 	.word	0x08003ffd
 8003f94:	08004003 	.word	0x08004003
 8003f98:	08003ffd 	.word	0x08003ffd
 8003f9c:	08003ffd 	.word	0x08003ffd
 8003fa0:	08003ffd 	.word	0x08003ffd
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003ffd 	.word	0x08003ffd
 8003fb0:	08003ffd 	.word	0x08003ffd
 8003fb4:	08004003 	.word	0x08004003
 8003fb8:	08003ffd 	.word	0x08003ffd
 8003fbc:	08003ffd 	.word	0x08003ffd
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003ffd 	.word	0x08003ffd
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	08003ffd 	.word	0x08003ffd
 8003fd0:	08003ffd 	.word	0x08003ffd
 8003fd4:	08004003 	.word	0x08004003
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fdf4 	bl	8004bcc <RCCEx_PLL2_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fe8:	e00c      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3324      	adds	r3, #36	; 0x24
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fe9d 	bl	8004d30 <RCCEx_PLL3_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ffa:	e003      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004016:	4921      	ldr	r1, [pc, #132]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	654b      	str	r3, [r1, #84]	; 0x54
 800401c:	e001      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03e      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004032:	2b05      	cmp	r3, #5
 8004034:	d820      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800407f 	.word	0x0800407f
 8004040:	08004055 	.word	0x08004055
 8004044:	08004067 	.word	0x08004067
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fdb6 	bl	8004bcc <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004064:	e00c      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3324      	adds	r3, #36	; 0x24
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fe5f 	bl	8004d30 <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004076:	e003      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
      break;
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800407e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d110      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	4902      	ldr	r1, [pc, #8]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	654b      	str	r3, [r1, #84]	; 0x54
 8004098:	e008      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	58024800 	.word	0x58024800
 80040a4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d039      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d820      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	0800410b 	.word	0x0800410b
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040f3 	.word	0x080040f3
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd70 	bl	8004bcc <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040f0:	e00c      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fe19 	bl	8004d30 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800410a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004112:	4bb7      	ldr	r3, [pc, #732]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	49b3      	ldr	r1, [pc, #716]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004122:	4313      	orrs	r3, r2
 8004124:	658b      	str	r3, [r1, #88]	; 0x58
 8004126:	e001      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d04b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004142:	d02e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004148:	d828      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d02a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d822      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415a:	d026      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800415c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004160:	d81c      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004166:	d010      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800416c:	d816      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01d      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004176:	d111      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd24 	bl	8004bcc <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004188:	e012      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fdcd 	bl	8004d30 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800419a:	e009      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e006      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041a2:	bf00      	nop
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b8e      	ldr	r3, [pc, #568]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c4:	498a      	ldr	r1, [pc, #552]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	654b      	str	r3, [r1, #84]	; 0x54
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e6:	d02e      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80041e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ec:	d828      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d02a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d822      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fe:	d026      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004204:	d81c      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d010      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004210:	d816      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01d      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d111      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fcd2 	bl	8004bcc <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800422c:	e012      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fd7b 	bl	8004d30 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800423e:	e009      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004268:	4961      	ldr	r1, [pc, #388]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800426a:	4313      	orrs	r3, r2
 800426c:	658b      	str	r3, [r1, #88]	; 0x58
 800426e:	e001      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d04b      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004286:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800428a:	d02e      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800428c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004290:	d828      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004296:	d02a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d822      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800429e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a2:	d026      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80042a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a8:	d81c      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ae:	d010      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b4:	d816      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042be:	d111      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fc80 	bl	8004bcc <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042d0:	e012      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fd29 	bl	8004d30 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
      break;
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042fe:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430c:	4938      	ldr	r1, [pc, #224]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800430e:	4313      	orrs	r3, r2
 8004310:	658b      	str	r3, [r1, #88]	; 0x58
 8004312:	e001      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d10a      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fcfa 	bl	8004d30 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004354:	4926      	ldr	r1, [pc, #152]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004356:	4313      	orrs	r3, r2
 8004358:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004370:	d10a      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3324      	adds	r3, #36	; 0x24
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fcd9 	bl	8004d30 <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004396:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004398:	4313      	orrs	r3, r2
 800439a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d036      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b2:	d01f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b8:	d817      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80043be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c2:	d009      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80043c4:	e011      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fbfd 	bl	8004bcc <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d6:	e00e      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3324      	adds	r3, #36	; 0x24
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fca6 	bl	8004d30 <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043e8:	e005      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80043f0:	58024400 	.word	0x58024400
      break;
 80043f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043fc:	4b93      	ldr	r3, [pc, #588]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800440a:	4990      	ldr	r1, [pc, #576]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	658b      	str	r3, [r1, #88]	; 0x58
 8004410:	e001      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d033      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800442c:	d01c      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800442e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004432:	d816      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004438:	d003      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800443a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800443e:	d007      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004440:	e00f      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004442:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	4a81      	ldr	r2, [pc, #516]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800444e:	e00c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	2101      	movs	r1, #1
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc6a 	bl	8004d30 <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
      break;
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004470:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	4973      	ldr	r1, [pc, #460]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	654b      	str	r3, [r1, #84]	; 0x54
 8004484:	e001      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d029      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d007      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80044a4:	e00f      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a6:	4b69      	ldr	r3, [pc, #420]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a68      	ldr	r2, [pc, #416]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044b2:	e00b      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb86 	bl	8004bcc <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044c4:	e002      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044d2:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	495b      	ldr	r1, [pc, #364]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044e4:	e001      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3324      	adds	r3, #36	; 0x24
 80044fa:	2102      	movs	r1, #2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fc17 	bl	8004d30 <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d030      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004520:	d017      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d811      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d013      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d80b      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800454a:	e007      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e004      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	4937      	ldr	r1, [pc, #220]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	654b      	str	r3, [r1, #84]	; 0x54
 8004574:	e001      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004586:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	492e      	ldr	r1, [pc, #184]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045b2:	4926      	ldr	r1, [pc, #152]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	491e      	ldr	r1, [pc, #120]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ec:	6113      	str	r3, [r2, #16]
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045f8:	4914      	ldr	r1, [pc, #80]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	da08      	bge.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	490e      	ldr	r1, [pc, #56]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	4906      	ldr	r1, [pc, #24]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004638:	7dbb      	ldrb	r3, [r7, #22]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400

08004650 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004654:	f7ff f860 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	58024400 	.word	0x58024400
 8004678:	08007ae0 	.word	0x08007ae0

0800467c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004684:	4ba1      	ldr	r3, [pc, #644]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800468e:	4b9f      	ldr	r3, [pc, #636]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	0b1b      	lsrs	r3, r3, #12
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800469a:	4b9c      	ldr	r3, [pc, #624]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046a6:	4b99      	ldr	r3, [pc, #612]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8111 	beq.w	80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f000 8083 	beq.w	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f200 80a1 	bhi.w	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d056      	beq.n	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046e6:	e099      	b.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e8:	4b88      	ldr	r3, [pc, #544]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d02d      	beq.n	8004750 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f4:	4b85      	ldr	r3, [pc, #532]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	4a84      	ldr	r2, [pc, #528]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b7b      	ldr	r3, [pc, #492]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004732:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800474e:	e087      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004792:	e065      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b59      	ldr	r3, [pc, #356]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d6:	e043      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481a:	e021      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487a:	edd7 6a07 	vldr	s13, [r7, #28]
 800487e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004886:	ee17 2a90 	vmov	r2, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	3724      	adds	r7, #36	; 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	03d09000 	.word	0x03d09000
 8004914:	46000000 	.word	0x46000000
 8004918:	4c742400 	.word	0x4c742400
 800491c:	4a742400 	.word	0x4a742400
 8004920:	4af42400 	.word	0x4af42400

08004924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800492c:	4ba1      	ldr	r3, [pc, #644]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004936:	4b9f      	ldr	r3, [pc, #636]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	0d1b      	lsrs	r3, r3, #20
 800493c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004940:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004942:	4b9c      	ldr	r3, [pc, #624]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800494e:	4b99      	ldr	r3, [pc, #612]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	08db      	lsrs	r3, r3, #3
 8004954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8111 	beq.w	8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	f000 8083 	beq.w	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b02      	cmp	r3, #2
 800497e:	f200 80a1 	bhi.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d056      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800498e:	e099      	b.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004990:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02d      	beq.n	80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800499c:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	4a84      	ldr	r2, [pc, #528]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049da:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049f6:	e087      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3a:	e065      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a7e:	e043      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac2:	e021      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	0a5b      	lsrs	r3, r3, #9
 8004b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 2a90 	vmov	r2, s15
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5c:	ee17 2a90 	vmov	r2, s15
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b64:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8a:	ee17 2a90 	vmov	r2, s15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b92:	e008      	b.n	8004ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	3724      	adds	r7, #36	; 0x24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	03d09000 	.word	0x03d09000
 8004bbc:	46000000 	.word	0x46000000
 8004bc0:	4c742400 	.word	0x4c742400
 8004bc4:	4a742400 	.word	0x4a742400
 8004bc8:	4af42400 	.word	0x4af42400

08004bcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bda:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d101      	bne.n	8004bea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e099      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bea:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4e      	ldr	r2, [pc, #312]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fc fd7d 	bl	80016f4 <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bfe:	f7fc fd79 	bl	80016f4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e086      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c10:	4b45      	ldr	r3, [pc, #276]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c1c:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	493f      	ldr	r1, [pc, #252]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	025b      	lsls	r3, r3, #9
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c60:	4931      	ldr	r1, [pc, #196]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c66:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	492d      	ldr	r1, [pc, #180]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f023 0220 	bic.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	4928      	ldr	r1, [pc, #160]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c8a:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4a26      	ldr	r2, [pc, #152]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <RCCEx_PLL2_Config+0x160>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	69d2      	ldr	r2, [r2, #28]
 8004ca2:	00d2      	lsls	r2, r2, #3
 8004ca4:	4920      	ldr	r1, [pc, #128]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004caa:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	f043 0310 	orr.w	r3, r3, #16
 8004cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cc8:	e00f      	b.n	8004cea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d106      	bne.n	8004cde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cdc:	e005      	b.n	8004cea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fcfd 	bl	80016f4 <HAL_GetTick>
 8004cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cfc:	e008      	b.n	8004d10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cfe:	f7fc fcf9 	bl	80016f4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	ffff0007 	.word	0xffff0007

08004d30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d101      	bne.n	8004d4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e099      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4e      	ldr	r2, [pc, #312]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc fccb 	bl	80016f4 <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d62:	f7fc fcc7 	bl	80016f4 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e086      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	493f      	ldr	r1, [pc, #252]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	628b      	str	r3, [r1, #40]	; 0x28
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dc4:	4931      	ldr	r1, [pc, #196]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	492d      	ldr	r1, [pc, #180]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4928      	ldr	r1, [pc, #160]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <RCCEx_PLL3_Config+0x160>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	69d2      	ldr	r2, [r2, #28]
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e20:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e2c:	e00f      	b.n	8004e4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e40:	e005      	b.n	8004e4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5a:	f7fc fc4b 	bl	80016f4 <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e60:	e008      	b.n	8004e74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e62:	f7fc fc47 	bl	80016f4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e006      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	ffff0007 	.word	0xffff0007

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e049      	b.n	8004f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f90e 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fd30 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e049      	b.n	8004fe8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f841 	bl	8004ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 fcd9 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start_IT+0x24>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e03c      	b.n	80050a2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d109      	bne.n	8005042 <HAL_TIM_PWM_Start_IT+0x3e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	bf14      	ite	ne
 800503a:	2301      	movne	r3, #1
 800503c:	2300      	moveq	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	e02f      	b.n	80050a2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d109      	bne.n	800505c <HAL_TIM_PWM_Start_IT+0x58>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e022      	b.n	80050a2 <HAL_TIM_PWM_Start_IT+0x9e>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d109      	bne.n	8005076 <HAL_TIM_PWM_Start_IT+0x72>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	bf14      	ite	ne
 800506e:	2301      	movne	r3, #1
 8005070:	2300      	moveq	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	e015      	b.n	80050a2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b10      	cmp	r3, #16
 800507a:	d109      	bne.n	8005090 <HAL_TIM_PWM_Start_IT+0x8c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e008      	b.n	80050a2 <HAL_TIM_PWM_Start_IT+0x9e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0e2      	b.n	8005270 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start_IT+0xb6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	e023      	b.n	8005102 <HAL_TIM_PWM_Start_IT+0xfe>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start_IT+0xc6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	e01b      	b.n	8005102 <HAL_TIM_PWM_Start_IT+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start_IT+0xd6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	e013      	b.n	8005102 <HAL_TIM_PWM_Start_IT+0xfe>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start_IT+0xe6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_PWM_Start_IT+0xfe>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start_IT+0xf6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	e003      	b.n	8005102 <HAL_TIM_PWM_Start_IT+0xfe>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d841      	bhi.n	800518c <HAL_TIM_PWM_Start_IT+0x188>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <HAL_TIM_PWM_Start_IT+0x10c>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005145 	.word	0x08005145
 8005114:	0800518d 	.word	0x0800518d
 8005118:	0800518d 	.word	0x0800518d
 800511c:	0800518d 	.word	0x0800518d
 8005120:	08005157 	.word	0x08005157
 8005124:	0800518d 	.word	0x0800518d
 8005128:	0800518d 	.word	0x0800518d
 800512c:	0800518d 	.word	0x0800518d
 8005130:	08005169 	.word	0x08005169
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800518d 	.word	0x0800518d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	0800517b 	.word	0x0800517b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0202 	orr.w	r2, r2, #2
 8005152:	60da      	str	r2, [r3, #12]
      break;
 8005154:	e01b      	b.n	800518e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0204 	orr.w	r2, r2, #4
 8005164:	60da      	str	r2, [r3, #12]
      break;
 8005166:	e012      	b.n	800518e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	60da      	str	r2, [r3, #12]
      break;
 8005178:	e009      	b.n	800518e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0210 	orr.w	r2, r2, #16
 8005188:	60da      	str	r2, [r3, #12]
      break;
 800518a:	e000      	b.n	800518e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800518c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ffd4 	bl	8006144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a35      	ldr	r2, [pc, #212]	; (8005278 <HAL_TIM_PWM_Start_IT+0x274>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_TIM_PWM_Start_IT+0x1ca>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a34      	ldr	r2, [pc, #208]	; (800527c <HAL_TIM_PWM_Start_IT+0x278>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_TIM_PWM_Start_IT+0x1ca>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a32      	ldr	r2, [pc, #200]	; (8005280 <HAL_TIM_PWM_Start_IT+0x27c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_TIM_PWM_Start_IT+0x1ca>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a31      	ldr	r2, [pc, #196]	; (8005284 <HAL_TIM_PWM_Start_IT+0x280>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_TIM_PWM_Start_IT+0x1ca>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2f      	ldr	r2, [pc, #188]	; (8005288 <HAL_TIM_PWM_Start_IT+0x284>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_PWM_Start_IT+0x1ce>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_TIM_PWM_Start_IT+0x274>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01d      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d018      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <HAL_TIM_PWM_Start_IT+0x288>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIM_PWM_Start_IT+0x28c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_TIM_PWM_Start_IT+0x290>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a17      	ldr	r2, [pc, #92]	; (800527c <HAL_TIM_PWM_Start_IT+0x278>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIM_PWM_Start_IT+0x22a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIM_PWM_Start_IT+0x294>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d115      	bne.n	800525a <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_TIM_PWM_Start_IT+0x298>)
 8005236:	4013      	ands	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d015      	beq.n	800526c <HAL_TIM_PWM_Start_IT+0x268>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005246:	d011      	beq.n	800526c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	e008      	b.n	800526c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e000      	b.n	800526e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010000 	.word	0x40010000
 800527c:	40010400 	.word	0x40010400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40001800 	.word	0x40001800
 800529c:	00010007 	.word	0x00010007

080052a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0202 	mvn.w	r2, #2
 80052cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fb14 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb06 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb fdaf 	bl	8000e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0204 	mvn.w	r2, #4
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 faea 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fadc 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fb fd85 	bl	8000e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b08      	cmp	r3, #8
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b08      	cmp	r3, #8
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0208 	mvn.w	r2, #8
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fac0 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fab2 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fb fd5b 	bl	8000e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0210 	mvn.w	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2208      	movs	r2, #8
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa96 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa88 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fb fd31 	bl	8000e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10e      	bne.n	8005424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d107      	bne.n	8005424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0201 	mvn.w	r2, #1
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa62 	bl	80058e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d10e      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d107      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff32 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d10e      	bne.n	800547e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d107      	bne.n	800547e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ff25 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d10e      	bne.n	80054aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d107      	bne.n	80054aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa3d 	bl	8005924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d10e      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0220 	mvn.w	r2, #32
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fee5 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0fd      	b.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b14      	cmp	r3, #20
 8005506:	f200 80f0 	bhi.w	80056ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005565 	.word	0x08005565
 8005514:	080056eb 	.word	0x080056eb
 8005518:	080056eb 	.word	0x080056eb
 800551c:	080056eb 	.word	0x080056eb
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080056eb 	.word	0x080056eb
 8005528:	080056eb 	.word	0x080056eb
 800552c:	080056eb 	.word	0x080056eb
 8005530:	080055e7 	.word	0x080055e7
 8005534:	080056eb 	.word	0x080056eb
 8005538:	080056eb 	.word	0x080056eb
 800553c:	080056eb 	.word	0x080056eb
 8005540:	08005627 	.word	0x08005627
 8005544:	080056eb 	.word	0x080056eb
 8005548:	080056eb 	.word	0x080056eb
 800554c:	080056eb 	.word	0x080056eb
 8005550:	08005669 	.word	0x08005669
 8005554:	080056eb 	.word	0x080056eb
 8005558:	080056eb 	.word	0x080056eb
 800555c:	080056eb 	.word	0x080056eb
 8005560:	080056a9 	.word	0x080056a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa7e 	bl	8005a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
      break;
 80055a2:	e0a3      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 faee 	bl	8005b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	619a      	str	r2, [r3, #24]
      break;
 80055e4:	e082      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fb57 	bl	8005ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0204 	bic.w	r2, r2, #4
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
      break;
 8005624:	e062      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fbbd 	bl	8005dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	021a      	lsls	r2, r3, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]
      break;
 8005666:	e041      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fc04 	bl	8005e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056a6:	e021      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fc46 	bl	8005f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056e8:	e000      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80056ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIM_ConfigClockSource+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e0db      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4b69      	ldr	r3, [pc, #420]	; (80058d8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a63      	ldr	r2, [pc, #396]	; (80058dc <HAL_TIM_ConfigClockSource+0x1dc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	f000 80a9 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005754:	4a61      	ldr	r2, [pc, #388]	; (80058dc <HAL_TIM_ConfigClockSource+0x1dc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f200 80ae 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 800575c:	4a60      	ldr	r2, [pc, #384]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f000 80a1 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005764:	4a5e      	ldr	r2, [pc, #376]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	f200 80a6 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 800576c:	4a5d      	ldr	r2, [pc, #372]	; (80058e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f000 8099 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005774:	4a5b      	ldr	r2, [pc, #364]	; (80058e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f200 809e 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 800577c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005780:	f000 8091 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005784:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005788:	f200 8096 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 800578c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005790:	f000 8089 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 8005794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005798:	f200 808e 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a0:	d03e      	beq.n	8005820 <HAL_TIM_ConfigClockSource+0x120>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	f200 8087 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	f000 8085 	beq.w	80058bc <HAL_TIM_ConfigClockSource+0x1bc>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d87f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d01a      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0xf2>
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d87b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d050      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x166>
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d877      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057c8:	2b50      	cmp	r3, #80	; 0x50
 80057ca:	d03c      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x146>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d873      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d058      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x186>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d86f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d064      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d86b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d060      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d867      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d05c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d05a      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057f0:	e062      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6899      	ldr	r1, [r3, #8]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f000 fc7f 	bl	8006104 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005814:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	609a      	str	r2, [r3, #8]
      break;
 800581e:	e04e      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6899      	ldr	r1, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f000 fc68 	bl	8006104 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005842:	609a      	str	r2, [r3, #8]
      break;
 8005844:	e03b      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fbd8 	bl	8006008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2150      	movs	r1, #80	; 0x50
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc32 	bl	80060c8 <TIM_ITRx_SetConfig>
      break;
 8005864:	e02b      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fbf7 	bl	8006066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2160      	movs	r1, #96	; 0x60
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fc22 	bl	80060c8 <TIM_ITRx_SetConfig>
      break;
 8005884:	e01b      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fbb8 	bl	8006008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2140      	movs	r1, #64	; 0x40
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fc12 	bl	80060c8 <TIM_ITRx_SetConfig>
      break;
 80058a4:	e00b      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f000 fc09 	bl	80060c8 <TIM_ITRx_SetConfig>
        break;
 80058b6:	e002      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80058bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	ffceff88 	.word	0xffceff88
 80058dc:	00100040 	.word	0x00100040
 80058e0:	00100030 	.word	0x00100030
 80058e4:	00100020 	.word	0x00100020

080058e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a40      	ldr	r2, [pc, #256]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005998:	d01b      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d017      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <TIM_Base_SetConfig+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <TIM_Base_SetConfig+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0x9a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a11      	ldr	r2, [pc, #68]	; (8005a60 <TIM_Base_SetConfig+0x128>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <TIM_Base_SetConfig+0x12c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <TIM_Base_SetConfig+0x130>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <TIM_OC1_SetConfig+0x108>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0302 	bic.w	r3, r3, #2
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2d      	ldr	r2, [pc, #180]	; (8005b78 <TIM_OC1_SetConfig+0x10c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_OC1_SetConfig+0x7c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <TIM_OC1_SetConfig+0x110>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_OC1_SetConfig+0x7c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_OC1_SetConfig+0x114>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_OC1_SetConfig+0x7c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_OC1_SetConfig+0x118>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC1_SetConfig+0x7c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10c      	bne.n	8005b02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0308 	bic.w	r3, r3, #8
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1c      	ldr	r2, [pc, #112]	; (8005b78 <TIM_OC1_SetConfig+0x10c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_OC1_SetConfig+0xbe>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <TIM_OC1_SetConfig+0x110>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_OC1_SetConfig+0xbe>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <TIM_OC1_SetConfig+0x114>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_OC1_SetConfig+0xbe>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC1_SetConfig+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC1_SetConfig+0xbe>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d111      	bne.n	8005b4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	fffeff8f 	.word	0xfffeff8f
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0210 	bic.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4b34      	ldr	r3, [pc, #208]	; (8005c88 <TIM_OC2_SetConfig+0xfc>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0320 	bic.w	r3, r3, #32
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <TIM_OC2_SetConfig+0x100>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0x68>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a28      	ldr	r2, [pc, #160]	; (8005c90 <TIM_OC2_SetConfig+0x104>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10d      	bne.n	8005c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <TIM_OC2_SetConfig+0x100>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_OC2_SetConfig+0xac>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <TIM_OC2_SetConfig+0x104>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC2_SetConfig+0xac>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <TIM_OC2_SetConfig+0x108>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC2_SetConfig+0xac>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <TIM_OC2_SetConfig+0x10c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC2_SetConfig+0xac>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <TIM_OC2_SetConfig+0x110>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d113      	bne.n	8005c60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	feff8fff 	.word	0xfeff8fff
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <TIM_OC3_SetConfig+0xf8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC3_SetConfig+0x66>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <TIM_OC3_SetConfig+0xfc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10d      	bne.n	8005d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <TIM_OC3_SetConfig+0xf8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_OC3_SetConfig+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <TIM_OC3_SetConfig+0xfc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_OC3_SetConfig+0xaa>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <TIM_OC3_SetConfig+0x100>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_OC3_SetConfig+0xaa>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <TIM_OC3_SetConfig+0x104>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0xaa>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <TIM_OC3_SetConfig+0x108>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d113      	bne.n	8005d72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800

08005dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	031b      	lsls	r3, r3, #12
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <TIM_OC4_SetConfig+0xbc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC4_SetConfig+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <TIM_OC4_SetConfig+0xc0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC4_SetConfig+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC4_SetConfig+0xc4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC4_SetConfig+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC4_SetConfig+0xc8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC4_SetConfig+0x80>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC4_SetConfig+0xcc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d109      	bne.n	8005e40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	019b      	lsls	r3, r3, #6
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40014400 	.word	0x40014400
 8005e78:	40014800 	.word	0x40014800

08005e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC5_SetConfig+0xb0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x76>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <TIM_OC5_SetConfig+0xb4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x76>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <TIM_OC5_SetConfig+0xb8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x76>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <TIM_OC5_SetConfig+0xbc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x76>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <TIM_OC5_SetConfig+0xc0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d109      	bne.n	8005f06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <TIM_OC6_SetConfig+0xb4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00f      	beq.n	8005fb8 <TIM_OC6_SetConfig+0x78>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <TIM_OC6_SetConfig+0xb8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_OC6_SetConfig+0x78>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <TIM_OC6_SetConfig+0xbc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_OC6_SetConfig+0x78>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <TIM_OC6_SetConfig+0xc0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC6_SetConfig+0x78>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a14      	ldr	r2, [pc, #80]	; (8006004 <TIM_OC6_SetConfig+0xc4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d109      	bne.n	8005fcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	029b      	lsls	r3, r3, #10
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40010400 	.word	0x40010400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0201 	bic.w	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f023 030a 	bic.w	r3, r3, #10
 8006044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0210 	bic.w	r2, r3, #16
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <TIM_ITRx_SetConfig+0x38>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f043 0307 	orr.w	r3, r3, #7
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	609a      	str	r2, [r3, #8]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	ffcfff8f 	.word	0xffcfff8f

08006104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	431a      	orrs	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2201      	movs	r2, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	43db      	mvns	r3, r3
 8006166:	401a      	ands	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e068      	b.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2e      	ldr	r2, [pc, #184]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2d      	ldr	r2, [pc, #180]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d108      	bne.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d018      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a18      	ldr	r2, [pc, #96]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10c      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4313      	orrs	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40001800 	.word	0x40001800

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fa ff4f 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	; 0x24
 800630a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f82c 	bl	800637c <UART_SetConfig>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e022      	b.n	8006374 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fd80 	bl	8006e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fe07 	bl	8006f80 <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	b5b0      	push	{r4, r5, r7, lr}
 800637e:	b08e      	sub	sp, #56	; 0x38
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4bbf      	ldr	r3, [pc, #764]	; (80066a8 <UART_SetConfig+0x32c>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063b2:	430b      	orrs	r3, r1
 80063b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4ab5      	ldr	r2, [pc, #724]	; (80066ac <UART_SetConfig+0x330>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e2:	4313      	orrs	r3, r2
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	4bb0      	ldr	r3, [pc, #704]	; (80066b0 <UART_SetConfig+0x334>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063f6:	430b      	orrs	r3, r1
 80063f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f023 010f 	bic.w	r1, r3, #15
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4aa7      	ldr	r2, [pc, #668]	; (80066b4 <UART_SetConfig+0x338>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d176      	bne.n	8006508 <UART_SetConfig+0x18c>
 800641a:	4ba7      	ldr	r3, [pc, #668]	; (80066b8 <UART_SetConfig+0x33c>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006422:	2b28      	cmp	r3, #40	; 0x28
 8006424:	d86c      	bhi.n	8006500 <UART_SetConfig+0x184>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0xb0>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	080064d1 	.word	0x080064d1
 8006430:	08006501 	.word	0x08006501
 8006434:	08006501 	.word	0x08006501
 8006438:	08006501 	.word	0x08006501
 800643c:	08006501 	.word	0x08006501
 8006440:	08006501 	.word	0x08006501
 8006444:	08006501 	.word	0x08006501
 8006448:	08006501 	.word	0x08006501
 800644c:	080064d9 	.word	0x080064d9
 8006450:	08006501 	.word	0x08006501
 8006454:	08006501 	.word	0x08006501
 8006458:	08006501 	.word	0x08006501
 800645c:	08006501 	.word	0x08006501
 8006460:	08006501 	.word	0x08006501
 8006464:	08006501 	.word	0x08006501
 8006468:	08006501 	.word	0x08006501
 800646c:	080064e1 	.word	0x080064e1
 8006470:	08006501 	.word	0x08006501
 8006474:	08006501 	.word	0x08006501
 8006478:	08006501 	.word	0x08006501
 800647c:	08006501 	.word	0x08006501
 8006480:	08006501 	.word	0x08006501
 8006484:	08006501 	.word	0x08006501
 8006488:	08006501 	.word	0x08006501
 800648c:	080064e9 	.word	0x080064e9
 8006490:	08006501 	.word	0x08006501
 8006494:	08006501 	.word	0x08006501
 8006498:	08006501 	.word	0x08006501
 800649c:	08006501 	.word	0x08006501
 80064a0:	08006501 	.word	0x08006501
 80064a4:	08006501 	.word	0x08006501
 80064a8:	08006501 	.word	0x08006501
 80064ac:	080064f1 	.word	0x080064f1
 80064b0:	08006501 	.word	0x08006501
 80064b4:	08006501 	.word	0x08006501
 80064b8:	08006501 	.word	0x08006501
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d6:	e222      	b.n	800691e <UART_SetConfig+0x5a2>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e21e      	b.n	800691e <UART_SetConfig+0x5a2>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e6:	e21a      	b.n	800691e <UART_SetConfig+0x5a2>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ee:	e216      	b.n	800691e <UART_SetConfig+0x5a2>
 80064f0:	2320      	movs	r3, #32
 80064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f6:	e212      	b.n	800691e <UART_SetConfig+0x5a2>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fe:	e20e      	b.n	800691e <UART_SetConfig+0x5a2>
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006506:	e20a      	b.n	800691e <UART_SetConfig+0x5a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a6b      	ldr	r2, [pc, #428]	; (80066bc <UART_SetConfig+0x340>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d130      	bne.n	8006574 <UART_SetConfig+0x1f8>
 8006512:	4b69      	ldr	r3, [pc, #420]	; (80066b8 <UART_SetConfig+0x33c>)
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b05      	cmp	r3, #5
 800651c:	d826      	bhi.n	800656c <UART_SetConfig+0x1f0>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x1a8>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	0800653d 	.word	0x0800653d
 8006528:	08006545 	.word	0x08006545
 800652c:	0800654d 	.word	0x0800654d
 8006530:	08006555 	.word	0x08006555
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006565 	.word	0x08006565
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e1ec      	b.n	800691e <UART_SetConfig+0x5a2>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e1e8      	b.n	800691e <UART_SetConfig+0x5a2>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006552:	e1e4      	b.n	800691e <UART_SetConfig+0x5a2>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655a:	e1e0      	b.n	800691e <UART_SetConfig+0x5a2>
 800655c:	2320      	movs	r3, #32
 800655e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006562:	e1dc      	b.n	800691e <UART_SetConfig+0x5a2>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656a:	e1d8      	b.n	800691e <UART_SetConfig+0x5a2>
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006572:	e1d4      	b.n	800691e <UART_SetConfig+0x5a2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a51      	ldr	r2, [pc, #324]	; (80066c0 <UART_SetConfig+0x344>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d130      	bne.n	80065e0 <UART_SetConfig+0x264>
 800657e:	4b4e      	ldr	r3, [pc, #312]	; (80066b8 <UART_SetConfig+0x33c>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b05      	cmp	r3, #5
 8006588:	d826      	bhi.n	80065d8 <UART_SetConfig+0x25c>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x214>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065b9 	.word	0x080065b9
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e1b6      	b.n	800691e <UART_SetConfig+0x5a2>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e1b2      	b.n	800691e <UART_SetConfig+0x5a2>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e1ae      	b.n	800691e <UART_SetConfig+0x5a2>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e1aa      	b.n	800691e <UART_SetConfig+0x5a2>
 80065c8:	2320      	movs	r3, #32
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e1a6      	b.n	800691e <UART_SetConfig+0x5a2>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e1a2      	b.n	800691e <UART_SetConfig+0x5a2>
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e19e      	b.n	800691e <UART_SetConfig+0x5a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a37      	ldr	r2, [pc, #220]	; (80066c4 <UART_SetConfig+0x348>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d130      	bne.n	800664c <UART_SetConfig+0x2d0>
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <UART_SetConfig+0x33c>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d826      	bhi.n	8006644 <UART_SetConfig+0x2c8>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x280>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006625 	.word	0x08006625
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	0800663d 	.word	0x0800663d
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e180      	b.n	800691e <UART_SetConfig+0x5a2>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e17c      	b.n	800691e <UART_SetConfig+0x5a2>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e178      	b.n	800691e <UART_SetConfig+0x5a2>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e174      	b.n	800691e <UART_SetConfig+0x5a2>
 8006634:	2320      	movs	r3, #32
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663a:	e170      	b.n	800691e <UART_SetConfig+0x5a2>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006642:	e16c      	b.n	800691e <UART_SetConfig+0x5a2>
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664a:	e168      	b.n	800691e <UART_SetConfig+0x5a2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <UART_SetConfig+0x34c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d142      	bne.n	80066dc <UART_SetConfig+0x360>
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <UART_SetConfig+0x33c>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	2b05      	cmp	r3, #5
 8006660:	d838      	bhi.n	80066d4 <UART_SetConfig+0x358>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x2ec>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006681 	.word	0x08006681
 800666c:	08006689 	.word	0x08006689
 8006670:	08006691 	.word	0x08006691
 8006674:	08006699 	.word	0x08006699
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066cd 	.word	0x080066cd
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e14a      	b.n	800691e <UART_SetConfig+0x5a2>
 8006688:	2304      	movs	r3, #4
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e146      	b.n	800691e <UART_SetConfig+0x5a2>
 8006690:	2308      	movs	r3, #8
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e142      	b.n	800691e <UART_SetConfig+0x5a2>
 8006698:	2310      	movs	r3, #16
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e13e      	b.n	800691e <UART_SetConfig+0x5a2>
 80066a0:	2320      	movs	r3, #32
 80066a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a6:	e13a      	b.n	800691e <UART_SetConfig+0x5a2>
 80066a8:	cfff69f3 	.word	0xcfff69f3
 80066ac:	58000c00 	.word	0x58000c00
 80066b0:	11fff4ff 	.word	0x11fff4ff
 80066b4:	40011000 	.word	0x40011000
 80066b8:	58024400 	.word	0x58024400
 80066bc:	40004400 	.word	0x40004400
 80066c0:	40004800 	.word	0x40004800
 80066c4:	40004c00 	.word	0x40004c00
 80066c8:	40005000 	.word	0x40005000
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e124      	b.n	800691e <UART_SetConfig+0x5a2>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e120      	b.n	800691e <UART_SetConfig+0x5a2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4acc      	ldr	r2, [pc, #816]	; (8006a14 <UART_SetConfig+0x698>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d176      	bne.n	80067d4 <UART_SetConfig+0x458>
 80066e6:	4bcc      	ldr	r3, [pc, #816]	; (8006a18 <UART_SetConfig+0x69c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ee:	2b28      	cmp	r3, #40	; 0x28
 80066f0:	d86c      	bhi.n	80067cc <UART_SetConfig+0x450>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x37c>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	0800679d 	.word	0x0800679d
 80066fc:	080067cd 	.word	0x080067cd
 8006700:	080067cd 	.word	0x080067cd
 8006704:	080067cd 	.word	0x080067cd
 8006708:	080067cd 	.word	0x080067cd
 800670c:	080067cd 	.word	0x080067cd
 8006710:	080067cd 	.word	0x080067cd
 8006714:	080067cd 	.word	0x080067cd
 8006718:	080067a5 	.word	0x080067a5
 800671c:	080067cd 	.word	0x080067cd
 8006720:	080067cd 	.word	0x080067cd
 8006724:	080067cd 	.word	0x080067cd
 8006728:	080067cd 	.word	0x080067cd
 800672c:	080067cd 	.word	0x080067cd
 8006730:	080067cd 	.word	0x080067cd
 8006734:	080067cd 	.word	0x080067cd
 8006738:	080067ad 	.word	0x080067ad
 800673c:	080067cd 	.word	0x080067cd
 8006740:	080067cd 	.word	0x080067cd
 8006744:	080067cd 	.word	0x080067cd
 8006748:	080067cd 	.word	0x080067cd
 800674c:	080067cd 	.word	0x080067cd
 8006750:	080067cd 	.word	0x080067cd
 8006754:	080067cd 	.word	0x080067cd
 8006758:	080067b5 	.word	0x080067b5
 800675c:	080067cd 	.word	0x080067cd
 8006760:	080067cd 	.word	0x080067cd
 8006764:	080067cd 	.word	0x080067cd
 8006768:	080067cd 	.word	0x080067cd
 800676c:	080067cd 	.word	0x080067cd
 8006770:	080067cd 	.word	0x080067cd
 8006774:	080067cd 	.word	0x080067cd
 8006778:	080067bd 	.word	0x080067bd
 800677c:	080067cd 	.word	0x080067cd
 8006780:	080067cd 	.word	0x080067cd
 8006784:	080067cd 	.word	0x080067cd
 8006788:	080067cd 	.word	0x080067cd
 800678c:	080067cd 	.word	0x080067cd
 8006790:	080067cd 	.word	0x080067cd
 8006794:	080067cd 	.word	0x080067cd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e0bc      	b.n	800691e <UART_SetConfig+0x5a2>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e0b8      	b.n	800691e <UART_SetConfig+0x5a2>
 80067ac:	2308      	movs	r3, #8
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e0b4      	b.n	800691e <UART_SetConfig+0x5a2>
 80067b4:	2310      	movs	r3, #16
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e0b0      	b.n	800691e <UART_SetConfig+0x5a2>
 80067bc:	2320      	movs	r3, #32
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e0ac      	b.n	800691e <UART_SetConfig+0x5a2>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e0a8      	b.n	800691e <UART_SetConfig+0x5a2>
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e0a4      	b.n	800691e <UART_SetConfig+0x5a2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a90      	ldr	r2, [pc, #576]	; (8006a1c <UART_SetConfig+0x6a0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d130      	bne.n	8006840 <UART_SetConfig+0x4c4>
 80067de:	4b8e      	ldr	r3, [pc, #568]	; (8006a18 <UART_SetConfig+0x69c>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d826      	bhi.n	8006838 <UART_SetConfig+0x4bc>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x474>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e086      	b.n	800691e <UART_SetConfig+0x5a2>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e082      	b.n	800691e <UART_SetConfig+0x5a2>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681e:	e07e      	b.n	800691e <UART_SetConfig+0x5a2>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e07a      	b.n	800691e <UART_SetConfig+0x5a2>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682e:	e076      	b.n	800691e <UART_SetConfig+0x5a2>
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e072      	b.n	800691e <UART_SetConfig+0x5a2>
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e06e      	b.n	800691e <UART_SetConfig+0x5a2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a76      	ldr	r2, [pc, #472]	; (8006a20 <UART_SetConfig+0x6a4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d130      	bne.n	80068ac <UART_SetConfig+0x530>
 800684a:	4b73      	ldr	r3, [pc, #460]	; (8006a18 <UART_SetConfig+0x69c>)
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b05      	cmp	r3, #5
 8006854:	d826      	bhi.n	80068a4 <UART_SetConfig+0x528>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x4e0>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006875 	.word	0x08006875
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006885 	.word	0x08006885
 8006868:	0800688d 	.word	0x0800688d
 800686c:	08006895 	.word	0x08006895
 8006870:	0800689d 	.word	0x0800689d
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e050      	b.n	800691e <UART_SetConfig+0x5a2>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e04c      	b.n	800691e <UART_SetConfig+0x5a2>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688a:	e048      	b.n	800691e <UART_SetConfig+0x5a2>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	e044      	b.n	800691e <UART_SetConfig+0x5a2>
 8006894:	2320      	movs	r3, #32
 8006896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689a:	e040      	b.n	800691e <UART_SetConfig+0x5a2>
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e03c      	b.n	800691e <UART_SetConfig+0x5a2>
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e038      	b.n	800691e <UART_SetConfig+0x5a2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a5c      	ldr	r2, [pc, #368]	; (8006a24 <UART_SetConfig+0x6a8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d130      	bne.n	8006918 <UART_SetConfig+0x59c>
 80068b6:	4b58      	ldr	r3, [pc, #352]	; (8006a18 <UART_SetConfig+0x69c>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d826      	bhi.n	8006910 <UART_SetConfig+0x594>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x54c>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	080068e9 	.word	0x080068e9
 80068d0:	080068f1 	.word	0x080068f1
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006909 	.word	0x08006909
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e01a      	b.n	800691e <UART_SetConfig+0x5a2>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e016      	b.n	800691e <UART_SetConfig+0x5a2>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e012      	b.n	800691e <UART_SetConfig+0x5a2>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e00e      	b.n	800691e <UART_SetConfig+0x5a2>
 8006900:	2320      	movs	r3, #32
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e00a      	b.n	800691e <UART_SetConfig+0x5a2>
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e006      	b.n	800691e <UART_SetConfig+0x5a2>
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e002      	b.n	800691e <UART_SetConfig+0x5a2>
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <UART_SetConfig+0x6a8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	f040 80ef 	bne.w	8006b08 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800692a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800692e:	2b20      	cmp	r3, #32
 8006930:	dc46      	bgt.n	80069c0 <UART_SetConfig+0x644>
 8006932:	2b02      	cmp	r3, #2
 8006934:	f2c0 8081 	blt.w	8006a3a <UART_SetConfig+0x6be>
 8006938:	3b02      	subs	r3, #2
 800693a:	2b1e      	cmp	r3, #30
 800693c:	d87d      	bhi.n	8006a3a <UART_SetConfig+0x6be>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0x5c8>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	080069c7 	.word	0x080069c7
 8006948:	08006a3b 	.word	0x08006a3b
 800694c:	080069cf 	.word	0x080069cf
 8006950:	08006a3b 	.word	0x08006a3b
 8006954:	08006a3b 	.word	0x08006a3b
 8006958:	08006a3b 	.word	0x08006a3b
 800695c:	080069df 	.word	0x080069df
 8006960:	08006a3b 	.word	0x08006a3b
 8006964:	08006a3b 	.word	0x08006a3b
 8006968:	08006a3b 	.word	0x08006a3b
 800696c:	08006a3b 	.word	0x08006a3b
 8006970:	08006a3b 	.word	0x08006a3b
 8006974:	08006a3b 	.word	0x08006a3b
 8006978:	08006a3b 	.word	0x08006a3b
 800697c:	080069ef 	.word	0x080069ef
 8006980:	08006a3b 	.word	0x08006a3b
 8006984:	08006a3b 	.word	0x08006a3b
 8006988:	08006a3b 	.word	0x08006a3b
 800698c:	08006a3b 	.word	0x08006a3b
 8006990:	08006a3b 	.word	0x08006a3b
 8006994:	08006a3b 	.word	0x08006a3b
 8006998:	08006a3b 	.word	0x08006a3b
 800699c:	08006a3b 	.word	0x08006a3b
 80069a0:	08006a3b 	.word	0x08006a3b
 80069a4:	08006a3b 	.word	0x08006a3b
 80069a8:	08006a3b 	.word	0x08006a3b
 80069ac:	08006a3b 	.word	0x08006a3b
 80069b0:	08006a3b 	.word	0x08006a3b
 80069b4:	08006a3b 	.word	0x08006a3b
 80069b8:	08006a3b 	.word	0x08006a3b
 80069bc:	08006a2d 	.word	0x08006a2d
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d036      	beq.n	8006a32 <UART_SetConfig+0x6b6>
 80069c4:	e039      	b.n	8006a3a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069c6:	f7fd fe43 	bl	8004650 <HAL_RCCEx_GetD3PCLK1Freq>
 80069ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069cc:	e03b      	b.n	8006a46 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd fe52 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069dc:	e033      	b.n	8006a46 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fd ff9e 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069ec:	e02b      	b.n	8006a46 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <UART_SetConfig+0x69c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <UART_SetConfig+0x69c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <UART_SetConfig+0x6ac>)
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a0c:	e01b      	b.n	8006a46 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <UART_SetConfig+0x6ac>)
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a12:	e018      	b.n	8006a46 <UART_SetConfig+0x6ca>
 8006a14:	40011400 	.word	0x40011400
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	40007800 	.word	0x40007800
 8006a20:	40007c00 	.word	0x40007c00
 8006a24:	58000c00 	.word	0x58000c00
 8006a28:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a2c:	4bc4      	ldr	r3, [pc, #784]	; (8006d40 <UART_SetConfig+0x9c4>)
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 81da 	beq.w	8006e02 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	4abc      	ldr	r2, [pc, #752]	; (8006d44 <UART_SetConfig+0x9c8>)
 8006a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a60:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d305      	bcc.n	8006a7e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d903      	bls.n	8006a86 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a84:	e1bd      	b.n	8006e02 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f04f 0100 	mov.w	r1, #0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	4aac      	ldr	r2, [pc, #688]	; (8006d44 <UART_SetConfig+0x9c8>)
 8006a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f7f9 fc1b 	bl	80002d8 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	020b      	lsls	r3, r1, #8
 8006ab4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ab8:	0202      	lsls	r2, r0, #8
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	6849      	ldr	r1, [r1, #4]
 8006abe:	0849      	lsrs	r1, r1, #1
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	1814      	adds	r4, r2, r0
 8006ac8:	eb43 0501 	adc.w	r5, r3, r1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 fbfd 	bl	80002d8 <__aeabi_uldivmod>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aec:	d308      	bcc.n	8006b00 <UART_SetConfig+0x784>
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af4:	d204      	bcs.n	8006b00 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e180      	b.n	8006e02 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b06:	e17c      	b.n	8006e02 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b10:	f040 80bf 	bne.w	8006c92 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006b14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	dc49      	bgt.n	8006bb0 <UART_SetConfig+0x834>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db7c      	blt.n	8006c1a <UART_SetConfig+0x89e>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d87a      	bhi.n	8006c1a <UART_SetConfig+0x89e>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0x7b0>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006bb7 	.word	0x08006bb7
 8006b30:	08006bbf 	.word	0x08006bbf
 8006b34:	08006c1b 	.word	0x08006c1b
 8006b38:	08006c1b 	.word	0x08006c1b
 8006b3c:	08006bc7 	.word	0x08006bc7
 8006b40:	08006c1b 	.word	0x08006c1b
 8006b44:	08006c1b 	.word	0x08006c1b
 8006b48:	08006c1b 	.word	0x08006c1b
 8006b4c:	08006bd7 	.word	0x08006bd7
 8006b50:	08006c1b 	.word	0x08006c1b
 8006b54:	08006c1b 	.word	0x08006c1b
 8006b58:	08006c1b 	.word	0x08006c1b
 8006b5c:	08006c1b 	.word	0x08006c1b
 8006b60:	08006c1b 	.word	0x08006c1b
 8006b64:	08006c1b 	.word	0x08006c1b
 8006b68:	08006c1b 	.word	0x08006c1b
 8006b6c:	08006be7 	.word	0x08006be7
 8006b70:	08006c1b 	.word	0x08006c1b
 8006b74:	08006c1b 	.word	0x08006c1b
 8006b78:	08006c1b 	.word	0x08006c1b
 8006b7c:	08006c1b 	.word	0x08006c1b
 8006b80:	08006c1b 	.word	0x08006c1b
 8006b84:	08006c1b 	.word	0x08006c1b
 8006b88:	08006c1b 	.word	0x08006c1b
 8006b8c:	08006c1b 	.word	0x08006c1b
 8006b90:	08006c1b 	.word	0x08006c1b
 8006b94:	08006c1b 	.word	0x08006c1b
 8006b98:	08006c1b 	.word	0x08006c1b
 8006b9c:	08006c1b 	.word	0x08006c1b
 8006ba0:	08006c1b 	.word	0x08006c1b
 8006ba4:	08006c1b 	.word	0x08006c1b
 8006ba8:	08006c1b 	.word	0x08006c1b
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d02e      	beq.n	8006c12 <UART_SetConfig+0x896>
 8006bb4:	e031      	b.n	8006c1a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb6:	f7fc fddf 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8006bba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bbc:	e033      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbe:	f7fc fdf1 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8006bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bc4:	e02f      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc6:	f107 0314 	add.w	r3, r7, #20
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fd fd56 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bd4:	e027      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fd fea2 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006be4:	e01f      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be6:	4b58      	ldr	r3, [pc, #352]	; (8006d48 <UART_SetConfig+0x9cc>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bf2:	4b55      	ldr	r3, [pc, #340]	; (8006d48 <UART_SetConfig+0x9cc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	08db      	lsrs	r3, r3, #3
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	4a53      	ldr	r2, [pc, #332]	; (8006d4c <UART_SetConfig+0x9d0>)
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c04:	e00f      	b.n	8006c26 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006c06:	4b51      	ldr	r3, [pc, #324]	; (8006d4c <UART_SetConfig+0x9d0>)
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c0a:	e00c      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c0c:	4b4c      	ldr	r3, [pc, #304]	; (8006d40 <UART_SetConfig+0x9c4>)
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c10:	e009      	b.n	8006c26 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c18:	e005      	b.n	8006c26 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80ea 	beq.w	8006e02 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	4a44      	ldr	r2, [pc, #272]	; (8006d44 <UART_SetConfig+0x9c8>)
 8006c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c40:	005a      	lsls	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	441a      	add	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d916      	bls.n	8006c8a <UART_SetConfig+0x90e>
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c62:	d212      	bcs.n	8006c8a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f023 030f 	bic.w	r3, r3, #15
 8006c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	e0bb      	b.n	8006e02 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c90:	e0b7      	b.n	8006e02 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	dc4a      	bgt.n	8006d30 <UART_SetConfig+0x9b4>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f2c0 8086 	blt.w	8006dac <UART_SetConfig+0xa30>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	f200 8083 	bhi.w	8006dac <UART_SetConfig+0xa30>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x930>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006d37 	.word	0x08006d37
 8006cb0:	08006d51 	.word	0x08006d51
 8006cb4:	08006dad 	.word	0x08006dad
 8006cb8:	08006dad 	.word	0x08006dad
 8006cbc:	08006d59 	.word	0x08006d59
 8006cc0:	08006dad 	.word	0x08006dad
 8006cc4:	08006dad 	.word	0x08006dad
 8006cc8:	08006dad 	.word	0x08006dad
 8006ccc:	08006d69 	.word	0x08006d69
 8006cd0:	08006dad 	.word	0x08006dad
 8006cd4:	08006dad 	.word	0x08006dad
 8006cd8:	08006dad 	.word	0x08006dad
 8006cdc:	08006dad 	.word	0x08006dad
 8006ce0:	08006dad 	.word	0x08006dad
 8006ce4:	08006dad 	.word	0x08006dad
 8006ce8:	08006dad 	.word	0x08006dad
 8006cec:	08006d79 	.word	0x08006d79
 8006cf0:	08006dad 	.word	0x08006dad
 8006cf4:	08006dad 	.word	0x08006dad
 8006cf8:	08006dad 	.word	0x08006dad
 8006cfc:	08006dad 	.word	0x08006dad
 8006d00:	08006dad 	.word	0x08006dad
 8006d04:	08006dad 	.word	0x08006dad
 8006d08:	08006dad 	.word	0x08006dad
 8006d0c:	08006dad 	.word	0x08006dad
 8006d10:	08006dad 	.word	0x08006dad
 8006d14:	08006dad 	.word	0x08006dad
 8006d18:	08006dad 	.word	0x08006dad
 8006d1c:	08006dad 	.word	0x08006dad
 8006d20:	08006dad 	.word	0x08006dad
 8006d24:	08006dad 	.word	0x08006dad
 8006d28:	08006dad 	.word	0x08006dad
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d037      	beq.n	8006da4 <UART_SetConfig+0xa28>
 8006d34:	e03a      	b.n	8006dac <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d36:	f7fc fd1f 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8006d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d3c:	e03c      	b.n	8006db8 <UART_SetConfig+0xa3c>
 8006d3e:	bf00      	nop
 8006d40:	003d0900 	.word	0x003d0900
 8006d44:	08007af0 	.word	0x08007af0
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d50:	f7fc fd28 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8006d54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d56:	e02f      	b.n	8006db8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd fc8d 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d66:	e027      	b.n	8006db8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d68:	f107 0308 	add.w	r3, r7, #8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fdd9 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d76:	e01f      	b.n	8006db8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d78:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <UART_SetConfig+0xab0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d84:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <UART_SetConfig+0xab0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	08db      	lsrs	r3, r3, #3
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <UART_SetConfig+0xab4>)
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d96:	e00f      	b.n	8006db8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <UART_SetConfig+0xab4>)
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d9c:	e00c      	b.n	8006db8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d9e:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <UART_SetConfig+0xab8>)
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006da2:	e009      	b.n	8006db8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006daa:	e005      	b.n	8006db8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006db6:	bf00      	nop
    }

    if (pclk != 0U)
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d021      	beq.n	8006e02 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <UART_SetConfig+0xabc>)
 8006dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	441a      	add	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2b0f      	cmp	r3, #15
 8006de8:	d908      	bls.n	8006dfc <UART_SetConfig+0xa80>
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df0:	d204      	bcs.n	8006dfc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	e002      	b.n	8006e02 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3738      	adds	r7, #56	; 0x38
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	003d0900 	.word	0x003d0900
 8006e38:	08007af0 	.word	0x08007af0

08006e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d10a      	bne.n	8006f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f90:	f7fa fbb0 	bl	80016f4 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d10e      	bne.n	8006fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f82f 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e025      	b.n	800700e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d10e      	bne.n	8006fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f819 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e00f      	b.n	800700e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007026:	e062      	b.n	80070ee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702e:	d05e      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007030:	f7fa fb60 	bl	80016f4 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	429a      	cmp	r2, r3
 800703e:	d302      	bcc.n	8007046 <UART_WaitOnFlagUntilTimeout+0x30>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d11d      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007054:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e045      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d02e      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709e:	d126      	bne.n	80070ee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e00f      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bf0c      	ite	eq
 80070fe:	2301      	moveq	r3, #1
 8007100:	2300      	movne	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d08d      	beq.n	8007028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UARTEx_DisableFifoMode+0x16>
 8007128:	2302      	movs	r3, #2
 800712a:	e027      	b.n	800717c <HAL_UARTEx_DisableFifoMode+0x66>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2224      	movs	r2, #36	; 0x24
 8007138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800715a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e02d      	b.n	80071fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2224      	movs	r2, #36	; 0x24
 80071ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f84f 	bl	8007280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e02d      	b.n	8007278 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2224      	movs	r2, #36	; 0x24
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f811 	bl	8007280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800728c:	2b00      	cmp	r3, #0
 800728e:	d108      	bne.n	80072a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a0:	e031      	b.n	8007306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072a2:	2310      	movs	r3, #16
 80072a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072a6:	2310      	movs	r3, #16
 80072a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	0e5b      	lsrs	r3, r3, #25
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	0f5b      	lsrs	r3, r3, #29
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	7b3a      	ldrb	r2, [r7, #12]
 80072ce:	4911      	ldr	r1, [pc, #68]	; (8007314 <UARTEx_SetNbDataToProcess+0x94>)
 80072d0:	5c8a      	ldrb	r2, [r1, r2]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072d6:	7b3a      	ldrb	r2, [r7, #12]
 80072d8:	490f      	ldr	r1, [pc, #60]	; (8007318 <UARTEx_SetNbDataToProcess+0x98>)
 80072da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	7b7a      	ldrb	r2, [r7, #13]
 80072ec:	4909      	ldr	r1, [pc, #36]	; (8007314 <UARTEx_SetNbDataToProcess+0x94>)
 80072ee:	5c8a      	ldrb	r2, [r1, r2]
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	4908      	ldr	r1, [pc, #32]	; (8007318 <UARTEx_SetNbDataToProcess+0x98>)
 80072f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80072fe:	b29a      	uxth	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	08007b08 	.word	0x08007b08
 8007318:	08007b10 	.word	0x08007b10

0800731c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800731c:	b084      	sub	sp, #16
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	f107 001c 	add.w	r0, r7, #28
 800732a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	2b01      	cmp	r3, #1
 8007332:	d120      	bne.n	8007376 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <USB_CoreInit+0xd4>)
 8007346:	4013      	ands	r3, r2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa60 	bl	8007830 <USB_CoreReset>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
 8007374:	e01a      	b.n	80073ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa54 	bl	8007830 <USB_CoreReset>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
 800739e:	e005      	b.n	80073ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d116      	bne.n	80073e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <USB_CoreInit+0xd8>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f043 0206 	orr.w	r2, r3, #6
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073ec:	b004      	add	sp, #16
 80073ee:	4770      	bx	lr
 80073f0:	ffbdffbf 	.word	0xffbdffbf
 80073f4:	03ee0000 	.word	0x03ee0000

080073f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f023 0201 	bic.w	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
 8007444:	e00b      	b.n	800745e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60da      	str	r2, [r3, #12]
 8007458:	e001      	b.n	800745e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e003      	b.n	8007466 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800745e:	2032      	movs	r0, #50	; 0x32
 8007460:	f7fa f954 	bl	800170c <HAL_Delay>

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007470:	b084      	sub	sp, #16
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800747e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e009      	b.n	80074a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3340      	adds	r3, #64	; 0x40
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	2200      	movs	r2, #0
 800749c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b0e      	cmp	r3, #14
 80074a8:	d9f2      	bls.n	8007490 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11c      	bne.n	80074ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e005      	b.n	80074f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074fc:	461a      	mov	r2, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	4619      	mov	r1, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	461a      	mov	r2, r3
 8007512:	680b      	ldr	r3, [r1, #0]
 8007514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10c      	bne.n	8007536 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f949 	bl	80077bc <USB_SetDevSpeed>
 800752a:	e008      	b.n	800753e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f944 	bl	80077bc <USB_SetDevSpeed>
 8007534:	e003      	b.n	800753e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007536:	2103      	movs	r1, #3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f93f 	bl	80077bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800753e:	2110      	movs	r1, #16
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8f3 	bl	800772c <USB_FlushTxFifo>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f911 	bl	8007778 <USB_FlushRxFifo>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	461a      	mov	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	e043      	b.n	8007612 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a0:	d118      	bne.n	80075d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	461a      	mov	r2, r3
 80075b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e013      	b.n	80075e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	461a      	mov	r2, r3
 80075cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e008      	b.n	80075e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	461a      	mov	r2, r3
 8007606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800760a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d3b7      	bcc.n	800758a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	e043      	b.n	80076a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007636:	d118      	bne.n	800766a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	461a      	mov	r2, r3
 800764c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	e013      	b.n	800767c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e008      	b.n	800767c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	461a      	mov	r2, r3
 8007678:	2300      	movs	r3, #0
 800767a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3301      	adds	r3, #1
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3b7      	bcc.n	8007620 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f043 0210 	orr.w	r2, r3, #16
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <USB_DevInit+0x2b4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d105      	bne.n	8007714 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <USB_DevInit+0x2b8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007720:	b004      	add	sp, #16
 8007722:	4770      	bx	lr
 8007724:	803c3800 	.word	0x803c3800
 8007728:	40000004 	.word	0x40000004

0800772c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	019b      	lsls	r3, r3, #6
 800773e:	f043 0220 	orr.w	r2, r3, #32
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <USB_FlushTxFifo+0x48>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d901      	bls.n	8007758 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e006      	b.n	8007766 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b20      	cmp	r3, #32
 8007762:	d0f0      	beq.n	8007746 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	00030d40 	.word	0x00030d40

08007778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2210      	movs	r2, #16
 8007788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a09      	ldr	r2, [pc, #36]	; (80077b8 <USB_FlushRxFifo+0x40>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d0f0      	beq.n	800778a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	00030d40 	.word	0x00030d40

080077bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077dc:	4313      	orrs	r3, r2
 80077de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4a13      	ldr	r2, [pc, #76]	; (8007894 <USB_CoreReset+0x64>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e01b      	b.n	8007886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	daf2      	bge.n	800783c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f043 0201 	orr.w	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a09      	ldr	r2, [pc, #36]	; (8007894 <USB_CoreReset+0x64>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d901      	bls.n	8007878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e006      	b.n	8007886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b01      	cmp	r3, #1
 8007882:	d0f0      	beq.n	8007866 <USB_CoreReset+0x36>

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	00030d40 	.word	0x00030d40

08007898 <_Znwj>:
 8007898:	2801      	cmp	r0, #1
 800789a:	bf38      	it	cc
 800789c:	2001      	movcc	r0, #1
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f844 	bl	8007930 <malloc>
 80078a8:	b930      	cbnz	r0, 80078b8 <_Znwj+0x20>
 80078aa:	f000 f807 	bl	80078bc <_ZSt15get_new_handlerv>
 80078ae:	b908      	cbnz	r0, 80078b4 <_Znwj+0x1c>
 80078b0:	f000 f80c 	bl	80078cc <abort>
 80078b4:	4780      	blx	r0
 80078b6:	e7f4      	b.n	80078a2 <_Znwj+0xa>
 80078b8:	bd10      	pop	{r4, pc}
	...

080078bc <_ZSt15get_new_handlerv>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <_ZSt15get_new_handlerv+0xc>)
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	f3bf 8f5b 	dmb	ish
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	200006fc 	.word	0x200006fc

080078cc <abort>:
 80078cc:	b508      	push	{r3, lr}
 80078ce:	2006      	movs	r0, #6
 80078d0:	f000 f8d0 	bl	8007a74 <raise>
 80078d4:	2001      	movs	r0, #1
 80078d6:	f7f9 fd91 	bl	80013fc <_exit>
	...

080078dc <__errno>:
 80078dc:	4b01      	ldr	r3, [pc, #4]	; (80078e4 <__errno+0x8>)
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000010 	.word	0x20000010

080078e8 <__libc_init_array>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4d0d      	ldr	r5, [pc, #52]	; (8007920 <__libc_init_array+0x38>)
 80078ec:	4c0d      	ldr	r4, [pc, #52]	; (8007924 <__libc_init_array+0x3c>)
 80078ee:	1b64      	subs	r4, r4, r5
 80078f0:	10a4      	asrs	r4, r4, #2
 80078f2:	2600      	movs	r6, #0
 80078f4:	42a6      	cmp	r6, r4
 80078f6:	d109      	bne.n	800790c <__libc_init_array+0x24>
 80078f8:	4d0b      	ldr	r5, [pc, #44]	; (8007928 <__libc_init_array+0x40>)
 80078fa:	4c0c      	ldr	r4, [pc, #48]	; (800792c <__libc_init_array+0x44>)
 80078fc:	f000 f8e4 	bl	8007ac8 <_init>
 8007900:	1b64      	subs	r4, r4, r5
 8007902:	10a4      	asrs	r4, r4, #2
 8007904:	2600      	movs	r6, #0
 8007906:	42a6      	cmp	r6, r4
 8007908:	d105      	bne.n	8007916 <__libc_init_array+0x2e>
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007910:	4798      	blx	r3
 8007912:	3601      	adds	r6, #1
 8007914:	e7ee      	b.n	80078f4 <__libc_init_array+0xc>
 8007916:	f855 3b04 	ldr.w	r3, [r5], #4
 800791a:	4798      	blx	r3
 800791c:	3601      	adds	r6, #1
 800791e:	e7f2      	b.n	8007906 <__libc_init_array+0x1e>
 8007920:	08007b20 	.word	0x08007b20
 8007924:	08007b20 	.word	0x08007b20
 8007928:	08007b20 	.word	0x08007b20
 800792c:	08007b28 	.word	0x08007b28

08007930 <malloc>:
 8007930:	4b02      	ldr	r3, [pc, #8]	; (800793c <malloc+0xc>)
 8007932:	4601      	mov	r1, r0
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	f000 b80b 	b.w	8007950 <_malloc_r>
 800793a:	bf00      	nop
 800793c:	20000010 	.word	0x20000010

08007940 <memset>:
 8007940:	4402      	add	r2, r0
 8007942:	4603      	mov	r3, r0
 8007944:	4293      	cmp	r3, r2
 8007946:	d100      	bne.n	800794a <memset+0xa>
 8007948:	4770      	bx	lr
 800794a:	f803 1b01 	strb.w	r1, [r3], #1
 800794e:	e7f9      	b.n	8007944 <memset+0x4>

08007950 <_malloc_r>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	1ccd      	adds	r5, r1, #3
 8007954:	f025 0503 	bic.w	r5, r5, #3
 8007958:	3508      	adds	r5, #8
 800795a:	2d0c      	cmp	r5, #12
 800795c:	bf38      	it	cc
 800795e:	250c      	movcc	r5, #12
 8007960:	2d00      	cmp	r5, #0
 8007962:	4606      	mov	r6, r0
 8007964:	db01      	blt.n	800796a <_malloc_r+0x1a>
 8007966:	42a9      	cmp	r1, r5
 8007968:	d903      	bls.n	8007972 <_malloc_r+0x22>
 800796a:	230c      	movs	r3, #12
 800796c:	6033      	str	r3, [r6, #0]
 800796e:	2000      	movs	r0, #0
 8007970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007972:	f000 f89b 	bl	8007aac <__malloc_lock>
 8007976:	4921      	ldr	r1, [pc, #132]	; (80079fc <_malloc_r+0xac>)
 8007978:	680a      	ldr	r2, [r1, #0]
 800797a:	4614      	mov	r4, r2
 800797c:	b99c      	cbnz	r4, 80079a6 <_malloc_r+0x56>
 800797e:	4f20      	ldr	r7, [pc, #128]	; (8007a00 <_malloc_r+0xb0>)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	b923      	cbnz	r3, 800798e <_malloc_r+0x3e>
 8007984:	4621      	mov	r1, r4
 8007986:	4630      	mov	r0, r6
 8007988:	f000 f83c 	bl	8007a04 <_sbrk_r>
 800798c:	6038      	str	r0, [r7, #0]
 800798e:	4629      	mov	r1, r5
 8007990:	4630      	mov	r0, r6
 8007992:	f000 f837 	bl	8007a04 <_sbrk_r>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	d123      	bne.n	80079e2 <_malloc_r+0x92>
 800799a:	230c      	movs	r3, #12
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 f88a 	bl	8007ab8 <__malloc_unlock>
 80079a4:	e7e3      	b.n	800796e <_malloc_r+0x1e>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	1b5b      	subs	r3, r3, r5
 80079aa:	d417      	bmi.n	80079dc <_malloc_r+0x8c>
 80079ac:	2b0b      	cmp	r3, #11
 80079ae:	d903      	bls.n	80079b8 <_malloc_r+0x68>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	441c      	add	r4, r3
 80079b4:	6025      	str	r5, [r4, #0]
 80079b6:	e004      	b.n	80079c2 <_malloc_r+0x72>
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	42a2      	cmp	r2, r4
 80079bc:	bf0c      	ite	eq
 80079be:	600b      	streq	r3, [r1, #0]
 80079c0:	6053      	strne	r3, [r2, #4]
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f878 	bl	8007ab8 <__malloc_unlock>
 80079c8:	f104 000b 	add.w	r0, r4, #11
 80079cc:	1d23      	adds	r3, r4, #4
 80079ce:	f020 0007 	bic.w	r0, r0, #7
 80079d2:	1ac2      	subs	r2, r0, r3
 80079d4:	d0cc      	beq.n	8007970 <_malloc_r+0x20>
 80079d6:	1a1b      	subs	r3, r3, r0
 80079d8:	50a3      	str	r3, [r4, r2]
 80079da:	e7c9      	b.n	8007970 <_malloc_r+0x20>
 80079dc:	4622      	mov	r2, r4
 80079de:	6864      	ldr	r4, [r4, #4]
 80079e0:	e7cc      	b.n	800797c <_malloc_r+0x2c>
 80079e2:	1cc4      	adds	r4, r0, #3
 80079e4:	f024 0403 	bic.w	r4, r4, #3
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d0e3      	beq.n	80079b4 <_malloc_r+0x64>
 80079ec:	1a21      	subs	r1, r4, r0
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 f808 	bl	8007a04 <_sbrk_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d1dd      	bne.n	80079b4 <_malloc_r+0x64>
 80079f8:	e7cf      	b.n	800799a <_malloc_r+0x4a>
 80079fa:	bf00      	nop
 80079fc:	20000700 	.word	0x20000700
 8007a00:	20000704 	.word	0x20000704

08007a04 <_sbrk_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_sbrk_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f7f9 fcfe 	bl	8001410 <_sbrk>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_sbrk_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_sbrk_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	2000070c 	.word	0x2000070c

08007a24 <_raise_r>:
 8007a24:	291f      	cmp	r1, #31
 8007a26:	b538      	push	{r3, r4, r5, lr}
 8007a28:	4604      	mov	r4, r0
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	d904      	bls.n	8007a38 <_raise_r+0x14>
 8007a2e:	2316      	movs	r3, #22
 8007a30:	6003      	str	r3, [r0, #0]
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a3a:	b112      	cbz	r2, 8007a42 <_raise_r+0x1e>
 8007a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a40:	b94b      	cbnz	r3, 8007a56 <_raise_r+0x32>
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f830 	bl	8007aa8 <_getpid_r>
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a52:	f000 b817 	b.w	8007a84 <_kill_r>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d00a      	beq.n	8007a70 <_raise_r+0x4c>
 8007a5a:	1c59      	adds	r1, r3, #1
 8007a5c:	d103      	bne.n	8007a66 <_raise_r+0x42>
 8007a5e:	2316      	movs	r3, #22
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	2001      	movs	r0, #1
 8007a64:	e7e7      	b.n	8007a36 <_raise_r+0x12>
 8007a66:	2400      	movs	r4, #0
 8007a68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	4798      	blx	r3
 8007a70:	2000      	movs	r0, #0
 8007a72:	e7e0      	b.n	8007a36 <_raise_r+0x12>

08007a74 <raise>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <raise+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f7ff bfd3 	b.w	8007a24 <_raise_r>
 8007a7e:	bf00      	nop
 8007a80:	20000010 	.word	0x20000010

08007a84 <_kill_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <_kill_r+0x20>)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	f7f9 fca3 	bl	80013dc <_kill>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d102      	bne.n	8007aa0 <_kill_r+0x1c>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b103      	cbz	r3, 8007aa0 <_kill_r+0x1c>
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
 8007aa2:	bf00      	nop
 8007aa4:	2000070c 	.word	0x2000070c

08007aa8 <_getpid_r>:
 8007aa8:	f7f9 bc90 	b.w	80013cc <_getpid>

08007aac <__malloc_lock>:
 8007aac:	4801      	ldr	r0, [pc, #4]	; (8007ab4 <__malloc_lock+0x8>)
 8007aae:	f000 b809 	b.w	8007ac4 <__retarget_lock_acquire_recursive>
 8007ab2:	bf00      	nop
 8007ab4:	20000714 	.word	0x20000714

08007ab8 <__malloc_unlock>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__malloc_unlock+0x8>)
 8007aba:	f000 b804 	b.w	8007ac6 <__retarget_lock_release_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20000714 	.word	0x20000714

08007ac4 <__retarget_lock_acquire_recursive>:
 8007ac4:	4770      	bx	lr

08007ac6 <__retarget_lock_release_recursive>:
 8007ac6:	4770      	bx	lr

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
