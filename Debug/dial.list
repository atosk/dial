
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800b760  0800b760  0001b760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc14  0800bc14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc24  0800bc24  0001bc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  0800bc28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  200001e0  0800be08  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000240  0800be68  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  200002a0  0800bec8  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800bec8  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003792c  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ef4  00000000  00000000  00057bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0005caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  0005e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d960  00000000  00000000  0005fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f50a  00000000  00000000  0009d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016f050  00000000  00000000  000bca92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022bae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d34  00000000  00000000  0022bb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200002a0 	.word	0x200002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b748 	.word	0x0800b748

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200002a4 	.word	0x200002a4
 80002dc:	0800b748 	.word	0x0800b748

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000692:	edd7 7a01 	vldr	s15, [r7, #4]
 8000696:	fef8 7a67 	vrinta.f32	s15, s15
 800069a:	eeb0 0a67 	vmov.f32	s0, s15
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	711a      	strb	r2, [r3, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <_ZNSt4Dial14CalculateStepsE9Directionhf>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, float next_number){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	460b      	mov	r3, r1
 80006d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80006da:	72fb      	strb	r3, [r7, #11]
 80006dc:	4613      	mov	r3, r2
 80006de:	72bb      	strb	r3, [r7, #10]
   m_next_number = next_number;
 80006e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e8:	edc7 7a00 	vstr	s15, [r7]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	711a      	strb	r2, [r3, #4]
   float m_dial_temp = 0; // Temporary location to collect dial displacement
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d109      	bne.n	8000714 <_ZNSt4Dial14CalculateStepsE9Directionhf+0x48>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	ed97 7a01 	vldr	s14, [r7, #4]
 800070a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800070e:	edc7 7a05 	vstr	s15, [r7, #20]
 8000712:	e008      	b.n	8000726 <_ZNSt4Dial14CalculateStepsE9Directionhf+0x5a>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	ed93 7a00 	vldr	s14, [r3]
 800071a:	edd7 7a01 	vldr	s15, [r7, #4]
 800071e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000722:	edc7 7a05 	vstr	s15, [r7, #20]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 8000726:	edd7 7a05 	vldr	s15, [r7, #20]
 800072a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000732:	d507      	bpl.n	8000744 <_ZNSt4Dial14CalculateStepsE9Directionhf+0x78>
 8000734:	edd7 7a05 	vldr	s15, [r7, #20]
 8000738:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800078c <_ZNSt4Dial14CalculateStepsE9Directionhf+0xc0>
 800073c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000740:	edc7 7a05 	vstr	s15, [r7, #20]

   // Calculate the number of pulses to send with the next stepper move command.

   int foo = round((full_turns + m_dial_temp) * 2 * MICROSTEP);
 8000744:	7abb      	ldrb	r3, [r7, #10]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000756:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800075a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800075e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000762:	eeb0 0a67 	vmov.f32	s0, s15
 8000766:	f7ff ff8f 	bl	8000688 <_ZSt5roundf>
 800076a:	eef0 7a40 	vmov.f32	s15, s0
 800076e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000772:	ee17 3a90 	vmov	r3, s15
 8000776:	613b      	str	r3, [r7, #16]
   if (foo == 100){ foo = 0; } // Just for consistency.
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	2b64      	cmp	r3, #100	; 0x64
 800077c:	d101      	bne.n	8000782 <_ZNSt4Dial14CalculateStepsE9Directionhf+0xb6>
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
   return foo;
 8000782:	693b      	ldr	r3, [r7, #16]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	42c80000 	.word	0x42c80000

08000790 <_ZNSt4Dial14UpdatePositionEf>:

void Dial::UpdatePosition(float new_position){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	ed87 0a00 	vstr	s0, [r7]
   m_dial_location = new_position;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_ZNSt4Dial11GetPositionEv>:


float Dial::GetPosition(){
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return m_dial_location;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	ee07 3a90 	vmov	s15, r3
}
 80007be:	eeb0 0a67 	vmov.f32	s0, s15
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>:
#include "my_definitions.h"
#include "string.h"

namespace std {

Encoder::Encoder(I2C_HandleTypeDef *HI2Cx, int hyst_mode) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af04      	add	r7, sp, #16
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3304      	adds	r3, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3314      	adds	r3, #20
 80007ea:	2264      	movs	r2, #100	; 0x64
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 f9b0 	bl	8008b54 <memset>
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	f04f 0300 	mov.w	r3, #0
 80007fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2204      	movs	r2, #4
 8000816:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
   m_hi2cx = HI2Cx;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	601a      	str	r2, [r3, #0]

   // Read magnet status
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 8000828:	22c8      	movs	r2, #200	; 0xc8
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	2201      	movs	r2, #1
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	220b      	movs	r2, #11
 8000836:	216c      	movs	r1, #108	; 0x6c
 8000838:	f002 fb50 	bl	8002edc <HAL_I2C_Mem_Read>
 800083c:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 8000848:	2b00      	cmp	r3, #0
 800084a:	d004      	beq.n	8000856 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x8a>
      m_status = Read_Error;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2201      	movs	r2, #1
 8000850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000854:	e003      	b.n	800085e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x92>
   } else m_status = Ready;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

   // Parse magnet status
   if (m_status == Ready){
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000864:	2b00      	cmp	r3, #0
 8000866:	d12b      	bne.n	80008c0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
      // Mask off unnecessary bits
      char reg_status = (m_i2c_receive_buf[0] & (7UL << 3)); // Only bits [5:3] matter for now
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000870:	75fb      	strb	r3, [r7, #23]
      switch (reg_status) {
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b30      	cmp	r3, #48	; 0x30
 8000876:	d014      	beq.n	80008a2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xd6>
 8000878:	2b30      	cmp	r3, #48	; 0x30
 800087a:	dc1c      	bgt.n	80008b6 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 800087c:	2b28      	cmp	r3, #40	; 0x28
 800087e:	d00b      	beq.n	8000898 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xcc>
 8000880:	2b28      	cmp	r3, #40	; 0x28
 8000882:	dc18      	bgt.n	80008b6 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xc2>
 8000888:	2b20      	cmp	r3, #32
 800088a:	d00f      	beq.n	80008ac <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xe0>
 800088c:	e013      	b.n	80008b6 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
         case 0:
            m_mag_status = Magnet_Missing;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2204      	movs	r2, #4
 8000892:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 8000896:	e013      	b.n	80008c0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 40:
            m_mag_status = Magnet_Too_Strong;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2205      	movs	r2, #5
 800089c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80008a0:	e00e      	b.n	80008c0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 48:
            m_mag_status = Magnet_Too_Weak;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2206      	movs	r2, #6
 80008a6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80008aa:	e009      	b.n	80008c0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 32:
            m_mag_status = Magnet_OK;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2207      	movs	r2, #7
 80008b0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80008b4:	e004      	b.n	80008c0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         default:
            m_mag_status = Other_Error;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2203      	movs	r2, #3
 80008ba:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80008be:	bf00      	nop
      }
   } // End configuration write
*/

   // record starting angle.
   if (m_status == Ready) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d120      	bne.n	800090c <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x140>
      // Get contents of angle register without converting to degrees.
      // This is to limit rounding error
      if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H, I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK){
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	22c8      	movs	r2, #200	; 0xc8
 80008d4:	9202      	str	r2, [sp, #8]
 80008d6:	2202      	movs	r2, #2
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	220e      	movs	r2, #14
 80008e0:	216c      	movs	r1, #108	; 0x6c
 80008e2:	f002 fafb 	bl	8002edc <HAL_I2C_Mem_Read>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x12e>
            Error_Handler();
 80008f6:	f000 fe09 	bl	800150c <Error_Handler>
         }
      m_starting_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	7952      	ldrb	r2, [r2, #5]
 8000904:	431a      	orrs	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   } // End starting angle

} // End constructor
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <_ZNSt7Encoder11GetLocationEv>:

enum I2C_Status Encoder::GetStatus(){
   return m_status;
}

float Encoder::GetLocation() {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af04      	add	r7, sp, #16
 800091e:	6078      	str	r0, [r7, #4]
   // Read angle register
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000928:	22c8      	movs	r2, #200	; 0xc8
 800092a:	9202      	str	r2, [sp, #8]
 800092c:	2202      	movs	r2, #2
 800092e:	9201      	str	r2, [sp, #4]
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	220e      	movs	r2, #14
 8000936:	216c      	movs	r1, #108	; 0x6c
 8000938:	f002 fad0 	bl	8002edc <HAL_I2C_Mem_Read>
 800093c:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00a      	beq.n	8000962 <_ZNSt7Encoder11GetLocationEv+0x4a>
      m_angle = -1;
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <_ZNSt7Encoder11GetLocationEv+0x100>)
 8000954:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
      m_status = Read_Error;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000960:	e00c      	b.n	800097c <_ZNSt7Encoder11GetLocationEv+0x64>
   } else {
      m_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7952      	ldrb	r2, [r2, #5]
 800096c:	4313      	orrs	r3, r2
 800096e:	ee07 3a90 	vmov	s15, r3
 8000972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Subtract starting angle and then convert to degrees.
   m_angle = (m_angle - m_starting_angle) * ENCODER_DEGREES_PER_BIT;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000990:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000994:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000a00 <_ZNSt7Encoder11GetLocationEv+0xe8>
 8000998:	ee27 7b06 	vmul.f64	d7, d7, d6
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

   // Corrected angle can be negative if starting>new
   if (m_angle < 0) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80009a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80009ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b0:	d509      	bpl.n	80009c6 <_ZNSt7Encoder11GetLocationEv+0xae>
      m_angle += 360; // -60 degrees becomes +300 degrees
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80009b8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000a08 <_ZNSt7Encoder11GetLocationEv+0xf0>
 80009bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Convert angle to number on face of the dial
   // rounded to nearest tenth
   return (float)(round(10*m_angle/3.6)/10);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80009cc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80009d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009d4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000a10 <_ZNSt7Encoder11GetLocationEv+0xf8>
 80009d8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80009dc:	eeb0 0b46 	vmov.f64	d0, d6
 80009e0:	f008 f838 	bl	8008a54 <round>
 80009e4:	eeb0 6b40 	vmov.f64	d6, d0
 80009e8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80009ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80009f4:	eeb0 0a67 	vmov.f32	s0, s15
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	00000000 	.word	0x00000000
 8000a04:	3fb68000 	.word	0x3fb68000
 8000a08:	00000000 	.word	0x00000000
 8000a0c:	40768000 	.word	0x40768000
 8000a10:	cccccccd 	.word	0xcccccccd
 8000a14:	400ccccc 	.word	0x400ccccc
 8000a18:	bff00000 	.word	0xbff00000

08000a1c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	711a      	strb	r2, [r3, #4]

}
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	715a      	strb	r2, [r3, #5]
   }
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	711a      	strb	r2, [r3, #4]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	4613      	mov	r3, r2
 8000abc:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   if (steps > 0){ // Moving zero steps sends the stepper into a black hole.
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dd23      	ble.n	8000b0c <_ZNSt12StepperMotor4MoveEi9Direction+0x5c>
      m_steps_remaining = steps;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	601a      	str	r2, [r3, #0]
      m_flag_move_complete = FALSE;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
      m_status = Running;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	711a      	strb	r2, [r3, #4]

      // Set Stepper motor direction pin
      GPIO_PinState direction;
      if (dir == CW) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_ZNSt12StepperMotor4MoveEi9Direction+0x32>
         direction = GPIO_PIN_SET;
 8000adc:	2301      	movs	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	e001      	b.n	8000ae6 <_ZNSt12StepperMotor4MoveEi9Direction+0x36>
      } else
         direction = GPIO_PIN_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
      HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <_ZNSt12StepperMotor4MoveEi9Direction+0x64>)
 8000af0:	f002 f94a 	bl	8002d88 <HAL_GPIO_WritePin>

      // Reset the counter and enable counting.
      m_TIMx->CNT = 0;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
      m_TIMx->CR1 |= TIM_CR1_CEN;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f042 0201 	orr.w	r2, r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
   }
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58020800 	.word	0x58020800

08000b18 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
   return m_status;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	791b      	ldrb	r3, [r3, #4]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b56:	eef0 7ae7 	vabs.f32	s15, s15
 8000b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000b6e:	f001 f95f 	bl	8001e30 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 8000b72:	f000 f859 	bl	8000c28 <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000b76:	f000 fab1 	bl	80010dc <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 8000b7a:	f000 f8e3 	bl	8000d44 <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 8000b7e:	f000 fa17 	bl	8000fb0 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 8000b82:	f000 fa75 	bl	8001070 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 8000b86:	f000 f983 	bl	8000e90 <_ZL12MX_TIM3_Initv>
   MX_I2C1_Init();
 8000b8a:	f000 f933 	bl	8000df4 <_ZL12MX_I2C1_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <main+0xa8>)
 8000b92:	f005 fa65 	bl	8006060 <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <main+0xac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <main+0xac>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]



   // Stepper
   int newnum = 90; // Next number to spin the dial to
 8000ba2:	235a      	movs	r3, #90	; 0x5a
 8000ba4:	61fb      	str	r3, [r7, #28]
   enum Direction dir = CW; // Direction of dial rotation.
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	76fb      	strb	r3, [r7, #27]

   // Encoder
   Encoder = new std::Encoder(&hi2c1, AS5600_HYSTERESIS_1LSB);
 8000baa:	2088      	movs	r0, #136	; 0x88
 8000bac:	f007 ff38 	bl	8008a20 <_Znwj>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4918      	ldr	r1, [pc, #96]	; (8000c18 <main+0xb0>)
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f7ff fe07 	bl	80007cc <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <main+0xb4>)
 8000bc0:	601c      	str	r4, [r3, #0]

#if DEBUG ==1
   uint8_t start_message[] = "\r\n\r\n..... Running .....\r\n";
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <main+0xb8>)
 8000bc4:	463c      	mov	r4, r7
 8000bc6:	461d      	mov	r5, r3
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd0:	c403      	stmia	r4!, {r0, r1}
 8000bd2:	8022      	strh	r2, [r4, #0]
   HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), 10);
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	221a      	movs	r2, #26
 8000bda:	4812      	ldr	r0, [pc, #72]	; (8000c24 <main+0xbc>)
 8000bdc:	f006 fbfc 	bl	80073d8 <HAL_UART_Transmit>


// -------------------------------------------------------------------

      // Routine to demo stepper control
      Move_Stepper(dir, 0, newnum);
 8000be0:	7efb      	ldrb	r3, [r7, #27]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fbb4 	bl	8001354 <_Z12Move_Stepper9Directionii>

      if (newnum > 0) {
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd03      	ble.n	8000bfa <main+0x92>
         newnum -= 10;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b0a      	subs	r3, #10
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e7f2      	b.n	8000be0 <main+0x78>
      } else {
         newnum = 90;
 8000bfa:	235a      	movs	r3, #90	; 0x5a
 8000bfc:	61fb      	str	r3, [r7, #28]
         if (dir == CCW) {
 8000bfe:	7efb      	ldrb	r3, [r7, #27]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d102      	bne.n	8000c0a <main+0xa2>
            dir = CW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	76fb      	strb	r3, [r7, #27]
 8000c08:	e7ea      	b.n	8000be0 <main+0x78>
         } else
            (dir = CCW);
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	76fb      	strb	r3, [r7, #27]
      Move_Stepper(dir, 0, newnum);
 8000c0e:	e7e7      	b.n	8000be0 <main+0x78>
 8000c10:	200003c4 	.word	0x200003c4
 8000c14:	40000400 	.word	0x40000400
 8000c18:	20000378 	.word	0x20000378
 8000c1c:	200008b0 	.word	0x200008b0
 8000c20:	0800b760 	.word	0x0800b760
 8000c24:	20000410 	.word	0x20000410

08000c28 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	; 0x70
 8000c2c:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	224c      	movs	r2, #76	; 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 ff8c 	bl	8008b54 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 ff86 	bl	8008b54 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f002 fe09 	bl	8003860 <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <_Z18SystemClock_Configv+0x114>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	4a39      	ldr	r2, [pc, #228]	; (8000d3c <_Z18SystemClock_Configv+0x114>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <_Z18SystemClock_Configv+0x114>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <_Z18SystemClock_Configv+0x118>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <_Z18SystemClock_Configv+0x118>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <_Z18SystemClock_Configv+0x118>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <_Z18SystemClock_Configv+0x118>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d000      	beq.n	8000c9e <_Z18SystemClock_Configv+0x76>
 8000c9c:	e7f2      	b.n	8000c84 <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 8000cbc:	2318      	movs	r3, #24
 8000cbe:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fe09 	bl	80038f4 <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 8000cf2:	f000 fc0b 	bl	800150c <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf6:	233f      	movs	r3, #63	; 0x3f
 8000cf8:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f9fa 	bl	8004114 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000d30:	f000 fbec 	bl	800150c <Error_Handler>
   }
}
 8000d34:	bf00      	nop
 8000d36:	3770      	adds	r7, #112	; 0x70
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58000400 	.word	0x58000400
 8000d40:	58024800 	.word	0x58024800

08000d44 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d4a:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <_ZL11MX_ETH_Initv+0xa0>)
 8000d4c:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	3302      	adds	r3, #2
 8000d66:	22e1      	movs	r2, #225	; 0xe1
 8000d68:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	3303      	adds	r3, #3
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	3305      	adds	r3, #5
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <_ZL11MX_ETH_Initv+0xa4>)
 8000d92:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <_ZL11MX_ETH_Initv+0xa8>)
 8000d98:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000d9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000da0:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <_ZL11MX_ETH_Initv+0x9c>)
 8000da4:	f001 fa2a 	bl	80021fc <HAL_ETH_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 8000db8:	f000 fba8 	bl	800150c <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000dbc:	2234      	movs	r2, #52	; 0x34
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480b      	ldr	r0, [pc, #44]	; (8000df0 <_ZL11MX_ETH_Initv+0xac>)
 8000dc2:	f007 fec7 	bl	8008b54 <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <_ZL11MX_ETH_Initv+0xac>)
 8000dc8:	2221      	movs	r2, #33	; 0x21
 8000dca:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_ZL11MX_ETH_Initv+0xac>)
 8000dce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dd2:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <_ZL11MX_ETH_Initv+0xac>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200002f0 	.word	0x200002f0
 8000de4:	40028000 	.word	0x40028000
 8000de8:	20000240 	.word	0x20000240
 8000dec:	200001e0 	.word	0x200001e0
 8000df0:	200002bc 	.word	0x200002bc

08000df4 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <_ZL12MX_I2C1_Initv+0x94>)
 8000dfc:	601a      	str	r2, [r3, #0]
   hi2c1.Init.Timing = 0x10707DBC;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e00:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <_ZL12MX_I2C1_Initv+0x98>)
 8000e02:	605a      	str	r2, [r3, #4]
   hi2c1.Init.OwnAddress1 = 0;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	60da      	str	r2, [r3, #12]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
   hi2c1.Init.OwnAddress2 = 0;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e30:	f001 ffc4 	bl	8002dbc <HAL_I2C_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_ZL12MX_I2C1_Initv+0x54>
      Error_Handler();
 8000e44:	f000 fb62 	bl	800150c <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e4c:	f002 fb28 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e50:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <_ZL12MX_I2C1_Initv+0x70>
      Error_Handler();
 8000e60:	f000 fb54 	bl	800150c <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000e64:	2100      	movs	r1, #0
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <_ZL12MX_I2C1_Initv+0x90>)
 8000e68:	f002 fb65 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <_ZL12MX_I2C1_Initv+0x8c>
      Error_Handler();
 8000e7c:	f000 fb46 	bl	800150c <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000378 	.word	0x20000378
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	10707dbc 	.word	0x10707dbc

08000e90 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]
   /* USER CODE BEGIN TIM3_Init 1 */

// htim3.Init.Period = PWM_PERIOD_US;

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ec4:	4a39      	ldr	r2, [pc, #228]	; (8000fac <_ZL12MX_TIM3_Initv+0x11c>)
 8000ec6:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000eca:	223f      	movs	r2, #63	; 0x3f
 8000ecc:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = PWM_PERIOD_US;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ed6:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000eda:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000eea:	f005 f801 	bl	8005ef0 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000efe:	f000 fb05 	bl	800150c <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f10:	f005 fc24 	bl	800675c <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000f24:	f000 faf2 	bl	800150c <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f28:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f2a:	f005 f838 	bl	8005f9e <HAL_TIM_PWM_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000f3e:	f000 fae5 	bl	800150c <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f42:	2320      	movs	r3, #32
 8000f44:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f52:	f006 f94b 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
         != HAL_OK) {
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000f66:	f000 fad1 	bl	800150c <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	; 0x60
 8000f6c:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000f6e:	2328      	movs	r3, #40	; 0x28
 8000f70:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f82:	f005 fadb 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2301      	movne	r3, #1
 8000f8e:	2300      	moveq	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000f96:	f000 fab9 	bl	800150c <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f9c:	f000 fc7c 	bl	8001898 <HAL_TIM_MspPostInit>

}
 8000fa0:	bf00      	nop
 8000fa2:	3738      	adds	r7, #56	; 0x38
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200003c4 	.word	0x200003c4
 8000fac:	40000400 	.word	0x40000400

08000fb0 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	; (800106c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000fb8:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ffa:	f006 f99d 	bl	8007338 <HAL_UART_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 800100e:	f000 fa7d 	bl	800150c <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001012:	2100      	movs	r1, #0
 8001014:	4814      	ldr	r0, [pc, #80]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001016:	f007 f97b 	bl	8008310 <HAL_UARTEx_SetTxFifoThreshold>
 800101a:	4603      	mov	r3, r0
         != HAL_OK) {
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 800102a:	f000 fa6f 	bl	800150c <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800102e:	2100      	movs	r1, #0
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001032:	f007 f9ab 	bl	800838c <HAL_UARTEx_SetRxFifoThreshold>
 8001036:	4603      	mov	r3, r0
         != HAL_OK) {
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8001046:	f000 fa61 	bl	800150c <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800104c:	f007 f927 	bl	800829e <HAL_UARTEx_DisableFifoMode>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8001060:	f000 fa54 	bl	800150c <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000410 	.word	0x20000410
 800106c:	40004800 	.word	0x40004800

08001070 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800107c:	2209      	movs	r2, #9
 800107e:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001082:	2202      	movs	r2, #2
 8001084:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800108e:	2202      	movs	r2, #2
 8001090:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001094:	2201      	movs	r2, #1
 8001096:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80010b8:	f002 fa89 	bl	80035ce <HAL_PCD_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 80010cc:	f000 fa1e 	bl	800150c <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200004a0 	.word	0x200004a0
 80010d8:	40080000 	.word	0x40080000

080010dc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a63      	ldr	r2, [pc, #396]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a5b      	ldr	r2, [pc, #364]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <_ZL12MX_GPIO_Initv+0x1c8>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f244 0101 	movw	r1, #16385	; 0x4001
 80011ca:	4837      	ldr	r0, [pc, #220]	; (80012a8 <_ZL12MX_GPIO_Initv+0x1cc>)
 80011cc:	f001 fddc 	bl	8002d88 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4835      	ldr	r0, [pc, #212]	; (80012ac <_ZL12MX_GPIO_Initv+0x1d0>)
 80011d8:	f001 fdd6 	bl	8002d88 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e2:	4833      	ldr	r0, [pc, #204]	; (80012b0 <_ZL12MX_GPIO_Initv+0x1d4>)
 80011e4:	f001 fdd0 	bl	8002d88 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2102      	movs	r1, #2
 80011ec:	4831      	ldr	r0, [pc, #196]	; (80012b4 <_ZL12MX_GPIO_Initv+0x1d8>)
 80011ee:	f001 fdcb 	bl	8002d88 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 80011f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	482a      	ldr	r0, [pc, #168]	; (80012b0 <_ZL12MX_GPIO_Initv+0x1d4>)
 8001208:	f001 fc0e 	bl	8002a28 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 800120c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001210:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <_ZL12MX_GPIO_Initv+0x1cc>)
 8001226:	f001 fbff 	bl	8002a28 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <_ZL12MX_GPIO_Initv+0x1d0>)
 8001244:	f001 fbf0 	bl	8002a28 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800124e:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4818      	ldr	r0, [pc, #96]	; (80012bc <_ZL12MX_GPIO_Initv+0x1e0>)
 800125c:	f001 fbe4 	bl	8002a28 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 8001260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001264:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <_ZL12MX_GPIO_Initv+0x1d4>)
 800127a:	f001 fbd5 	bl	8002a28 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 800127e:	2302      	movs	r3, #2
 8001280:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <_ZL12MX_GPIO_Initv+0x1d8>)
 8001296:	f001 fbc7 	bl	8002a28 <HAL_GPIO_Init>

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	; 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020400 	.word	0x58020400
 80012ac:	58020c00 	.word	0x58020c00
 80012b0:	58020800 	.word	0x58020800
 80012b4:	58021000 	.word	0x58021000
 80012b8:	11110000 	.word	0x11110000
 80012bc:	58021800 	.word	0x58021800

080012c0 <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 0201 	bic.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

   // !! Only works now because TIM3 is the only PWM timer.
   // !! The complete solution is to check TIM status bits to see
   // !! who issued the interrupt.

   Stop_Timer(TIM3); // Freeze counter at zero
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800130a:	f7ff ffd9 	bl	80012c0 <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fb9a 	bl	8000a4c <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc07 	bl	8000b30 <_ZNSt12StepperMotor12MoveCompleteEv>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fb9e 	bl	8000a78 <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 800133c:	e002      	b.n	8001344 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001340:	f7ff ffce 	bl	80012e0 <_Z11Start_TimerP11TIM_TypeDef>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40000400 	.word	0x40000400
 8001350:	200008a8 	.word	0x200008a8

08001354 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b096      	sub	sp, #88	; 0x58
 8001358:	af04      	add	r7, sp, #16
 800135a:	4603      	mov	r3, r0
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	73fb      	strb	r3, [r7, #15]
    *
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */
   float debug_current_location = Dial->GetPosition();
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <_Z12Move_Stepper9Directionii+0x194>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fa21 	bl	80007ae <_ZNSt4Dial11GetPositionEv>
 800136c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
   int debug_numsteps = Dial->CalculateSteps(dir, full_turns, next_number);
 8001370:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <_Z12Move_Stepper9Directionii+0x194>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	ee07 1a90 	vmov	s15, r1
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	7bf9      	ldrb	r1, [r7, #15]
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f99f 	bl	80006cc <_ZNSt4Dial14CalculateStepsE9Directionhf>
 800138e:	63f8      	str	r0, [r7, #60]	; 0x3c
   Stepper->Move(debug_numsteps, dir);
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <_Z12Move_Stepper9Directionii+0x198>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fb89 	bl	8000ab0 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <_Z12Move_Stepper9Directionii+0x198>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fbb8 	bl	8000b18 <_ZNSt12StepperMotor6StatusEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d000      	beq.n	80013ba <_Z12Move_Stepper9Directionii+0x66>
 80013b8:	e7f1      	b.n	800139e <_Z12Move_Stepper9Directionii+0x4a>
   } // Wait for move to finish
   HAL_Delay(DELAY_MS); // Brief delay after move to allow mechanical settling.
 80013ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013be:	f000 fdc9 	bl	8001f54 <HAL_Delay>

   // Get actual location from AS5600
   float encoder_location = Encoder->GetLocation();
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <_Z12Move_Stepper9Directionii+0x19c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff faa6 	bl	8000918 <_ZNSt7Encoder11GetLocationEv>
 80013cc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
   //
   // CCW | Over      |  99         |   1              |  +98
   // CCW | Under     |   1         |  99              |  -98
   // CCW | Over  *   |  10         |  12              |   -2
   // CCW | Under *   |  10         |   8              |   +2
   position_error = next_number - encoder_location;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80013de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   if (dir == CCW){
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <_Z12Move_Stepper9Directionii+0xa4>
      position_error *= -1; // Flip sign for CCW. Want overshoot should be > 0.
 80013ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013f0:	eef1 7a67 	vneg.f32	s15, s15
 80013f4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   }
   if (abs(position_error) > 50) { // Error straddles zero
 80013f8:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80013fc:	f7ff fba4 	bl	8000b48 <_ZSt3absf>
 8001400:	eef0 7a40 	vmov.f32	s15, s0
 8001404:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80014f4 <_Z12Move_Stepper9Directionii+0x1a0>
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	bfcc      	ite	gt
 8001412:	2301      	movgt	r3, #1
 8001414:	2300      	movle	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d017      	beq.n	800144c <_Z12Move_Stepper9Directionii+0xf8>
      if (position_error < 0){
 800141c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d508      	bpl.n	800143c <_Z12Move_Stepper9Directionii+0xe8>
         position_error += 100;
 800142a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800142e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80014f8 <_Z12Move_Stepper9Directionii+0x1a4>
 8001432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001436:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800143a:	e007      	b.n	800144c <_Z12Move_Stepper9Directionii+0xf8>
      } else {
         position_error -= 100;
 800143c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001440:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80014f8 <_Z12Move_Stepper9Directionii+0x1a4>
 8001444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001448:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      }
   }
   sprintf(msg, "Target: %02d  Actual: %f  Error: %f\r\n", next_number, encoder_location, position_error);
 800144c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001454:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001458:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800145c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001460:	ed8d 7b00 	vstr	d7, [sp]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4925      	ldr	r1, [pc, #148]	; (80014fc <_Z12Move_Stepper9Directionii+0x1a8>)
 8001468:	4825      	ldr	r0, [pc, #148]	; (8001500 <_Z12Move_Stepper9Directionii+0x1ac>)
 800146a:	f008 f8bb 	bl	80095e4 <siprintf>
   HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), 10);
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <_Z12Move_Stepper9Directionii+0x1ac>)
 8001470:	f7fe ff36 	bl	80002e0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	230a      	movs	r3, #10
 800147a:	4921      	ldr	r1, [pc, #132]	; (8001500 <_Z12Move_Stepper9Directionii+0x1ac>)
 800147c:	4821      	ldr	r0, [pc, #132]	; (8001504 <_Z12Move_Stepper9Directionii+0x1b0>)
 800147e:	f005 ffab 	bl	80073d8 <HAL_UART_Transmit>

   // Update dial location.
   if (abs(position_error) < 0.5) { // Expected and measured are in agreement.
 8001482:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001486:	f7ff fb5f 	bl	8000b48 <_ZSt3absf>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	bf4c      	ite	mi
 800149c:	2301      	movmi	r3, #1
 800149e:	2300      	movpl	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <_Z12Move_Stepper9Directionii+0x162>
      Dial->UpdatePosition(encoder_location); // Record error so it doesn't snowball.
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_Z12Move_Stepper9Directionii+0x194>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f96e 	bl	8000790 <_ZNSt4Dial14UpdatePositionEf>
      uint8_t error_message[] = "\r\nError: Position error too great.\r\n";
      HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), 10);
      //Error_Handler();
   }

}
 80014b4:	e013      	b.n	80014de <_Z12Move_Stepper9Directionii+0x18a>
      uint8_t error_message[] = "\r\nError: Position error too great.\r\n";
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <_Z12Move_Stepper9Directionii+0x1b4>)
 80014b8:	f107 0410 	add.w	r4, r7, #16
 80014bc:	461d      	mov	r5, r3
 80014be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014ca:	6020      	str	r0, [r4, #0]
 80014cc:	3404      	adds	r4, #4
 80014ce:	7021      	strb	r1, [r4, #0]
      HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), 10);
 80014d0:	f107 0110 	add.w	r1, r7, #16
 80014d4:	230a      	movs	r3, #10
 80014d6:	2225      	movs	r2, #37	; 0x25
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <_Z12Move_Stepper9Directionii+0x1b0>)
 80014da:	f005 ff7d 	bl	80073d8 <HAL_UART_Transmit>
}
 80014de:	bf00      	nop
 80014e0:	3748      	adds	r7, #72	; 0x48
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200008ac 	.word	0x200008ac
 80014ec:	200008a8 	.word	0x200008a8
 80014f0:	200008b0 	.word	0x200008b0
 80014f4:	42480000 	.word	0x42480000
 80014f8:	42c80000 	.word	0x42c80000
 80014fc:	0800b77c 	.word	0x0800b77c
 8001500:	200008b4 	.word	0x200008b4
 8001504:	20000410 	.word	0x20000410
 8001508:	0800b7a4 	.word	0x0800b7a4

0800150c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001512:	b672      	cpsid	i
}
 8001514:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   uint8_t error_message[] = "\r\n\r\n!!!!!!!!!! Unhandled exception !!!!!!!!!!\r\n";
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <Error_Handler+0x30>)
 8001518:	463c      	mov	r4, r7
 800151a:	461d      	mov	r5, r3
 800151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), 10);
 800152c:	4639      	mov	r1, r7
 800152e:	230a      	movs	r3, #10
 8001530:	2230      	movs	r2, #48	; 0x30
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <Error_Handler+0x34>)
 8001534:	f005 ff50 	bl	80073d8 <HAL_UART_Transmit>
   while (1) {
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x2c>
 800153a:	bf00      	nop
 800153c:	0800b7cc 	.word	0x0800b7cc
 8001540:	20000410 	.word	0x20000410

08001544 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d119      	bne.n	8001588 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	4293      	cmp	r3, r2
 800155c:	d114      	bne.n	8001588 <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 800155e:	200c      	movs	r0, #12
 8001560:	f007 fa5e 	bl	8008a20 <_Znwj>
 8001564:	4603      	mov	r3, r0
 8001566:	461c      	mov	r4, r3
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fa56 	bl	8000a1c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001572:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 8001574:	2008      	movs	r0, #8
 8001576:	f007 fa53 	bl	8008a20 <_Znwj>
 800157a:	4603      	mov	r3, r0
 800157c:	461c      	mov	r4, r3
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff f892 	bl	80006a8 <_ZNSt4DialC1Ev>
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001586:	601c      	str	r4, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	40000400 	.word	0x40000400
 8001594:	200008a8 	.word	0x200008a8
 8001598:	200008ac 	.word	0x200008ac

0800159c <_GLOBAL__sub_I_DMARxDscrTab>:
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
 80015a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff ffcd 	bl	8001544 <_Z41__static_initialization_and_destruction_0ii>
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_MspInit+0x30>)
 80015b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x30>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x30>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58024400 	.word	0x58024400

080015e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a59      	ldr	r2, [pc, #356]	; (8001764 <HAL_ETH_MspInit+0x184>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	f040 80ab 	bne.w	800175a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001604:	4b58      	ldr	r3, [pc, #352]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_ETH_MspInit+0x188>)
 800160c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001610:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001614:	4b54      	ldr	r3, [pc, #336]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800161a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800161e:	623b      	str	r3, [r7, #32]
 8001620:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001628:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_ETH_MspInit+0x188>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001646:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001650:	4b45      	ldr	r3, [pc, #276]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_ETH_MspInit+0x188>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001682:	4a39      	ldr	r2, [pc, #228]	; (8001768 <HAL_ETH_MspInit+0x188>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_ETH_MspInit+0x188>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_ETH_MspInit+0x188>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_ETH_MspInit+0x188>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_ETH_MspInit+0x188>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_ETH_MspInit+0x188>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <HAL_ETH_MspInit+0x188>)
 80016c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_ETH_MspInit+0x188>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016d6:	2332      	movs	r3, #50	; 0x32
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e6:	230b      	movs	r3, #11
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	481e      	ldr	r0, [pc, #120]	; (800176c <HAL_ETH_MspInit+0x18c>)
 80016f2:	f001 f999 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80016f6:	2386      	movs	r3, #134	; 0x86
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001706:	230b      	movs	r3, #11
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <HAL_ETH_MspInit+0x190>)
 8001712:	f001 f989 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001728:	230b      	movs	r3, #11
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <HAL_ETH_MspInit+0x194>)
 8001734:	f001 f978 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001738:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174a:	230b      	movs	r3, #11
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <HAL_ETH_MspInit+0x198>)
 8001756:	f001 f967 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	; 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40028000 	.word	0x40028000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020800 	.word	0x58020800
 8001770:	58020000 	.word	0x58020000
 8001774:	58020400 	.word	0x58020400
 8001778:	58021800 	.word	0x58021800

0800177c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0b8      	sub	sp, #224	; 0xe0
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	22bc      	movs	r2, #188	; 0xbc
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 f9d9 	bl	8008b54 <memset>
  if(hi2c->Instance==I2C1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_I2C_MspInit+0xc0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d142      	bne.n	8001832 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017ac:	2308      	movs	r3, #8
 80017ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f836 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017c6:	f7ff fea1 	bl	800150c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <HAL_I2C_MspInit+0xc8>)
 8001810:	f001 f90a 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 8001816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_I2C_MspInit+0xc4>)
 8001826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	37e0      	adds	r7, #224	; 0xe0
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005400 	.word	0x40005400
 8001840:	58024400 	.word	0x58024400
 8001844:	58020400 	.word	0x58020400

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_TIM_Base_MspInit+0x48>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d116      	bne.n	8001888 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 800186c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	201d      	movs	r0, #29
 800187e:	f000 fc88 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001882:	201d      	movs	r0, #29
 8001884:	f000 fc9f 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40000400 	.word	0x40000400
 8001894:	58024400 	.word	0x58024400

08001898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_TIM_MspPostInit+0x6c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11f      	bne.n	80018fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_TIM_MspPostInit+0x70>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_MspPostInit+0x70>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_TIM_MspPostInit+0x70>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 80018d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_TIM_MspPostInit+0x74>)
 80018f6:	f001 f897 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40000400 	.word	0x40000400
 8001908:	58024400 	.word	0x58024400
 800190c:	58020800 	.word	0x58020800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0b8      	sub	sp, #224	; 0xe0
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	22bc      	movs	r2, #188	; 0xbc
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f007 f90f 	bl	8008b54 <memset>
  if(huart->Instance==USART3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_UART_MspInit+0xc0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d142      	bne.n	80019c6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001940:	2302      	movs	r3, #2
 8001942:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f002 ff6c 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800195a:	f7ff fdd7 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 8001960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 8001966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 8001970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_UART_MspInit+0xc4>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800199a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b4:	2307      	movs	r3, #7
 80019b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_UART_MspInit+0xc8>)
 80019c2:	f001 f831 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	37e0      	adds	r7, #224	; 0xe0
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004800 	.word	0x40004800
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020c00 	.word	0x58020c00

080019dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0b8      	sub	sp, #224	; 0xe0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	22bc      	movs	r2, #188	; 0xbc
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f007 f8a9 	bl	8008b54 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <HAL_PCD_MspInit+0xe8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d156      	bne.n	8001aba <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001a12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 ff04 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001a2a:	f7ff fd6f 	bl	800150c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a2e:	f001 ff51 	bl	80038d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a50:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a74:	4619      	mov	r1, r3
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <HAL_PCD_MspInit+0xf0>)
 8001a78:	f000 ffd6 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a94:	4619      	mov	r1, r3
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <HAL_PCD_MspInit+0xf0>)
 8001a98:	f000 ffc6 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aa8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_PCD_MspInit+0xec>)
 8001aae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	37e0      	adds	r7, #224	; 0xe0
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40080000 	.word	0x40080000
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58020000 	.word	0x58020000

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f000 f9fa 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM3_IRQHandler+0x10>)
 8001b2a:	f004 fbe7 	bl	80062fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200003c4 	.word	0x200003c4

08001b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_kill>:

int _kill(int pid, int sig)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b52:	f006 ffcd 	bl	8008af0 <__errno>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2216      	movs	r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe7 	bl	8001b48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b7a:	e7fe      	b.n	8001b7a <_exit+0x12>

08001b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
	}

return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
	}
	return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f006 ff32 	bl	8008af0 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20020000 	.word	0x20020000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000918 	.word	0x20000918
 8001cc0:	20000940 	.word	0x20000940

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <SystemInit+0xec>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <SystemInit+0xec>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <SystemInit+0xf0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d807      	bhi.n	8001cf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <SystemInit+0xf0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 030f 	bic.w	r3, r3, #15
 8001cec:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <SystemInit+0xf0>)
 8001cee:	f043 0307 	orr.w	r3, r3, #7
 8001cf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <SystemInit+0xf4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <SystemInit+0xf4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <SystemInit+0xf4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <SystemInit+0xf4>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	492b      	ldr	r1, [pc, #172]	; (8001db8 <SystemInit+0xf4>)
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <SystemInit+0xf8>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <SystemInit+0xf0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <SystemInit+0xf0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 030f 	bic.w	r3, r3, #15
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <SystemInit+0xf0>)
 8001d28:	f043 0307 	orr.w	r3, r3, #7
 8001d2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <SystemInit+0xf4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <SystemInit+0xf4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <SystemInit+0xf4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <SystemInit+0xf4>)
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <SystemInit+0xfc>)
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <SystemInit+0xf4>)
 8001d48:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <SystemInit+0x100>)
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <SystemInit+0xf4>)
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <SystemInit+0x104>)
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <SystemInit+0xf4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <SystemInit+0xf4>)
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <SystemInit+0x104>)
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <SystemInit+0xf4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <SystemInit+0xf4>)
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <SystemInit+0x104>)
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <SystemInit+0xf4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <SystemInit+0xf4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <SystemInit+0xf4>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <SystemInit+0xf4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <SystemInit+0x108>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <SystemInit+0x10c>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d8e:	d202      	bcs.n	8001d96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <SystemInit+0x110>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <SystemInit+0x114>)
 8001d98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SystemInit+0xec>)
 8001da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001da4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	52002000 	.word	0x52002000
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dc0:	02020200 	.word	0x02020200
 8001dc4:	01ff0000 	.word	0x01ff0000
 8001dc8:	01010280 	.word	0x01010280
 8001dcc:	5c001000 	.word	0x5c001000
 8001dd0:	ffff0000 	.word	0xffff0000
 8001dd4:	51008108 	.word	0x51008108
 8001dd8:	52004000 	.word	0x52004000

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de0:	f7ff ff70 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f006 fe77 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7fe feab 	bl	8000b68 <main>
  bx  lr
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e20:	0800bc28 	.word	0x0800bc28
  ldr r2, =_sbss
 8001e24:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8001e28:	2000093c 	.word	0x2000093c

08001e2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC3_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e36:	2003      	movs	r0, #3
 8001e38:	f000 f9a0 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e3c:	f002 fb20 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_Init+0x68>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4913      	ldr	r1, [pc, #76]	; (8001e9c <HAL_Init+0x6c>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_Init+0x68>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_Init+0x6c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_Init+0x70>)
 8001e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_Init+0x74>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f814 	bl	8001ea8 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e002      	b.n	8001e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8a:	f7ff fb8f 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	0800b7fc 	.word	0x0800b7fc
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_InitTick+0x60>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e021      	b.n	8001f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_InitTick+0x64>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_InitTick+0x60>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f985 	bl	80021e2 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f000 f94f 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x68>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000008 	.word	0x20000008

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	20000928 	.word	0x20000928

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000928 	.word	0x20000928

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000000c 	.word	0x2000000c

08001f9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetREVID+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	5c001000 	.word	0x5c001000

08001fb4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001fc4:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	58000400 	.word	0x58000400

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <__NVIC_SetPriorityGrouping+0x40>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	4313      	orrs	r3, r2
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <__NVIC_SetPriorityGrouping+0x40>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00
 8002020:	05fa0000 	.word	0x05fa0000

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800215c:	f7ff ff8e 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff29 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff40 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff90 	bl	80020d0 <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff33 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa4 	bl	8002138 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0c6      	b.n	800239c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff f9e2 	bl	80015e0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2223      	movs	r2, #35	; 0x23
 8002220:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	4b60      	ldr	r3, [pc, #384]	; (80023a4 <HAL_ETH_Init+0x1a8>)
 8002224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002228:	4a5e      	ldr	r2, [pc, #376]	; (80023a4 <HAL_ETH_Init+0x1a8>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_ETH_Init+0x1a8>)
 8002234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7a1b      	ldrb	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff feb3 	bl	8001fb4 <HAL_SYSCFG_ETHInterfaceSelect>
 800224e:	e003      	b.n	8002258 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002250:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002254:	f7ff feae 	bl	8001fb4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7ff fe64 	bl	8001f3c <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002276:	e00f      	b.n	8002298 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002278:	f7ff fe60 	bl	8001f3c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002286:	d907      	bls.n	8002298 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	22e0      	movs	r2, #224	; 0xe0
 8002292:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e081      	b.n	800239c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e6      	bne.n	8002278 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fac0 	bl	8002830 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022b0:	f002 fa60 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <HAL_ETH_Init+0x1ac>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3a01      	subs	r2, #1
 80022c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa13 	bl	80026f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022e4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022e8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	22e0      	movs	r2, #224	; 0xe0
 8002300:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e04a      	b.n	800239c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	f241 1308 	movw	r3, #4360	; 0x1108
 800230e:	4413      	add	r3, r2
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_ETH_Init+0x1b0>)
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6952      	ldr	r2, [r2, #20]
 800231a:	0052      	lsls	r2, r2, #1
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	431a      	orrs	r2, r3
 8002322:	f241 1308 	movw	r3, #4360	; 0x1108
 8002326:	440b      	add	r3, r1
 8002328:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fad8 	bl	80028e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fb1c 	bl	800296e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	3305      	adds	r3, #5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	3303      	adds	r3, #3
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	061a      	lsls	r2, r3, #24
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	3302      	adds	r3, #2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	3301      	adds	r3, #1
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002374:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002382:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002384:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2210      	movs	r2, #16
 8002392:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2210      	movs	r2, #16
 8002398:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58024400 	.word	0x58024400
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	ffff8001 	.word	0xffff8001

080023b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80023c2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80023ca:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7b1b      	ldrb	r3, [r3, #12]
 80023d0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80023d2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7b5b      	ldrb	r3, [r3, #13]
 80023d8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023da:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	7b9b      	ldrb	r3, [r3, #14]
 80023e0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	7bdb      	ldrb	r3, [r3, #15]
 80023e8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023ea:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	7c12      	ldrb	r2, [r2, #16]
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	d102      	bne.n	80023fa <ETH_SetMACConfig+0x4a>
 80023f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023f8:	e000      	b.n	80023fc <ETH_SetMACConfig+0x4c>
 80023fa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023fc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	7c52      	ldrb	r2, [r2, #17]
 8002402:	2a00      	cmp	r2, #0
 8002404:	d102      	bne.n	800240c <ETH_SetMACConfig+0x5c>
 8002406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240a:	e000      	b.n	800240e <ETH_SetMACConfig+0x5e>
 800240c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800240e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	7c9b      	ldrb	r3, [r3, #18]
 8002414:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002416:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800241c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002422:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7f1b      	ldrb	r3, [r3, #28]
 8002428:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800242a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7f5b      	ldrb	r3, [r3, #29]
 8002430:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002432:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	7f92      	ldrb	r2, [r2, #30]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d102      	bne.n	8002442 <ETH_SetMACConfig+0x92>
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	e000      	b.n	8002444 <ETH_SetMACConfig+0x94>
 8002442:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002444:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7fdb      	ldrb	r3, [r3, #31]
 800244a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800244c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002454:	2a00      	cmp	r2, #0
 8002456:	d102      	bne.n	800245e <ETH_SetMACConfig+0xae>
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245c:	e000      	b.n	8002460 <ETH_SetMACConfig+0xb0>
 800245e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002460:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002466:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800246e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002470:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <ETH_SetMACConfig+0x22c>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	430b      	orrs	r3, r1
 800248c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800249c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80024a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024ae:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80024b0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d102      	bne.n	80024c2 <ETH_SetMACConfig+0x112>
 80024bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x114>
 80024c2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80024c4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <ETH_SetMACConfig+0x230>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	68f9      	ldr	r1, [r7, #12]
 80024de:	430b      	orrs	r3, r1
 80024e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <ETH_SetMACConfig+0x234>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	430b      	orrs	r3, r1
 8002504:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800250c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002512:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800251a:	2a00      	cmp	r2, #0
 800251c:	d101      	bne.n	8002522 <ETH_SetMACConfig+0x172>
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	e000      	b.n	8002524 <ETH_SetMACConfig+0x174>
 8002522:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002524:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002536:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	430b      	orrs	r3, r1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800254c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002554:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f023 0103 	bic.w	r1, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	430a      	orrs	r2, r1
 800256e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800257a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002596:	2a00      	cmp	r2, #0
 8002598:	d101      	bne.n	800259e <ETH_SetMACConfig+0x1ee>
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	e000      	b.n	80025a0 <ETH_SetMACConfig+0x1f0>
 800259e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80025a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80025b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80025c0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	00048083 	.word	0x00048083
 80025e0:	c0f88000 	.word	0xc0f88000
 80025e4:	fffffef0 	.word	0xfffffef0

080025e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <ETH_SetDMAConfig+0xf8>)
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	6809      	ldr	r1, [r1, #0]
 8002608:	431a      	orrs	r2, r3
 800260a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800260e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800261a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7b1b      	ldrb	r3, [r3, #12]
 8002620:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f241 0304 	movw	r3, #4100	; 0x1004
 800262e:	4413      	add	r3, r2
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <ETH_SetDMAConfig+0xfc>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6811      	ldr	r1, [r2, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	431a      	orrs	r2, r3
 800263e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002642:	440b      	add	r3, r1
 8002644:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7b5b      	ldrb	r3, [r3, #13]
 800264a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <ETH_SetDMAConfig+0x100>)
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	431a      	orrs	r2, r3
 800266a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800266e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7d1b      	ldrb	r3, [r3, #20]
 8002678:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800267a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7f5b      	ldrb	r3, [r3, #29]
 8002680:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f241 1304 	movw	r3, #4356	; 0x1104
 800268e:	4413      	add	r3, r2
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <ETH_SetDMAConfig+0x104>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6811      	ldr	r1, [r2, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	431a      	orrs	r2, r3
 800269e:	f241 1304 	movw	r3, #4356	; 0x1104
 80026a2:	440b      	add	r3, r1
 80026a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7f1b      	ldrb	r3, [r3, #28]
 80026aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80026bc:	4413      	add	r3, r2
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <ETH_SetDMAConfig+0x108>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80026d0:	440b      	add	r3, r1
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	ffff87fd 	.word	0xffff87fd
 80026e4:	ffff2ffe 	.word	0xffff2ffe
 80026e8:	fffec000 	.word	0xfffec000
 80026ec:	ffc0efef 	.word	0xffc0efef
 80026f0:	7fc0ffff 	.word	0x7fc0ffff

080026f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0a4      	sub	sp, #144	; 0x90
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002702:	2300      	movs	r3, #0
 8002704:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800273c:	2300      	movs	r3, #0
 800273e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800274c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002758:	2300      	movs	r3, #0
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800276e:	2300      	movs	r3, #0
 8002770:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002772:	2300      	movs	r3, #0
 8002774:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002776:	2300      	movs	r3, #0
 8002778:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800278c:	2320      	movs	r3, #32
 800278e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800279e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027ce:	2300      	movs	r3, #0
 80027d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fde6 	bl	80023b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002802:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800280c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002814:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fee1 	bl	80025e8 <ETH_SetDMAConfig>
}
 8002826:	bf00      	nop
 8002828:	3790      	adds	r7, #144	; 0x90
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002840:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002848:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800284a:	f001 ff93 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 800284e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d908      	bls.n	800286a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d804      	bhi.n	800286a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e027      	b.n	80028ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d908      	bls.n	8002884 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d204      	bcs.n	8002884 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e01a      	b.n	80028ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d303      	bcc.n	8002894 <ETH_MAC_MDIO_ClkConfig+0x64>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d911      	bls.n	80028b8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d908      	bls.n	80028ae <ETH_MAC_MDIO_ClkConfig+0x7e>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d804      	bhi.n	80028ae <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e005      	b.n	80028ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e000      	b.n	80028ba <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80028b8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	01312cff 	.word	0x01312cff
 80028d0:	02160ebf 	.word	0x02160ebf
 80028d4:	03938700 	.word	0x03938700
 80028d8:	05f5e0ff 	.word	0x05f5e0ff
 80028dc:	08f0d17f 	.word	0x08f0d17f

080028e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e01d      	b.n	800292a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	3206      	adds	r2, #6
 8002920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d9de      	bls.n	80028ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f241 132c 	movw	r3, #4396	; 0x112c
 800293e:	4413      	add	r3, r2
 8002940:	2203      	movs	r2, #3
 8002942:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68d9      	ldr	r1, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002950:	4413      	add	r3, r2
 8002952:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e024      	b.n	80029c6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6919      	ldr	r1, [r3, #16]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3310      	adds	r3, #16
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d9d7      	bls.n	800297c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f241 1330 	movw	r3, #4400	; 0x1130
 80029f2:	4413      	add	r3, r2
 80029f4:	2203      	movs	r2, #3
 80029f6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6919      	ldr	r1, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f241 131c 	movw	r3, #4380	; 0x111c
 8002a04:	4413      	add	r3, r2
 8002a06:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f241 1328 	movw	r3, #4392	; 0x1128
 8002a18:	4413      	add	r3, r2
 8002a1a:	6019      	str	r1, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a36:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_GPIO_Init+0x234>)
 8002a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a3a:	e194      	b.n	8002d66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8186 	beq.w	8002d60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d00b      	beq.n	8002a74 <HAL_GPIO_Init+0x4c>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d007      	beq.n	8002a74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a68:	2b11      	cmp	r3, #17
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b12      	cmp	r3, #18
 8002a72:	d130      	bne.n	8002ad6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aaa:	2201      	movs	r2, #1
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0201 	and.w	r2, r3, #1
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0xee>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b12      	cmp	r3, #18
 8002b14:	d123      	bne.n	8002b5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	69b9      	ldr	r1, [r7, #24]
 8002b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0203 	and.w	r2, r3, #3
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80e0 	beq.w	8002d60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_GPIO_Init+0x238>)
 8002ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba6:	4a2e      	ldr	r2, [pc, #184]	; (8002c60 <HAL_GPIO_Init+0x238>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_GPIO_Init+0x238>)
 8002bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_GPIO_Init+0x23c>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_GPIO_Init+0x240>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d052      	beq.n	8002c90 <HAL_GPIO_Init+0x268>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_GPIO_Init+0x244>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d031      	beq.n	8002c56 <HAL_GPIO_Init+0x22e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <HAL_GPIO_Init+0x248>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02b      	beq.n	8002c52 <HAL_GPIO_Init+0x22a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_GPIO_Init+0x24c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x226>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_GPIO_Init+0x250>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x222>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <HAL_GPIO_Init+0x254>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x21e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_GPIO_Init+0x258>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x21a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_GPIO_Init+0x25c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x216>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_GPIO_Init+0x260>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_GPIO_Init+0x264>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x20e>
 8002c32:	2309      	movs	r3, #9
 8002c34:	e02d      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c36:	230a      	movs	r3, #10
 8002c38:	e02b      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	e029      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c3e:	2307      	movs	r3, #7
 8002c40:	e027      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c42:	2306      	movs	r3, #6
 8002c44:	e025      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c46:	2305      	movs	r3, #5
 8002c48:	e023      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e021      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e01f      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e01d      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e01b      	b.n	8002c92 <HAL_GPIO_Init+0x26a>
 8002c5a:	bf00      	nop
 8002c5c:	58000080 	.word	0x58000080
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58000400 	.word	0x58000400
 8002c68:	58020000 	.word	0x58020000
 8002c6c:	58020400 	.word	0x58020400
 8002c70:	58020800 	.word	0x58020800
 8002c74:	58020c00 	.word	0x58020c00
 8002c78:	58021000 	.word	0x58021000
 8002c7c:	58021400 	.word	0x58021400
 8002c80:	58021800 	.word	0x58021800
 8002c84:	58021c00 	.word	0x58021c00
 8002c88:	58022000 	.word	0x58022000
 8002c8c:	58022400 	.word	0x58022400
 8002c90:	2300      	movs	r3, #0
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	f002 0203 	and.w	r2, r2, #3
 8002c98:	0092      	lsls	r2, r2, #2
 8002c9a:	4093      	lsls	r3, r2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca2:	4938      	ldr	r1, [pc, #224]	; (8002d84 <HAL_GPIO_Init+0x35c>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f ae63 	bne.w	8002a3c <HAL_GPIO_Init+0x14>
  }
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3724      	adds	r7, #36	; 0x24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	58000400 	.word	0x58000400

08002d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
 8002d94:	4613      	mov	r3, r2
 8002d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d98:	787b      	ldrb	r3, [r7, #1]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002da4:	e003      	b.n	8002dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	041a      	lsls	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fcca 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	e006      	b.n	8002e44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d104      	bne.n	8002e56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_I2C_Init+0x11c>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	ea42 0103 	orr.w	r1, r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	021a      	lsls	r2, r3, #8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	02008000 	.word	0x02008000

08002edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	f040 80fd 	bne.w	80030fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x34>
 8002f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0f1      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Mem_Read+0x4e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0ea      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f32:	f7ff f803 	bl	8001f3c <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2319      	movs	r3, #25
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f95b 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d5      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2222      	movs	r2, #34	; 0x22
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7c:	88f8      	ldrh	r0, [r7, #6]
 8002f7e:	893a      	ldrh	r2, [r7, #8]
 8002f80:	8979      	ldrh	r1, [r7, #10]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f8bf 	bl	8003110 <I2C_RequestMemoryRead>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0ad      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d90e      	bls.n	8002fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	; 0xff
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_I2C_Mem_Read+0x22c>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa3d 	bl	8003444 <I2C_TransferConfig>
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_I2C_Mem_Read+0x22c>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa2c 	bl	8003444 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f902 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07c      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d034      	beq.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d130      	bne.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f8d3 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04d      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d90e      	bls.n	800308c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f9dd 	bl	8003444 <I2C_TransferConfig>
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9cc 	bl	8003444 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d19a      	bne.n	8002fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f920 	bl	8003300 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01a      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_I2C_Mem_Read+0x230>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	80002400 	.word	0x80002400
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <I2C_RequestMemoryRead+0xa4>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f984 	bl	8003444 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f89d 	bl	8003280 <I2C_WaitOnTXISFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e02c      	b.n	80031aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	e015      	b.n	800318e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003162:	893b      	ldrh	r3, [r7, #8]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	b29b      	uxth	r3, r3
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f883 	bl	8003280 <I2C_WaitOnTXISFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e012      	b.n	80031aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003184:	893b      	ldrh	r3, [r7, #8]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f831 	bl	8003200 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	80002000 	.word	0x80002000

080031b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d103      	bne.n	80031d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d007      	beq.n	80031f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	619a      	str	r2, [r3, #24]
  }
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003210:	e022      	b.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003218:	d01e      	beq.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe fe8f 	bl	8001f3c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e00f      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	429a      	cmp	r2, r3
 8003274:	d0cd      	beq.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800328c:	e02c      	b.n	80032e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f870 	bl	8003378 <I2C_IsAcknowledgeFailed>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e02a      	b.n	80032f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d01e      	beq.n	80032e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe fe47 	bl	8001f3c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d113      	bne.n	80032e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d1cb      	bne.n	800328e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800330c:	e028      	b.n	8003360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f830 	bl	8003378 <I2C_IsAcknowledgeFailed>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e026      	b.n	8003370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fe fe0b 	bl	8001f3c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d1cf      	bne.n	800330e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d151      	bne.n	8003436 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003392:	e022      	b.n	80033da <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339a:	d01e      	beq.n	80033da <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fe fdce 	bl	8001f3c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_IsAcknowledgeFailed+0x3a>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d113      	bne.n	80033da <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02e      	b.n	8003438 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d1d5      	bne.n	8003394 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2220      	movs	r2, #32
 80033f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff fedd 	bl	80031b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <I2C_IsAcknowledgeFailed+0xc8>)
 800340a:	400b      	ands	r3, r1
 800340c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f043 0204 	orr.w	r2, r3, #4
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fe00e800 	.word	0xfe00e800

08003444 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	817b      	strh	r3, [r7, #10]
 8003452:	4613      	mov	r3, r2
 8003454:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	0d5b      	lsrs	r3, r3, #21
 8003460:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <I2C_TransferConfig+0x58>)
 8003466:	430b      	orrs	r3, r1
 8003468:	43db      	mvns	r3, r3
 800346a:	ea02 0103 	and.w	r1, r2, r3
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003474:	7a7b      	ldrb	r3, [r7, #9]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	03ff63ff 	.word	0x03ff63ff

080034a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d138      	bne.n	8003528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e032      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d139      	bne.n	80035c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003556:	2302      	movs	r3, #2
 8003558:	e033      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003588:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d0:	b08f      	sub	sp, #60	; 0x3c
 80035d2:	af0a      	add	r7, sp, #40	; 0x28
 80035d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e116      	b.n	800380e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe f9ee 	bl	80019dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2203      	movs	r2, #3
 8003604:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f004 ffae 	bl	8008580 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	687e      	ldr	r6, [r7, #4]
 800362c:	466d      	mov	r5, sp
 800362e:	f106 0410 	add.w	r4, r6, #16
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003642:	1d33      	adds	r3, r6, #4
 8003644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f004 ff2c 	bl	80084a4 <USB_CoreInit>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0d7      	b.n	800380e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f004 ff9c 	bl	80085a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e04a      	b.n	8003706 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	333d      	adds	r3, #61	; 0x3d
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	333c      	adds	r3, #60	; 0x3c
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	b298      	uxth	r0, r3
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3342      	adds	r3, #66	; 0x42
 80036ac:	4602      	mov	r2, r0
 80036ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	333f      	adds	r3, #63	; 0x3f
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3344      	adds	r3, #68	; 0x44
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3348      	adds	r3, #72	; 0x48
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3350      	adds	r3, #80	; 0x50
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	3301      	adds	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d3af      	bcc.n	8003670 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e044      	b.n	80037a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3301      	adds	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3b5      	bcc.n	8003716 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	687e      	ldr	r6, [r7, #4]
 80037b2:	466d      	mov	r5, sp
 80037b4:	f106 0410 	add.w	r4, r6, #16
 80037b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c8:	1d33      	adds	r3, r6, #4
 80037ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f004 ff13 	bl	80085f8 <USB_DevInit>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e014      	b.n	800380e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f80b 	bl	8003818 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f005 f8b5 	bl	8008976 <USB_DevDisconnect>

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003818 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_PCDEx_ActivateLPM+0x44>)
 8003848:	4313      	orrs	r3, r2
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	10000003 	.word	0x10000003

08003860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_PWREx_ConfigSupply+0x70>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d00a      	beq.n	800388a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e01f      	b.n	80038c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e01d      	b.n	80038c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_PWREx_ConfigSupply+0x70>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	490f      	ldr	r1, [pc, #60]	; (80038d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4313      	orrs	r3, r2
 8003898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800389a:	f7fe fb4f 	bl	8001f3c <HAL_GetTick>
 800389e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038a0:	e009      	b.n	80038b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038a2:	f7fe fb4b 	bl	8001f3c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b0:	d901      	bls.n	80038b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_PWREx_ConfigSupply+0x70>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c2:	d1ee      	bne.n	80038a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	58024800 	.word	0x58024800

080038d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	58024800 	.word	0x58024800

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	; 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e3ff      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8087 	beq.w	8003a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003914:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391e:	4b97      	ldr	r3, [pc, #604]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	2b10      	cmp	r3, #16
 8003928:	d007      	beq.n	800393a <HAL_RCC_OscConfig+0x46>
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	2b18      	cmp	r3, #24
 800392e:	d110      	bne.n	8003952 <HAL_RCC_OscConfig+0x5e>
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d10b      	bne.n	8003952 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393a:	4b90      	ldr	r3, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d06c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x12c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d168      	bne.n	8003a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e3d9      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x76>
 800395c:	4b87      	ldr	r3, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a86      	ldr	r2, [pc, #536]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e02e      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a81      	ldr	r2, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b7f      	ldr	r3, [pc, #508]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7e      	ldr	r2, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0xbc>
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a78      	ldr	r2, [pc, #480]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 80039b0:	4b72      	ldr	r3, [pc, #456]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a71      	ldr	r2, [pc, #452]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b6f      	ldr	r3, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fab4 	bl	8001f3c <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe fab0 	bl	8001f3c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e38d      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039ea:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe4>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe faa0 	bl	8001f3c <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fa9c 	bl	8001f3c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e379      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a12:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x10c>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80ae 	beq.w	8003b8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a30:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a3a:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_RCC_OscConfig+0x162>
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2b18      	cmp	r3, #24
 8003a4a:	d13a      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x1ce>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d135      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a56:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x17a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e34b      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	f7fe fa95 	bl	8001f9c <HAL_GetREVID>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d817      	bhi.n	8003aac <HAL_RCC_OscConfig+0x1b8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x1a2>
 8003a84:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a8c:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	e07a      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	031b      	lsls	r3, r3, #12
 8003aa4:	4935      	ldr	r1, [pc, #212]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aaa:	e06f      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	4930      	ldr	r1, [pc, #192]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	e064      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d045      	beq.n	8003b56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0219 	bic.w	r2, r3, #25
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4929      	ldr	r1, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fa2e 	bl	8001f3c <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fa2a 	bl	8001f3c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e307      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	f7fe fa4b 	bl	8001f9c <HAL_GetREVID>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d817      	bhi.n	8003b40 <HAL_RCC_OscConfig+0x24c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d108      	bne.n	8003b2a <HAL_RCC_OscConfig+0x236>
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e030      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	031b      	lsls	r3, r3, #12
 8003b38:	4910      	ldr	r1, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 8003b3e:	e025      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	490b      	ldr	r1, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	e01a      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_RCC_OscConfig+0x288>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe f9eb 	bl	8001f3c <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe f9e7 	bl	8001f3c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d903      	bls.n	8003b80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e2c4      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
 8003b7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b80:	4ba4      	ldr	r3, [pc, #656]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a9 	beq.w	8003cec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b9e      	ldr	r3, [pc, #632]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba4:	4b9b      	ldr	r3, [pc, #620]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d007      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2cc>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b18      	cmp	r3, #24
 8003bb4:	d13a      	bne.n	8003c2c <HAL_RCC_OscConfig+0x338>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d135      	bne.n	8003c2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc0:	4b94      	ldr	r3, [pc, #592]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2e4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e296      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd8:	f7fe f9e0 	bl	8001f9c <HAL_GetREVID>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d817      	bhi.n	8003c16 <HAL_RCC_OscConfig+0x322>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003bee:	4b89      	ldr	r3, [pc, #548]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bf6:	4a87      	ldr	r2, [pc, #540]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfe:	e075      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c00:	4b84      	ldr	r3, [pc, #528]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	069b      	lsls	r3, r3, #26
 8003c0e:	4981      	ldr	r1, [pc, #516]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c14:	e06a      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	497b      	ldr	r1, [pc, #492]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c2a:	e05f      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d042      	beq.n	8003cba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c34:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a76      	ldr	r2, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f97c 	bl	8001f3c <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c48:	f7fe f978 	bl	8001f3c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e255      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c66:	f7fe f999 	bl	8001f9c <HAL_GetREVID>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d817      	bhi.n	8003ca4 <HAL_RCC_OscConfig+0x3b0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d108      	bne.n	8003c8e <HAL_RCC_OscConfig+0x39a>
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c84:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	e02e      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
 8003c8e:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	069b      	lsls	r3, r3, #26
 8003c9c:	495d      	ldr	r1, [pc, #372]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
 8003ca2:	e023      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
 8003ca4:	4b5b      	ldr	r3, [pc, #364]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	4958      	ldr	r1, [pc, #352]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
 8003cb8:	e018      	b.n	8003cec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cba:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a55      	ldr	r2, [pc, #340]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7fe f939 	bl	8001f3c <HAL_GetTick>
 8003cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cce:	f7fe f935 	bl	8001f3c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e212      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d036      	beq.n	8003d66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d019      	beq.n	8003d34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d00:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe f916 	bl	8001f3c <HAL_GetTick>
 8003d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fe f912 	bl	8001f3c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1ef      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x420>
 8003d32:	e018      	b.n	8003d66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d38:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fe f8fc 	bl	8001f3c <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe f8f8 	bl	8001f3c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1d5      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d036      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d86:	f7fe f8d9 	bl	8001f3c <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d8e:	f7fe f8d5 	bl	8001f3c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1b2      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x49a>
 8003dac:	e018      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dba:	f7fe f8bf 	bl	8001f3c <HAL_GetTick>
 8003dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dc2:	f7fe f8bb 	bl	8001f3c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e198      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCC_OscConfig+0x520>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8085 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_OscConfig+0x524>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x524>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfa:	f7fe f89f 	bl	8001f3c <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e00:	e00c      	b.n	8003e1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fe f89b 	bl	8001f3c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	; 0x64
 8003e0e:	d905      	bls.n	8003e1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e178      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
 8003e14:	58024400 	.word	0x58024400
 8003e18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1c:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0x784>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ec      	beq.n	8003e02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x54a>
 8003e30:	4b92      	ldr	r3, [pc, #584]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a91      	ldr	r2, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	e02d      	b.n	8003e9a <HAL_RCC_OscConfig+0x5a6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x56c>
 8003e46:	4b8d      	ldr	r3, [pc, #564]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a8c      	ldr	r2, [pc, #560]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b8a      	ldr	r3, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a89      	ldr	r2, [pc, #548]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e01c      	b.n	8003e9a <HAL_RCC_OscConfig+0x5a6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCC_OscConfig+0x58e>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	e00b      	b.n	8003e9a <HAL_RCC_OscConfig+0x5a6>
 8003e82:	4b7e      	ldr	r3, [pc, #504]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a7d      	ldr	r2, [pc, #500]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b7b      	ldr	r3, [pc, #492]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a7a      	ldr	r2, [pc, #488]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003e94:	f023 0304 	bic.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f84b 	bl	8001f3c <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f847 	bl	8001f3c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e122      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec0:	4b6e      	ldr	r3, [pc, #440]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ee      	beq.n	8003eaa <HAL_RCC_OscConfig+0x5b6>
 8003ecc:	e014      	b.n	8003ef8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe f835 	bl	8001f3c <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe f831 	bl	8001f3c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e10c      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eec:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ee      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8101 	beq.w	8004104 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f02:	4b5e      	ldr	r3, [pc, #376]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f0a:	2b18      	cmp	r3, #24
 8003f0c:	f000 80bc 	beq.w	8004088 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	f040 8095 	bne.w	8004044 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b58      	ldr	r3, [pc, #352]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe f809 	bl	8001f3c <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fe f805 	bl	8001f3c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0e2      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f40:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f50:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <HAL_RCC_OscConfig+0x78c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	4946      	ldr	r1, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	628b      	str	r3, [r1, #40]	; 0x28
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	3b01      	subs	r3, #1
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f96:	4939      	ldr	r1, [pc, #228]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f9c:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4a36      	ldr	r2, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <HAL_RCC_OscConfig+0x790>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fb4:	00d2      	lsls	r2, r2, #3
 8003fb6:	4931      	ldr	r1, [pc, #196]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fbc:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f023 020c 	bic.w	r2, r3, #12
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	492c      	ldr	r1, [pc, #176]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f023 0202 	bic.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4928      	ldr	r1, [pc, #160]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8003ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_RCC_OscConfig+0x788>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd ff8e 	bl	8001f3c <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd ff8a 	bl	8001f3c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e067      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x730>
 8004042:	e05f      	b.n	8004104 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_OscConfig+0x788>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x788>)
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd ff74 	bl	8001f3c <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fd ff70 	bl	8001f3c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e04d      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <HAL_RCC_OscConfig+0x788>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x764>
 8004076:	e045      	b.n	8004104 <HAL_RCC_OscConfig+0x810>
 8004078:	58024800 	.word	0x58024800
 800407c:	58024400 	.word	0x58024400
 8004080:	fffffc0c 	.word	0xfffffc0c
 8004084:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x81c>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_OscConfig+0x81c>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b01      	cmp	r3, #1
 800409a:	d031      	beq.n	8004100 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d12a      	bne.n	8004100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d122      	bne.n	8004100 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d11a      	bne.n	8004100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0a5b      	lsrs	r3, r3, #9
 80040ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d111      	bne.n	8004100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d108      	bne.n	8004100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0e1b      	lsrs	r3, r3, #24
 80040f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3730      	adds	r7, #48	; 0x30
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400

08004114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e19c      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004128:	4b8a      	ldr	r3, [pc, #552]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d910      	bls.n	8004158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b87      	ldr	r3, [pc, #540]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 020f 	bic.w	r2, r3, #15
 800413e:	4985      	ldr	r1, [pc, #532]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b83      	ldr	r3, [pc, #524]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e184      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004170:	429a      	cmp	r2, r3
 8004172:	d908      	bls.n	8004186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004174:	4b78      	ldr	r3, [pc, #480]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	4975      	ldr	r1, [pc, #468]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d010      	beq.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800419e:	429a      	cmp	r2, r3
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	496a      	ldr	r1, [pc, #424]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b64      	ldr	r3, [pc, #400]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d908      	bls.n	80041e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	495e      	ldr	r1, [pc, #376]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	4b59      	ldr	r3, [pc, #356]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041fe:	4b56      	ldr	r3, [pc, #344]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4953      	ldr	r1, [pc, #332]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4b4d      	ldr	r3, [pc, #308]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f023 020f 	bic.w	r2, r3, #15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4947      	ldr	r1, [pc, #284]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800423a:	4313      	orrs	r3, r2
 800423c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d055      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4940      	ldr	r1, [pc, #256]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004258:	4313      	orrs	r3, r2
 800425a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004264:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d121      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0f6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d115      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ea      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004294:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0de      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a4:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0d6      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd fe39 	bl	8001f3c <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ce:	f7fd fe35 	bl	8001f3c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0be      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d1eb      	bne.n	80042ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	429a      	cmp	r2, r3
 8004310:	d208      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	490e      	ldr	r1, [pc, #56]	; (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004320:	4313      	orrs	r3, r2
 8004322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d214      	bcs.n	800435c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4906      	ldr	r1, [pc, #24]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e086      	b.n	8004462 <HAL_RCC_ClockConfig+0x34e>
 8004354:	52002000 	.word	0x52002000
 8004358:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004374:	429a      	cmp	r2, r3
 8004376:	d208      	bcs.n	800438a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004378:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4939      	ldr	r1, [pc, #228]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004386:	4313      	orrs	r3, r2
 8004388:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d208      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492e      	ldr	r1, [pc, #184]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d208      	bcs.n	80043e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4922      	ldr	r1, [pc, #136]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043fe:	429a      	cmp	r2, r3
 8004400:	d208      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4917      	ldr	r1, [pc, #92]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004410:	4313      	orrs	r3, r2
 8004412:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004414:	f000 f834 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4912      	ldr	r1, [pc, #72]	; (8004470 <HAL_RCC_ClockConfig+0x35c>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x358>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <HAL_RCC_ClockConfig+0x35c>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_RCC_ClockConfig+0x360>)
 800444a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x364>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x368>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fd26 	bl	8001ea8 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400
 8004470:	0800b7fc 	.word	0x0800b7fc
 8004474:	20000004 	.word	0x20000004
 8004478:	20000000 	.word	0x20000000
 800447c:	20000008 	.word	0x20000008

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004486:	4bb3      	ldr	r3, [pc, #716]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448e:	2b18      	cmp	r3, #24
 8004490:	f200 8155 	bhi.w	800473e <HAL_RCC_GetSysClockFreq+0x2be>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	08004501 	.word	0x08004501
 80044a0:	0800473f 	.word	0x0800473f
 80044a4:	0800473f 	.word	0x0800473f
 80044a8:	0800473f 	.word	0x0800473f
 80044ac:	0800473f 	.word	0x0800473f
 80044b0:	0800473f 	.word	0x0800473f
 80044b4:	0800473f 	.word	0x0800473f
 80044b8:	0800473f 	.word	0x0800473f
 80044bc:	08004527 	.word	0x08004527
 80044c0:	0800473f 	.word	0x0800473f
 80044c4:	0800473f 	.word	0x0800473f
 80044c8:	0800473f 	.word	0x0800473f
 80044cc:	0800473f 	.word	0x0800473f
 80044d0:	0800473f 	.word	0x0800473f
 80044d4:	0800473f 	.word	0x0800473f
 80044d8:	0800473f 	.word	0x0800473f
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800473f 	.word	0x0800473f
 80044e4:	0800473f 	.word	0x0800473f
 80044e8:	0800473f 	.word	0x0800473f
 80044ec:	0800473f 	.word	0x0800473f
 80044f0:	0800473f 	.word	0x0800473f
 80044f4:	0800473f 	.word	0x0800473f
 80044f8:	0800473f 	.word	0x0800473f
 80044fc:	08004533 	.word	0x08004533
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004500:	4b94      	ldr	r3, [pc, #592]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800450c:	4b91      	ldr	r3, [pc, #580]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	4a90      	ldr	r2, [pc, #576]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800451e:	e111      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004520:	4b8d      	ldr	r3, [pc, #564]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004522:	61bb      	str	r3, [r7, #24]
    break;
 8004524:	e10e      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004526:	4b8d      	ldr	r3, [pc, #564]	; (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004528:	61bb      	str	r3, [r7, #24]
    break;
 800452a:	e10b      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800452c:	4b8c      	ldr	r3, [pc, #560]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800452e:	61bb      	str	r3, [r7, #24]
    break;
 8004530:	e108      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800453c:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004546:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004548:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004552:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80e1 	beq.w	8004738 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8083 	beq.w	8004684 <HAL_RCC_GetSysClockFreq+0x204>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b02      	cmp	r3, #2
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x114>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d056      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004592:	e099      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a02 	vldr	s12, [r7, #8]
 80045de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045fa:	e087      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e8>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004622:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463e:	e065      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b40      	ldr	r3, [pc, #256]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a02 	vldr	s12, [r7, #8]
 8004666:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004682:	e043      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c6:	e021      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800476c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800470a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004716:	3301      	adds	r3, #1
 8004718:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004724:	edd7 6a07 	vldr	s13, [r7, #28]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004730:	ee17 3a90 	vmov	r3, s15
 8004734:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
    break;
 800473c:	e002      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004740:	61bb      	str	r3, [r7, #24]
    break;
 8004742:	bf00      	nop
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	03d09000 	.word	0x03d09000
 800475c:	003d0900 	.word	0x003d0900
 8004760:	007a1200 	.word	0x007a1200
 8004764:	46000000 	.word	0x46000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4a742400 	.word	0x4a742400
 8004770:	4af42400 	.word	0x4af42400

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800477a:	f7ff fe81 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490f      	ldr	r1, [pc, #60]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_RCC_GetHCLKFreq+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	0800b7fc 	.word	0x0800b7fc
 80047cc:	20000004 	.word	0x20000004
 80047d0:	20000000 	.word	0x20000000

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047d8:	f7ff ffcc 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400
 80047fc:	0800b7fc 	.word	0x0800b7fc

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004804:	f7ff ffb6 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58024400 	.word	0x58024400
 8004828:	0800b7fc 	.word	0x0800b7fc

0800482c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004838:	2300      	movs	r3, #0
 800483a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03f      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004850:	d02a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004852:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004856:	d824      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485c:	d018      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800485e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004862:	d81e      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486c:	d007      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800486e:	e018      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4bab      	ldr	r3, [pc, #684]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4aaa      	ldr	r2, [pc, #680]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800487c:	e015      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f9cf 	bl	8005c28 <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800488e:	e00c      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3324      	adds	r3, #36	; 0x24
 8004894:	2102      	movs	r1, #2
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fa78 	bl	8005d8c <RCCEx_PLL3_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
      break;
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048b0:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048bc:	4998      	ldr	r1, [pc, #608]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	650b      	str	r3, [r1, #80]	; 0x50
 80048c2:	e001      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d03d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d826      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	080048f9 	.word	0x080048f9
 80048e8:	08004907 	.word	0x08004907
 80048ec:	08004919 	.word	0x08004919
 80048f0:	08004931 	.word	0x08004931
 80048f4:	08004931 	.word	0x08004931
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f8:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4a88      	ldr	r2, [pc, #544]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004904:	e015      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f001 f98b 	bl	8005c28 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004916:	e00c      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 fa34 	bl	8005d8c <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004928:	e003      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
      break;
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004938:	4b79      	ldr	r3, [pc, #484]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	f023 0207 	bic.w	r2, r3, #7
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	4976      	ldr	r1, [pc, #472]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	650b      	str	r3, [r1, #80]	; 0x50
 800494a:	e001      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004958:	2b00      	cmp	r3, #0
 800495a:	d042      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d02b      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496a:	d825      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800496c:	2bc0      	cmp	r3, #192	; 0xc0
 800496e:	d028      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004970:	2bc0      	cmp	r3, #192	; 0xc0
 8004972:	d821      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d016      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d81d      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d007      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004984:	e018      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4b66      	ldr	r3, [pc, #408]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a65      	ldr	r2, [pc, #404]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004992:	e017      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f944 	bl	8005c28 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049a4:	e00e      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3324      	adds	r3, #36	; 0x24
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f9ed 	bl	8005d8c <RCCEx_PLL3_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049b6:	e005      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049ca:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	4952      	ldr	r1, [pc, #328]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	650b      	str	r3, [r1, #80]	; 0x50
 80049dc:	e001      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d049      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049f8:	d030      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fe:	d82a      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a04:	d02c      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a0a:	d824      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a10:	d018      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a16:	d81e      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a20:	d007      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a22:	e018      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4a3d      	ldr	r2, [pc, #244]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a30:	e017      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f8f5 	bl	8005c28 <RCCEx_PLL2_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a42:	e00e      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3324      	adds	r3, #36	; 0x24
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f99e 	bl	8005d8c <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a54:	e005      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a68:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a76:	492a      	ldr	r1, [pc, #168]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	658b      	str	r3, [r1, #88]	; 0x58
 8004a7c:	e001      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04c      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d030      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9e:	d82a      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aa4:	d02c      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004aa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aaa:	d824      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab0:	d018      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab6:	d81e      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac0:	d007      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ac2:	e018      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ad0:	e017      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 f8a5 	bl	8005c28 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ae2:	e00e      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f94e 	bl	8005d8c <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004af4:	e005      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10d      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b16:	4902      	ldr	r1, [pc, #8]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b1c:	e004      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d032      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d01c      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d817      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d00c      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d813      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d10f      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b50:	4baf      	ldr	r3, [pc, #700]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4aae      	ldr	r2, [pc, #696]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b5c:	e00e      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2102      	movs	r1, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f85f 	bl	8005c28 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b6e:	e005      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b82:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	49a0      	ldr	r1, [pc, #640]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d047      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bae:	d030      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d82a      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bba:	d02c      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004bbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc0:	d824      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d018      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d81e      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d007      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004bd8:	e018      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bda:	4b8d      	ldr	r3, [pc, #564]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	4a8c      	ldr	r2, [pc, #560]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004be6:	e017      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 f81a 	bl	8005c28 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bf8:	e00e      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3324      	adds	r3, #36	; 0x24
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 f8c3 	bl	8005d8c <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c0a:	e005      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	e002      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c1e:	4b7c      	ldr	r3, [pc, #496]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	4979      	ldr	r1, [pc, #484]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c30:	e001      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d049      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c4a:	d02e      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c50:	d828      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c56:	d02a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c5c:	d822      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c62:	d026      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004c64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c68:	d81c      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c74:	d816      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01d      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d111      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ffce 	bl	8005c28 <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c90:	e012      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3324      	adds	r3, #36	; 0x24
 8004c96:	2101      	movs	r1, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f877 	bl	8005d8c <RCCEx_PLL3_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cbe:	4b54      	ldr	r3, [pc, #336]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	4951      	ldr	r1, [pc, #324]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd0:	e001      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d04b      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cec:	d02e      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf2:	d828      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d02a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d822      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d04:	d026      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d0a:	d81c      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d10:	d010      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d16:	d816      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d20:	d111      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 ff7d 	bl	8005c28 <RCCEx_PLL2_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d32:	e012      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f826 	bl	8005d8c <RCCEx_PLL3_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d44:	e009      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4a:	e006      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d4c:	bf00      	nop
 8004d4e:	e004      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d50:	bf00      	nop
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d6e:	4928      	ldr	r1, [pc, #160]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	658b      	str	r3, [r1, #88]	; 0x58
 8004d74:	e001      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d02f      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8e:	d00e      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d814      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d015      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2101      	movs	r1, #1
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 ff37 	bl	8005c28 <RCCEx_PLL2_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	490d      	ldr	r1, [pc, #52]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	650b      	str	r3, [r1, #80]	; 0x50
 8004de0:	e001      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d033      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d81c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e3b 	.word	0x08004e3b
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e23 	.word	0x08004e23
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e14:	4bb8      	ldr	r3, [pc, #736]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	4ab7      	ldr	r2, [pc, #732]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e20:	e00c      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fefd 	bl	8005c28 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e42:	4bad      	ldr	r3, [pc, #692]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	f023 0203 	bic.w	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	49aa      	ldr	r1, [pc, #680]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e54:	e001      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8086 	beq.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e68:	4ba4      	ldr	r3, [pc, #656]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4aa3      	ldr	r2, [pc, #652]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e74:	f7fd f862 	bl	8001f3c <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7a:	e009      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7c:	f7fd f85e 	bl	8001f3c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d902      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e8e:	e005      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e90:	4b9a      	ldr	r3, [pc, #616]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ef      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d166      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ea2:	4b95      	ldr	r3, [pc, #596]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eac:	4053      	eors	r3, r2
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d013      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eb6:	4b90      	ldr	r3, [pc, #576]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec0:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	4a8c      	ldr	r2, [pc, #560]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ecc:	4b8a      	ldr	r3, [pc, #552]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a89      	ldr	r2, [pc, #548]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ed8:	4a87      	ldr	r2, [pc, #540]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d115      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fd f827 	bl	8001f3c <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fd f823 	bl	8001f3c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	75fb      	strb	r3, [r7, #23]
            break;
 8004f08:	e005      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ed      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d126      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f3a:	0919      	lsrs	r1, r3, #4
 8004f3c:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	496d      	ldr	r1, [pc, #436]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
 8004f46:	e005      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f48:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4a6a      	ldr	r2, [pc, #424]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f52:	6113      	str	r3, [r2, #16]
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f62:	4965      	ldr	r1, [pc, #404]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	670b      	str	r3, [r1, #112]	; 0x70
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	75bb      	strb	r3, [r7, #22]
 8004f6e:	e001      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d07e      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f84:	2b28      	cmp	r3, #40	; 0x28
 8004f86:	d867      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	0800505f 	.word	0x0800505f
 8004f94:	08005059 	.word	0x08005059
 8004f98:	08005059 	.word	0x08005059
 8004f9c:	08005059 	.word	0x08005059
 8004fa0:	08005059 	.word	0x08005059
 8004fa4:	08005059 	.word	0x08005059
 8004fa8:	08005059 	.word	0x08005059
 8004fac:	08005059 	.word	0x08005059
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	08005059 	.word	0x08005059
 8004fb8:	08005059 	.word	0x08005059
 8004fbc:	08005059 	.word	0x08005059
 8004fc0:	08005059 	.word	0x08005059
 8004fc4:	08005059 	.word	0x08005059
 8004fc8:	08005059 	.word	0x08005059
 8004fcc:	08005059 	.word	0x08005059
 8004fd0:	08005047 	.word	0x08005047
 8004fd4:	08005059 	.word	0x08005059
 8004fd8:	08005059 	.word	0x08005059
 8004fdc:	08005059 	.word	0x08005059
 8004fe0:	08005059 	.word	0x08005059
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005059 	.word	0x08005059
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	0800505f 	.word	0x0800505f
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	08005059 	.word	0x08005059
 8005000:	08005059 	.word	0x08005059
 8005004:	08005059 	.word	0x08005059
 8005008:	08005059 	.word	0x08005059
 800500c:	08005059 	.word	0x08005059
 8005010:	0800505f 	.word	0x0800505f
 8005014:	08005059 	.word	0x08005059
 8005018:	08005059 	.word	0x08005059
 800501c:	08005059 	.word	0x08005059
 8005020:	08005059 	.word	0x08005059
 8005024:	08005059 	.word	0x08005059
 8005028:	08005059 	.word	0x08005059
 800502c:	08005059 	.word	0x08005059
 8005030:	0800505f 	.word	0x0800505f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	2101      	movs	r1, #1
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fdf4 	bl	8005c28 <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005044:	e00c      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3324      	adds	r3, #36	; 0x24
 800504a:	2101      	movs	r1, #1
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fe9d 	bl	8005d8c <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005056:	e003      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
      break;
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800505e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	4921      	ldr	r1, [pc, #132]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	654b      	str	r3, [r1, #84]	; 0x54
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d03e      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	2b05      	cmp	r3, #5
 8005090:	d820      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050db 	.word	0x080050db
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050c3 	.word	0x080050c3
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2101      	movs	r1, #1
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fdb6 	bl	8005c28 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050c0:	e00c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	2101      	movs	r1, #1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fe5f 	bl	8005d8c <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
      break;
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80050da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d110      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f023 0207 	bic.w	r2, r3, #7
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ee:	4902      	ldr	r1, [pc, #8]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	654b      	str	r3, [r1, #84]	; 0x54
 80050f4:	e008      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
 80050fc:	58024800 	.word	0x58024800
 8005100:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d039      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	2b05      	cmp	r3, #5
 800511c:	d820      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005167 	.word	0x08005167
 8005128:	0800513d 	.word	0x0800513d
 800512c:	0800514f 	.word	0x0800514f
 8005130:	08005167 	.word	0x08005167
 8005134:	08005167 	.word	0x08005167
 8005138:	08005167 	.word	0x08005167
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fd70 	bl	8005c28 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800514c:	e00c      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe19 	bl	8005d8c <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800516e:	4bb7      	ldr	r3, [pc, #732]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	49b3      	ldr	r1, [pc, #716]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800517e:	4313      	orrs	r3, r2
 8005180:	658b      	str	r3, [r1, #88]	; 0x58
 8005182:	e001      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d04b      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800519a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800519e:	d02e      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80051a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051a4:	d828      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d02a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d822      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b6:	d026      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051bc:	d81c      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c2:	d010      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80051c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c8:	d816      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01d      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d2:	d111      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fd24 	bl	8005c28 <RCCEx_PLL2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051e4:	e012      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3324      	adds	r3, #36	; 0x24
 80051ea:	2102      	movs	r1, #2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fdcd 	bl	8005d8c <RCCEx_PLL3_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051f6:	e009      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
      break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800520a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005212:	4b8e      	ldr	r3, [pc, #568]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005220:	498a      	ldr	r1, [pc, #552]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005222:	4313      	orrs	r3, r2
 8005224:	654b      	str	r3, [r1, #84]	; 0x54
 8005226:	e001      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d04b      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800523e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005242:	d02e      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005244:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005248:	d828      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d02a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005254:	d822      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800525a:	d026      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800525c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005260:	d81c      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d010      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526c:	d816      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01d      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005276:	d111      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fcd2 	bl	8005c28 <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005288:	e012      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	2102      	movs	r1, #2
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fd7b 	bl	8005d8c <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800529a:	e009      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
      break;
 80052a0:	e006      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052b6:	4b65      	ldr	r3, [pc, #404]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c4:	4961      	ldr	r1, [pc, #388]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	658b      	str	r3, [r1, #88]	; 0x58
 80052ca:	e001      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d04b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052e6:	d02e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80052e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052ec:	d828      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f2:	d02a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	d822      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052fe:	d026      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005300:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005304:	d81c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530a:	d010      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800530c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005310:	d816      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01d      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531a:	d111      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc80 	bl	8005c28 <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800532c:	e012      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	2102      	movs	r1, #2
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fd29 	bl	8005d8c <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	e006      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005346:	bf00      	nop
 8005348:	e004      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800534a:	bf00      	nop
 800534c:	e002      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005368:	4938      	ldr	r1, [pc, #224]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800536a:	4313      	orrs	r3, r2
 800536c:	658b      	str	r3, [r1, #88]	; 0x58
 800536e:	e001      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	d10a      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3324      	adds	r3, #36	; 0x24
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fcfa 	bl	8005d8c <RCCEx_PLL3_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053a2:	4b2a      	ldr	r3, [pc, #168]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b0:	4926      	ldr	r1, [pc, #152]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053cc:	d10a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fcd9 	bl	8005d8c <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f2:	4916      	ldr	r1, [pc, #88]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d036      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800540a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540e:	d01f      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005414:	d817      	bhi.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541e:	d009      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005420:	e011      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fbfd 	bl	8005c28 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005432:	e00e      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3324      	adds	r3, #36	; 0x24
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fca6 	bl	8005d8c <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005444:	e005      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	75fb      	strb	r3, [r7, #23]
      break;
 800544a:	e002      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800544c:	58024400 	.word	0x58024400
      break;
 8005450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005458:	4b93      	ldr	r3, [pc, #588]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005466:	4990      	ldr	r1, [pc, #576]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	658b      	str	r3, [r1, #88]	; 0x58
 800546c:	e001      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d033      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005488:	d01c      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800548a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800548e:	d816      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005494:	d003      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549a:	d007      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800549c:	e00f      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549e:	4b82      	ldr	r3, [pc, #520]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	4a81      	ldr	r2, [pc, #516]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054aa:	e00c      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fc6a 	bl	8005d8c <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054bc:	e003      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
      break;
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80054c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054cc:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054da:	4973      	ldr	r1, [pc, #460]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	654b      	str	r3, [r1, #84]	; 0x54
 80054e0:	e001      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d029      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fe:	d007      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005500:	e00f      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005502:	4b69      	ldr	r3, [pc, #420]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	4a68      	ldr	r2, [pc, #416]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800550e:	e00b      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	2102      	movs	r1, #2
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fb86 	bl	8005c28 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005520:	e002      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
      break;
 8005526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800552e:	4b5e      	ldr	r3, [pc, #376]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	495b      	ldr	r1, [pc, #364]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005540:	e001      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fc17 	bl	8005d8c <RCCEx_PLL3_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d030      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557c:	d017      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800557e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005582:	d811      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005588:	d013      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800558a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558e:	d80b      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d106      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559a:	4b43      	ldr	r3, [pc, #268]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4a42      	ldr	r2, [pc, #264]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055a6:	e007      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
      break;
 80055ac:	e004      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055be:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ca:	4937      	ldr	r1, [pc, #220]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	654b      	str	r3, [r1, #84]	; 0x54
 80055d0:	e001      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e2:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	492e      	ldr	r1, [pc, #184]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005600:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800560e:	4926      	ldr	r1, [pc, #152]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005620:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800562c:	491e      	ldr	r1, [pc, #120]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563e:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005648:	6113      	str	r3, [r2, #16]
 800564a:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005654:	4914      	ldr	r1, [pc, #80]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	da08      	bge.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566e:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005670:	4313      	orrs	r3, r2
 8005672:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	4906      	ldr	r1, [pc, #24]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005694:	7dbb      	ldrb	r3, [r7, #22]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	58024400 	.word	0x58024400

080056ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056b0:	f7ff f860 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	58024400 	.word	0x58024400
 80056d4:	0800b7fc 	.word	0x0800b7fc

080056d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056e0:	4ba1      	ldr	r3, [pc, #644]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056ea:	4b9f      	ldr	r3, [pc, #636]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	0b1b      	lsrs	r3, r3, #12
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056f6:	4b9c      	ldr	r3, [pc, #624]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005702:	4b99      	ldr	r3, [pc, #612]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8111 	beq.w	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f000 8083 	beq.w	8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b02      	cmp	r3, #2
 8005732:	f200 80a1 	bhi.w	8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d056      	beq.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005742:	e099      	b.n	8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005744:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02d      	beq.n	80057ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005750:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	4a84      	ldr	r2, [pc, #528]	; (800596c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b7b      	ldr	r3, [pc, #492]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a03 	vldr	s12, [r7, #12]
 800578e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057aa:	e087      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	e065      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a03 	vldr	s12, [r7, #12]
 8005816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005832:	e043      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b48      	ldr	r3, [pc, #288]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a03 	vldr	s12, [r7, #12]
 800585a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005876:	e021      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	0a5b      	lsrs	r3, r3, #9
 80058c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e2:	ee17 2a90 	vmov	r2, s15
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005904:	edd7 6a07 	vldr	s13, [r7, #28]
 8005908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005910:	ee17 2a90 	vmov	r2, s15
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005946:	e008      	b.n	800595a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	46000000 	.word	0x46000000
 8005974:	4c742400 	.word	0x4c742400
 8005978:	4a742400 	.word	0x4a742400
 800597c:	4af42400 	.word	0x4af42400

08005980 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005988:	4ba1      	ldr	r3, [pc, #644]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005992:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	0d1b      	lsrs	r3, r3, #20
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800599e:	4b9c      	ldr	r3, [pc, #624]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059aa:	4b99      	ldr	r3, [pc, #612]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8111 	beq.w	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f000 8083 	beq.w	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	f200 80a1 	bhi.w	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d056      	beq.n	8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059ea:	e099      	b.n	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ec:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02d      	beq.n	8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059f8:	4b85      	ldr	r3, [pc, #532]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	4a84      	ldr	r2, [pc, #528]	; (8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a52:	e087      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a96:	e065      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aaa:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005abe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ada:	e043      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aee:	4b48      	ldr	r3, [pc, #288]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b1e:	e021      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b32:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b64:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	0a5b      	lsrs	r3, r3, #9
 8005b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8a:	ee17 2a90 	vmov	r2, s15
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	0c1b      	lsrs	r3, r3, #16
 8005b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb8:	ee17 2a90 	vmov	r2, s15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bc0:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	0e1b      	lsrs	r3, r3, #24
 8005bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be6:	ee17 2a90 	vmov	r2, s15
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bee:	e008      	b.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	3724      	adds	r7, #36	; 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	58024400 	.word	0x58024400
 8005c14:	03d09000 	.word	0x03d09000
 8005c18:	46000000 	.word	0x46000000
 8005c1c:	4c742400 	.word	0x4c742400
 8005c20:	4a742400 	.word	0x4a742400
 8005c24:	4af42400 	.word	0x4af42400

08005c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c36:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d101      	bne.n	8005c46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e099      	b.n	8005d7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c46:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4e      	ldr	r2, [pc, #312]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c52:	f7fc f973 	bl	8001f3c <HAL_GetTick>
 8005c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c58:	e008      	b.n	8005c6c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c5a:	f7fc f96f 	bl	8001f3c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e086      	b.n	8005d7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c6c:	4b45      	ldr	r3, [pc, #276]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	493f      	ldr	r1, [pc, #252]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	025b      	lsls	r3, r3, #9
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	061b      	lsls	r3, r3, #24
 8005cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cbc:	4931      	ldr	r1, [pc, #196]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cc2:	4b30      	ldr	r3, [pc, #192]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	492d      	ldr	r1, [pc, #180]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f023 0220 	bic.w	r2, r3, #32
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	4928      	ldr	r1, [pc, #160]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ce6:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cec:	f023 0310 	bic.w	r3, r3, #16
 8005cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf6:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <RCCEx_PLL2_Config+0x160>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	69d2      	ldr	r2, [r2, #28]
 8005cfe:	00d2      	lsls	r2, r2, #3
 8005d00:	4920      	ldr	r1, [pc, #128]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d0c:	f043 0310 	orr.w	r3, r3, #16
 8005d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d24:	e00f      	b.n	8005d46 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d106      	bne.n	8005d3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d38:	e005      	b.n	8005d46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d52:	f7fc f8f3 	bl	8001f3c <HAL_GetTick>
 8005d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d58:	e008      	b.n	8005d6c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d5a:	f7fc f8ef 	bl	8001f3c <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e006      	b.n	8005d7a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <RCCEx_PLL2_Config+0x15c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
 8005d88:	ffff0007 	.word	0xffff0007

08005d8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d9a:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d101      	bne.n	8005daa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e099      	b.n	8005ede <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005daa:	4b4f      	ldr	r3, [pc, #316]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db6:	f7fc f8c1 	bl	8001f3c <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dbe:	f7fc f8bd 	bl	8001f3c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e086      	b.n	8005ede <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dd0:	4b45      	ldr	r3, [pc, #276]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	051b      	lsls	r3, r3, #20
 8005dea:	493f      	ldr	r1, [pc, #252]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	628b      	str	r3, [r1, #40]	; 0x28
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	025b      	lsls	r3, r3, #9
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	061b      	lsls	r3, r3, #24
 8005e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e20:	4931      	ldr	r1, [pc, #196]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	492d      	ldr	r1, [pc, #180]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4928      	ldr	r1, [pc, #160]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <RCCEx_PLL3_Config+0x160>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	69d2      	ldr	r2, [r2, #28]
 8005e62:	00d2      	lsls	r2, r2, #3
 8005e64:	4920      	ldr	r1, [pc, #128]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e88:	e00f      	b.n	8005eaa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d106      	bne.n	8005e9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e9c:	e005      	b.n	8005eaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a0e      	ldr	r2, [pc, #56]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fc f841 	bl	8001f3c <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ebc:	e008      	b.n	8005ed0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ebe:	f7fc f83d 	bl	8001f3c <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e006      	b.n	8005ede <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <RCCEx_PLL3_Config+0x15c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	ffff0007 	.word	0xffff0007

08005ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e049      	b.n	8005f96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fc96 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f000 fd30 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e049      	b.n	8006044 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f841 	bl	800604c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f000 fcd9 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_TIM_PWM_Start_IT+0x24>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e03c      	b.n	80060fe <HAL_TIM_PWM_Start_IT+0x9e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b04      	cmp	r3, #4
 8006088:	d109      	bne.n	800609e <HAL_TIM_PWM_Start_IT+0x3e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e02f      	b.n	80060fe <HAL_TIM_PWM_Start_IT+0x9e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d109      	bne.n	80060b8 <HAL_TIM_PWM_Start_IT+0x58>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e022      	b.n	80060fe <HAL_TIM_PWM_Start_IT+0x9e>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d109      	bne.n	80060d2 <HAL_TIM_PWM_Start_IT+0x72>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e015      	b.n	80060fe <HAL_TIM_PWM_Start_IT+0x9e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d109      	bne.n	80060ec <HAL_TIM_PWM_Start_IT+0x8c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e008      	b.n	80060fe <HAL_TIM_PWM_Start_IT+0x9e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e0e2      	b.n	80062cc <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Start_IT+0xb6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	e023      	b.n	800615e <HAL_TIM_PWM_Start_IT+0xfe>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d104      	bne.n	8006126 <HAL_TIM_PWM_Start_IT+0xc6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	e01b      	b.n	800615e <HAL_TIM_PWM_Start_IT+0xfe>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start_IT+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006134:	e013      	b.n	800615e <HAL_TIM_PWM_Start_IT+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start_IT+0xe6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006144:	e00b      	b.n	800615e <HAL_TIM_PWM_Start_IT+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start_IT+0xf6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006154:	e003      	b.n	800615e <HAL_TIM_PWM_Start_IT+0xfe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b0c      	cmp	r3, #12
 8006162:	d841      	bhi.n	80061e8 <HAL_TIM_PWM_Start_IT+0x188>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <HAL_TIM_PWM_Start_IT+0x10c>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	080061a1 	.word	0x080061a1
 8006170:	080061e9 	.word	0x080061e9
 8006174:	080061e9 	.word	0x080061e9
 8006178:	080061e9 	.word	0x080061e9
 800617c:	080061b3 	.word	0x080061b3
 8006180:	080061e9 	.word	0x080061e9
 8006184:	080061e9 	.word	0x080061e9
 8006188:	080061e9 	.word	0x080061e9
 800618c:	080061c5 	.word	0x080061c5
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061e9 	.word	0x080061e9
 8006198:	080061e9 	.word	0x080061e9
 800619c:	080061d7 	.word	0x080061d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0202 	orr.w	r2, r2, #2
 80061ae:	60da      	str	r2, [r3, #12]
      break;
 80061b0:	e01b      	b.n	80061ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0204 	orr.w	r2, r2, #4
 80061c0:	60da      	str	r2, [r3, #12]
      break;
 80061c2:	e012      	b.n	80061ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0208 	orr.w	r2, r2, #8
 80061d2:	60da      	str	r2, [r3, #12]
      break;
 80061d4:	e009      	b.n	80061ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0210 	orr.w	r2, r2, #16
 80061e4:	60da      	str	r2, [r3, #12]
      break;
 80061e6:	e000      	b.n	80061ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80061e8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 ffd4 	bl	80071a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a35      	ldr	r2, [pc, #212]	; (80062d4 <HAL_TIM_PWM_Start_IT+0x274>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_TIM_PWM_Start_IT+0x1ca>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <HAL_TIM_PWM_Start_IT+0x278>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_TIM_PWM_Start_IT+0x1ca>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a32      	ldr	r2, [pc, #200]	; (80062dc <HAL_TIM_PWM_Start_IT+0x27c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_TIM_PWM_Start_IT+0x1ca>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a31      	ldr	r2, [pc, #196]	; (80062e0 <HAL_TIM_PWM_Start_IT+0x280>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_TIM_PWM_Start_IT+0x1ca>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <HAL_TIM_PWM_Start_IT+0x284>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_Start_IT+0x1ce>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_TIM_PWM_Start_IT+0x1d0>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <HAL_TIM_PWM_Start_IT+0x274>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01d      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d018      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_TIM_PWM_Start_IT+0x288>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_TIM_PWM_Start_IT+0x28c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_TIM_PWM_Start_IT+0x290>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <HAL_TIM_PWM_Start_IT+0x278>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIM_PWM_Start_IT+0x22a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_TIM_PWM_Start_IT+0x294>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d115      	bne.n	80062b6 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_TIM_PWM_Start_IT+0x298>)
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b06      	cmp	r3, #6
 800629a:	d015      	beq.n	80062c8 <HAL_TIM_PWM_Start_IT+0x268>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a2:	d011      	beq.n	80062c8 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	e008      	b.n	80062c8 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e000      	b.n	80062ca <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40001800 	.word	0x40001800
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0202 	mvn.w	r2, #2
 8006328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb14 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fb06 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fa ffd7 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d122      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d11b      	bne.n	80063ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0204 	mvn.w	r2, #4
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 faea 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fadc 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fa ffad 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d122      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d11b      	bne.n	8006400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0208 	mvn.w	r2, #8
 80063d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fac0 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 80063ec:	e005      	b.n	80063fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fab2 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fa ff83 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b10      	cmp	r3, #16
 800640c:	d122      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b10      	cmp	r3, #16
 800641a:	d11b      	bne.n	8006454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0210 	mvn.w	r2, #16
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2208      	movs	r2, #8
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa96 	bl	800696c <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa88 	bl	8006958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fa ff59 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0201 	mvn.w	r2, #1
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa62 	bl	8006944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 ff32 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d10e      	bne.n	80064da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b80      	cmp	r3, #128	; 0x80
 80064c8:	d107      	bne.n	80064da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 ff25 	bl	8007324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d10e      	bne.n	8006506 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d107      	bne.n	8006506 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa3d 	bl	8006980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b20      	cmp	r3, #32
 8006512:	d10e      	bne.n	8006532 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b20      	cmp	r3, #32
 8006520:	d107      	bne.n	8006532 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0220 	mvn.w	r2, #32
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fee5 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006552:	2302      	movs	r3, #2
 8006554:	e0fd      	b.n	8006752 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b14      	cmp	r3, #20
 8006562:	f200 80f0 	bhi.w	8006746 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	080065c1 	.word	0x080065c1
 8006570:	08006747 	.word	0x08006747
 8006574:	08006747 	.word	0x08006747
 8006578:	08006747 	.word	0x08006747
 800657c:	08006601 	.word	0x08006601
 8006580:	08006747 	.word	0x08006747
 8006584:	08006747 	.word	0x08006747
 8006588:	08006747 	.word	0x08006747
 800658c:	08006643 	.word	0x08006643
 8006590:	08006747 	.word	0x08006747
 8006594:	08006747 	.word	0x08006747
 8006598:	08006747 	.word	0x08006747
 800659c:	08006683 	.word	0x08006683
 80065a0:	08006747 	.word	0x08006747
 80065a4:	08006747 	.word	0x08006747
 80065a8:	08006747 	.word	0x08006747
 80065ac:	080066c5 	.word	0x080066c5
 80065b0:	08006747 	.word	0x08006747
 80065b4:	08006747 	.word	0x08006747
 80065b8:	08006747 	.word	0x08006747
 80065bc:	08006705 	.word	0x08006705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fa7e 	bl	8006ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0208 	orr.w	r2, r2, #8
 80065da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0204 	bic.w	r2, r2, #4
 80065ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6999      	ldr	r1, [r3, #24]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	619a      	str	r2, [r3, #24]
      break;
 80065fe:	e0a3      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 faee 	bl	8006be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800661a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6999      	ldr	r1, [r3, #24]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	021a      	lsls	r2, r3, #8
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	619a      	str	r2, [r3, #24]
      break;
 8006640:	e082      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fb57 	bl	8006cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0208 	orr.w	r2, r2, #8
 800665c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0204 	bic.w	r2, r2, #4
 800666c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69d9      	ldr	r1, [r3, #28]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	61da      	str	r2, [r3, #28]
      break;
 8006680:	e062      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fbbd 	bl	8006e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69d9      	ldr	r1, [r3, #28]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	61da      	str	r2, [r3, #28]
      break;
 80066c2:	e041      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fc04 	bl	8006ed8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0208 	orr.w	r2, r2, #8
 80066de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0204 	bic.w	r2, r2, #4
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006702:	e021      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fc46 	bl	8006f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800671e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	021a      	lsls	r2, r3, #8
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006746:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop

0800675c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_TIM_ConfigClockSource+0x18>
 8006770:	2302      	movs	r3, #2
 8006772:	e0db      	b.n	800692c <HAL_TIM_ConfigClockSource+0x1d0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4b69      	ldr	r3, [pc, #420]	; (8006934 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800679a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a63      	ldr	r2, [pc, #396]	; (8006938 <HAL_TIM_ConfigClockSource+0x1dc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f000 80a9 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 80067b0:	4a61      	ldr	r2, [pc, #388]	; (8006938 <HAL_TIM_ConfigClockSource+0x1dc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	f200 80ae 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 80067b8:	4a60      	ldr	r2, [pc, #384]	; (800693c <HAL_TIM_ConfigClockSource+0x1e0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f000 80a1 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 80067c0:	4a5e      	ldr	r2, [pc, #376]	; (800693c <HAL_TIM_ConfigClockSource+0x1e0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f200 80a6 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 80067c8:	4a5d      	ldr	r2, [pc, #372]	; (8006940 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f000 8099 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 80067d0:	4a5b      	ldr	r2, [pc, #364]	; (8006940 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f200 809e 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 80067d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067dc:	f000 8091 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 80067e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067e4:	f200 8096 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 80067e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ec:	f000 8089 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 80067f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f4:	f200 808e 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d03e      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x120>
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006802:	f200 8087 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	f000 8085 	beq.w	8006918 <HAL_TIM_ConfigClockSource+0x1bc>
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d87f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d01a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xf2>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d87b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 800681c:	2b60      	cmp	r3, #96	; 0x60
 800681e:	d050      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x166>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d877      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d03c      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x146>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d873      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d058      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x186>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d86f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d064      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d86b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d060      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d867      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05c      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d05a      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800684c:	e062      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f000 fc7f 	bl	8007160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006870:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	609a      	str	r2, [r3, #8]
      break;
 800687a:	e04e      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f000 fc68 	bl	8007160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689e:	609a      	str	r2, [r3, #8]
      break;
 80068a0:	e03b      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 fbd8 	bl	8007064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2150      	movs	r1, #80	; 0x50
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fc32 	bl	8007124 <TIM_ITRx_SetConfig>
      break;
 80068c0:	e02b      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f000 fbf7 	bl	80070c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2160      	movs	r1, #96	; 0x60
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fc22 	bl	8007124 <TIM_ITRx_SetConfig>
      break;
 80068e0:	e01b      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6859      	ldr	r1, [r3, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f000 fbb8 	bl	8007064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2140      	movs	r1, #64	; 0x40
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fc12 	bl	8007124 <TIM_ITRx_SetConfig>
      break;
 8006900:	e00b      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 fc09 	bl	8007124 <TIM_ITRx_SetConfig>
        break;
 8006912:	e002      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006914:	bf00      	nop
 8006916:	e000      	b.n	800691a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	ffceff88 	.word	0xffceff88
 8006938:	00100040 	.word	0x00100040
 800693c:	00100030 	.word	0x00100030
 8006940:	00100020 	.word	0x00100020

08006944 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a40      	ldr	r2, [pc, #256]	; (8006aa8 <TIM_Base_SetConfig+0x114>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b2:	d00f      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a3d      	ldr	r2, [pc, #244]	; (8006aac <TIM_Base_SetConfig+0x118>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a3c      	ldr	r2, [pc, #240]	; (8006ab0 <TIM_Base_SetConfig+0x11c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a3b      	ldr	r2, [pc, #236]	; (8006ab4 <TIM_Base_SetConfig+0x120>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3a      	ldr	r2, [pc, #232]	; (8006ab8 <TIM_Base_SetConfig+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d108      	bne.n	80069e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2f      	ldr	r2, [pc, #188]	; (8006aa8 <TIM_Base_SetConfig+0x114>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01f      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f4:	d01b      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <TIM_Base_SetConfig+0x118>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d017      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2b      	ldr	r2, [pc, #172]	; (8006ab0 <TIM_Base_SetConfig+0x11c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <TIM_Base_SetConfig+0x120>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00f      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <TIM_Base_SetConfig+0x124>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a28      	ldr	r2, [pc, #160]	; (8006abc <TIM_Base_SetConfig+0x128>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d007      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <TIM_Base_SetConfig+0x12c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_Base_SetConfig+0x9a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <TIM_Base_SetConfig+0x130>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d108      	bne.n	8006a40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a10      	ldr	r2, [pc, #64]	; (8006aa8 <TIM_Base_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_Base_SetConfig+0xf8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <TIM_Base_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0xf8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a11      	ldr	r2, [pc, #68]	; (8006abc <TIM_Base_SetConfig+0x128>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0xf8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <TIM_Base_SetConfig+0x12c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0xf8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a0f      	ldr	r2, [pc, #60]	; (8006ac4 <TIM_Base_SetConfig+0x130>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	615a      	str	r2, [r3, #20]
}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40010400 	.word	0x40010400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400
 8006ac4:	40014800 	.word	0x40014800

08006ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4b37      	ldr	r3, [pc, #220]	; (8006bd0 <TIM_OC1_SetConfig+0x108>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 0302 	bic.w	r3, r3, #2
 8006b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <TIM_OC1_SetConfig+0x10c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_OC1_SetConfig+0x7c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2c      	ldr	r2, [pc, #176]	; (8006bd8 <TIM_OC1_SetConfig+0x110>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00b      	beq.n	8006b44 <TIM_OC1_SetConfig+0x7c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <TIM_OC1_SetConfig+0x114>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_OC1_SetConfig+0x7c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <TIM_OC1_SetConfig+0x118>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC1_SetConfig+0x7c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <TIM_OC1_SetConfig+0x11c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d10c      	bne.n	8006b5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f023 0308 	bic.w	r3, r3, #8
 8006b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <TIM_OC1_SetConfig+0x10c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00f      	beq.n	8006b86 <TIM_OC1_SetConfig+0xbe>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <TIM_OC1_SetConfig+0x110>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00b      	beq.n	8006b86 <TIM_OC1_SetConfig+0xbe>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <TIM_OC1_SetConfig+0x114>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_OC1_SetConfig+0xbe>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <TIM_OC1_SetConfig+0x118>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_OC1_SetConfig+0xbe>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <TIM_OC1_SetConfig+0x11c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d111      	bne.n	8006baa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	fffeff8f 	.word	0xfffeff8f
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0210 	bic.w	r2, r3, #16
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4b34      	ldr	r3, [pc, #208]	; (8006ce4 <TIM_OC2_SetConfig+0xfc>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0320 	bic.w	r3, r3, #32
 8006c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <TIM_OC2_SetConfig+0x100>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC2_SetConfig+0x68>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a28      	ldr	r2, [pc, #160]	; (8006cec <TIM_OC2_SetConfig+0x104>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10d      	bne.n	8006c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <TIM_OC2_SetConfig+0x100>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00f      	beq.n	8006c94 <TIM_OC2_SetConfig+0xac>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <TIM_OC2_SetConfig+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00b      	beq.n	8006c94 <TIM_OC2_SetConfig+0xac>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <TIM_OC2_SetConfig+0x108>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d007      	beq.n	8006c94 <TIM_OC2_SetConfig+0xac>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1b      	ldr	r2, [pc, #108]	; (8006cf4 <TIM_OC2_SetConfig+0x10c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC2_SetConfig+0xac>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a1a      	ldr	r2, [pc, #104]	; (8006cf8 <TIM_OC2_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d113      	bne.n	8006cbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	feff8fff 	.word	0xfeff8fff
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40010400 	.word	0x40010400
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800

08006cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <TIM_OC3_SetConfig+0xf8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0x66>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <TIM_OC3_SetConfig+0xfc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10d      	bne.n	8006d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <TIM_OC3_SetConfig+0xf8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00f      	beq.n	8006da6 <TIM_OC3_SetConfig+0xaa>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <TIM_OC3_SetConfig+0xfc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00b      	beq.n	8006da6 <TIM_OC3_SetConfig+0xaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <TIM_OC3_SetConfig+0x100>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d007      	beq.n	8006da6 <TIM_OC3_SetConfig+0xaa>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <TIM_OC3_SetConfig+0x104>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC3_SetConfig+0xaa>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <TIM_OC3_SetConfig+0x108>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d113      	bne.n	8006dce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <TIM_OC4_SetConfig+0xbc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_OC4_SetConfig+0x80>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <TIM_OC4_SetConfig+0xc0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_OC4_SetConfig+0x80>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <TIM_OC4_SetConfig+0xc4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_OC4_SetConfig+0x80>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <TIM_OC4_SetConfig+0xc8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC4_SetConfig+0x80>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a14      	ldr	r2, [pc, #80]	; (8006ed4 <TIM_OC4_SetConfig+0xcc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d109      	bne.n	8006e9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40010400 	.word	0x40010400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <TIM_OC5_SetConfig+0xb0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00f      	beq.n	8006f4e <TIM_OC5_SetConfig+0x76>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <TIM_OC5_SetConfig+0xb4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00b      	beq.n	8006f4e <TIM_OC5_SetConfig+0x76>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <TIM_OC5_SetConfig+0xb8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d007      	beq.n	8006f4e <TIM_OC5_SetConfig+0x76>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a14      	ldr	r2, [pc, #80]	; (8006f94 <TIM_OC5_SetConfig+0xbc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC5_SetConfig+0x76>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <TIM_OC5_SetConfig+0xc0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d109      	bne.n	8006f62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	621a      	str	r2, [r3, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800

08006f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a18      	ldr	r2, [pc, #96]	; (8007050 <TIM_OC6_SetConfig+0xb4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00f      	beq.n	8007014 <TIM_OC6_SetConfig+0x78>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	; (8007054 <TIM_OC6_SetConfig+0xb8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00b      	beq.n	8007014 <TIM_OC6_SetConfig+0x78>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a16      	ldr	r2, [pc, #88]	; (8007058 <TIM_OC6_SetConfig+0xbc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d007      	beq.n	8007014 <TIM_OC6_SetConfig+0x78>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC6_SetConfig+0xc0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_OC6_SetConfig+0x78>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_OC6_SetConfig+0xc4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d109      	bne.n	8007028 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800701a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800

08007064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0201 	bic.w	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 030a 	bic.w	r3, r3, #10
 80070a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0210 	bic.w	r2, r3, #16
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <TIM_ITRx_SetConfig+0x38>)
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	f043 0307 	orr.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	609a      	str	r2, [r3, #8]
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	ffcfff8f 	.word	0xffcfff8f

08007160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800717a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	021a      	lsls	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	431a      	orrs	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	609a      	str	r2, [r3, #8]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2201      	movs	r2, #1
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007200:	2302      	movs	r3, #2
 8007202:	e068      	b.n	80072d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2e      	ldr	r2, [pc, #184]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d108      	bne.n	800724a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800723e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d018      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d10c      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40010400 	.word	0x40010400
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e042      	b.n	80073d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7fa fad7 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2224      	movs	r2, #36	; 0x24
 8007366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8c2 	bl	8007504 <UART_SetConfig>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e022      	b.n	80073d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fe16 	bl	8007fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fe9d 	bl	8008108 <UART_CheckIdleState>
 80073ce:	4603      	mov	r3, r0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	f040 8083 	bne.w	80074fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_UART_Transmit+0x28>
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e07b      	b.n	80074fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_UART_Transmit+0x3a>
 800740e:	2302      	movs	r3, #2
 8007410:	e074      	b.n	80074fc <HAL_UART_Transmit+0x124>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742a:	f7fa fd87 	bl	8001f3c <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d108      	bne.n	800745c <HAL_UART_Transmit+0x84>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	e003      	b.n	8007464 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800746c:	e02c      	b.n	80074c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fe90 	bl	800819e <UART_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e039      	b.n	80074fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e007      	b.n	80074b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1cc      	bne.n	800746e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	2140      	movs	r1, #64	; 0x40
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fe5d 	bl	800819e <UART_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e006      	b.n	80074fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e000      	b.n	80074fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80074fa:	2302      	movs	r3, #2
  }
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007504:	b5b0      	push	{r4, r5, r7, lr}
 8007506:	b08e      	sub	sp, #56	; 0x38
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	4313      	orrs	r3, r2
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	4bbf      	ldr	r3, [pc, #764]	; (8007830 <UART_SetConfig+0x32c>)
 8007532:	4013      	ands	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800753a:	430b      	orrs	r3, r1
 800753c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4ab5      	ldr	r2, [pc, #724]	; (8007834 <UART_SetConfig+0x330>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756a:	4313      	orrs	r3, r2
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	4bb0      	ldr	r3, [pc, #704]	; (8007838 <UART_SetConfig+0x334>)
 8007576:	4013      	ands	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800757e:	430b      	orrs	r3, r1
 8007580:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	f023 010f 	bic.w	r1, r3, #15
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4aa7      	ldr	r2, [pc, #668]	; (800783c <UART_SetConfig+0x338>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d176      	bne.n	8007690 <UART_SetConfig+0x18c>
 80075a2:	4ba7      	ldr	r3, [pc, #668]	; (8007840 <UART_SetConfig+0x33c>)
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075aa:	2b28      	cmp	r3, #40	; 0x28
 80075ac:	d86c      	bhi.n	8007688 <UART_SetConfig+0x184>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0xb0>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	08007659 	.word	0x08007659
 80075b8:	08007689 	.word	0x08007689
 80075bc:	08007689 	.word	0x08007689
 80075c0:	08007689 	.word	0x08007689
 80075c4:	08007689 	.word	0x08007689
 80075c8:	08007689 	.word	0x08007689
 80075cc:	08007689 	.word	0x08007689
 80075d0:	08007689 	.word	0x08007689
 80075d4:	08007661 	.word	0x08007661
 80075d8:	08007689 	.word	0x08007689
 80075dc:	08007689 	.word	0x08007689
 80075e0:	08007689 	.word	0x08007689
 80075e4:	08007689 	.word	0x08007689
 80075e8:	08007689 	.word	0x08007689
 80075ec:	08007689 	.word	0x08007689
 80075f0:	08007689 	.word	0x08007689
 80075f4:	08007669 	.word	0x08007669
 80075f8:	08007689 	.word	0x08007689
 80075fc:	08007689 	.word	0x08007689
 8007600:	08007689 	.word	0x08007689
 8007604:	08007689 	.word	0x08007689
 8007608:	08007689 	.word	0x08007689
 800760c:	08007689 	.word	0x08007689
 8007610:	08007689 	.word	0x08007689
 8007614:	08007671 	.word	0x08007671
 8007618:	08007689 	.word	0x08007689
 800761c:	08007689 	.word	0x08007689
 8007620:	08007689 	.word	0x08007689
 8007624:	08007689 	.word	0x08007689
 8007628:	08007689 	.word	0x08007689
 800762c:	08007689 	.word	0x08007689
 8007630:	08007689 	.word	0x08007689
 8007634:	08007679 	.word	0x08007679
 8007638:	08007689 	.word	0x08007689
 800763c:	08007689 	.word	0x08007689
 8007640:	08007689 	.word	0x08007689
 8007644:	08007689 	.word	0x08007689
 8007648:	08007689 	.word	0x08007689
 800764c:	08007689 	.word	0x08007689
 8007650:	08007689 	.word	0x08007689
 8007654:	08007681 	.word	0x08007681
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765e:	e222      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007666:	e21e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800766e:	e21a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007676:	e216      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007678:	2320      	movs	r3, #32
 800767a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767e:	e212      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007680:	2340      	movs	r3, #64	; 0x40
 8007682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007686:	e20e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768e:	e20a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a6b      	ldr	r2, [pc, #428]	; (8007844 <UART_SetConfig+0x340>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d130      	bne.n	80076fc <UART_SetConfig+0x1f8>
 800769a:	4b69      	ldr	r3, [pc, #420]	; (8007840 <UART_SetConfig+0x33c>)
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	d826      	bhi.n	80076f4 <UART_SetConfig+0x1f0>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0x1a8>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076ed 	.word	0x080076ed
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ca:	e1ec      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d2:	e1e8      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076da:	e1e4      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e2:	e1e0      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076e4:	2320      	movs	r3, #32
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ea:	e1dc      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076ec:	2340      	movs	r3, #64	; 0x40
 80076ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f2:	e1d8      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fa:	e1d4      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a51      	ldr	r2, [pc, #324]	; (8007848 <UART_SetConfig+0x344>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d130      	bne.n	8007768 <UART_SetConfig+0x264>
 8007706:	4b4e      	ldr	r3, [pc, #312]	; (8007840 <UART_SetConfig+0x33c>)
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	2b05      	cmp	r3, #5
 8007710:	d826      	bhi.n	8007760 <UART_SetConfig+0x25c>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <UART_SetConfig+0x214>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007731 	.word	0x08007731
 800771c:	08007739 	.word	0x08007739
 8007720:	08007741 	.word	0x08007741
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e1b6      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007738:	2304      	movs	r3, #4
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e1b2      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007740:	2308      	movs	r3, #8
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e1ae      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007748:	2310      	movs	r3, #16
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e1aa      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007750:	2320      	movs	r3, #32
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007756:	e1a6      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007758:	2340      	movs	r3, #64	; 0x40
 800775a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775e:	e1a2      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007760:	2380      	movs	r3, #128	; 0x80
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e19e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a37      	ldr	r2, [pc, #220]	; (800784c <UART_SetConfig+0x348>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d130      	bne.n	80077d4 <UART_SetConfig+0x2d0>
 8007772:	4b33      	ldr	r3, [pc, #204]	; (8007840 <UART_SetConfig+0x33c>)
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b05      	cmp	r3, #5
 800777c:	d826      	bhi.n	80077cc <UART_SetConfig+0x2c8>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <UART_SetConfig+0x280>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	0800779d 	.word	0x0800779d
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077ad 	.word	0x080077ad
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077c5 	.word	0x080077c5
 800779c:	2300      	movs	r3, #0
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e180      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077a4:	2304      	movs	r3, #4
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e17c      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077ac:	2308      	movs	r3, #8
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e178      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077b4:	2310      	movs	r3, #16
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e174      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077bc:	2320      	movs	r3, #32
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e170      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e16c      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e168      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <UART_SetConfig+0x34c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d142      	bne.n	8007864 <UART_SetConfig+0x360>
 80077de:	4b18      	ldr	r3, [pc, #96]	; (8007840 <UART_SetConfig+0x33c>)
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d838      	bhi.n	800785c <UART_SetConfig+0x358>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0x2ec>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007809 	.word	0x08007809
 80077f4:	08007811 	.word	0x08007811
 80077f8:	08007819 	.word	0x08007819
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007829 	.word	0x08007829
 8007804:	08007855 	.word	0x08007855
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e14a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007810:	2304      	movs	r3, #4
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e146      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007818:	2308      	movs	r3, #8
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e142      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007820:	2310      	movs	r3, #16
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e13e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007828:	2320      	movs	r3, #32
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e13a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007830:	cfff69f3 	.word	0xcfff69f3
 8007834:	58000c00 	.word	0x58000c00
 8007838:	11fff4ff 	.word	0x11fff4ff
 800783c:	40011000 	.word	0x40011000
 8007840:	58024400 	.word	0x58024400
 8007844:	40004400 	.word	0x40004400
 8007848:	40004800 	.word	0x40004800
 800784c:	40004c00 	.word	0x40004c00
 8007850:	40005000 	.word	0x40005000
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800785a:	e124      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 800785c:	2380      	movs	r3, #128	; 0x80
 800785e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007862:	e120      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4acc      	ldr	r2, [pc, #816]	; (8007b9c <UART_SetConfig+0x698>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d176      	bne.n	800795c <UART_SetConfig+0x458>
 800786e:	4bcc      	ldr	r3, [pc, #816]	; (8007ba0 <UART_SetConfig+0x69c>)
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007876:	2b28      	cmp	r3, #40	; 0x28
 8007878:	d86c      	bhi.n	8007954 <UART_SetConfig+0x450>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <UART_SetConfig+0x37c>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007925 	.word	0x08007925
 8007884:	08007955 	.word	0x08007955
 8007888:	08007955 	.word	0x08007955
 800788c:	08007955 	.word	0x08007955
 8007890:	08007955 	.word	0x08007955
 8007894:	08007955 	.word	0x08007955
 8007898:	08007955 	.word	0x08007955
 800789c:	08007955 	.word	0x08007955
 80078a0:	0800792d 	.word	0x0800792d
 80078a4:	08007955 	.word	0x08007955
 80078a8:	08007955 	.word	0x08007955
 80078ac:	08007955 	.word	0x08007955
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007955 	.word	0x08007955
 80078b8:	08007955 	.word	0x08007955
 80078bc:	08007955 	.word	0x08007955
 80078c0:	08007935 	.word	0x08007935
 80078c4:	08007955 	.word	0x08007955
 80078c8:	08007955 	.word	0x08007955
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	0800793d 	.word	0x0800793d
 80078e4:	08007955 	.word	0x08007955
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007955 	.word	0x08007955
 80078f8:	08007955 	.word	0x08007955
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007945 	.word	0x08007945
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007955 	.word	0x08007955
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
 8007920:	0800794d 	.word	0x0800794d
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792a:	e0bc      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007932:	e0b8      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793a:	e0b4      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007942:	e0b0      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794a:	e0ac      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007952:	e0a8      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795a:	e0a4      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a90      	ldr	r2, [pc, #576]	; (8007ba4 <UART_SetConfig+0x6a0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d130      	bne.n	80079c8 <UART_SetConfig+0x4c4>
 8007966:	4b8e      	ldr	r3, [pc, #568]	; (8007ba0 <UART_SetConfig+0x69c>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b05      	cmp	r3, #5
 8007970:	d826      	bhi.n	80079c0 <UART_SetConfig+0x4bc>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0x474>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007991 	.word	0x08007991
 800797c:	08007999 	.word	0x08007999
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079b1 	.word	0x080079b1
 800798c:	080079b9 	.word	0x080079b9
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007996:	e086      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007998:	2304      	movs	r3, #4
 800799a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800799e:	e082      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a6:	e07e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ae:	e07a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079b0:	2320      	movs	r3, #32
 80079b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b6:	e076      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079be:	e072      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079c6:	e06e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a76      	ldr	r2, [pc, #472]	; (8007ba8 <UART_SetConfig+0x6a4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d130      	bne.n	8007a34 <UART_SetConfig+0x530>
 80079d2:	4b73      	ldr	r3, [pc, #460]	; (8007ba0 <UART_SetConfig+0x69c>)
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d826      	bhi.n	8007a2c <UART_SetConfig+0x528>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <UART_SetConfig+0x4e0>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	080079fd 	.word	0x080079fd
 80079e8:	08007a05 	.word	0x08007a05
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a02:	e050      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a04:	2304      	movs	r3, #4
 8007a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0a:	e04c      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a12:	e048      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a14:	2310      	movs	r3, #16
 8007a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1a:	e044      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a22:	e040      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2a:	e03c      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a2c:	2380      	movs	r3, #128	; 0x80
 8007a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a32:	e038      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a5c      	ldr	r2, [pc, #368]	; (8007bac <UART_SetConfig+0x6a8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d130      	bne.n	8007aa0 <UART_SetConfig+0x59c>
 8007a3e:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <UART_SetConfig+0x69c>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	d826      	bhi.n	8007a98 <UART_SetConfig+0x594>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x54c>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a79 	.word	0x08007a79
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e01a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e016      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e012      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e00e      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e00a      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e006      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007a98:	2380      	movs	r3, #128	; 0x80
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e002      	b.n	8007aa6 <UART_SetConfig+0x5a2>
 8007aa0:	2380      	movs	r3, #128	; 0x80
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a40      	ldr	r2, [pc, #256]	; (8007bac <UART_SetConfig+0x6a8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	f040 80ef 	bne.w	8007c90 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	dc46      	bgt.n	8007b48 <UART_SetConfig+0x644>
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	f2c0 8081 	blt.w	8007bc2 <UART_SetConfig+0x6be>
 8007ac0:	3b02      	subs	r3, #2
 8007ac2:	2b1e      	cmp	r3, #30
 8007ac4:	d87d      	bhi.n	8007bc2 <UART_SetConfig+0x6be>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <UART_SetConfig+0x5c8>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007b4f 	.word	0x08007b4f
 8007ad0:	08007bc3 	.word	0x08007bc3
 8007ad4:	08007b57 	.word	0x08007b57
 8007ad8:	08007bc3 	.word	0x08007bc3
 8007adc:	08007bc3 	.word	0x08007bc3
 8007ae0:	08007bc3 	.word	0x08007bc3
 8007ae4:	08007b67 	.word	0x08007b67
 8007ae8:	08007bc3 	.word	0x08007bc3
 8007aec:	08007bc3 	.word	0x08007bc3
 8007af0:	08007bc3 	.word	0x08007bc3
 8007af4:	08007bc3 	.word	0x08007bc3
 8007af8:	08007bc3 	.word	0x08007bc3
 8007afc:	08007bc3 	.word	0x08007bc3
 8007b00:	08007bc3 	.word	0x08007bc3
 8007b04:	08007b77 	.word	0x08007b77
 8007b08:	08007bc3 	.word	0x08007bc3
 8007b0c:	08007bc3 	.word	0x08007bc3
 8007b10:	08007bc3 	.word	0x08007bc3
 8007b14:	08007bc3 	.word	0x08007bc3
 8007b18:	08007bc3 	.word	0x08007bc3
 8007b1c:	08007bc3 	.word	0x08007bc3
 8007b20:	08007bc3 	.word	0x08007bc3
 8007b24:	08007bc3 	.word	0x08007bc3
 8007b28:	08007bc3 	.word	0x08007bc3
 8007b2c:	08007bc3 	.word	0x08007bc3
 8007b30:	08007bc3 	.word	0x08007bc3
 8007b34:	08007bc3 	.word	0x08007bc3
 8007b38:	08007bc3 	.word	0x08007bc3
 8007b3c:	08007bc3 	.word	0x08007bc3
 8007b40:	08007bc3 	.word	0x08007bc3
 8007b44:	08007bb5 	.word	0x08007bb5
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d036      	beq.n	8007bba <UART_SetConfig+0x6b6>
 8007b4c:	e039      	b.n	8007bc2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b4e:	f7fd fdad 	bl	80056ac <HAL_RCCEx_GetD3PCLK1Freq>
 8007b52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b54:	e03b      	b.n	8007bce <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b56:	f107 0314 	add.w	r3, r7, #20
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd fdbc 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b64:	e033      	b.n	8007bce <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd ff08 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b74:	e02b      	b.n	8007bce <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b76:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <UART_SetConfig+0x69c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <UART_SetConfig+0x69c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	4a08      	ldr	r2, [pc, #32]	; (8007bb0 <UART_SetConfig+0x6ac>)
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b94:	e01b      	b.n	8007bce <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <UART_SetConfig+0x6ac>)
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b9a:	e018      	b.n	8007bce <UART_SetConfig+0x6ca>
 8007b9c:	40011400 	.word	0x40011400
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	40007800 	.word	0x40007800
 8007ba8:	40007c00 	.word	0x40007c00
 8007bac:	58000c00 	.word	0x58000c00
 8007bb0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bb4:	4bc4      	ldr	r3, [pc, #784]	; (8007ec8 <UART_SetConfig+0x9c4>)
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bb8:	e009      	b.n	8007bce <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bc0:	e005      	b.n	8007bce <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 81da 	beq.w	8007f8a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	4abc      	ldr	r2, [pc, #752]	; (8007ecc <UART_SetConfig+0x9c8>)
 8007bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be0:	461a      	mov	r2, r3
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007be8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d305      	bcc.n	8007c06 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c00:	6a3a      	ldr	r2, [r7, #32]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d903      	bls.n	8007c0e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c0c:	e1bd      	b.n	8007f8a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	4618      	mov	r0, r3
 8007c12:	f04f 0100 	mov.w	r1, #0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	4aac      	ldr	r2, [pc, #688]	; (8007ecc <UART_SetConfig+0x9c8>)
 8007c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	f7f8 fbb3 	bl	8000390 <__aeabi_uldivmod>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	020b      	lsls	r3, r1, #8
 8007c3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c40:	0202      	lsls	r2, r0, #8
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	6849      	ldr	r1, [r1, #4]
 8007c46:	0849      	lsrs	r1, r1, #1
 8007c48:	4608      	mov	r0, r1
 8007c4a:	f04f 0100 	mov.w	r1, #0
 8007c4e:	1814      	adds	r4, r2, r0
 8007c50:	eb43 0501 	adc.w	r5, r3, r1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fb95 	bl	8000390 <__aeabi_uldivmod>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c74:	d308      	bcc.n	8007c88 <UART_SetConfig+0x784>
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7c:	d204      	bcs.n	8007c88 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	e180      	b.n	8007f8a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c8e:	e17c      	b.n	8007f8a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c98:	f040 80bf 	bne.w	8007e1a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	dc49      	bgt.n	8007d38 <UART_SetConfig+0x834>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db7c      	blt.n	8007da2 <UART_SetConfig+0x89e>
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	d87a      	bhi.n	8007da2 <UART_SetConfig+0x89e>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <UART_SetConfig+0x7b0>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007d3f 	.word	0x08007d3f
 8007cb8:	08007d47 	.word	0x08007d47
 8007cbc:	08007da3 	.word	0x08007da3
 8007cc0:	08007da3 	.word	0x08007da3
 8007cc4:	08007d4f 	.word	0x08007d4f
 8007cc8:	08007da3 	.word	0x08007da3
 8007ccc:	08007da3 	.word	0x08007da3
 8007cd0:	08007da3 	.word	0x08007da3
 8007cd4:	08007d5f 	.word	0x08007d5f
 8007cd8:	08007da3 	.word	0x08007da3
 8007cdc:	08007da3 	.word	0x08007da3
 8007ce0:	08007da3 	.word	0x08007da3
 8007ce4:	08007da3 	.word	0x08007da3
 8007ce8:	08007da3 	.word	0x08007da3
 8007cec:	08007da3 	.word	0x08007da3
 8007cf0:	08007da3 	.word	0x08007da3
 8007cf4:	08007d6f 	.word	0x08007d6f
 8007cf8:	08007da3 	.word	0x08007da3
 8007cfc:	08007da3 	.word	0x08007da3
 8007d00:	08007da3 	.word	0x08007da3
 8007d04:	08007da3 	.word	0x08007da3
 8007d08:	08007da3 	.word	0x08007da3
 8007d0c:	08007da3 	.word	0x08007da3
 8007d10:	08007da3 	.word	0x08007da3
 8007d14:	08007da3 	.word	0x08007da3
 8007d18:	08007da3 	.word	0x08007da3
 8007d1c:	08007da3 	.word	0x08007da3
 8007d20:	08007da3 	.word	0x08007da3
 8007d24:	08007da3 	.word	0x08007da3
 8007d28:	08007da3 	.word	0x08007da3
 8007d2c:	08007da3 	.word	0x08007da3
 8007d30:	08007da3 	.word	0x08007da3
 8007d34:	08007d95 	.word	0x08007d95
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d02e      	beq.n	8007d9a <UART_SetConfig+0x896>
 8007d3c:	e031      	b.n	8007da2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d3e:	f7fc fd49 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007d42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d44:	e033      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d46:	f7fc fd5b 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8007d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d4c:	e02f      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d4e:	f107 0314 	add.w	r3, r7, #20
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fd fcc0 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d5c:	e027      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d5e:	f107 0308 	add.w	r3, r7, #8
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fe0c 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d6c:	e01f      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d6e:	4b58      	ldr	r3, [pc, #352]	; (8007ed0 <UART_SetConfig+0x9cc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d7a:	4b55      	ldr	r3, [pc, #340]	; (8007ed0 <UART_SetConfig+0x9cc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	4a53      	ldr	r2, [pc, #332]	; (8007ed4 <UART_SetConfig+0x9d0>)
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d8c:	e00f      	b.n	8007dae <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007d8e:	4b51      	ldr	r3, [pc, #324]	; (8007ed4 <UART_SetConfig+0x9d0>)
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d92:	e00c      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d94:	4b4c      	ldr	r3, [pc, #304]	; (8007ec8 <UART_SetConfig+0x9c4>)
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d98:	e009      	b.n	8007dae <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007da0:	e005      	b.n	8007dae <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80ea 	beq.w	8007f8a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	4a44      	ldr	r2, [pc, #272]	; (8007ecc <UART_SetConfig+0x9c8>)
 8007dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc8:	005a      	lsls	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	441a      	add	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	2b0f      	cmp	r3, #15
 8007de2:	d916      	bls.n	8007e12 <UART_SetConfig+0x90e>
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dea:	d212      	bcs.n	8007e12 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f023 030f 	bic.w	r3, r3, #15
 8007df4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	085b      	lsrs	r3, r3, #1
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e04:	4313      	orrs	r3, r2
 8007e06:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e0bb      	b.n	8007f8a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007e18:	e0b7      	b.n	8007f8a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	dc4a      	bgt.n	8007eb8 <UART_SetConfig+0x9b4>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f2c0 8086 	blt.w	8007f34 <UART_SetConfig+0xa30>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	f200 8083 	bhi.w	8007f34 <UART_SetConfig+0xa30>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <UART_SetConfig+0x930>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007f35 	.word	0x08007f35
 8007e40:	08007f35 	.word	0x08007f35
 8007e44:	08007ee1 	.word	0x08007ee1
 8007e48:	08007f35 	.word	0x08007f35
 8007e4c:	08007f35 	.word	0x08007f35
 8007e50:	08007f35 	.word	0x08007f35
 8007e54:	08007ef1 	.word	0x08007ef1
 8007e58:	08007f35 	.word	0x08007f35
 8007e5c:	08007f35 	.word	0x08007f35
 8007e60:	08007f35 	.word	0x08007f35
 8007e64:	08007f35 	.word	0x08007f35
 8007e68:	08007f35 	.word	0x08007f35
 8007e6c:	08007f35 	.word	0x08007f35
 8007e70:	08007f35 	.word	0x08007f35
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f35 	.word	0x08007f35
 8007e7c:	08007f35 	.word	0x08007f35
 8007e80:	08007f35 	.word	0x08007f35
 8007e84:	08007f35 	.word	0x08007f35
 8007e88:	08007f35 	.word	0x08007f35
 8007e8c:	08007f35 	.word	0x08007f35
 8007e90:	08007f35 	.word	0x08007f35
 8007e94:	08007f35 	.word	0x08007f35
 8007e98:	08007f35 	.word	0x08007f35
 8007e9c:	08007f35 	.word	0x08007f35
 8007ea0:	08007f35 	.word	0x08007f35
 8007ea4:	08007f35 	.word	0x08007f35
 8007ea8:	08007f35 	.word	0x08007f35
 8007eac:	08007f35 	.word	0x08007f35
 8007eb0:	08007f35 	.word	0x08007f35
 8007eb4:	08007f27 	.word	0x08007f27
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d037      	beq.n	8007f2c <UART_SetConfig+0xa28>
 8007ebc:	e03a      	b.n	8007f34 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fc fc89 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ec4:	e03c      	b.n	8007f40 <UART_SetConfig+0xa3c>
 8007ec6:	bf00      	nop
 8007ec8:	003d0900 	.word	0x003d0900
 8007ecc:	0800b80c 	.word	0x0800b80c
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fc fc92 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8007edc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ede:	e02f      	b.n	8007f40 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee0:	f107 0314 	add.w	r3, r7, #20
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd fbf7 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eee:	e027      	b.n	8007f40 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef0:	f107 0308 	add.w	r3, r7, #8
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd fd43 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007efe:	e01f      	b.n	8007f40 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f00:	4b2c      	ldr	r3, [pc, #176]	; (8007fb4 <UART_SetConfig+0xab0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f0c:	4b29      	ldr	r3, [pc, #164]	; (8007fb4 <UART_SetConfig+0xab0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	08db      	lsrs	r3, r3, #3
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	4a28      	ldr	r2, [pc, #160]	; (8007fb8 <UART_SetConfig+0xab4>)
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f1e:	e00f      	b.n	8007f40 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007f20:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <UART_SetConfig+0xab4>)
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f24:	e00c      	b.n	8007f40 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f26:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <UART_SetConfig+0xab8>)
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f2a:	e009      	b.n	8007f40 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f32:	e005      	b.n	8007f40 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d021      	beq.n	8007f8a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <UART_SetConfig+0xabc>)
 8007f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	085b      	lsrs	r3, r3, #1
 8007f5e:	441a      	add	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b0f      	cmp	r3, #15
 8007f70:	d908      	bls.n	8007f84 <UART_SetConfig+0xa80>
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	d204      	bcs.n	8007f84 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	e002      	b.n	8007f8a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007fa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3738      	adds	r7, #56	; 0x38
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	03d09000 	.word	0x03d09000
 8007fbc:	003d0900 	.word	0x003d0900
 8007fc0:	0800b80c 	.word	0x0800b80c

08007fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01a      	beq.n	80080da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c2:	d10a      	bne.n	80080da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	605a      	str	r2, [r3, #4]
  }
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008118:	f7f9 ff10 	bl	8001f3c <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b08      	cmp	r3, #8
 800812a:	d10e      	bne.n	800814a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f82f 	bl	800819e <UART_WaitOnFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e025      	b.n	8008196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d10e      	bne.n	8008176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f819 	bl	800819e <UART_WaitOnFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e00f      	b.n	8008196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ae:	e062      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d05e      	beq.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b8:	f7f9 fec0 	bl	8001f3c <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d302      	bcc.n	80081ce <UART_WaitOnFlagUntilTimeout+0x30>
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d11d      	bne.n	800820a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0201 	bic.w	r2, r2, #1
 80081ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e045      	b.n	8008296 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d02e      	beq.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008226:	d126      	bne.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008230:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008240:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e00f      	b.n	8008296 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4013      	ands	r3, r2
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	429a      	cmp	r2, r3
 8008292:	d08d      	beq.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e027      	b.n	8008304 <HAL_UARTEx_DisableFifoMode+0x66>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2224      	movs	r2, #36	; 0x24
 80082c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008324:	2302      	movs	r3, #2
 8008326:	e02d      	b.n	8008384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f84f 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e02d      	b.n	8008400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2224      	movs	r2, #36	; 0x24
 80083b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0201 	bic.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f811 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008428:	e031      	b.n	800848e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800842a:	2310      	movs	r3, #16
 800842c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800842e:	2310      	movs	r3, #16
 8008430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	0e5b      	lsrs	r3, r3, #25
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	0f5b      	lsrs	r3, r3, #29
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	7b3a      	ldrb	r2, [r7, #12]
 8008456:	4911      	ldr	r1, [pc, #68]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008458:	5c8a      	ldrb	r2, [r1, r2]
 800845a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800845e:	7b3a      	ldrb	r2, [r7, #12]
 8008460:	490f      	ldr	r1, [pc, #60]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008464:	fb93 f3f2 	sdiv	r3, r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	7b7a      	ldrb	r2, [r7, #13]
 8008474:	4909      	ldr	r1, [pc, #36]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008476:	5c8a      	ldrb	r2, [r1, r2]
 8008478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	4908      	ldr	r1, [pc, #32]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008482:	fb93 f3f2 	sdiv	r3, r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	0800b824 	.word	0x0800b824
 80084a0:	0800b82c 	.word	0x0800b82c

080084a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084a4:	b084      	sub	sp, #16
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	f107 001c 	add.w	r0, r7, #28
 80084b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d120      	bne.n	80084fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <USB_CoreInit+0xd4>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d105      	bne.n	80084f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa60 	bl	80089b8 <USB_CoreReset>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
 80084fc:	e01a      	b.n	8008534 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa54 	bl	80089b8 <USB_CoreReset>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
 8008526:	e005      	b.n	8008534 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	2b01      	cmp	r3, #1
 8008538:	d116      	bne.n	8008568 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008548:	4b0c      	ldr	r3, [pc, #48]	; (800857c <USB_CoreInit+0xd8>)
 800854a:	4313      	orrs	r3, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f043 0206 	orr.w	r2, r3, #6
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f043 0220 	orr.w	r2, r3, #32
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008574:	b004      	add	sp, #16
 8008576:	4770      	bx	lr
 8008578:	ffbdffbf 	.word	0xffbdffbf
 800857c:	03ee0000 	.word	0x03ee0000

08008580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f023 0201 	bic.w	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d106      	bne.n	80085ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60da      	str	r2, [r3, #12]
 80085cc:	e00b      	b.n	80085e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e001      	b.n	80085e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e003      	b.n	80085ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80085e6:	2032      	movs	r0, #50	; 0x32
 80085e8:	f7f9 fcb4 	bl	8001f54 <HAL_Delay>

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085f8:	b084      	sub	sp, #16
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b086      	sub	sp, #24
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	e009      	b.n	800862c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	3340      	adds	r3, #64	; 0x40
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	2200      	movs	r2, #0
 8008624:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b0e      	cmp	r3, #14
 8008630:	d9f2      	bls.n	8008618 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11c      	bne.n	8008672 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	e005      	b.n	800867e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008690:	4619      	mov	r1, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	461a      	mov	r2, r3
 800869a:	680b      	ldr	r3, [r1, #0]
 800869c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d10c      	bne.n	80086be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f949 	bl	8008944 <USB_SetDevSpeed>
 80086b2:	e008      	b.n	80086c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80086b4:	2101      	movs	r1, #1
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f944 	bl	8008944 <USB_SetDevSpeed>
 80086bc:	e003      	b.n	80086c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80086be:	2103      	movs	r1, #3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f93f 	bl	8008944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086c6:	2110      	movs	r1, #16
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8f3 	bl	80088b4 <USB_FlushTxFifo>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f911 	bl	8008900 <USB_FlushRxFifo>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	461a      	mov	r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	461a      	mov	r2, r3
 80086fc:	2300      	movs	r3, #0
 80086fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008706:	461a      	mov	r2, r3
 8008708:	2300      	movs	r3, #0
 800870a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	e043      	b.n	800879a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008728:	d118      	bne.n	800875c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	461a      	mov	r2, r3
 800873e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e013      	b.n	800876e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008752:	461a      	mov	r2, r3
 8008754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e008      	b.n	800876e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877a:	461a      	mov	r2, r3
 800877c:	2300      	movs	r3, #0
 800877e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	461a      	mov	r2, r3
 800878e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	3301      	adds	r3, #1
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d3b7      	bcc.n	8008712 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a2:	2300      	movs	r3, #0
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	e043      	b.n	8008830 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087be:	d118      	bne.n	80087f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	461a      	mov	r2, r3
 80087d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	e013      	b.n	8008804 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	461a      	mov	r2, r3
 80087ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	e008      	b.n	8008804 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	461a      	mov	r2, r3
 8008800:	2300      	movs	r3, #0
 8008802:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	461a      	mov	r2, r3
 8008812:	2300      	movs	r3, #0
 8008814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	461a      	mov	r2, r3
 8008824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008828:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	d3b7      	bcc.n	80087a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800884a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008858:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f043 0210 	orr.w	r2, r3, #16
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <USB_DevInit+0x2b4>)
 8008872:	4313      	orrs	r3, r2
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f043 0208 	orr.w	r2, r3, #8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800888a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d105      	bne.n	800889c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <USB_DevInit+0x2b8>)
 8008896:	4313      	orrs	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088a8:	b004      	add	sp, #16
 80088aa:	4770      	bx	lr
 80088ac:	803c3800 	.word	0x803c3800
 80088b0:	40000004 	.word	0x40000004

080088b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	019b      	lsls	r3, r3, #6
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <USB_FlushTxFifo+0x48>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d901      	bls.n	80088e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e006      	b.n	80088ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d0f0      	beq.n	80088ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	00030d40 	.word	0x00030d40

08008900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2210      	movs	r2, #16
 8008910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <USB_FlushRxFifo+0x40>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d901      	bls.n	8008924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e006      	b.n	8008932 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b10      	cmp	r3, #16
 800892e:	d0f0      	beq.n	8008912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	00030d40 	.word	0x00030d40

08008944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008964:	4313      	orrs	r3, r2
 8008966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008990:	f023 0303 	bic.w	r3, r3, #3
 8008994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089a4:	f043 0302 	orr.w	r3, r3, #2
 80089a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a13      	ldr	r2, [pc, #76]	; (8008a1c <USB_CoreReset+0x64>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e01b      	b.n	8008a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	daf2      	bge.n	80089c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f043 0201 	orr.w	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <USB_CoreReset+0x64>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e006      	b.n	8008a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d0f0      	beq.n	80089ee <USB_CoreReset+0x36>

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	00030d40 	.word	0x00030d40

08008a20 <_Znwj>:
 8008a20:	2801      	cmp	r0, #1
 8008a22:	bf38      	it	cc
 8008a24:	2001      	movcc	r0, #1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	4604      	mov	r4, r0
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f88a 	bl	8008b44 <malloc>
 8008a30:	b930      	cbnz	r0, 8008a40 <_Znwj+0x20>
 8008a32:	f000 f807 	bl	8008a44 <_ZSt15get_new_handlerv>
 8008a36:	b908      	cbnz	r0, 8008a3c <_Znwj+0x1c>
 8008a38:	f000 f852 	bl	8008ae0 <abort>
 8008a3c:	4780      	blx	r0
 8008a3e:	e7f4      	b.n	8008a2a <_Znwj+0xa>
 8008a40:	bd10      	pop	{r4, pc}
	...

08008a44 <_ZSt15get_new_handlerv>:
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <_ZSt15get_new_handlerv+0xc>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	f3bf 8f5b 	dmb	ish
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	2000091c 	.word	0x2000091c

08008a54 <round>:
 8008a54:	ee10 1a90 	vmov	r1, s1
 8008a58:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8008a5c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8008a60:	2a13      	cmp	r2, #19
 8008a62:	b510      	push	{r4, lr}
 8008a64:	ee10 3a10 	vmov	r3, s0
 8008a68:	dc19      	bgt.n	8008a9e <round+0x4a>
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	da09      	bge.n	8008a82 <round+0x2e>
 8008a6e:	3201      	adds	r2, #1
 8008a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008a74:	d103      	bne.n	8008a7e <round+0x2a>
 8008a76:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008a7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e027      	b.n	8008ad2 <round+0x7e>
 8008a82:	4816      	ldr	r0, [pc, #88]	; (8008adc <round+0x88>)
 8008a84:	4110      	asrs	r0, r2
 8008a86:	ea01 0400 	and.w	r4, r1, r0
 8008a8a:	4323      	orrs	r3, r4
 8008a8c:	d00e      	beq.n	8008aac <round+0x58>
 8008a8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a92:	fa43 f202 	asr.w	r2, r3, r2
 8008a96:	4411      	add	r1, r2
 8008a98:	ea21 0100 	bic.w	r1, r1, r0
 8008a9c:	e7ef      	b.n	8008a7e <round+0x2a>
 8008a9e:	2a33      	cmp	r2, #51	; 0x33
 8008aa0:	dd05      	ble.n	8008aae <round+0x5a>
 8008aa2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008aa6:	d101      	bne.n	8008aac <round+0x58>
 8008aa8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ab6:	fa20 f404 	lsr.w	r4, r0, r4
 8008aba:	4223      	tst	r3, r4
 8008abc:	d0f6      	beq.n	8008aac <round+0x58>
 8008abe:	2001      	movs	r0, #1
 8008ac0:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8008ac4:	fa00 f202 	lsl.w	r2, r0, r2
 8008ac8:	189b      	adds	r3, r3, r2
 8008aca:	bf28      	it	cs
 8008acc:	1809      	addcs	r1, r1, r0
 8008ace:	ea23 0004 	bic.w	r0, r3, r4
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	ec43 2b10 	vmov	d0, r2, r3
 8008ada:	e7e7      	b.n	8008aac <round+0x58>
 8008adc:	000fffff 	.word	0x000fffff

08008ae0 <abort>:
 8008ae0:	b508      	push	{r3, lr}
 8008ae2:	2006      	movs	r0, #6
 8008ae4:	f000 fd62 	bl	80095ac <raise>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7f9 f83d 	bl	8001b68 <_exit>
	...

08008af0 <__errno>:
 8008af0:	4b01      	ldr	r3, [pc, #4]	; (8008af8 <__errno+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000010 	.word	0x20000010

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4d0d      	ldr	r5, [pc, #52]	; (8008b34 <__libc_init_array+0x38>)
 8008b00:	4c0d      	ldr	r4, [pc, #52]	; (8008b38 <__libc_init_array+0x3c>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	2600      	movs	r6, #0
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	4d0b      	ldr	r5, [pc, #44]	; (8008b3c <__libc_init_array+0x40>)
 8008b0e:	4c0c      	ldr	r4, [pc, #48]	; (8008b40 <__libc_init_array+0x44>)
 8008b10:	f002 fe1a 	bl	800b748 <_init>
 8008b14:	1b64      	subs	r4, r4, r5
 8008b16:	10a4      	asrs	r4, r4, #2
 8008b18:	2600      	movs	r6, #0
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	0800bc1c 	.word	0x0800bc1c
 8008b38:	0800bc1c 	.word	0x0800bc1c
 8008b3c:	0800bc1c 	.word	0x0800bc1c
 8008b40:	0800bc24 	.word	0x0800bc24

08008b44 <malloc>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <malloc+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 b85b 	b.w	8008c04 <_malloc_r>
 8008b4e:	bf00      	nop
 8008b50:	20000010 	.word	0x20000010

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_free_r>:
 8008b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d048      	beq.n	8008bfc <_free_r+0x98>
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f1a1 0404 	sub.w	r4, r1, #4
 8008b76:	bfb8      	it	lt
 8008b78:	18e4      	addlt	r4, r4, r3
 8008b7a:	f001 fb75 	bl	800a268 <__malloc_lock>
 8008b7e:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <_free_r+0x9c>)
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	4615      	mov	r5, r2
 8008b86:	b933      	cbnz	r3, 8008b96 <_free_r+0x32>
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6014      	str	r4, [r2, #0]
 8008b8c:	b003      	add	sp, #12
 8008b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b92:	f001 bb6f 	b.w	800a274 <__malloc_unlock>
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	d90b      	bls.n	8008bb2 <_free_r+0x4e>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1862      	adds	r2, r4, r1
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bf04      	itt	eq
 8008ba2:	681a      	ldreq	r2, [r3, #0]
 8008ba4:	685b      	ldreq	r3, [r3, #4]
 8008ba6:	6063      	str	r3, [r4, #4]
 8008ba8:	bf04      	itt	eq
 8008baa:	1852      	addeq	r2, r2, r1
 8008bac:	6022      	streq	r2, [r4, #0]
 8008bae:	602c      	str	r4, [r5, #0]
 8008bb0:	e7ec      	b.n	8008b8c <_free_r+0x28>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b10b      	cbz	r3, 8008bbc <_free_r+0x58>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d9fa      	bls.n	8008bb2 <_free_r+0x4e>
 8008bbc:	6811      	ldr	r1, [r2, #0]
 8008bbe:	1855      	adds	r5, r2, r1
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	d10b      	bne.n	8008bdc <_free_r+0x78>
 8008bc4:	6824      	ldr	r4, [r4, #0]
 8008bc6:	4421      	add	r1, r4
 8008bc8:	1854      	adds	r4, r2, r1
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	d1dd      	bne.n	8008b8c <_free_r+0x28>
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	4421      	add	r1, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	e7d7      	b.n	8008b8c <_free_r+0x28>
 8008bdc:	d902      	bls.n	8008be4 <_free_r+0x80>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	e7d3      	b.n	8008b8c <_free_r+0x28>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf04      	itt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	bf04      	itt	eq
 8008bf4:	1949      	addeq	r1, r1, r5
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	6054      	str	r4, [r2, #4]
 8008bfa:	e7c7      	b.n	8008b8c <_free_r+0x28>
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	20000920 	.word	0x20000920

08008c04 <_malloc_r>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	1ccd      	adds	r5, r1, #3
 8008c08:	f025 0503 	bic.w	r5, r5, #3
 8008c0c:	3508      	adds	r5, #8
 8008c0e:	2d0c      	cmp	r5, #12
 8008c10:	bf38      	it	cc
 8008c12:	250c      	movcc	r5, #12
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	4606      	mov	r6, r0
 8008c18:	db01      	blt.n	8008c1e <_malloc_r+0x1a>
 8008c1a:	42a9      	cmp	r1, r5
 8008c1c:	d903      	bls.n	8008c26 <_malloc_r+0x22>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	6033      	str	r3, [r6, #0]
 8008c22:	2000      	movs	r0, #0
 8008c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c26:	f001 fb1f 	bl	800a268 <__malloc_lock>
 8008c2a:	4921      	ldr	r1, [pc, #132]	; (8008cb0 <_malloc_r+0xac>)
 8008c2c:	680a      	ldr	r2, [r1, #0]
 8008c2e:	4614      	mov	r4, r2
 8008c30:	b99c      	cbnz	r4, 8008c5a <_malloc_r+0x56>
 8008c32:	4f20      	ldr	r7, [pc, #128]	; (8008cb4 <_malloc_r+0xb0>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	b923      	cbnz	r3, 8008c42 <_malloc_r+0x3e>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f000 fc7e 	bl	800953c <_sbrk_r>
 8008c40:	6038      	str	r0, [r7, #0]
 8008c42:	4629      	mov	r1, r5
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 fc79 	bl	800953c <_sbrk_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d123      	bne.n	8008c96 <_malloc_r+0x92>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	6033      	str	r3, [r6, #0]
 8008c52:	4630      	mov	r0, r6
 8008c54:	f001 fb0e 	bl	800a274 <__malloc_unlock>
 8008c58:	e7e3      	b.n	8008c22 <_malloc_r+0x1e>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	1b5b      	subs	r3, r3, r5
 8008c5e:	d417      	bmi.n	8008c90 <_malloc_r+0x8c>
 8008c60:	2b0b      	cmp	r3, #11
 8008c62:	d903      	bls.n	8008c6c <_malloc_r+0x68>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	441c      	add	r4, r3
 8008c68:	6025      	str	r5, [r4, #0]
 8008c6a:	e004      	b.n	8008c76 <_malloc_r+0x72>
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	42a2      	cmp	r2, r4
 8008c70:	bf0c      	ite	eq
 8008c72:	600b      	streq	r3, [r1, #0]
 8008c74:	6053      	strne	r3, [r2, #4]
 8008c76:	4630      	mov	r0, r6
 8008c78:	f001 fafc 	bl	800a274 <__malloc_unlock>
 8008c7c:	f104 000b 	add.w	r0, r4, #11
 8008c80:	1d23      	adds	r3, r4, #4
 8008c82:	f020 0007 	bic.w	r0, r0, #7
 8008c86:	1ac2      	subs	r2, r0, r3
 8008c88:	d0cc      	beq.n	8008c24 <_malloc_r+0x20>
 8008c8a:	1a1b      	subs	r3, r3, r0
 8008c8c:	50a3      	str	r3, [r4, r2]
 8008c8e:	e7c9      	b.n	8008c24 <_malloc_r+0x20>
 8008c90:	4622      	mov	r2, r4
 8008c92:	6864      	ldr	r4, [r4, #4]
 8008c94:	e7cc      	b.n	8008c30 <_malloc_r+0x2c>
 8008c96:	1cc4      	adds	r4, r0, #3
 8008c98:	f024 0403 	bic.w	r4, r4, #3
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d0e3      	beq.n	8008c68 <_malloc_r+0x64>
 8008ca0:	1a21      	subs	r1, r4, r0
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 fc4a 	bl	800953c <_sbrk_r>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d1dd      	bne.n	8008c68 <_malloc_r+0x64>
 8008cac:	e7cf      	b.n	8008c4e <_malloc_r+0x4a>
 8008cae:	bf00      	nop
 8008cb0:	20000920 	.word	0x20000920
 8008cb4:	20000924 	.word	0x20000924

08008cb8 <__cvt>:
 8008cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cba:	ed2d 8b02 	vpush	{d8}
 8008cbe:	eeb0 8b40 	vmov.f64	d8, d0
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	4617      	mov	r7, r2
 8008cc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008cc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008cca:	ee18 2a90 	vmov	r2, s17
 8008cce:	f025 0520 	bic.w	r5, r5, #32
 8008cd2:	2a00      	cmp	r2, #0
 8008cd4:	bfb6      	itet	lt
 8008cd6:	222d      	movlt	r2, #45	; 0x2d
 8008cd8:	2200      	movge	r2, #0
 8008cda:	eeb1 8b40 	vneglt.f64	d8, d0
 8008cde:	2d46      	cmp	r5, #70	; 0x46
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	d004      	beq.n	8008cf0 <__cvt+0x38>
 8008ce6:	2d45      	cmp	r5, #69	; 0x45
 8008ce8:	d100      	bne.n	8008cec <__cvt+0x34>
 8008cea:	3401      	adds	r4, #1
 8008cec:	2102      	movs	r1, #2
 8008cee:	e000      	b.n	8008cf2 <__cvt+0x3a>
 8008cf0:	2103      	movs	r1, #3
 8008cf2:	ab03      	add	r3, sp, #12
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	ab02      	add	r3, sp, #8
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4633      	mov	r3, r6
 8008cfe:	eeb0 0b48 	vmov.f64	d0, d8
 8008d02:	f000 fd1d 	bl	8009740 <_dtoa_r>
 8008d06:	2d47      	cmp	r5, #71	; 0x47
 8008d08:	d109      	bne.n	8008d1e <__cvt+0x66>
 8008d0a:	07fb      	lsls	r3, r7, #31
 8008d0c:	d407      	bmi.n	8008d1e <__cvt+0x66>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d12:	1a1b      	subs	r3, r3, r0
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	b005      	add	sp, #20
 8008d18:	ecbd 8b02 	vpop	{d8}
 8008d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1e:	2d46      	cmp	r5, #70	; 0x46
 8008d20:	eb00 0204 	add.w	r2, r0, r4
 8008d24:	d10c      	bne.n	8008d40 <__cvt+0x88>
 8008d26:	7803      	ldrb	r3, [r0, #0]
 8008d28:	2b30      	cmp	r3, #48	; 0x30
 8008d2a:	d107      	bne.n	8008d3c <__cvt+0x84>
 8008d2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d34:	bf1c      	itt	ne
 8008d36:	f1c4 0401 	rsbne	r4, r4, #1
 8008d3a:	6034      	strne	r4, [r6, #0]
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	441a      	add	r2, r3
 8008d40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d48:	bf08      	it	eq
 8008d4a:	9203      	streq	r2, [sp, #12]
 8008d4c:	2130      	movs	r1, #48	; 0x30
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d2dc      	bcs.n	8008d0e <__cvt+0x56>
 8008d54:	1c5c      	adds	r4, r3, #1
 8008d56:	9403      	str	r4, [sp, #12]
 8008d58:	7019      	strb	r1, [r3, #0]
 8008d5a:	e7f8      	b.n	8008d4e <__cvt+0x96>

08008d5c <__exponent>:
 8008d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2900      	cmp	r1, #0
 8008d62:	bfb8      	it	lt
 8008d64:	4249      	neglt	r1, r1
 8008d66:	f803 2b02 	strb.w	r2, [r3], #2
 8008d6a:	bfb4      	ite	lt
 8008d6c:	222d      	movlt	r2, #45	; 0x2d
 8008d6e:	222b      	movge	r2, #43	; 0x2b
 8008d70:	2909      	cmp	r1, #9
 8008d72:	7042      	strb	r2, [r0, #1]
 8008d74:	dd2a      	ble.n	8008dcc <__exponent+0x70>
 8008d76:	f10d 0407 	add.w	r4, sp, #7
 8008d7a:	46a4      	mov	ip, r4
 8008d7c:	270a      	movs	r7, #10
 8008d7e:	46a6      	mov	lr, r4
 8008d80:	460a      	mov	r2, r1
 8008d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d86:	fb07 1516 	mls	r5, r7, r6, r1
 8008d8a:	3530      	adds	r5, #48	; 0x30
 8008d8c:	2a63      	cmp	r2, #99	; 0x63
 8008d8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d96:	4631      	mov	r1, r6
 8008d98:	dcf1      	bgt.n	8008d7e <__exponent+0x22>
 8008d9a:	3130      	adds	r1, #48	; 0x30
 8008d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8008da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008da4:	1c44      	adds	r4, r0, #1
 8008da6:	4629      	mov	r1, r5
 8008da8:	4561      	cmp	r1, ip
 8008daa:	d30a      	bcc.n	8008dc2 <__exponent+0x66>
 8008dac:	f10d 0209 	add.w	r2, sp, #9
 8008db0:	eba2 020e 	sub.w	r2, r2, lr
 8008db4:	4565      	cmp	r5, ip
 8008db6:	bf88      	it	hi
 8008db8:	2200      	movhi	r2, #0
 8008dba:	4413      	add	r3, r2
 8008dbc:	1a18      	subs	r0, r3, r0
 8008dbe:	b003      	add	sp, #12
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008dca:	e7ed      	b.n	8008da8 <__exponent+0x4c>
 8008dcc:	2330      	movs	r3, #48	; 0x30
 8008dce:	3130      	adds	r1, #48	; 0x30
 8008dd0:	7083      	strb	r3, [r0, #2]
 8008dd2:	70c1      	strb	r1, [r0, #3]
 8008dd4:	1d03      	adds	r3, r0, #4
 8008dd6:	e7f1      	b.n	8008dbc <__exponent+0x60>

08008dd8 <_printf_float>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	b08b      	sub	sp, #44	; 0x2c
 8008dde:	460c      	mov	r4, r1
 8008de0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008de4:	4616      	mov	r6, r2
 8008de6:	461f      	mov	r7, r3
 8008de8:	4605      	mov	r5, r0
 8008dea:	f001 fa2b 	bl	800a244 <_localeconv_r>
 8008dee:	f8d0 b000 	ldr.w	fp, [r0]
 8008df2:	4658      	mov	r0, fp
 8008df4:	f7f7 fa74 	bl	80002e0 <strlen>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9308      	str	r3, [sp, #32]
 8008dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8008e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e04:	6822      	ldr	r2, [r4, #0]
 8008e06:	3307      	adds	r3, #7
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	f103 0108 	add.w	r1, r3, #8
 8008e10:	f8c8 1000 	str.w	r1, [r8]
 8008e14:	4682      	mov	sl, r0
 8008e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008e1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009080 <_printf_float+0x2a8>
 8008e22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008e26:	eeb0 6bc0 	vabs.f64	d6, d0
 8008e2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e32:	dd24      	ble.n	8008e7e <_printf_float+0xa6>
 8008e34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	d502      	bpl.n	8008e44 <_printf_float+0x6c>
 8008e3e:	232d      	movs	r3, #45	; 0x2d
 8008e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e44:	4b90      	ldr	r3, [pc, #576]	; (8009088 <_printf_float+0x2b0>)
 8008e46:	4891      	ldr	r0, [pc, #580]	; (800908c <_printf_float+0x2b4>)
 8008e48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e4c:	bf94      	ite	ls
 8008e4e:	4698      	movls	r8, r3
 8008e50:	4680      	movhi	r8, r0
 8008e52:	2303      	movs	r3, #3
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	f022 0204 	bic.w	r2, r2, #4
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	9700      	str	r7, [sp, #0]
 8008e62:	4633      	mov	r3, r6
 8008e64:	aa09      	add	r2, sp, #36	; 0x24
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f9d3 	bl	8009214 <_printf_common>
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f040 808a 	bne.w	8008f88 <_printf_float+0x1b0>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e78:	b00b      	add	sp, #44	; 0x2c
 8008e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e86:	d709      	bvc.n	8008e9c <_printf_float+0xc4>
 8008e88:	ee10 3a90 	vmov	r3, s1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfbc      	itt	lt
 8008e90:	232d      	movlt	r3, #45	; 0x2d
 8008e92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e96:	487e      	ldr	r0, [pc, #504]	; (8009090 <_printf_float+0x2b8>)
 8008e98:	4b7e      	ldr	r3, [pc, #504]	; (8009094 <_printf_float+0x2bc>)
 8008e9a:	e7d5      	b.n	8008e48 <_printf_float+0x70>
 8008e9c:	6863      	ldr	r3, [r4, #4]
 8008e9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008ea2:	9104      	str	r1, [sp, #16]
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	d13c      	bne.n	8008f22 <_printf_float+0x14a>
 8008ea8:	2306      	movs	r3, #6
 8008eaa:	6063      	str	r3, [r4, #4]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	ab08      	add	r3, sp, #32
 8008eb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008eba:	ab07      	add	r3, sp, #28
 8008ebc:	6861      	ldr	r1, [r4, #4]
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	f10d 031b 	add.w	r3, sp, #27
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f7ff fef6 	bl	8008cb8 <__cvt>
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	9907      	ldr	r1, [sp, #28]
 8008ed0:	2b47      	cmp	r3, #71	; 0x47
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	d108      	bne.n	8008ee8 <_printf_float+0x110>
 8008ed6:	1cc8      	adds	r0, r1, #3
 8008ed8:	db02      	blt.n	8008ee0 <_printf_float+0x108>
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	4299      	cmp	r1, r3
 8008ede:	dd41      	ble.n	8008f64 <_printf_float+0x18c>
 8008ee0:	f1a9 0902 	sub.w	r9, r9, #2
 8008ee4:	fa5f f989 	uxtb.w	r9, r9
 8008ee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008eec:	d820      	bhi.n	8008f30 <_printf_float+0x158>
 8008eee:	3901      	subs	r1, #1
 8008ef0:	464a      	mov	r2, r9
 8008ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ef6:	9107      	str	r1, [sp, #28]
 8008ef8:	f7ff ff30 	bl	8008d5c <__exponent>
 8008efc:	9a08      	ldr	r2, [sp, #32]
 8008efe:	9004      	str	r0, [sp, #16]
 8008f00:	1813      	adds	r3, r2, r0
 8008f02:	2a01      	cmp	r2, #1
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	dc02      	bgt.n	8008f0e <_printf_float+0x136>
 8008f08:	6822      	ldr	r2, [r4, #0]
 8008f0a:	07d2      	lsls	r2, r2, #31
 8008f0c:	d501      	bpl.n	8008f12 <_printf_float+0x13a>
 8008f0e:	3301      	adds	r3, #1
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0a2      	beq.n	8008e60 <_printf_float+0x88>
 8008f1a:	232d      	movs	r3, #45	; 0x2d
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f20:	e79e      	b.n	8008e60 <_printf_float+0x88>
 8008f22:	9904      	ldr	r1, [sp, #16]
 8008f24:	2947      	cmp	r1, #71	; 0x47
 8008f26:	d1c1      	bne.n	8008eac <_printf_float+0xd4>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1bf      	bne.n	8008eac <_printf_float+0xd4>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7bc      	b.n	8008eaa <_printf_float+0xd2>
 8008f30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008f34:	d118      	bne.n	8008f68 <_printf_float+0x190>
 8008f36:	2900      	cmp	r1, #0
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	dd0b      	ble.n	8008f54 <_printf_float+0x17c>
 8008f3c:	6121      	str	r1, [r4, #16]
 8008f3e:	b913      	cbnz	r3, 8008f46 <_printf_float+0x16e>
 8008f40:	6822      	ldr	r2, [r4, #0]
 8008f42:	07d0      	lsls	r0, r2, #31
 8008f44:	d502      	bpl.n	8008f4c <_printf_float+0x174>
 8008f46:	3301      	adds	r3, #1
 8008f48:	440b      	add	r3, r1
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	e7de      	b.n	8008f12 <_printf_float+0x13a>
 8008f54:	b913      	cbnz	r3, 8008f5c <_printf_float+0x184>
 8008f56:	6822      	ldr	r2, [r4, #0]
 8008f58:	07d2      	lsls	r2, r2, #31
 8008f5a:	d501      	bpl.n	8008f60 <_printf_float+0x188>
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	e7f4      	b.n	8008f4a <_printf_float+0x172>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e7f2      	b.n	8008f4a <_printf_float+0x172>
 8008f64:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f68:	9b08      	ldr	r3, [sp, #32]
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	db05      	blt.n	8008f7a <_printf_float+0x1a2>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	6121      	str	r1, [r4, #16]
 8008f72:	07d8      	lsls	r0, r3, #31
 8008f74:	d5ea      	bpl.n	8008f4c <_printf_float+0x174>
 8008f76:	1c4b      	adds	r3, r1, #1
 8008f78:	e7e7      	b.n	8008f4a <_printf_float+0x172>
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	bfd4      	ite	le
 8008f7e:	f1c1 0202 	rsble	r2, r1, #2
 8008f82:	2201      	movgt	r2, #1
 8008f84:	4413      	add	r3, r2
 8008f86:	e7e0      	b.n	8008f4a <_printf_float+0x172>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	055a      	lsls	r2, r3, #21
 8008f8c:	d407      	bmi.n	8008f9e <_printf_float+0x1c6>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	4642      	mov	r2, r8
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d12a      	bne.n	8008ff2 <_printf_float+0x21a>
 8008f9c:	e76a      	b.n	8008e74 <_printf_float+0x9c>
 8008f9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fa2:	f240 80e2 	bls.w	800916a <_printf_float+0x392>
 8008fa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008faa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb2:	d133      	bne.n	800901c <_printf_float+0x244>
 8008fb4:	4a38      	ldr	r2, [pc, #224]	; (8009098 <_printf_float+0x2c0>)
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f af58 	beq.w	8008e74 <_printf_float+0x9c>
 8008fc4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	db02      	blt.n	8008fd2 <_printf_float+0x1fa>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	07d8      	lsls	r0, r3, #31
 8008fd0:	d50f      	bpl.n	8008ff2 <_printf_float+0x21a>
 8008fd2:	4653      	mov	r3, sl
 8008fd4:	465a      	mov	r2, fp
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	f43f af49 	beq.w	8008e74 <_printf_float+0x9c>
 8008fe2:	f04f 0800 	mov.w	r8, #0
 8008fe6:	f104 091a 	add.w	r9, r4, #26
 8008fea:	9b08      	ldr	r3, [sp, #32]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4543      	cmp	r3, r8
 8008ff0:	dc09      	bgt.n	8009006 <_printf_float+0x22e>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	079b      	lsls	r3, r3, #30
 8008ff6:	f100 8108 	bmi.w	800920a <_printf_float+0x432>
 8008ffa:	68e0      	ldr	r0, [r4, #12]
 8008ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffe:	4298      	cmp	r0, r3
 8009000:	bfb8      	it	lt
 8009002:	4618      	movlt	r0, r3
 8009004:	e738      	b.n	8008e78 <_printf_float+0xa0>
 8009006:	2301      	movs	r3, #1
 8009008:	464a      	mov	r2, r9
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	f43f af2f 	beq.w	8008e74 <_printf_float+0x9c>
 8009016:	f108 0801 	add.w	r8, r8, #1
 800901a:	e7e6      	b.n	8008fea <_printf_float+0x212>
 800901c:	9b07      	ldr	r3, [sp, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	dc3c      	bgt.n	800909c <_printf_float+0x2c4>
 8009022:	4a1d      	ldr	r2, [pc, #116]	; (8009098 <_printf_float+0x2c0>)
 8009024:	2301      	movs	r3, #1
 8009026:	4631      	mov	r1, r6
 8009028:	4628      	mov	r0, r5
 800902a:	47b8      	blx	r7
 800902c:	3001      	adds	r0, #1
 800902e:	f43f af21 	beq.w	8008e74 <_printf_float+0x9c>
 8009032:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009036:	4313      	orrs	r3, r2
 8009038:	d102      	bne.n	8009040 <_printf_float+0x268>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	07d9      	lsls	r1, r3, #31
 800903e:	d5d8      	bpl.n	8008ff2 <_printf_float+0x21a>
 8009040:	4653      	mov	r3, sl
 8009042:	465a      	mov	r2, fp
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	47b8      	blx	r7
 800904a:	3001      	adds	r0, #1
 800904c:	f43f af12 	beq.w	8008e74 <_printf_float+0x9c>
 8009050:	f04f 0900 	mov.w	r9, #0
 8009054:	f104 0a1a 	add.w	sl, r4, #26
 8009058:	9b07      	ldr	r3, [sp, #28]
 800905a:	425b      	negs	r3, r3
 800905c:	454b      	cmp	r3, r9
 800905e:	dc01      	bgt.n	8009064 <_printf_float+0x28c>
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	e795      	b.n	8008f90 <_printf_float+0x1b8>
 8009064:	2301      	movs	r3, #1
 8009066:	4652      	mov	r2, sl
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f af00 	beq.w	8008e74 <_printf_float+0x9c>
 8009074:	f109 0901 	add.w	r9, r9, #1
 8009078:	e7ee      	b.n	8009058 <_printf_float+0x280>
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	ffffffff 	.word	0xffffffff
 8009084:	7fefffff 	.word	0x7fefffff
 8009088:	0800b838 	.word	0x0800b838
 800908c:	0800b83c 	.word	0x0800b83c
 8009090:	0800b844 	.word	0x0800b844
 8009094:	0800b840 	.word	0x0800b840
 8009098:	0800b848 	.word	0x0800b848
 800909c:	9a08      	ldr	r2, [sp, #32]
 800909e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090a0:	429a      	cmp	r2, r3
 80090a2:	bfa8      	it	ge
 80090a4:	461a      	movge	r2, r3
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	4691      	mov	r9, r2
 80090aa:	dc38      	bgt.n	800911e <_printf_float+0x346>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9305      	str	r3, [sp, #20]
 80090b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090b4:	f104 021a 	add.w	r2, r4, #26
 80090b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090ba:	9905      	ldr	r1, [sp, #20]
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	eba3 0309 	sub.w	r3, r3, r9
 80090c2:	428b      	cmp	r3, r1
 80090c4:	dc33      	bgt.n	800912e <_printf_float+0x356>
 80090c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	db3c      	blt.n	8009148 <_printf_float+0x370>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	07da      	lsls	r2, r3, #31
 80090d2:	d439      	bmi.n	8009148 <_printf_float+0x370>
 80090d4:	9a08      	ldr	r2, [sp, #32]
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	9907      	ldr	r1, [sp, #28]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	eba2 0901 	sub.w	r9, r2, r1
 80090e0:	4599      	cmp	r9, r3
 80090e2:	bfa8      	it	ge
 80090e4:	4699      	movge	r9, r3
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	dc35      	bgt.n	8009158 <_printf_float+0x380>
 80090ec:	f04f 0800 	mov.w	r8, #0
 80090f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090f4:	f104 0a1a 	add.w	sl, r4, #26
 80090f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	eba3 0309 	sub.w	r3, r3, r9
 8009102:	4543      	cmp	r3, r8
 8009104:	f77f af75 	ble.w	8008ff2 <_printf_float+0x21a>
 8009108:	2301      	movs	r3, #1
 800910a:	4652      	mov	r2, sl
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f aeae 	beq.w	8008e74 <_printf_float+0x9c>
 8009118:	f108 0801 	add.w	r8, r8, #1
 800911c:	e7ec      	b.n	80090f8 <_printf_float+0x320>
 800911e:	4613      	mov	r3, r2
 8009120:	4631      	mov	r1, r6
 8009122:	4642      	mov	r2, r8
 8009124:	4628      	mov	r0, r5
 8009126:	47b8      	blx	r7
 8009128:	3001      	adds	r0, #1
 800912a:	d1bf      	bne.n	80090ac <_printf_float+0x2d4>
 800912c:	e6a2      	b.n	8008e74 <_printf_float+0x9c>
 800912e:	2301      	movs	r3, #1
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	9204      	str	r2, [sp, #16]
 8009136:	47b8      	blx	r7
 8009138:	3001      	adds	r0, #1
 800913a:	f43f ae9b 	beq.w	8008e74 <_printf_float+0x9c>
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	9a04      	ldr	r2, [sp, #16]
 8009142:	3301      	adds	r3, #1
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	e7b7      	b.n	80090b8 <_printf_float+0x2e0>
 8009148:	4653      	mov	r3, sl
 800914a:	465a      	mov	r2, fp
 800914c:	4631      	mov	r1, r6
 800914e:	4628      	mov	r0, r5
 8009150:	47b8      	blx	r7
 8009152:	3001      	adds	r0, #1
 8009154:	d1be      	bne.n	80090d4 <_printf_float+0x2fc>
 8009156:	e68d      	b.n	8008e74 <_printf_float+0x9c>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	464b      	mov	r3, r9
 800915c:	4442      	add	r2, r8
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	d1c1      	bne.n	80090ec <_printf_float+0x314>
 8009168:	e684      	b.n	8008e74 <_printf_float+0x9c>
 800916a:	9a08      	ldr	r2, [sp, #32]
 800916c:	2a01      	cmp	r2, #1
 800916e:	dc01      	bgt.n	8009174 <_printf_float+0x39c>
 8009170:	07db      	lsls	r3, r3, #31
 8009172:	d537      	bpl.n	80091e4 <_printf_float+0x40c>
 8009174:	2301      	movs	r3, #1
 8009176:	4642      	mov	r2, r8
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f ae78 	beq.w	8008e74 <_printf_float+0x9c>
 8009184:	4653      	mov	r3, sl
 8009186:	465a      	mov	r2, fp
 8009188:	4631      	mov	r1, r6
 800918a:	4628      	mov	r0, r5
 800918c:	47b8      	blx	r7
 800918e:	3001      	adds	r0, #1
 8009190:	f43f ae70 	beq.w	8008e74 <_printf_float+0x9c>
 8009194:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009198:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a0:	d01b      	beq.n	80091da <_printf_float+0x402>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	f108 0201 	add.w	r2, r8, #1
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	d10e      	bne.n	80091d2 <_printf_float+0x3fa>
 80091b4:	e65e      	b.n	8008e74 <_printf_float+0x9c>
 80091b6:	2301      	movs	r3, #1
 80091b8:	464a      	mov	r2, r9
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	47b8      	blx	r7
 80091c0:	3001      	adds	r0, #1
 80091c2:	f43f ae57 	beq.w	8008e74 <_printf_float+0x9c>
 80091c6:	f108 0801 	add.w	r8, r8, #1
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	4543      	cmp	r3, r8
 80091d0:	dcf1      	bgt.n	80091b6 <_printf_float+0x3de>
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091d8:	e6db      	b.n	8008f92 <_printf_float+0x1ba>
 80091da:	f04f 0800 	mov.w	r8, #0
 80091de:	f104 091a 	add.w	r9, r4, #26
 80091e2:	e7f2      	b.n	80091ca <_printf_float+0x3f2>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4642      	mov	r2, r8
 80091e8:	e7df      	b.n	80091aa <_printf_float+0x3d2>
 80091ea:	2301      	movs	r3, #1
 80091ec:	464a      	mov	r2, r9
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	f43f ae3d 	beq.w	8008e74 <_printf_float+0x9c>
 80091fa:	f108 0801 	add.w	r8, r8, #1
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009202:	1a5b      	subs	r3, r3, r1
 8009204:	4543      	cmp	r3, r8
 8009206:	dcf0      	bgt.n	80091ea <_printf_float+0x412>
 8009208:	e6f7      	b.n	8008ffa <_printf_float+0x222>
 800920a:	f04f 0800 	mov.w	r8, #0
 800920e:	f104 0919 	add.w	r9, r4, #25
 8009212:	e7f4      	b.n	80091fe <_printf_float+0x426>

08009214 <_printf_common>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	4616      	mov	r6, r2
 800921a:	4699      	mov	r9, r3
 800921c:	688a      	ldr	r2, [r1, #8]
 800921e:	690b      	ldr	r3, [r1, #16]
 8009220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009224:	4293      	cmp	r3, r2
 8009226:	bfb8      	it	lt
 8009228:	4613      	movlt	r3, r2
 800922a:	6033      	str	r3, [r6, #0]
 800922c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009230:	4607      	mov	r7, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b10a      	cbz	r2, 800923a <_printf_common+0x26>
 8009236:	3301      	adds	r3, #1
 8009238:	6033      	str	r3, [r6, #0]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	0699      	lsls	r1, r3, #26
 800923e:	bf42      	ittt	mi
 8009240:	6833      	ldrmi	r3, [r6, #0]
 8009242:	3302      	addmi	r3, #2
 8009244:	6033      	strmi	r3, [r6, #0]
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	f015 0506 	ands.w	r5, r5, #6
 800924c:	d106      	bne.n	800925c <_printf_common+0x48>
 800924e:	f104 0a19 	add.w	sl, r4, #25
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	6832      	ldr	r2, [r6, #0]
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	42ab      	cmp	r3, r5
 800925a:	dc26      	bgt.n	80092aa <_printf_common+0x96>
 800925c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009260:	1e13      	subs	r3, r2, #0
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	bf18      	it	ne
 8009266:	2301      	movne	r3, #1
 8009268:	0692      	lsls	r2, r2, #26
 800926a:	d42b      	bmi.n	80092c4 <_printf_common+0xb0>
 800926c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009270:	4649      	mov	r1, r9
 8009272:	4638      	mov	r0, r7
 8009274:	47c0      	blx	r8
 8009276:	3001      	adds	r0, #1
 8009278:	d01e      	beq.n	80092b8 <_printf_common+0xa4>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	68e5      	ldr	r5, [r4, #12]
 800927e:	6832      	ldr	r2, [r6, #0]
 8009280:	f003 0306 	and.w	r3, r3, #6
 8009284:	2b04      	cmp	r3, #4
 8009286:	bf08      	it	eq
 8009288:	1aad      	subeq	r5, r5, r2
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	bf0c      	ite	eq
 8009290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009294:	2500      	movne	r5, #0
 8009296:	4293      	cmp	r3, r2
 8009298:	bfc4      	itt	gt
 800929a:	1a9b      	subgt	r3, r3, r2
 800929c:	18ed      	addgt	r5, r5, r3
 800929e:	2600      	movs	r6, #0
 80092a0:	341a      	adds	r4, #26
 80092a2:	42b5      	cmp	r5, r6
 80092a4:	d11a      	bne.n	80092dc <_printf_common+0xc8>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e008      	b.n	80092bc <_printf_common+0xa8>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4652      	mov	r2, sl
 80092ae:	4649      	mov	r1, r9
 80092b0:	4638      	mov	r0, r7
 80092b2:	47c0      	blx	r8
 80092b4:	3001      	adds	r0, #1
 80092b6:	d103      	bne.n	80092c0 <_printf_common+0xac>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c0:	3501      	adds	r5, #1
 80092c2:	e7c6      	b.n	8009252 <_printf_common+0x3e>
 80092c4:	18e1      	adds	r1, r4, r3
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	2030      	movs	r0, #48	; 0x30
 80092ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ce:	4422      	add	r2, r4
 80092d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d8:	3302      	adds	r3, #2
 80092da:	e7c7      	b.n	800926c <_printf_common+0x58>
 80092dc:	2301      	movs	r3, #1
 80092de:	4622      	mov	r2, r4
 80092e0:	4649      	mov	r1, r9
 80092e2:	4638      	mov	r0, r7
 80092e4:	47c0      	blx	r8
 80092e6:	3001      	adds	r0, #1
 80092e8:	d0e6      	beq.n	80092b8 <_printf_common+0xa4>
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7d9      	b.n	80092a2 <_printf_common+0x8e>
	...

080092f0 <_printf_i>:
 80092f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	4691      	mov	r9, r2
 80092f8:	7e27      	ldrb	r7, [r4, #24]
 80092fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092fc:	2f78      	cmp	r7, #120	; 0x78
 80092fe:	4680      	mov	r8, r0
 8009300:	469a      	mov	sl, r3
 8009302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009306:	d807      	bhi.n	8009318 <_printf_i+0x28>
 8009308:	2f62      	cmp	r7, #98	; 0x62
 800930a:	d80a      	bhi.n	8009322 <_printf_i+0x32>
 800930c:	2f00      	cmp	r7, #0
 800930e:	f000 80d8 	beq.w	80094c2 <_printf_i+0x1d2>
 8009312:	2f58      	cmp	r7, #88	; 0x58
 8009314:	f000 80a3 	beq.w	800945e <_printf_i+0x16e>
 8009318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800931c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009320:	e03a      	b.n	8009398 <_printf_i+0xa8>
 8009322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009326:	2b15      	cmp	r3, #21
 8009328:	d8f6      	bhi.n	8009318 <_printf_i+0x28>
 800932a:	a001      	add	r0, pc, #4	; (adr r0, 8009330 <_printf_i+0x40>)
 800932c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009330:	08009389 	.word	0x08009389
 8009334:	0800939d 	.word	0x0800939d
 8009338:	08009319 	.word	0x08009319
 800933c:	08009319 	.word	0x08009319
 8009340:	08009319 	.word	0x08009319
 8009344:	08009319 	.word	0x08009319
 8009348:	0800939d 	.word	0x0800939d
 800934c:	08009319 	.word	0x08009319
 8009350:	08009319 	.word	0x08009319
 8009354:	08009319 	.word	0x08009319
 8009358:	08009319 	.word	0x08009319
 800935c:	080094a9 	.word	0x080094a9
 8009360:	080093cd 	.word	0x080093cd
 8009364:	0800948b 	.word	0x0800948b
 8009368:	08009319 	.word	0x08009319
 800936c:	08009319 	.word	0x08009319
 8009370:	080094cb 	.word	0x080094cb
 8009374:	08009319 	.word	0x08009319
 8009378:	080093cd 	.word	0x080093cd
 800937c:	08009319 	.word	0x08009319
 8009380:	08009319 	.word	0x08009319
 8009384:	08009493 	.word	0x08009493
 8009388:	680b      	ldr	r3, [r1, #0]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	600a      	str	r2, [r1, #0]
 8009390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009398:	2301      	movs	r3, #1
 800939a:	e0a3      	b.n	80094e4 <_printf_i+0x1f4>
 800939c:	6825      	ldr	r5, [r4, #0]
 800939e:	6808      	ldr	r0, [r1, #0]
 80093a0:	062e      	lsls	r6, r5, #24
 80093a2:	f100 0304 	add.w	r3, r0, #4
 80093a6:	d50a      	bpl.n	80093be <_printf_i+0xce>
 80093a8:	6805      	ldr	r5, [r0, #0]
 80093aa:	600b      	str	r3, [r1, #0]
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xc8>
 80093b0:	232d      	movs	r3, #45	; 0x2d
 80093b2:	426d      	negs	r5, r5
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b8:	485e      	ldr	r0, [pc, #376]	; (8009534 <_printf_i+0x244>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e019      	b.n	80093f2 <_printf_i+0x102>
 80093be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80093c2:	6805      	ldr	r5, [r0, #0]
 80093c4:	600b      	str	r3, [r1, #0]
 80093c6:	bf18      	it	ne
 80093c8:	b22d      	sxthne	r5, r5
 80093ca:	e7ef      	b.n	80093ac <_printf_i+0xbc>
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	6825      	ldr	r5, [r4, #0]
 80093d0:	1d18      	adds	r0, r3, #4
 80093d2:	6008      	str	r0, [r1, #0]
 80093d4:	0628      	lsls	r0, r5, #24
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0xec>
 80093d8:	681d      	ldr	r5, [r3, #0]
 80093da:	e002      	b.n	80093e2 <_printf_i+0xf2>
 80093dc:	0669      	lsls	r1, r5, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0xe8>
 80093e0:	881d      	ldrh	r5, [r3, #0]
 80093e2:	4854      	ldr	r0, [pc, #336]	; (8009534 <_printf_i+0x244>)
 80093e4:	2f6f      	cmp	r7, #111	; 0x6f
 80093e6:	bf0c      	ite	eq
 80093e8:	2308      	moveq	r3, #8
 80093ea:	230a      	movne	r3, #10
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f2:	6866      	ldr	r6, [r4, #4]
 80093f4:	60a6      	str	r6, [r4, #8]
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	bfa2      	ittt	ge
 80093fa:	6821      	ldrge	r1, [r4, #0]
 80093fc:	f021 0104 	bicge.w	r1, r1, #4
 8009400:	6021      	strge	r1, [r4, #0]
 8009402:	b90d      	cbnz	r5, 8009408 <_printf_i+0x118>
 8009404:	2e00      	cmp	r6, #0
 8009406:	d04d      	beq.n	80094a4 <_printf_i+0x1b4>
 8009408:	4616      	mov	r6, r2
 800940a:	fbb5 f1f3 	udiv	r1, r5, r3
 800940e:	fb03 5711 	mls	r7, r3, r1, r5
 8009412:	5dc7      	ldrb	r7, [r0, r7]
 8009414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009418:	462f      	mov	r7, r5
 800941a:	42bb      	cmp	r3, r7
 800941c:	460d      	mov	r5, r1
 800941e:	d9f4      	bls.n	800940a <_printf_i+0x11a>
 8009420:	2b08      	cmp	r3, #8
 8009422:	d10b      	bne.n	800943c <_printf_i+0x14c>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07df      	lsls	r7, r3, #31
 8009428:	d508      	bpl.n	800943c <_printf_i+0x14c>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4299      	cmp	r1, r3
 8009430:	bfde      	ittt	le
 8009432:	2330      	movle	r3, #48	; 0x30
 8009434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009438:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800943c:	1b92      	subs	r2, r2, r6
 800943e:	6122      	str	r2, [r4, #16]
 8009440:	f8cd a000 	str.w	sl, [sp]
 8009444:	464b      	mov	r3, r9
 8009446:	aa03      	add	r2, sp, #12
 8009448:	4621      	mov	r1, r4
 800944a:	4640      	mov	r0, r8
 800944c:	f7ff fee2 	bl	8009214 <_printf_common>
 8009450:	3001      	adds	r0, #1
 8009452:	d14c      	bne.n	80094ee <_printf_i+0x1fe>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009458:	b004      	add	sp, #16
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945e:	4835      	ldr	r0, [pc, #212]	; (8009534 <_printf_i+0x244>)
 8009460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	680e      	ldr	r6, [r1, #0]
 8009468:	061f      	lsls	r7, r3, #24
 800946a:	f856 5b04 	ldr.w	r5, [r6], #4
 800946e:	600e      	str	r6, [r1, #0]
 8009470:	d514      	bpl.n	800949c <_printf_i+0x1ac>
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b91d      	cbnz	r5, 8009486 <_printf_i+0x196>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	f023 0320 	bic.w	r3, r3, #32
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	2310      	movs	r3, #16
 8009488:	e7b0      	b.n	80093ec <_printf_i+0xfc>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f043 0320 	orr.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	2378      	movs	r3, #120	; 0x78
 8009494:	4828      	ldr	r0, [pc, #160]	; (8009538 <_printf_i+0x248>)
 8009496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949a:	e7e3      	b.n	8009464 <_printf_i+0x174>
 800949c:	065e      	lsls	r6, r3, #25
 800949e:	bf48      	it	mi
 80094a0:	b2ad      	uxthmi	r5, r5
 80094a2:	e7e6      	b.n	8009472 <_printf_i+0x182>
 80094a4:	4616      	mov	r6, r2
 80094a6:	e7bb      	b.n	8009420 <_printf_i+0x130>
 80094a8:	680b      	ldr	r3, [r1, #0]
 80094aa:	6826      	ldr	r6, [r4, #0]
 80094ac:	6960      	ldr	r0, [r4, #20]
 80094ae:	1d1d      	adds	r5, r3, #4
 80094b0:	600d      	str	r5, [r1, #0]
 80094b2:	0635      	lsls	r5, r6, #24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0x1cc>
 80094b8:	6018      	str	r0, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <_printf_i+0x1d2>
 80094bc:	0671      	lsls	r1, r6, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0x1c8>
 80094c0:	8018      	strh	r0, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	4616      	mov	r6, r2
 80094c8:	e7ba      	b.n	8009440 <_printf_i+0x150>
 80094ca:	680b      	ldr	r3, [r1, #0]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	600a      	str	r2, [r1, #0]
 80094d0:	681e      	ldr	r6, [r3, #0]
 80094d2:	6862      	ldr	r2, [r4, #4]
 80094d4:	2100      	movs	r1, #0
 80094d6:	4630      	mov	r0, r6
 80094d8:	f7f6 ff0a 	bl	80002f0 <memchr>
 80094dc:	b108      	cbz	r0, 80094e2 <_printf_i+0x1f2>
 80094de:	1b80      	subs	r0, r0, r6
 80094e0:	6060      	str	r0, [r4, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	e7a8      	b.n	8009440 <_printf_i+0x150>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	4632      	mov	r2, r6
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	47d0      	blx	sl
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0ab      	beq.n	8009454 <_printf_i+0x164>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d413      	bmi.n	800952a <_printf_i+0x23a>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	4298      	cmp	r0, r3
 8009508:	bfb8      	it	lt
 800950a:	4618      	movlt	r0, r3
 800950c:	e7a4      	b.n	8009458 <_printf_i+0x168>
 800950e:	2301      	movs	r3, #1
 8009510:	4632      	mov	r2, r6
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	47d0      	blx	sl
 8009518:	3001      	adds	r0, #1
 800951a:	d09b      	beq.n	8009454 <_printf_i+0x164>
 800951c:	3501      	adds	r5, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	9903      	ldr	r1, [sp, #12]
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	42ab      	cmp	r3, r5
 8009526:	dcf2      	bgt.n	800950e <_printf_i+0x21e>
 8009528:	e7eb      	b.n	8009502 <_printf_i+0x212>
 800952a:	2500      	movs	r5, #0
 800952c:	f104 0619 	add.w	r6, r4, #25
 8009530:	e7f5      	b.n	800951e <_printf_i+0x22e>
 8009532:	bf00      	nop
 8009534:	0800b84a 	.word	0x0800b84a
 8009538:	0800b85b 	.word	0x0800b85b

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_sbrk_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f8 fb86 	bl	8001c58 <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	2000092c 	.word	0x2000092c

0800955c <_raise_r>:
 800955c:	291f      	cmp	r1, #31
 800955e:	b538      	push	{r3, r4, r5, lr}
 8009560:	4604      	mov	r4, r0
 8009562:	460d      	mov	r5, r1
 8009564:	d904      	bls.n	8009570 <_raise_r+0x14>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009572:	b112      	cbz	r2, 800957a <_raise_r+0x1e>
 8009574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009578:	b94b      	cbnz	r3, 800958e <_raise_r+0x32>
 800957a:	4620      	mov	r0, r4
 800957c:	f000 f830 	bl	80095e0 <_getpid_r>
 8009580:	462a      	mov	r2, r5
 8009582:	4601      	mov	r1, r0
 8009584:	4620      	mov	r0, r4
 8009586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958a:	f000 b817 	b.w	80095bc <_kill_r>
 800958e:	2b01      	cmp	r3, #1
 8009590:	d00a      	beq.n	80095a8 <_raise_r+0x4c>
 8009592:	1c59      	adds	r1, r3, #1
 8009594:	d103      	bne.n	800959e <_raise_r+0x42>
 8009596:	2316      	movs	r3, #22
 8009598:	6003      	str	r3, [r0, #0]
 800959a:	2001      	movs	r0, #1
 800959c:	e7e7      	b.n	800956e <_raise_r+0x12>
 800959e:	2400      	movs	r4, #0
 80095a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095a4:	4628      	mov	r0, r5
 80095a6:	4798      	blx	r3
 80095a8:	2000      	movs	r0, #0
 80095aa:	e7e0      	b.n	800956e <_raise_r+0x12>

080095ac <raise>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <raise+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f7ff bfd3 	b.w	800955c <_raise_r>
 80095b6:	bf00      	nop
 80095b8:	20000010 	.word	0x20000010

080095bc <_kill_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d07      	ldr	r5, [pc, #28]	; (80095dc <_kill_r+0x20>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	4611      	mov	r1, r2
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f7f8 fabd 	bl	8001b48 <_kill>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d102      	bne.n	80095d8 <_kill_r+0x1c>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b103      	cbz	r3, 80095d8 <_kill_r+0x1c>
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	bd38      	pop	{r3, r4, r5, pc}
 80095da:	bf00      	nop
 80095dc:	2000092c 	.word	0x2000092c

080095e0 <_getpid_r>:
 80095e0:	f7f8 baaa 	b.w	8001b38 <_getpid>

080095e4 <siprintf>:
 80095e4:	b40e      	push	{r1, r2, r3}
 80095e6:	b500      	push	{lr}
 80095e8:	b09c      	sub	sp, #112	; 0x70
 80095ea:	ab1d      	add	r3, sp, #116	; 0x74
 80095ec:	9002      	str	r0, [sp, #8]
 80095ee:	9006      	str	r0, [sp, #24]
 80095f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095f4:	4809      	ldr	r0, [pc, #36]	; (800961c <siprintf+0x38>)
 80095f6:	9107      	str	r1, [sp, #28]
 80095f8:	9104      	str	r1, [sp, #16]
 80095fa:	4909      	ldr	r1, [pc, #36]	; (8009620 <siprintf+0x3c>)
 80095fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009600:	9105      	str	r1, [sp, #20]
 8009602:	6800      	ldr	r0, [r0, #0]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	a902      	add	r1, sp, #8
 8009608:	f001 fa22 	bl	800aa50 <_svfiprintf_r>
 800960c:	9b02      	ldr	r3, [sp, #8]
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
 8009612:	b01c      	add	sp, #112	; 0x70
 8009614:	f85d eb04 	ldr.w	lr, [sp], #4
 8009618:	b003      	add	sp, #12
 800961a:	4770      	bx	lr
 800961c:	20000010 	.word	0x20000010
 8009620:	ffff0208 	.word	0xffff0208

08009624 <quorem>:
 8009624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	6903      	ldr	r3, [r0, #16]
 800962a:	690c      	ldr	r4, [r1, #16]
 800962c:	42a3      	cmp	r3, r4
 800962e:	4607      	mov	r7, r0
 8009630:	f2c0 8081 	blt.w	8009736 <quorem+0x112>
 8009634:	3c01      	subs	r4, #1
 8009636:	f101 0814 	add.w	r8, r1, #20
 800963a:	f100 0514 	add.w	r5, r0, #20
 800963e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964c:	3301      	adds	r3, #1
 800964e:	429a      	cmp	r2, r3
 8009650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009658:	fbb2 f6f3 	udiv	r6, r2, r3
 800965c:	d331      	bcc.n	80096c2 <quorem+0x9e>
 800965e:	f04f 0e00 	mov.w	lr, #0
 8009662:	4640      	mov	r0, r8
 8009664:	46ac      	mov	ip, r5
 8009666:	46f2      	mov	sl, lr
 8009668:	f850 2b04 	ldr.w	r2, [r0], #4
 800966c:	b293      	uxth	r3, r2
 800966e:	fb06 e303 	mla	r3, r6, r3, lr
 8009672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ebaa 0303 	sub.w	r3, sl, r3
 800967c:	0c12      	lsrs	r2, r2, #16
 800967e:	f8dc a000 	ldr.w	sl, [ip]
 8009682:	fb06 e202 	mla	r2, r6, r2, lr
 8009686:	fa13 f38a 	uxtah	r3, r3, sl
 800968a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800968e:	fa1f fa82 	uxth.w	sl, r2
 8009692:	f8dc 2000 	ldr.w	r2, [ip]
 8009696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800969a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a4:	4581      	cmp	r9, r0
 80096a6:	f84c 3b04 	str.w	r3, [ip], #4
 80096aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096ae:	d2db      	bcs.n	8009668 <quorem+0x44>
 80096b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80096b4:	b92b      	cbnz	r3, 80096c2 <quorem+0x9e>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d32e      	bcc.n	800971e <quorem+0xfa>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	4638      	mov	r0, r7
 80096c4:	f001 f85a 	bl	800a77c <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	db24      	blt.n	8009716 <quorem+0xf2>
 80096cc:	3601      	adds	r6, #1
 80096ce:	4628      	mov	r0, r5
 80096d0:	f04f 0c00 	mov.w	ip, #0
 80096d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096d8:	f8d0 e000 	ldr.w	lr, [r0]
 80096dc:	b293      	uxth	r3, r2
 80096de:	ebac 0303 	sub.w	r3, ip, r3
 80096e2:	0c12      	lsrs	r2, r2, #16
 80096e4:	fa13 f38e 	uxtah	r3, r3, lr
 80096e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f6:	45c1      	cmp	r9, r8
 80096f8:	f840 3b04 	str.w	r3, [r0], #4
 80096fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009700:	d2e8      	bcs.n	80096d4 <quorem+0xb0>
 8009702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970a:	b922      	cbnz	r2, 8009716 <quorem+0xf2>
 800970c:	3b04      	subs	r3, #4
 800970e:	429d      	cmp	r5, r3
 8009710:	461a      	mov	r2, r3
 8009712:	d30a      	bcc.n	800972a <quorem+0x106>
 8009714:	613c      	str	r4, [r7, #16]
 8009716:	4630      	mov	r0, r6
 8009718:	b003      	add	sp, #12
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	3b04      	subs	r3, #4
 8009722:	2a00      	cmp	r2, #0
 8009724:	d1cc      	bne.n	80096c0 <quorem+0x9c>
 8009726:	3c01      	subs	r4, #1
 8009728:	e7c7      	b.n	80096ba <quorem+0x96>
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	3b04      	subs	r3, #4
 800972e:	2a00      	cmp	r2, #0
 8009730:	d1f0      	bne.n	8009714 <quorem+0xf0>
 8009732:	3c01      	subs	r4, #1
 8009734:	e7eb      	b.n	800970e <quorem+0xea>
 8009736:	2000      	movs	r0, #0
 8009738:	e7ee      	b.n	8009718 <quorem+0xf4>
 800973a:	0000      	movs	r0, r0
 800973c:	0000      	movs	r0, r0
	...

08009740 <_dtoa_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ec59 8b10 	vmov	r8, r9, d0
 8009748:	b095      	sub	sp, #84	; 0x54
 800974a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800974c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800974e:	9107      	str	r1, [sp, #28]
 8009750:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009754:	4606      	mov	r6, r0
 8009756:	9209      	str	r2, [sp, #36]	; 0x24
 8009758:	9310      	str	r3, [sp, #64]	; 0x40
 800975a:	b975      	cbnz	r5, 800977a <_dtoa_r+0x3a>
 800975c:	2010      	movs	r0, #16
 800975e:	f7ff f9f1 	bl	8008b44 <malloc>
 8009762:	4602      	mov	r2, r0
 8009764:	6270      	str	r0, [r6, #36]	; 0x24
 8009766:	b920      	cbnz	r0, 8009772 <_dtoa_r+0x32>
 8009768:	4bab      	ldr	r3, [pc, #684]	; (8009a18 <_dtoa_r+0x2d8>)
 800976a:	21ea      	movs	r1, #234	; 0xea
 800976c:	48ab      	ldr	r0, [pc, #684]	; (8009a1c <_dtoa_r+0x2dc>)
 800976e:	f001 fa6f 	bl	800ac50 <__assert_func>
 8009772:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009776:	6005      	str	r5, [r0, #0]
 8009778:	60c5      	str	r5, [r0, #12]
 800977a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	b151      	cbz	r1, 8009796 <_dtoa_r+0x56>
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	604a      	str	r2, [r1, #4]
 8009784:	2301      	movs	r3, #1
 8009786:	4093      	lsls	r3, r2
 8009788:	608b      	str	r3, [r1, #8]
 800978a:	4630      	mov	r0, r6
 800978c:	f000 fdb8 	bl	800a300 <_Bfree>
 8009790:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f1b9 0300 	subs.w	r3, r9, #0
 800979a:	bfbb      	ittet	lt
 800979c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097a0:	9303      	strlt	r3, [sp, #12]
 80097a2:	2300      	movge	r3, #0
 80097a4:	2201      	movlt	r2, #1
 80097a6:	bfac      	ite	ge
 80097a8:	6023      	strge	r3, [r4, #0]
 80097aa:	6022      	strlt	r2, [r4, #0]
 80097ac:	4b9c      	ldr	r3, [pc, #624]	; (8009a20 <_dtoa_r+0x2e0>)
 80097ae:	9c03      	ldr	r4, [sp, #12]
 80097b0:	43a3      	bics	r3, r4
 80097b2:	d11a      	bne.n	80097ea <_dtoa_r+0xaa>
 80097b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80097c0:	ea53 0308 	orrs.w	r3, r3, r8
 80097c4:	f000 8512 	beq.w	800a1ec <_dtoa_r+0xaac>
 80097c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097ca:	b953      	cbnz	r3, 80097e2 <_dtoa_r+0xa2>
 80097cc:	4b95      	ldr	r3, [pc, #596]	; (8009a24 <_dtoa_r+0x2e4>)
 80097ce:	e01f      	b.n	8009810 <_dtoa_r+0xd0>
 80097d0:	4b95      	ldr	r3, [pc, #596]	; (8009a28 <_dtoa_r+0x2e8>)
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	9800      	ldr	r0, [sp, #0]
 80097dc:	b015      	add	sp, #84	; 0x54
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	4b90      	ldr	r3, [pc, #576]	; (8009a24 <_dtoa_r+0x2e4>)
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	3303      	adds	r3, #3
 80097e8:	e7f5      	b.n	80097d6 <_dtoa_r+0x96>
 80097ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80097fa:	d10b      	bne.n	8009814 <_dtoa_r+0xd4>
 80097fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097fe:	2301      	movs	r3, #1
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 84ee 	beq.w	800a1e6 <_dtoa_r+0xaa6>
 800980a:	4888      	ldr	r0, [pc, #544]	; (8009a2c <_dtoa_r+0x2ec>)
 800980c:	6018      	str	r0, [r3, #0]
 800980e:	1e43      	subs	r3, r0, #1
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	e7e2      	b.n	80097da <_dtoa_r+0x9a>
 8009814:	a913      	add	r1, sp, #76	; 0x4c
 8009816:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800981a:	aa12      	add	r2, sp, #72	; 0x48
 800981c:	4630      	mov	r0, r6
 800981e:	f001 f851 	bl	800a8c4 <__d2b>
 8009822:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009826:	4605      	mov	r5, r0
 8009828:	9812      	ldr	r0, [sp, #72]	; 0x48
 800982a:	2900      	cmp	r1, #0
 800982c:	d047      	beq.n	80098be <_dtoa_r+0x17e>
 800982e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009830:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009834:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009838:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800983c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009840:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009844:	2400      	movs	r4, #0
 8009846:	ec43 2b16 	vmov	d6, r2, r3
 800984a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800984e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009a00 <_dtoa_r+0x2c0>
 8009852:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009856:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009a08 <_dtoa_r+0x2c8>
 800985a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800985e:	eeb0 7b46 	vmov.f64	d7, d6
 8009862:	ee06 1a90 	vmov	s13, r1
 8009866:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800986a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009a10 <_dtoa_r+0x2d0>
 800986e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009872:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009876:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	ee16 ba90 	vmov	fp, s13
 8009882:	9411      	str	r4, [sp, #68]	; 0x44
 8009884:	d508      	bpl.n	8009898 <_dtoa_r+0x158>
 8009886:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800988a:	eeb4 6b47 	vcmp.f64	d6, d7
 800988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009892:	bf18      	it	ne
 8009894:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009898:	f1bb 0f16 	cmp.w	fp, #22
 800989c:	d832      	bhi.n	8009904 <_dtoa_r+0x1c4>
 800989e:	4b64      	ldr	r3, [pc, #400]	; (8009a30 <_dtoa_r+0x2f0>)
 80098a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098a4:	ed93 7b00 	vldr	d7, [r3]
 80098a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80098ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b4:	d501      	bpl.n	80098ba <_dtoa_r+0x17a>
 80098b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80098ba:	2300      	movs	r3, #0
 80098bc:	e023      	b.n	8009906 <_dtoa_r+0x1c6>
 80098be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098c0:	4401      	add	r1, r0
 80098c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	bfc3      	ittte	gt
 80098ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80098d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80098d6:	f1c3 0320 	rsble	r3, r3, #32
 80098da:	bfc6      	itte	gt
 80098dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80098e0:	ea43 0308 	orrgt.w	r3, r3, r8
 80098e4:	fa08 f303 	lslle.w	r3, r8, r3
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098f0:	3901      	subs	r1, #1
 80098f2:	ed8d 7b00 	vstr	d7, [sp]
 80098f6:	9c01      	ldr	r4, [sp, #4]
 80098f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009900:	2401      	movs	r4, #1
 8009902:	e7a0      	b.n	8009846 <_dtoa_r+0x106>
 8009904:	2301      	movs	r3, #1
 8009906:	930f      	str	r3, [sp, #60]	; 0x3c
 8009908:	1a43      	subs	r3, r0, r1
 800990a:	1e5a      	subs	r2, r3, #1
 800990c:	bf45      	ittet	mi
 800990e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009912:	9305      	strmi	r3, [sp, #20]
 8009914:	2300      	movpl	r3, #0
 8009916:	2300      	movmi	r3, #0
 8009918:	9206      	str	r2, [sp, #24]
 800991a:	bf54      	ite	pl
 800991c:	9305      	strpl	r3, [sp, #20]
 800991e:	9306      	strmi	r3, [sp, #24]
 8009920:	f1bb 0f00 	cmp.w	fp, #0
 8009924:	db18      	blt.n	8009958 <_dtoa_r+0x218>
 8009926:	9b06      	ldr	r3, [sp, #24]
 8009928:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800992c:	445b      	add	r3, fp
 800992e:	9306      	str	r3, [sp, #24]
 8009930:	2300      	movs	r3, #0
 8009932:	9a07      	ldr	r2, [sp, #28]
 8009934:	2a09      	cmp	r2, #9
 8009936:	d849      	bhi.n	80099cc <_dtoa_r+0x28c>
 8009938:	2a05      	cmp	r2, #5
 800993a:	bfc4      	itt	gt
 800993c:	3a04      	subgt	r2, #4
 800993e:	9207      	strgt	r2, [sp, #28]
 8009940:	9a07      	ldr	r2, [sp, #28]
 8009942:	f1a2 0202 	sub.w	r2, r2, #2
 8009946:	bfcc      	ite	gt
 8009948:	2400      	movgt	r4, #0
 800994a:	2401      	movle	r4, #1
 800994c:	2a03      	cmp	r2, #3
 800994e:	d848      	bhi.n	80099e2 <_dtoa_r+0x2a2>
 8009950:	e8df f002 	tbb	[pc, r2]
 8009954:	3a2c2e0b 	.word	0x3a2c2e0b
 8009958:	9b05      	ldr	r3, [sp, #20]
 800995a:	2200      	movs	r2, #0
 800995c:	eba3 030b 	sub.w	r3, r3, fp
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	920e      	str	r2, [sp, #56]	; 0x38
 8009964:	f1cb 0300 	rsb	r3, fp, #0
 8009968:	e7e3      	b.n	8009932 <_dtoa_r+0x1f2>
 800996a:	2200      	movs	r2, #0
 800996c:	9208      	str	r2, [sp, #32]
 800996e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009970:	2a00      	cmp	r2, #0
 8009972:	dc39      	bgt.n	80099e8 <_dtoa_r+0x2a8>
 8009974:	f04f 0a01 	mov.w	sl, #1
 8009978:	46d1      	mov	r9, sl
 800997a:	4652      	mov	r2, sl
 800997c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009980:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009982:	2100      	movs	r1, #0
 8009984:	6079      	str	r1, [r7, #4]
 8009986:	2004      	movs	r0, #4
 8009988:	f100 0c14 	add.w	ip, r0, #20
 800998c:	4594      	cmp	ip, r2
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	d92f      	bls.n	80099f2 <_dtoa_r+0x2b2>
 8009992:	4630      	mov	r0, r6
 8009994:	930c      	str	r3, [sp, #48]	; 0x30
 8009996:	f000 fc73 	bl	800a280 <_Balloc>
 800999a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800999c:	9000      	str	r0, [sp, #0]
 800999e:	4602      	mov	r2, r0
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d149      	bne.n	8009a38 <_dtoa_r+0x2f8>
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <_dtoa_r+0x2f4>)
 80099a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099aa:	e6df      	b.n	800976c <_dtoa_r+0x2c>
 80099ac:	2201      	movs	r2, #1
 80099ae:	e7dd      	b.n	800996c <_dtoa_r+0x22c>
 80099b0:	2200      	movs	r2, #0
 80099b2:	9208      	str	r2, [sp, #32]
 80099b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b6:	eb0b 0a02 	add.w	sl, fp, r2
 80099ba:	f10a 0901 	add.w	r9, sl, #1
 80099be:	464a      	mov	r2, r9
 80099c0:	2a01      	cmp	r2, #1
 80099c2:	bfb8      	it	lt
 80099c4:	2201      	movlt	r2, #1
 80099c6:	e7db      	b.n	8009980 <_dtoa_r+0x240>
 80099c8:	2201      	movs	r2, #1
 80099ca:	e7f2      	b.n	80099b2 <_dtoa_r+0x272>
 80099cc:	2401      	movs	r4, #1
 80099ce:	2200      	movs	r2, #0
 80099d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80099d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80099d8:	2100      	movs	r1, #0
 80099da:	46d1      	mov	r9, sl
 80099dc:	2212      	movs	r2, #18
 80099de:	9109      	str	r1, [sp, #36]	; 0x24
 80099e0:	e7ce      	b.n	8009980 <_dtoa_r+0x240>
 80099e2:	2201      	movs	r2, #1
 80099e4:	9208      	str	r2, [sp, #32]
 80099e6:	e7f5      	b.n	80099d4 <_dtoa_r+0x294>
 80099e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80099ec:	46d1      	mov	r9, sl
 80099ee:	4652      	mov	r2, sl
 80099f0:	e7c6      	b.n	8009980 <_dtoa_r+0x240>
 80099f2:	3101      	adds	r1, #1
 80099f4:	6079      	str	r1, [r7, #4]
 80099f6:	0040      	lsls	r0, r0, #1
 80099f8:	e7c6      	b.n	8009988 <_dtoa_r+0x248>
 80099fa:	bf00      	nop
 80099fc:	f3af 8000 	nop.w
 8009a00:	636f4361 	.word	0x636f4361
 8009a04:	3fd287a7 	.word	0x3fd287a7
 8009a08:	8b60c8b3 	.word	0x8b60c8b3
 8009a0c:	3fc68a28 	.word	0x3fc68a28
 8009a10:	509f79fb 	.word	0x509f79fb
 8009a14:	3fd34413 	.word	0x3fd34413
 8009a18:	0800b879 	.word	0x0800b879
 8009a1c:	0800b890 	.word	0x0800b890
 8009a20:	7ff00000 	.word	0x7ff00000
 8009a24:	0800b875 	.word	0x0800b875
 8009a28:	0800b86c 	.word	0x0800b86c
 8009a2c:	0800b849 	.word	0x0800b849
 8009a30:	0800b988 	.word	0x0800b988
 8009a34:	0800b8ef 	.word	0x0800b8ef
 8009a38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009a3a:	9900      	ldr	r1, [sp, #0]
 8009a3c:	6011      	str	r1, [r2, #0]
 8009a3e:	f1b9 0f0e 	cmp.w	r9, #14
 8009a42:	d872      	bhi.n	8009b2a <_dtoa_r+0x3ea>
 8009a44:	2c00      	cmp	r4, #0
 8009a46:	d070      	beq.n	8009b2a <_dtoa_r+0x3ea>
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	f340 80a6 	ble.w	8009b9c <_dtoa_r+0x45c>
 8009a50:	49ca      	ldr	r1, [pc, #808]	; (8009d7c <_dtoa_r+0x63c>)
 8009a52:	f00b 020f 	and.w	r2, fp, #15
 8009a56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009a5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a5e:	ed92 7b00 	vldr	d7, [r2]
 8009a62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009a66:	f000 808d 	beq.w	8009b84 <_dtoa_r+0x444>
 8009a6a:	4ac5      	ldr	r2, [pc, #788]	; (8009d80 <_dtoa_r+0x640>)
 8009a6c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009a70:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a74:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009a78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a7c:	f001 010f 	and.w	r1, r1, #15
 8009a80:	2203      	movs	r2, #3
 8009a82:	48bf      	ldr	r0, [pc, #764]	; (8009d80 <_dtoa_r+0x640>)
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d17f      	bne.n	8009b88 <_dtoa_r+0x448>
 8009a88:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a96:	2900      	cmp	r1, #0
 8009a98:	f000 80b2 	beq.w	8009c00 <_dtoa_r+0x4c0>
 8009a9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aa4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aac:	f140 80a8 	bpl.w	8009c00 <_dtoa_r+0x4c0>
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	f000 80a4 	beq.w	8009c00 <_dtoa_r+0x4c0>
 8009ab8:	f1ba 0f00 	cmp.w	sl, #0
 8009abc:	dd31      	ble.n	8009b22 <_dtoa_r+0x3e2>
 8009abe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009ac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ac6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009aca:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009ace:	3201      	adds	r2, #1
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ad6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009ada:	ee07 2a90 	vmov	s15, r2
 8009ade:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ae2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009ae6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009aea:	9c03      	ldr	r4, [sp, #12]
 8009aec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009af0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f040 8086 	bne.w	8009c06 <_dtoa_r+0x4c6>
 8009afa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009afe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b02:	ec42 1b17 	vmov	d7, r1, r2
 8009b06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0e:	f300 8272 	bgt.w	8009ff6 <_dtoa_r+0x8b6>
 8009b12:	eeb1 7b47 	vneg.f64	d7, d7
 8009b16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	f100 8267 	bmi.w	8009ff0 <_dtoa_r+0x8b0>
 8009b22:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009b26:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009b2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f2c0 8129 	blt.w	8009d84 <_dtoa_r+0x644>
 8009b32:	f1bb 0f0e 	cmp.w	fp, #14
 8009b36:	f300 8125 	bgt.w	8009d84 <_dtoa_r+0x644>
 8009b3a:	4b90      	ldr	r3, [pc, #576]	; (8009d7c <_dtoa_r+0x63c>)
 8009b3c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b40:	ed93 6b00 	vldr	d6, [r3]
 8009b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f280 80c3 	bge.w	8009cd2 <_dtoa_r+0x592>
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	f300 80bf 	bgt.w	8009cd2 <_dtoa_r+0x592>
 8009b54:	f040 824c 	bne.w	8009ff0 <_dtoa_r+0x8b0>
 8009b58:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6c:	464c      	mov	r4, r9
 8009b6e:	464f      	mov	r7, r9
 8009b70:	f280 8222 	bge.w	8009fb8 <_dtoa_r+0x878>
 8009b74:	f8dd 8000 	ldr.w	r8, [sp]
 8009b78:	2331      	movs	r3, #49	; 0x31
 8009b7a:	f808 3b01 	strb.w	r3, [r8], #1
 8009b7e:	f10b 0b01 	add.w	fp, fp, #1
 8009b82:	e21e      	b.n	8009fc2 <_dtoa_r+0x882>
 8009b84:	2202      	movs	r2, #2
 8009b86:	e77c      	b.n	8009a82 <_dtoa_r+0x342>
 8009b88:	07cc      	lsls	r4, r1, #31
 8009b8a:	d504      	bpl.n	8009b96 <_dtoa_r+0x456>
 8009b8c:	ed90 6b00 	vldr	d6, [r0]
 8009b90:	3201      	adds	r2, #1
 8009b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b96:	1049      	asrs	r1, r1, #1
 8009b98:	3008      	adds	r0, #8
 8009b9a:	e773      	b.n	8009a84 <_dtoa_r+0x344>
 8009b9c:	d02e      	beq.n	8009bfc <_dtoa_r+0x4bc>
 8009b9e:	f1cb 0100 	rsb	r1, fp, #0
 8009ba2:	4a76      	ldr	r2, [pc, #472]	; (8009d7c <_dtoa_r+0x63c>)
 8009ba4:	f001 000f 	and.w	r0, r1, #15
 8009ba8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009bac:	ed92 7b00 	vldr	d7, [r2]
 8009bb0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009bb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bb8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009bbc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009bc0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009bc4:	486e      	ldr	r0, [pc, #440]	; (8009d80 <_dtoa_r+0x640>)
 8009bc6:	1109      	asrs	r1, r1, #4
 8009bc8:	2400      	movs	r4, #0
 8009bca:	2202      	movs	r2, #2
 8009bcc:	b939      	cbnz	r1, 8009bde <_dtoa_r+0x49e>
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	f43f af60 	beq.w	8009a94 <_dtoa_r+0x354>
 8009bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bdc:	e75a      	b.n	8009a94 <_dtoa_r+0x354>
 8009bde:	07cf      	lsls	r7, r1, #31
 8009be0:	d509      	bpl.n	8009bf6 <_dtoa_r+0x4b6>
 8009be2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009be6:	ed90 7b00 	vldr	d7, [r0]
 8009bea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009bf2:	3201      	adds	r2, #1
 8009bf4:	2401      	movs	r4, #1
 8009bf6:	1049      	asrs	r1, r1, #1
 8009bf8:	3008      	adds	r0, #8
 8009bfa:	e7e7      	b.n	8009bcc <_dtoa_r+0x48c>
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	e749      	b.n	8009a94 <_dtoa_r+0x354>
 8009c00:	465f      	mov	r7, fp
 8009c02:	4648      	mov	r0, r9
 8009c04:	e765      	b.n	8009ad2 <_dtoa_r+0x392>
 8009c06:	ec42 1b17 	vmov	d7, r1, r2
 8009c0a:	4a5c      	ldr	r2, [pc, #368]	; (8009d7c <_dtoa_r+0x63c>)
 8009c0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c10:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c14:	9a00      	ldr	r2, [sp, #0]
 8009c16:	1814      	adds	r4, r2, r0
 8009c18:	9a08      	ldr	r2, [sp, #32]
 8009c1a:	b352      	cbz	r2, 8009c72 <_dtoa_r+0x532>
 8009c1c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c20:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c24:	f8dd 8000 	ldr.w	r8, [sp]
 8009c28:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c38:	ee14 2a90 	vmov	r2, s9
 8009c3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c40:	3230      	adds	r2, #48	; 0x30
 8009c42:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	f808 2b01 	strb.w	r2, [r8], #1
 8009c52:	d439      	bmi.n	8009cc8 <_dtoa_r+0x588>
 8009c54:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c58:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c60:	d472      	bmi.n	8009d48 <_dtoa_r+0x608>
 8009c62:	45a0      	cmp	r8, r4
 8009c64:	f43f af5d 	beq.w	8009b22 <_dtoa_r+0x3e2>
 8009c68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c6c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c70:	e7e0      	b.n	8009c34 <_dtoa_r+0x4f4>
 8009c72:	f8dd 8000 	ldr.w	r8, [sp]
 8009c76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c84:	ee14 2a90 	vmov	r2, s9
 8009c88:	3230      	adds	r2, #48	; 0x30
 8009c8a:	f808 2b01 	strb.w	r2, [r8], #1
 8009c8e:	45a0      	cmp	r8, r4
 8009c90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c98:	d118      	bne.n	8009ccc <_dtoa_r+0x58c>
 8009c9a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009ca2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009caa:	dc4d      	bgt.n	8009d48 <_dtoa_r+0x608>
 8009cac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009cb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb8:	f57f af33 	bpl.w	8009b22 <_dtoa_r+0x3e2>
 8009cbc:	4688      	mov	r8, r1
 8009cbe:	3901      	subs	r1, #1
 8009cc0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009cc4:	2b30      	cmp	r3, #48	; 0x30
 8009cc6:	d0f9      	beq.n	8009cbc <_dtoa_r+0x57c>
 8009cc8:	46bb      	mov	fp, r7
 8009cca:	e02a      	b.n	8009d22 <_dtoa_r+0x5e2>
 8009ccc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cd0:	e7d6      	b.n	8009c80 <_dtoa_r+0x540>
 8009cd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cd6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009cda:	f8dd 8000 	ldr.w	r8, [sp]
 8009cde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009ce2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009ce6:	ee15 3a10 	vmov	r3, s10
 8009cea:	3330      	adds	r3, #48	; 0x30
 8009cec:	f808 3b01 	strb.w	r3, [r8], #1
 8009cf0:	9b00      	ldr	r3, [sp, #0]
 8009cf2:	eba8 0303 	sub.w	r3, r8, r3
 8009cf6:	4599      	cmp	r9, r3
 8009cf8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009cfc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d00:	d133      	bne.n	8009d6a <_dtoa_r+0x62a>
 8009d02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0e:	dc1a      	bgt.n	8009d46 <_dtoa_r+0x606>
 8009d10:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d18:	d103      	bne.n	8009d22 <_dtoa_r+0x5e2>
 8009d1a:	ee15 3a10 	vmov	r3, s10
 8009d1e:	07d9      	lsls	r1, r3, #31
 8009d20:	d411      	bmi.n	8009d46 <_dtoa_r+0x606>
 8009d22:	4629      	mov	r1, r5
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 faeb 	bl	800a300 <_Bfree>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d2e:	f888 3000 	strb.w	r3, [r8]
 8009d32:	f10b 0301 	add.w	r3, fp, #1
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f43f ad4d 	beq.w	80097da <_dtoa_r+0x9a>
 8009d40:	f8c3 8000 	str.w	r8, [r3]
 8009d44:	e549      	b.n	80097da <_dtoa_r+0x9a>
 8009d46:	465f      	mov	r7, fp
 8009d48:	4643      	mov	r3, r8
 8009d4a:	4698      	mov	r8, r3
 8009d4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d50:	2a39      	cmp	r2, #57	; 0x39
 8009d52:	d106      	bne.n	8009d62 <_dtoa_r+0x622>
 8009d54:	9a00      	ldr	r2, [sp, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d1f7      	bne.n	8009d4a <_dtoa_r+0x60a>
 8009d5a:	9900      	ldr	r1, [sp, #0]
 8009d5c:	2230      	movs	r2, #48	; 0x30
 8009d5e:	3701      	adds	r7, #1
 8009d60:	700a      	strb	r2, [r1, #0]
 8009d62:	781a      	ldrb	r2, [r3, #0]
 8009d64:	3201      	adds	r2, #1
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	e7ae      	b.n	8009cc8 <_dtoa_r+0x588>
 8009d6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d76:	d1b2      	bne.n	8009cde <_dtoa_r+0x59e>
 8009d78:	e7d3      	b.n	8009d22 <_dtoa_r+0x5e2>
 8009d7a:	bf00      	nop
 8009d7c:	0800b988 	.word	0x0800b988
 8009d80:	0800b960 	.word	0x0800b960
 8009d84:	9908      	ldr	r1, [sp, #32]
 8009d86:	2900      	cmp	r1, #0
 8009d88:	f000 80d1 	beq.w	8009f2e <_dtoa_r+0x7ee>
 8009d8c:	9907      	ldr	r1, [sp, #28]
 8009d8e:	2901      	cmp	r1, #1
 8009d90:	f300 80b4 	bgt.w	8009efc <_dtoa_r+0x7bc>
 8009d94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d96:	2900      	cmp	r1, #0
 8009d98:	f000 80ac 	beq.w	8009ef4 <_dtoa_r+0x7b4>
 8009d9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009da0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009da4:	461c      	mov	r4, r3
 8009da6:	930a      	str	r3, [sp, #40]	; 0x28
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	2101      	movs	r1, #1
 8009db2:	4413      	add	r3, r2
 8009db4:	4630      	mov	r0, r6
 8009db6:	9306      	str	r3, [sp, #24]
 8009db8:	f000 fb5e 	bl	800a478 <__i2b>
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	f1b8 0f00 	cmp.w	r8, #0
 8009dc4:	dd0d      	ble.n	8009de2 <_dtoa_r+0x6a2>
 8009dc6:	9a06      	ldr	r2, [sp, #24]
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	dd0a      	ble.n	8009de2 <_dtoa_r+0x6a2>
 8009dcc:	4542      	cmp	r2, r8
 8009dce:	9905      	ldr	r1, [sp, #20]
 8009dd0:	bfa8      	it	ge
 8009dd2:	4642      	movge	r2, r8
 8009dd4:	1a89      	subs	r1, r1, r2
 8009dd6:	9105      	str	r1, [sp, #20]
 8009dd8:	9906      	ldr	r1, [sp, #24]
 8009dda:	eba8 0802 	sub.w	r8, r8, r2
 8009dde:	1a8a      	subs	r2, r1, r2
 8009de0:	9206      	str	r2, [sp, #24]
 8009de2:	b303      	cbz	r3, 8009e26 <_dtoa_r+0x6e6>
 8009de4:	9a08      	ldr	r2, [sp, #32]
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	f000 80a6 	beq.w	8009f38 <_dtoa_r+0x7f8>
 8009dec:	2c00      	cmp	r4, #0
 8009dee:	dd13      	ble.n	8009e18 <_dtoa_r+0x6d8>
 8009df0:	4639      	mov	r1, r7
 8009df2:	4622      	mov	r2, r4
 8009df4:	4630      	mov	r0, r6
 8009df6:	930c      	str	r3, [sp, #48]	; 0x30
 8009df8:	f000 fbfa 	bl	800a5f0 <__pow5mult>
 8009dfc:	462a      	mov	r2, r5
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4607      	mov	r7, r0
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 fb4e 	bl	800a4a4 <__multiply>
 8009e08:	4629      	mov	r1, r5
 8009e0a:	900a      	str	r0, [sp, #40]	; 0x28
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 fa77 	bl	800a300 <_Bfree>
 8009e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e16:	4615      	mov	r5, r2
 8009e18:	1b1a      	subs	r2, r3, r4
 8009e1a:	d004      	beq.n	8009e26 <_dtoa_r+0x6e6>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f000 fbe6 	bl	800a5f0 <__pow5mult>
 8009e24:	4605      	mov	r5, r0
 8009e26:	2101      	movs	r1, #1
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f000 fb25 	bl	800a478 <__i2b>
 8009e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	f340 8082 	ble.w	8009f3c <_dtoa_r+0x7fc>
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f000 fbd7 	bl	800a5f0 <__pow5mult>
 8009e42:	9b07      	ldr	r3, [sp, #28]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	4604      	mov	r4, r0
 8009e48:	dd7b      	ble.n	8009f42 <_dtoa_r+0x802>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4e:	6922      	ldr	r2, [r4, #16]
 8009e50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e54:	6910      	ldr	r0, [r2, #16]
 8009e56:	f000 fabf 	bl	800a3d8 <__hi0bits>
 8009e5a:	f1c0 0020 	rsb	r0, r0, #32
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	4418      	add	r0, r3
 8009e62:	f010 001f 	ands.w	r0, r0, #31
 8009e66:	f000 808d 	beq.w	8009f84 <_dtoa_r+0x844>
 8009e6a:	f1c0 0220 	rsb	r2, r0, #32
 8009e6e:	2a04      	cmp	r2, #4
 8009e70:	f340 8086 	ble.w	8009f80 <_dtoa_r+0x840>
 8009e74:	f1c0 001c 	rsb	r0, r0, #28
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	4403      	add	r3, r0
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	9b06      	ldr	r3, [sp, #24]
 8009e80:	4403      	add	r3, r0
 8009e82:	4480      	add	r8, r0
 8009e84:	9306      	str	r3, [sp, #24]
 8009e86:	9b05      	ldr	r3, [sp, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dd05      	ble.n	8009e98 <_dtoa_r+0x758>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	461a      	mov	r2, r3
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fc07 	bl	800a6a4 <__lshift>
 8009e96:	4605      	mov	r5, r0
 8009e98:	9b06      	ldr	r3, [sp, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dd05      	ble.n	8009eaa <_dtoa_r+0x76a>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f000 fbfe 	bl	800a6a4 <__lshift>
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d06b      	beq.n	8009f88 <_dtoa_r+0x848>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 fc62 	bl	800a77c <__mcmp>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	da65      	bge.n	8009f88 <_dtoa_r+0x848>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	220a      	movs	r2, #10
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f000 fa3e 	bl	800a344 <__multadd>
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009ece:	4605      	mov	r5, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8192 	beq.w	800a1fa <_dtoa_r+0xaba>
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	2300      	movs	r3, #0
 8009eda:	220a      	movs	r2, #10
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 fa31 	bl	800a344 <__multadd>
 8009ee2:	f1ba 0f00 	cmp.w	sl, #0
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	f300 808e 	bgt.w	800a008 <_dtoa_r+0x8c8>
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	dc51      	bgt.n	8009f96 <_dtoa_r+0x856>
 8009ef2:	e089      	b.n	800a008 <_dtoa_r+0x8c8>
 8009ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ef6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009efa:	e751      	b.n	8009da0 <_dtoa_r+0x660>
 8009efc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	bfbf      	itttt	lt
 8009f04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009f06:	1ae3      	sublt	r3, r4, r3
 8009f08:	18d2      	addlt	r2, r2, r3
 8009f0a:	4613      	movlt	r3, r2
 8009f0c:	bfb7      	itett	lt
 8009f0e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f10:	1b1c      	subge	r4, r3, r4
 8009f12:	4623      	movlt	r3, r4
 8009f14:	2400      	movlt	r4, #0
 8009f16:	f1b9 0f00 	cmp.w	r9, #0
 8009f1a:	bfb5      	itete	lt
 8009f1c:	9a05      	ldrlt	r2, [sp, #20]
 8009f1e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009f22:	eba2 0809 	sublt.w	r8, r2, r9
 8009f26:	464a      	movge	r2, r9
 8009f28:	bfb8      	it	lt
 8009f2a:	2200      	movlt	r2, #0
 8009f2c:	e73b      	b.n	8009da6 <_dtoa_r+0x666>
 8009f2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f32:	9f08      	ldr	r7, [sp, #32]
 8009f34:	461c      	mov	r4, r3
 8009f36:	e743      	b.n	8009dc0 <_dtoa_r+0x680>
 8009f38:	461a      	mov	r2, r3
 8009f3a:	e76f      	b.n	8009e1c <_dtoa_r+0x6dc>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	dc18      	bgt.n	8009f74 <_dtoa_r+0x834>
 8009f42:	9b02      	ldr	r3, [sp, #8]
 8009f44:	b9b3      	cbnz	r3, 8009f74 <_dtoa_r+0x834>
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f4c:	b9a2      	cbnz	r2, 8009f78 <_dtoa_r+0x838>
 8009f4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f52:	0d12      	lsrs	r2, r2, #20
 8009f54:	0512      	lsls	r2, r2, #20
 8009f56:	b18a      	cbz	r2, 8009f7c <_dtoa_r+0x83c>
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	9b06      	ldr	r3, [sp, #24]
 8009f60:	3301      	adds	r3, #1
 8009f62:	9306      	str	r3, [sp, #24]
 8009f64:	2301      	movs	r3, #1
 8009f66:	930a      	str	r3, [sp, #40]	; 0x28
 8009f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f47f af6f 	bne.w	8009e4e <_dtoa_r+0x70e>
 8009f70:	2001      	movs	r0, #1
 8009f72:	e774      	b.n	8009e5e <_dtoa_r+0x71e>
 8009f74:	2300      	movs	r3, #0
 8009f76:	e7f6      	b.n	8009f66 <_dtoa_r+0x826>
 8009f78:	9b02      	ldr	r3, [sp, #8]
 8009f7a:	e7f4      	b.n	8009f66 <_dtoa_r+0x826>
 8009f7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009f7e:	e7f3      	b.n	8009f68 <_dtoa_r+0x828>
 8009f80:	d081      	beq.n	8009e86 <_dtoa_r+0x746>
 8009f82:	4610      	mov	r0, r2
 8009f84:	301c      	adds	r0, #28
 8009f86:	e777      	b.n	8009e78 <_dtoa_r+0x738>
 8009f88:	f1b9 0f00 	cmp.w	r9, #0
 8009f8c:	dc37      	bgt.n	8009ffe <_dtoa_r+0x8be>
 8009f8e:	9b07      	ldr	r3, [sp, #28]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	dd34      	ble.n	8009ffe <_dtoa_r+0x8be>
 8009f94:	46ca      	mov	sl, r9
 8009f96:	f1ba 0f00 	cmp.w	sl, #0
 8009f9a:	d10d      	bne.n	8009fb8 <_dtoa_r+0x878>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4653      	mov	r3, sl
 8009fa0:	2205      	movs	r2, #5
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f9ce 	bl	800a344 <__multadd>
 8009fa8:	4601      	mov	r1, r0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 fbe5 	bl	800a77c <__mcmp>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f73f adde 	bgt.w	8009b74 <_dtoa_r+0x434>
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	f8dd 8000 	ldr.w	r8, [sp]
 8009fbe:	ea6f 0b03 	mvn.w	fp, r3
 8009fc2:	f04f 0900 	mov.w	r9, #0
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 f999 	bl	800a300 <_Bfree>
 8009fce:	2f00      	cmp	r7, #0
 8009fd0:	f43f aea7 	beq.w	8009d22 <_dtoa_r+0x5e2>
 8009fd4:	f1b9 0f00 	cmp.w	r9, #0
 8009fd8:	d005      	beq.n	8009fe6 <_dtoa_r+0x8a6>
 8009fda:	45b9      	cmp	r9, r7
 8009fdc:	d003      	beq.n	8009fe6 <_dtoa_r+0x8a6>
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f000 f98d 	bl	800a300 <_Bfree>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f989 	bl	800a300 <_Bfree>
 8009fee:	e698      	b.n	8009d22 <_dtoa_r+0x5e2>
 8009ff0:	2400      	movs	r4, #0
 8009ff2:	4627      	mov	r7, r4
 8009ff4:	e7e0      	b.n	8009fb8 <_dtoa_r+0x878>
 8009ff6:	46bb      	mov	fp, r7
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	e5ba      	b.n	8009b74 <_dtoa_r+0x434>
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	46ca      	mov	sl, r9
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 8100 	beq.w	800a208 <_dtoa_r+0xac8>
 800a008:	f1b8 0f00 	cmp.w	r8, #0
 800a00c:	dd05      	ble.n	800a01a <_dtoa_r+0x8da>
 800a00e:	4639      	mov	r1, r7
 800a010:	4642      	mov	r2, r8
 800a012:	4630      	mov	r0, r6
 800a014:	f000 fb46 	bl	800a6a4 <__lshift>
 800a018:	4607      	mov	r7, r0
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d05d      	beq.n	800a0dc <_dtoa_r+0x99c>
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f92c 	bl	800a280 <_Balloc>
 800a028:	4680      	mov	r8, r0
 800a02a:	b928      	cbnz	r0, 800a038 <_dtoa_r+0x8f8>
 800a02c:	4b82      	ldr	r3, [pc, #520]	; (800a238 <_dtoa_r+0xaf8>)
 800a02e:	4602      	mov	r2, r0
 800a030:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a034:	f7ff bb9a 	b.w	800976c <_dtoa_r+0x2c>
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	3202      	adds	r2, #2
 800a03c:	0092      	lsls	r2, r2, #2
 800a03e:	f107 010c 	add.w	r1, r7, #12
 800a042:	300c      	adds	r0, #12
 800a044:	f000 f902 	bl	800a24c <memcpy>
 800a048:	2201      	movs	r2, #1
 800a04a:	4641      	mov	r1, r8
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 fb29 	bl	800a6a4 <__lshift>
 800a052:	9b00      	ldr	r3, [sp, #0]
 800a054:	3301      	adds	r3, #1
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	9b00      	ldr	r3, [sp, #0]
 800a05a:	4453      	add	r3, sl
 800a05c:	9309      	str	r3, [sp, #36]	; 0x24
 800a05e:	9b02      	ldr	r3, [sp, #8]
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	46b9      	mov	r9, r7
 800a066:	9308      	str	r3, [sp, #32]
 800a068:	4607      	mov	r7, r0
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	4621      	mov	r1, r4
 800a06e:	3b01      	subs	r3, #1
 800a070:	4628      	mov	r0, r5
 800a072:	9302      	str	r3, [sp, #8]
 800a074:	f7ff fad6 	bl	8009624 <quorem>
 800a078:	4603      	mov	r3, r0
 800a07a:	3330      	adds	r3, #48	; 0x30
 800a07c:	9006      	str	r0, [sp, #24]
 800a07e:	4649      	mov	r1, r9
 800a080:	4628      	mov	r0, r5
 800a082:	930a      	str	r3, [sp, #40]	; 0x28
 800a084:	f000 fb7a 	bl	800a77c <__mcmp>
 800a088:	463a      	mov	r2, r7
 800a08a:	4682      	mov	sl, r0
 800a08c:	4621      	mov	r1, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 fb90 	bl	800a7b4 <__mdiff>
 800a094:	68c2      	ldr	r2, [r0, #12]
 800a096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a098:	4680      	mov	r8, r0
 800a09a:	bb0a      	cbnz	r2, 800a0e0 <_dtoa_r+0x9a0>
 800a09c:	4601      	mov	r1, r0
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 fb6c 	bl	800a77c <__mcmp>
 800a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	920e      	str	r2, [sp, #56]	; 0x38
 800a0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b0:	f000 f926 	bl	800a300 <_Bfree>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a0bc:	ea43 0102 	orr.w	r1, r3, r2
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c6:	d10d      	bne.n	800a0e4 <_dtoa_r+0x9a4>
 800a0c8:	2b39      	cmp	r3, #57	; 0x39
 800a0ca:	d029      	beq.n	800a120 <_dtoa_r+0x9e0>
 800a0cc:	f1ba 0f00 	cmp.w	sl, #0
 800a0d0:	dd01      	ble.n	800a0d6 <_dtoa_r+0x996>
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	3331      	adds	r3, #49	; 0x31
 800a0d6:	9a02      	ldr	r2, [sp, #8]
 800a0d8:	7013      	strb	r3, [r2, #0]
 800a0da:	e774      	b.n	8009fc6 <_dtoa_r+0x886>
 800a0dc:	4638      	mov	r0, r7
 800a0de:	e7b8      	b.n	800a052 <_dtoa_r+0x912>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	e7e1      	b.n	800a0a8 <_dtoa_r+0x968>
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	db06      	blt.n	800a0f8 <_dtoa_r+0x9b8>
 800a0ea:	9907      	ldr	r1, [sp, #28]
 800a0ec:	ea41 0a0a 	orr.w	sl, r1, sl
 800a0f0:	9908      	ldr	r1, [sp, #32]
 800a0f2:	ea5a 0101 	orrs.w	r1, sl, r1
 800a0f6:	d120      	bne.n	800a13a <_dtoa_r+0x9fa>
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	ddec      	ble.n	800a0d6 <_dtoa_r+0x996>
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	2201      	movs	r2, #1
 800a100:	4630      	mov	r0, r6
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	f000 face 	bl	800a6a4 <__lshift>
 800a108:	4621      	mov	r1, r4
 800a10a:	4605      	mov	r5, r0
 800a10c:	f000 fb36 	bl	800a77c <__mcmp>
 800a110:	2800      	cmp	r0, #0
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	dc02      	bgt.n	800a11c <_dtoa_r+0x9dc>
 800a116:	d1de      	bne.n	800a0d6 <_dtoa_r+0x996>
 800a118:	07da      	lsls	r2, r3, #31
 800a11a:	d5dc      	bpl.n	800a0d6 <_dtoa_r+0x996>
 800a11c:	2b39      	cmp	r3, #57	; 0x39
 800a11e:	d1d8      	bne.n	800a0d2 <_dtoa_r+0x992>
 800a120:	9a02      	ldr	r2, [sp, #8]
 800a122:	2339      	movs	r3, #57	; 0x39
 800a124:	7013      	strb	r3, [r2, #0]
 800a126:	4643      	mov	r3, r8
 800a128:	4698      	mov	r8, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a130:	2a39      	cmp	r2, #57	; 0x39
 800a132:	d051      	beq.n	800a1d8 <_dtoa_r+0xa98>
 800a134:	3201      	adds	r2, #1
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e745      	b.n	8009fc6 <_dtoa_r+0x886>
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	dd03      	ble.n	800a146 <_dtoa_r+0xa06>
 800a13e:	2b39      	cmp	r3, #57	; 0x39
 800a140:	d0ee      	beq.n	800a120 <_dtoa_r+0x9e0>
 800a142:	3301      	adds	r3, #1
 800a144:	e7c7      	b.n	800a0d6 <_dtoa_r+0x996>
 800a146:	9a05      	ldr	r2, [sp, #20]
 800a148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a14a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a14e:	428a      	cmp	r2, r1
 800a150:	d02b      	beq.n	800a1aa <_dtoa_r+0xa6a>
 800a152:	4629      	mov	r1, r5
 800a154:	2300      	movs	r3, #0
 800a156:	220a      	movs	r2, #10
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 f8f3 	bl	800a344 <__multadd>
 800a15e:	45b9      	cmp	r9, r7
 800a160:	4605      	mov	r5, r0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	f04f 020a 	mov.w	r2, #10
 800a16a:	4649      	mov	r1, r9
 800a16c:	4630      	mov	r0, r6
 800a16e:	d107      	bne.n	800a180 <_dtoa_r+0xa40>
 800a170:	f000 f8e8 	bl	800a344 <__multadd>
 800a174:	4681      	mov	r9, r0
 800a176:	4607      	mov	r7, r0
 800a178:	9b05      	ldr	r3, [sp, #20]
 800a17a:	3301      	adds	r3, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	e774      	b.n	800a06a <_dtoa_r+0x92a>
 800a180:	f000 f8e0 	bl	800a344 <__multadd>
 800a184:	4639      	mov	r1, r7
 800a186:	4681      	mov	r9, r0
 800a188:	2300      	movs	r3, #0
 800a18a:	220a      	movs	r2, #10
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 f8d9 	bl	800a344 <__multadd>
 800a192:	4607      	mov	r7, r0
 800a194:	e7f0      	b.n	800a178 <_dtoa_r+0xa38>
 800a196:	f1ba 0f00 	cmp.w	sl, #0
 800a19a:	9a00      	ldr	r2, [sp, #0]
 800a19c:	bfcc      	ite	gt
 800a19e:	46d0      	movgt	r8, sl
 800a1a0:	f04f 0801 	movle.w	r8, #1
 800a1a4:	4490      	add	r8, r2
 800a1a6:	f04f 0900 	mov.w	r9, #0
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	f000 fa77 	bl	800a6a4 <__lshift>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	f000 fadf 	bl	800a77c <__mcmp>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dcb1      	bgt.n	800a126 <_dtoa_r+0x9e6>
 800a1c2:	d102      	bne.n	800a1ca <_dtoa_r+0xa8a>
 800a1c4:	9b02      	ldr	r3, [sp, #8]
 800a1c6:	07db      	lsls	r3, r3, #31
 800a1c8:	d4ad      	bmi.n	800a126 <_dtoa_r+0x9e6>
 800a1ca:	4643      	mov	r3, r8
 800a1cc:	4698      	mov	r8, r3
 800a1ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1d2:	2a30      	cmp	r2, #48	; 0x30
 800a1d4:	d0fa      	beq.n	800a1cc <_dtoa_r+0xa8c>
 800a1d6:	e6f6      	b.n	8009fc6 <_dtoa_r+0x886>
 800a1d8:	9a00      	ldr	r2, [sp, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d1a4      	bne.n	800a128 <_dtoa_r+0x9e8>
 800a1de:	f10b 0b01 	add.w	fp, fp, #1
 800a1e2:	2331      	movs	r3, #49	; 0x31
 800a1e4:	e778      	b.n	800a0d8 <_dtoa_r+0x998>
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <_dtoa_r+0xafc>)
 800a1e8:	f7ff bb12 	b.w	8009810 <_dtoa_r+0xd0>
 800a1ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f aaee 	bne.w	80097d0 <_dtoa_r+0x90>
 800a1f4:	4b12      	ldr	r3, [pc, #72]	; (800a240 <_dtoa_r+0xb00>)
 800a1f6:	f7ff bb0b 	b.w	8009810 <_dtoa_r+0xd0>
 800a1fa:	f1ba 0f00 	cmp.w	sl, #0
 800a1fe:	dc03      	bgt.n	800a208 <_dtoa_r+0xac8>
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	2b02      	cmp	r3, #2
 800a204:	f73f aec7 	bgt.w	8009f96 <_dtoa_r+0x856>
 800a208:	f8dd 8000 	ldr.w	r8, [sp]
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f7ff fa08 	bl	8009624 <quorem>
 800a214:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a218:	f808 3b01 	strb.w	r3, [r8], #1
 800a21c:	9a00      	ldr	r2, [sp, #0]
 800a21e:	eba8 0202 	sub.w	r2, r8, r2
 800a222:	4592      	cmp	sl, r2
 800a224:	ddb7      	ble.n	800a196 <_dtoa_r+0xa56>
 800a226:	4629      	mov	r1, r5
 800a228:	2300      	movs	r3, #0
 800a22a:	220a      	movs	r2, #10
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f889 	bl	800a344 <__multadd>
 800a232:	4605      	mov	r5, r0
 800a234:	e7ea      	b.n	800a20c <_dtoa_r+0xacc>
 800a236:	bf00      	nop
 800a238:	0800b8ef 	.word	0x0800b8ef
 800a23c:	0800b848 	.word	0x0800b848
 800a240:	0800b86c 	.word	0x0800b86c

0800a244 <_localeconv_r>:
 800a244:	4800      	ldr	r0, [pc, #0]	; (800a248 <_localeconv_r+0x4>)
 800a246:	4770      	bx	lr
 800a248:	20000164 	.word	0x20000164

0800a24c <memcpy>:
 800a24c:	440a      	add	r2, r1
 800a24e:	4291      	cmp	r1, r2
 800a250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a254:	d100      	bne.n	800a258 <memcpy+0xc>
 800a256:	4770      	bx	lr
 800a258:	b510      	push	{r4, lr}
 800a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a262:	4291      	cmp	r1, r2
 800a264:	d1f9      	bne.n	800a25a <memcpy+0xe>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <__malloc_lock>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__malloc_lock+0x8>)
 800a26a:	f000 bd22 	b.w	800acb2 <__retarget_lock_acquire_recursive>
 800a26e:	bf00      	nop
 800a270:	20000934 	.word	0x20000934

0800a274 <__malloc_unlock>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__malloc_unlock+0x8>)
 800a276:	f000 bd1d 	b.w	800acb4 <__retarget_lock_release_recursive>
 800a27a:	bf00      	nop
 800a27c:	20000934 	.word	0x20000934

0800a280 <_Balloc>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a284:	4604      	mov	r4, r0
 800a286:	460d      	mov	r5, r1
 800a288:	b976      	cbnz	r6, 800a2a8 <_Balloc+0x28>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7fe fc5a 	bl	8008b44 <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	6260      	str	r0, [r4, #36]	; 0x24
 800a294:	b920      	cbnz	r0, 800a2a0 <_Balloc+0x20>
 800a296:	4b18      	ldr	r3, [pc, #96]	; (800a2f8 <_Balloc+0x78>)
 800a298:	4818      	ldr	r0, [pc, #96]	; (800a2fc <_Balloc+0x7c>)
 800a29a:	2166      	movs	r1, #102	; 0x66
 800a29c:	f000 fcd8 	bl	800ac50 <__assert_func>
 800a2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a4:	6006      	str	r6, [r0, #0]
 800a2a6:	60c6      	str	r6, [r0, #12]
 800a2a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2aa:	68f3      	ldr	r3, [r6, #12]
 800a2ac:	b183      	cbz	r3, 800a2d0 <_Balloc+0x50>
 800a2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2b6:	b9b8      	cbnz	r0, 800a2e8 <_Balloc+0x68>
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a2be:	1d72      	adds	r2, r6, #5
 800a2c0:	0092      	lsls	r2, r2, #2
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 fb5a 	bl	800a97c <_calloc_r>
 800a2c8:	b160      	cbz	r0, 800a2e4 <_Balloc+0x64>
 800a2ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ce:	e00e      	b.n	800a2ee <_Balloc+0x6e>
 800a2d0:	2221      	movs	r2, #33	; 0x21
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fb51 	bl	800a97c <_calloc_r>
 800a2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2dc:	60f0      	str	r0, [r6, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e4      	bne.n	800a2ae <_Balloc+0x2e>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	6802      	ldr	r2, [r0, #0]
 800a2ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2f4:	e7f7      	b.n	800a2e6 <_Balloc+0x66>
 800a2f6:	bf00      	nop
 800a2f8:	0800b879 	.word	0x0800b879
 800a2fc:	0800b900 	.word	0x0800b900

0800a300 <_Bfree>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a304:	4605      	mov	r5, r0
 800a306:	460c      	mov	r4, r1
 800a308:	b976      	cbnz	r6, 800a328 <_Bfree+0x28>
 800a30a:	2010      	movs	r0, #16
 800a30c:	f7fe fc1a 	bl	8008b44 <malloc>
 800a310:	4602      	mov	r2, r0
 800a312:	6268      	str	r0, [r5, #36]	; 0x24
 800a314:	b920      	cbnz	r0, 800a320 <_Bfree+0x20>
 800a316:	4b09      	ldr	r3, [pc, #36]	; (800a33c <_Bfree+0x3c>)
 800a318:	4809      	ldr	r0, [pc, #36]	; (800a340 <_Bfree+0x40>)
 800a31a:	218a      	movs	r1, #138	; 0x8a
 800a31c:	f000 fc98 	bl	800ac50 <__assert_func>
 800a320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a324:	6006      	str	r6, [r0, #0]
 800a326:	60c6      	str	r6, [r0, #12]
 800a328:	b13c      	cbz	r4, 800a33a <_Bfree+0x3a>
 800a32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a32c:	6862      	ldr	r2, [r4, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a334:	6021      	str	r1, [r4, #0]
 800a336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	0800b879 	.word	0x0800b879
 800a340:	0800b900 	.word	0x0800b900

0800a344 <__multadd>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	690e      	ldr	r6, [r1, #16]
 800a34a:	4607      	mov	r7, r0
 800a34c:	4698      	mov	r8, r3
 800a34e:	460c      	mov	r4, r1
 800a350:	f101 0014 	add.w	r0, r1, #20
 800a354:	2300      	movs	r3, #0
 800a356:	6805      	ldr	r5, [r0, #0]
 800a358:	b2a9      	uxth	r1, r5
 800a35a:	fb02 8101 	mla	r1, r2, r1, r8
 800a35e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a362:	0c2d      	lsrs	r5, r5, #16
 800a364:	fb02 c505 	mla	r5, r2, r5, ip
 800a368:	b289      	uxth	r1, r1
 800a36a:	3301      	adds	r3, #1
 800a36c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a370:	429e      	cmp	r6, r3
 800a372:	f840 1b04 	str.w	r1, [r0], #4
 800a376:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a37a:	dcec      	bgt.n	800a356 <__multadd+0x12>
 800a37c:	f1b8 0f00 	cmp.w	r8, #0
 800a380:	d022      	beq.n	800a3c8 <__multadd+0x84>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	42b3      	cmp	r3, r6
 800a386:	dc19      	bgt.n	800a3bc <__multadd+0x78>
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	4638      	mov	r0, r7
 800a38c:	3101      	adds	r1, #1
 800a38e:	f7ff ff77 	bl	800a280 <_Balloc>
 800a392:	4605      	mov	r5, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <__multadd+0x5e>
 800a396:	4602      	mov	r2, r0
 800a398:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <__multadd+0x8c>)
 800a39a:	480e      	ldr	r0, [pc, #56]	; (800a3d4 <__multadd+0x90>)
 800a39c:	21b5      	movs	r1, #181	; 0xb5
 800a39e:	f000 fc57 	bl	800ac50 <__assert_func>
 800a3a2:	6922      	ldr	r2, [r4, #16]
 800a3a4:	3202      	adds	r2, #2
 800a3a6:	f104 010c 	add.w	r1, r4, #12
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	300c      	adds	r0, #12
 800a3ae:	f7ff ff4d 	bl	800a24c <memcpy>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7ff ffa3 	bl	800a300 <_Bfree>
 800a3ba:	462c      	mov	r4, r5
 800a3bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a3c6:	6126      	str	r6, [r4, #16]
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800b8ef 	.word	0x0800b8ef
 800a3d4:	0800b900 	.word	0x0800b900

0800a3d8 <__hi0bits>:
 800a3d8:	0c03      	lsrs	r3, r0, #16
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	b9d3      	cbnz	r3, 800a414 <__hi0bits+0x3c>
 800a3de:	0400      	lsls	r0, r0, #16
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3e6:	bf04      	itt	eq
 800a3e8:	0200      	lsleq	r0, r0, #8
 800a3ea:	3308      	addeq	r3, #8
 800a3ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3f0:	bf04      	itt	eq
 800a3f2:	0100      	lsleq	r0, r0, #4
 800a3f4:	3304      	addeq	r3, #4
 800a3f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3fa:	bf04      	itt	eq
 800a3fc:	0080      	lsleq	r0, r0, #2
 800a3fe:	3302      	addeq	r3, #2
 800a400:	2800      	cmp	r0, #0
 800a402:	db05      	blt.n	800a410 <__hi0bits+0x38>
 800a404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a408:	f103 0301 	add.w	r3, r3, #1
 800a40c:	bf08      	it	eq
 800a40e:	2320      	moveq	r3, #32
 800a410:	4618      	mov	r0, r3
 800a412:	4770      	bx	lr
 800a414:	2300      	movs	r3, #0
 800a416:	e7e4      	b.n	800a3e2 <__hi0bits+0xa>

0800a418 <__lo0bits>:
 800a418:	6803      	ldr	r3, [r0, #0]
 800a41a:	f013 0207 	ands.w	r2, r3, #7
 800a41e:	4601      	mov	r1, r0
 800a420:	d00b      	beq.n	800a43a <__lo0bits+0x22>
 800a422:	07da      	lsls	r2, r3, #31
 800a424:	d424      	bmi.n	800a470 <__lo0bits+0x58>
 800a426:	0798      	lsls	r0, r3, #30
 800a428:	bf49      	itett	mi
 800a42a:	085b      	lsrmi	r3, r3, #1
 800a42c:	089b      	lsrpl	r3, r3, #2
 800a42e:	2001      	movmi	r0, #1
 800a430:	600b      	strmi	r3, [r1, #0]
 800a432:	bf5c      	itt	pl
 800a434:	600b      	strpl	r3, [r1, #0]
 800a436:	2002      	movpl	r0, #2
 800a438:	4770      	bx	lr
 800a43a:	b298      	uxth	r0, r3
 800a43c:	b9b0      	cbnz	r0, 800a46c <__lo0bits+0x54>
 800a43e:	0c1b      	lsrs	r3, r3, #16
 800a440:	2010      	movs	r0, #16
 800a442:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a446:	bf04      	itt	eq
 800a448:	0a1b      	lsreq	r3, r3, #8
 800a44a:	3008      	addeq	r0, #8
 800a44c:	071a      	lsls	r2, r3, #28
 800a44e:	bf04      	itt	eq
 800a450:	091b      	lsreq	r3, r3, #4
 800a452:	3004      	addeq	r0, #4
 800a454:	079a      	lsls	r2, r3, #30
 800a456:	bf04      	itt	eq
 800a458:	089b      	lsreq	r3, r3, #2
 800a45a:	3002      	addeq	r0, #2
 800a45c:	07da      	lsls	r2, r3, #31
 800a45e:	d403      	bmi.n	800a468 <__lo0bits+0x50>
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	f100 0001 	add.w	r0, r0, #1
 800a466:	d005      	beq.n	800a474 <__lo0bits+0x5c>
 800a468:	600b      	str	r3, [r1, #0]
 800a46a:	4770      	bx	lr
 800a46c:	4610      	mov	r0, r2
 800a46e:	e7e8      	b.n	800a442 <__lo0bits+0x2a>
 800a470:	2000      	movs	r0, #0
 800a472:	4770      	bx	lr
 800a474:	2020      	movs	r0, #32
 800a476:	4770      	bx	lr

0800a478 <__i2b>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	460c      	mov	r4, r1
 800a47c:	2101      	movs	r1, #1
 800a47e:	f7ff feff 	bl	800a280 <_Balloc>
 800a482:	4602      	mov	r2, r0
 800a484:	b928      	cbnz	r0, 800a492 <__i2b+0x1a>
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <__i2b+0x24>)
 800a488:	4805      	ldr	r0, [pc, #20]	; (800a4a0 <__i2b+0x28>)
 800a48a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a48e:	f000 fbdf 	bl	800ac50 <__assert_func>
 800a492:	2301      	movs	r3, #1
 800a494:	6144      	str	r4, [r0, #20]
 800a496:	6103      	str	r3, [r0, #16]
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	bf00      	nop
 800a49c:	0800b8ef 	.word	0x0800b8ef
 800a4a0:	0800b900 	.word	0x0800b900

0800a4a4 <__multiply>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	690a      	ldr	r2, [r1, #16]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	bfb8      	it	lt
 800a4b2:	460b      	movlt	r3, r1
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	bfbc      	itt	lt
 800a4b8:	4625      	movlt	r5, r4
 800a4ba:	461c      	movlt	r4, r3
 800a4bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a4c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4c4:	68ab      	ldr	r3, [r5, #8]
 800a4c6:	6869      	ldr	r1, [r5, #4]
 800a4c8:	eb0a 0709 	add.w	r7, sl, r9
 800a4cc:	42bb      	cmp	r3, r7
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	bfb8      	it	lt
 800a4d2:	3101      	addlt	r1, #1
 800a4d4:	f7ff fed4 	bl	800a280 <_Balloc>
 800a4d8:	b930      	cbnz	r0, 800a4e8 <__multiply+0x44>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b42      	ldr	r3, [pc, #264]	; (800a5e8 <__multiply+0x144>)
 800a4de:	4843      	ldr	r0, [pc, #268]	; (800a5ec <__multiply+0x148>)
 800a4e0:	f240 115d 	movw	r1, #349	; 0x15d
 800a4e4:	f000 fbb4 	bl	800ac50 <__assert_func>
 800a4e8:	f100 0614 	add.w	r6, r0, #20
 800a4ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a4f0:	4633      	mov	r3, r6
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4543      	cmp	r3, r8
 800a4f6:	d31e      	bcc.n	800a536 <__multiply+0x92>
 800a4f8:	f105 0c14 	add.w	ip, r5, #20
 800a4fc:	f104 0314 	add.w	r3, r4, #20
 800a500:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a504:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a508:	9202      	str	r2, [sp, #8]
 800a50a:	ebac 0205 	sub.w	r2, ip, r5
 800a50e:	3a15      	subs	r2, #21
 800a510:	f022 0203 	bic.w	r2, r2, #3
 800a514:	3204      	adds	r2, #4
 800a516:	f105 0115 	add.w	r1, r5, #21
 800a51a:	458c      	cmp	ip, r1
 800a51c:	bf38      	it	cc
 800a51e:	2204      	movcc	r2, #4
 800a520:	9201      	str	r2, [sp, #4]
 800a522:	9a02      	ldr	r2, [sp, #8]
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	429a      	cmp	r2, r3
 800a528:	d808      	bhi.n	800a53c <__multiply+0x98>
 800a52a:	2f00      	cmp	r7, #0
 800a52c:	dc55      	bgt.n	800a5da <__multiply+0x136>
 800a52e:	6107      	str	r7, [r0, #16]
 800a530:	b005      	add	sp, #20
 800a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a536:	f843 2b04 	str.w	r2, [r3], #4
 800a53a:	e7db      	b.n	800a4f4 <__multiply+0x50>
 800a53c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a540:	f1ba 0f00 	cmp.w	sl, #0
 800a544:	d020      	beq.n	800a588 <__multiply+0xe4>
 800a546:	f105 0e14 	add.w	lr, r5, #20
 800a54a:	46b1      	mov	r9, r6
 800a54c:	2200      	movs	r2, #0
 800a54e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a552:	f8d9 b000 	ldr.w	fp, [r9]
 800a556:	b2a1      	uxth	r1, r4
 800a558:	fa1f fb8b 	uxth.w	fp, fp
 800a55c:	fb0a b101 	mla	r1, sl, r1, fp
 800a560:	4411      	add	r1, r2
 800a562:	f8d9 2000 	ldr.w	r2, [r9]
 800a566:	0c24      	lsrs	r4, r4, #16
 800a568:	0c12      	lsrs	r2, r2, #16
 800a56a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a56e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a572:	b289      	uxth	r1, r1
 800a574:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a578:	45f4      	cmp	ip, lr
 800a57a:	f849 1b04 	str.w	r1, [r9], #4
 800a57e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a582:	d8e4      	bhi.n	800a54e <__multiply+0xaa>
 800a584:	9901      	ldr	r1, [sp, #4]
 800a586:	5072      	str	r2, [r6, r1]
 800a588:	9a03      	ldr	r2, [sp, #12]
 800a58a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a58e:	3304      	adds	r3, #4
 800a590:	f1b9 0f00 	cmp.w	r9, #0
 800a594:	d01f      	beq.n	800a5d6 <__multiply+0x132>
 800a596:	6834      	ldr	r4, [r6, #0]
 800a598:	f105 0114 	add.w	r1, r5, #20
 800a59c:	46b6      	mov	lr, r6
 800a59e:	f04f 0a00 	mov.w	sl, #0
 800a5a2:	880a      	ldrh	r2, [r1, #0]
 800a5a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5a8:	fb09 b202 	mla	r2, r9, r2, fp
 800a5ac:	4492      	add	sl, r2
 800a5ae:	b2a4      	uxth	r4, r4
 800a5b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5b4:	f84e 4b04 	str.w	r4, [lr], #4
 800a5b8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a5bc:	f8be 2000 	ldrh.w	r2, [lr]
 800a5c0:	0c24      	lsrs	r4, r4, #16
 800a5c2:	fb09 2404 	mla	r4, r9, r4, r2
 800a5c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a5ca:	458c      	cmp	ip, r1
 800a5cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5d0:	d8e7      	bhi.n	800a5a2 <__multiply+0xfe>
 800a5d2:	9a01      	ldr	r2, [sp, #4]
 800a5d4:	50b4      	str	r4, [r6, r2]
 800a5d6:	3604      	adds	r6, #4
 800a5d8:	e7a3      	b.n	800a522 <__multiply+0x7e>
 800a5da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1a5      	bne.n	800a52e <__multiply+0x8a>
 800a5e2:	3f01      	subs	r7, #1
 800a5e4:	e7a1      	b.n	800a52a <__multiply+0x86>
 800a5e6:	bf00      	nop
 800a5e8:	0800b8ef 	.word	0x0800b8ef
 800a5ec:	0800b900 	.word	0x0800b900

0800a5f0 <__pow5mult>:
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	f012 0203 	ands.w	r2, r2, #3
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	d007      	beq.n	800a610 <__pow5mult+0x20>
 800a600:	4c25      	ldr	r4, [pc, #148]	; (800a698 <__pow5mult+0xa8>)
 800a602:	3a01      	subs	r2, #1
 800a604:	2300      	movs	r3, #0
 800a606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a60a:	f7ff fe9b 	bl	800a344 <__multadd>
 800a60e:	4607      	mov	r7, r0
 800a610:	10ad      	asrs	r5, r5, #2
 800a612:	d03d      	beq.n	800a690 <__pow5mult+0xa0>
 800a614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a616:	b97c      	cbnz	r4, 800a638 <__pow5mult+0x48>
 800a618:	2010      	movs	r0, #16
 800a61a:	f7fe fa93 	bl	8008b44 <malloc>
 800a61e:	4602      	mov	r2, r0
 800a620:	6270      	str	r0, [r6, #36]	; 0x24
 800a622:	b928      	cbnz	r0, 800a630 <__pow5mult+0x40>
 800a624:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <__pow5mult+0xac>)
 800a626:	481e      	ldr	r0, [pc, #120]	; (800a6a0 <__pow5mult+0xb0>)
 800a628:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a62c:	f000 fb10 	bl	800ac50 <__assert_func>
 800a630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a634:	6004      	str	r4, [r0, #0]
 800a636:	60c4      	str	r4, [r0, #12]
 800a638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a640:	b94c      	cbnz	r4, 800a656 <__pow5mult+0x66>
 800a642:	f240 2171 	movw	r1, #625	; 0x271
 800a646:	4630      	mov	r0, r6
 800a648:	f7ff ff16 	bl	800a478 <__i2b>
 800a64c:	2300      	movs	r3, #0
 800a64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a652:	4604      	mov	r4, r0
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	f04f 0900 	mov.w	r9, #0
 800a65a:	07eb      	lsls	r3, r5, #31
 800a65c:	d50a      	bpl.n	800a674 <__pow5mult+0x84>
 800a65e:	4639      	mov	r1, r7
 800a660:	4622      	mov	r2, r4
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ff1e 	bl	800a4a4 <__multiply>
 800a668:	4639      	mov	r1, r7
 800a66a:	4680      	mov	r8, r0
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff fe47 	bl	800a300 <_Bfree>
 800a672:	4647      	mov	r7, r8
 800a674:	106d      	asrs	r5, r5, #1
 800a676:	d00b      	beq.n	800a690 <__pow5mult+0xa0>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	b938      	cbnz	r0, 800a68c <__pow5mult+0x9c>
 800a67c:	4622      	mov	r2, r4
 800a67e:	4621      	mov	r1, r4
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff ff0f 	bl	800a4a4 <__multiply>
 800a686:	6020      	str	r0, [r4, #0]
 800a688:	f8c0 9000 	str.w	r9, [r0]
 800a68c:	4604      	mov	r4, r0
 800a68e:	e7e4      	b.n	800a65a <__pow5mult+0x6a>
 800a690:	4638      	mov	r0, r7
 800a692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a696:	bf00      	nop
 800a698:	0800ba50 	.word	0x0800ba50
 800a69c:	0800b879 	.word	0x0800b879
 800a6a0:	0800b900 	.word	0x0800b900

0800a6a4 <__lshift>:
 800a6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	6849      	ldr	r1, [r1, #4]
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6b2:	68a3      	ldr	r3, [r4, #8]
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	4691      	mov	r9, r2
 800a6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6bc:	f108 0601 	add.w	r6, r8, #1
 800a6c0:	42b3      	cmp	r3, r6
 800a6c2:	db0b      	blt.n	800a6dc <__lshift+0x38>
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	f7ff fddb 	bl	800a280 <_Balloc>
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	b948      	cbnz	r0, 800a6e2 <__lshift+0x3e>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	4b28      	ldr	r3, [pc, #160]	; (800a774 <__lshift+0xd0>)
 800a6d2:	4829      	ldr	r0, [pc, #164]	; (800a778 <__lshift+0xd4>)
 800a6d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6d8:	f000 faba 	bl	800ac50 <__assert_func>
 800a6dc:	3101      	adds	r1, #1
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	e7ee      	b.n	800a6c0 <__lshift+0x1c>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f100 0114 	add.w	r1, r0, #20
 800a6e8:	f100 0210 	add.w	r2, r0, #16
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	4553      	cmp	r3, sl
 800a6f0:	db33      	blt.n	800a75a <__lshift+0xb6>
 800a6f2:	6920      	ldr	r0, [r4, #16]
 800a6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f8:	f104 0314 	add.w	r3, r4, #20
 800a6fc:	f019 091f 	ands.w	r9, r9, #31
 800a700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a708:	d02b      	beq.n	800a762 <__lshift+0xbe>
 800a70a:	f1c9 0e20 	rsb	lr, r9, #32
 800a70e:	468a      	mov	sl, r1
 800a710:	2200      	movs	r2, #0
 800a712:	6818      	ldr	r0, [r3, #0]
 800a714:	fa00 f009 	lsl.w	r0, r0, r9
 800a718:	4302      	orrs	r2, r0
 800a71a:	f84a 2b04 	str.w	r2, [sl], #4
 800a71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a722:	459c      	cmp	ip, r3
 800a724:	fa22 f20e 	lsr.w	r2, r2, lr
 800a728:	d8f3      	bhi.n	800a712 <__lshift+0x6e>
 800a72a:	ebac 0304 	sub.w	r3, ip, r4
 800a72e:	3b15      	subs	r3, #21
 800a730:	f023 0303 	bic.w	r3, r3, #3
 800a734:	3304      	adds	r3, #4
 800a736:	f104 0015 	add.w	r0, r4, #21
 800a73a:	4584      	cmp	ip, r0
 800a73c:	bf38      	it	cc
 800a73e:	2304      	movcc	r3, #4
 800a740:	50ca      	str	r2, [r1, r3]
 800a742:	b10a      	cbz	r2, 800a748 <__lshift+0xa4>
 800a744:	f108 0602 	add.w	r6, r8, #2
 800a748:	3e01      	subs	r6, #1
 800a74a:	4638      	mov	r0, r7
 800a74c:	612e      	str	r6, [r5, #16]
 800a74e:	4621      	mov	r1, r4
 800a750:	f7ff fdd6 	bl	800a300 <_Bfree>
 800a754:	4628      	mov	r0, r5
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a75e:	3301      	adds	r3, #1
 800a760:	e7c5      	b.n	800a6ee <__lshift+0x4a>
 800a762:	3904      	subs	r1, #4
 800a764:	f853 2b04 	ldr.w	r2, [r3], #4
 800a768:	f841 2f04 	str.w	r2, [r1, #4]!
 800a76c:	459c      	cmp	ip, r3
 800a76e:	d8f9      	bhi.n	800a764 <__lshift+0xc0>
 800a770:	e7ea      	b.n	800a748 <__lshift+0xa4>
 800a772:	bf00      	nop
 800a774:	0800b8ef 	.word	0x0800b8ef
 800a778:	0800b900 	.word	0x0800b900

0800a77c <__mcmp>:
 800a77c:	b530      	push	{r4, r5, lr}
 800a77e:	6902      	ldr	r2, [r0, #16]
 800a780:	690c      	ldr	r4, [r1, #16]
 800a782:	1b12      	subs	r2, r2, r4
 800a784:	d10e      	bne.n	800a7a4 <__mcmp+0x28>
 800a786:	f100 0314 	add.w	r3, r0, #20
 800a78a:	3114      	adds	r1, #20
 800a78c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a79c:	42a5      	cmp	r5, r4
 800a79e:	d003      	beq.n	800a7a8 <__mcmp+0x2c>
 800a7a0:	d305      	bcc.n	800a7ae <__mcmp+0x32>
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	bd30      	pop	{r4, r5, pc}
 800a7a8:	4283      	cmp	r3, r0
 800a7aa:	d3f3      	bcc.n	800a794 <__mcmp+0x18>
 800a7ac:	e7fa      	b.n	800a7a4 <__mcmp+0x28>
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7b2:	e7f7      	b.n	800a7a4 <__mcmp+0x28>

0800a7b4 <__mdiff>:
 800a7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4617      	mov	r7, r2
 800a7c2:	f7ff ffdb 	bl	800a77c <__mcmp>
 800a7c6:	1e05      	subs	r5, r0, #0
 800a7c8:	d110      	bne.n	800a7ec <__mdiff+0x38>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff fd57 	bl	800a280 <_Balloc>
 800a7d2:	b930      	cbnz	r0, 800a7e2 <__mdiff+0x2e>
 800a7d4:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <__mdiff+0x108>)
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	f240 2132 	movw	r1, #562	; 0x232
 800a7dc:	4838      	ldr	r0, [pc, #224]	; (800a8c0 <__mdiff+0x10c>)
 800a7de:	f000 fa37 	bl	800ac50 <__assert_func>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	bfa4      	itt	ge
 800a7ee:	463b      	movge	r3, r7
 800a7f0:	4627      	movge	r7, r4
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	bfa6      	itte	ge
 800a7f8:	461c      	movge	r4, r3
 800a7fa:	2500      	movge	r5, #0
 800a7fc:	2501      	movlt	r5, #1
 800a7fe:	f7ff fd3f 	bl	800a280 <_Balloc>
 800a802:	b920      	cbnz	r0, 800a80e <__mdiff+0x5a>
 800a804:	4b2d      	ldr	r3, [pc, #180]	; (800a8bc <__mdiff+0x108>)
 800a806:	4602      	mov	r2, r0
 800a808:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a80c:	e7e6      	b.n	800a7dc <__mdiff+0x28>
 800a80e:	693e      	ldr	r6, [r7, #16]
 800a810:	60c5      	str	r5, [r0, #12]
 800a812:	6925      	ldr	r5, [r4, #16]
 800a814:	f107 0114 	add.w	r1, r7, #20
 800a818:	f104 0914 	add.w	r9, r4, #20
 800a81c:	f100 0e14 	add.w	lr, r0, #20
 800a820:	f107 0210 	add.w	r2, r7, #16
 800a824:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a828:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a82c:	46f2      	mov	sl, lr
 800a82e:	2700      	movs	r7, #0
 800a830:	f859 3b04 	ldr.w	r3, [r9], #4
 800a834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a838:	fa1f f883 	uxth.w	r8, r3
 800a83c:	fa17 f78b 	uxtah	r7, r7, fp
 800a840:	0c1b      	lsrs	r3, r3, #16
 800a842:	eba7 0808 	sub.w	r8, r7, r8
 800a846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a84a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a84e:	fa1f f888 	uxth.w	r8, r8
 800a852:	141f      	asrs	r7, r3, #16
 800a854:	454d      	cmp	r5, r9
 800a856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a85a:	f84a 3b04 	str.w	r3, [sl], #4
 800a85e:	d8e7      	bhi.n	800a830 <__mdiff+0x7c>
 800a860:	1b2b      	subs	r3, r5, r4
 800a862:	3b15      	subs	r3, #21
 800a864:	f023 0303 	bic.w	r3, r3, #3
 800a868:	3304      	adds	r3, #4
 800a86a:	3415      	adds	r4, #21
 800a86c:	42a5      	cmp	r5, r4
 800a86e:	bf38      	it	cc
 800a870:	2304      	movcc	r3, #4
 800a872:	4419      	add	r1, r3
 800a874:	4473      	add	r3, lr
 800a876:	469e      	mov	lr, r3
 800a878:	460d      	mov	r5, r1
 800a87a:	4565      	cmp	r5, ip
 800a87c:	d30e      	bcc.n	800a89c <__mdiff+0xe8>
 800a87e:	f10c 0203 	add.w	r2, ip, #3
 800a882:	1a52      	subs	r2, r2, r1
 800a884:	f022 0203 	bic.w	r2, r2, #3
 800a888:	3903      	subs	r1, #3
 800a88a:	458c      	cmp	ip, r1
 800a88c:	bf38      	it	cc
 800a88e:	2200      	movcc	r2, #0
 800a890:	441a      	add	r2, r3
 800a892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a896:	b17b      	cbz	r3, 800a8b8 <__mdiff+0x104>
 800a898:	6106      	str	r6, [r0, #16]
 800a89a:	e7a5      	b.n	800a7e8 <__mdiff+0x34>
 800a89c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8a0:	fa17 f488 	uxtah	r4, r7, r8
 800a8a4:	1422      	asrs	r2, r4, #16
 800a8a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8aa:	b2a4      	uxth	r4, r4
 800a8ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8b0:	f84e 4b04 	str.w	r4, [lr], #4
 800a8b4:	1417      	asrs	r7, r2, #16
 800a8b6:	e7e0      	b.n	800a87a <__mdiff+0xc6>
 800a8b8:	3e01      	subs	r6, #1
 800a8ba:	e7ea      	b.n	800a892 <__mdiff+0xde>
 800a8bc:	0800b8ef 	.word	0x0800b8ef
 800a8c0:	0800b900 	.word	0x0800b900

0800a8c4 <__d2b>:
 800a8c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	ec57 6b10 	vmov	r6, r7, d0
 800a8d0:	4690      	mov	r8, r2
 800a8d2:	f7ff fcd5 	bl	800a280 <_Balloc>
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	b930      	cbnz	r0, 800a8e8 <__d2b+0x24>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4b25      	ldr	r3, [pc, #148]	; (800a974 <__d2b+0xb0>)
 800a8de:	4826      	ldr	r0, [pc, #152]	; (800a978 <__d2b+0xb4>)
 800a8e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a8e4:	f000 f9b4 	bl	800ac50 <__assert_func>
 800a8e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8f0:	bb35      	cbnz	r5, 800a940 <__d2b+0x7c>
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	d028      	beq.n	800a94a <__d2b+0x86>
 800a8f8:	4668      	mov	r0, sp
 800a8fa:	9600      	str	r6, [sp, #0]
 800a8fc:	f7ff fd8c 	bl	800a418 <__lo0bits>
 800a900:	9900      	ldr	r1, [sp, #0]
 800a902:	b300      	cbz	r0, 800a946 <__d2b+0x82>
 800a904:	9a01      	ldr	r2, [sp, #4]
 800a906:	f1c0 0320 	rsb	r3, r0, #32
 800a90a:	fa02 f303 	lsl.w	r3, r2, r3
 800a90e:	430b      	orrs	r3, r1
 800a910:	40c2      	lsrs	r2, r0
 800a912:	6163      	str	r3, [r4, #20]
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	61a3      	str	r3, [r4, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf14      	ite	ne
 800a91e:	2202      	movne	r2, #2
 800a920:	2201      	moveq	r2, #1
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	b1d5      	cbz	r5, 800a95c <__d2b+0x98>
 800a926:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a92a:	4405      	add	r5, r0
 800a92c:	f8c9 5000 	str.w	r5, [r9]
 800a930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a934:	f8c8 0000 	str.w	r0, [r8]
 800a938:	4620      	mov	r0, r4
 800a93a:	b003      	add	sp, #12
 800a93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a944:	e7d5      	b.n	800a8f2 <__d2b+0x2e>
 800a946:	6161      	str	r1, [r4, #20]
 800a948:	e7e5      	b.n	800a916 <__d2b+0x52>
 800a94a:	a801      	add	r0, sp, #4
 800a94c:	f7ff fd64 	bl	800a418 <__lo0bits>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	6163      	str	r3, [r4, #20]
 800a954:	2201      	movs	r2, #1
 800a956:	6122      	str	r2, [r4, #16]
 800a958:	3020      	adds	r0, #32
 800a95a:	e7e3      	b.n	800a924 <__d2b+0x60>
 800a95c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a964:	f8c9 0000 	str.w	r0, [r9]
 800a968:	6918      	ldr	r0, [r3, #16]
 800a96a:	f7ff fd35 	bl	800a3d8 <__hi0bits>
 800a96e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a972:	e7df      	b.n	800a934 <__d2b+0x70>
 800a974:	0800b8ef 	.word	0x0800b8ef
 800a978:	0800b900 	.word	0x0800b900

0800a97c <_calloc_r>:
 800a97c:	b513      	push	{r0, r1, r4, lr}
 800a97e:	434a      	muls	r2, r1
 800a980:	4611      	mov	r1, r2
 800a982:	9201      	str	r2, [sp, #4]
 800a984:	f7fe f93e 	bl	8008c04 <_malloc_r>
 800a988:	4604      	mov	r4, r0
 800a98a:	b118      	cbz	r0, 800a994 <_calloc_r+0x18>
 800a98c:	9a01      	ldr	r2, [sp, #4]
 800a98e:	2100      	movs	r1, #0
 800a990:	f7fe f8e0 	bl	8008b54 <memset>
 800a994:	4620      	mov	r0, r4
 800a996:	b002      	add	sp, #8
 800a998:	bd10      	pop	{r4, pc}

0800a99a <__ssputs_r>:
 800a99a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a99e:	688e      	ldr	r6, [r1, #8]
 800a9a0:	429e      	cmp	r6, r3
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	4690      	mov	r8, r2
 800a9a8:	461f      	mov	r7, r3
 800a9aa:	d838      	bhi.n	800aa1e <__ssputs_r+0x84>
 800a9ac:	898a      	ldrh	r2, [r1, #12]
 800a9ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9b2:	d032      	beq.n	800aa1a <__ssputs_r+0x80>
 800a9b4:	6825      	ldr	r5, [r4, #0]
 800a9b6:	6909      	ldr	r1, [r1, #16]
 800a9b8:	eba5 0901 	sub.w	r9, r5, r1
 800a9bc:	6965      	ldr	r5, [r4, #20]
 800a9be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	444b      	add	r3, r9
 800a9ca:	106d      	asrs	r5, r5, #1
 800a9cc:	429d      	cmp	r5, r3
 800a9ce:	bf38      	it	cc
 800a9d0:	461d      	movcc	r5, r3
 800a9d2:	0553      	lsls	r3, r2, #21
 800a9d4:	d531      	bpl.n	800aa3a <__ssputs_r+0xa0>
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	f7fe f914 	bl	8008c04 <_malloc_r>
 800a9dc:	4606      	mov	r6, r0
 800a9de:	b950      	cbnz	r0, 800a9f6 <__ssputs_r+0x5c>
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	f8ca 3000 	str.w	r3, [sl]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f6:	6921      	ldr	r1, [r4, #16]
 800a9f8:	464a      	mov	r2, r9
 800a9fa:	f7ff fc27 	bl	800a24c <memcpy>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa08:	81a3      	strh	r3, [r4, #12]
 800aa0a:	6126      	str	r6, [r4, #16]
 800aa0c:	6165      	str	r5, [r4, #20]
 800aa0e:	444e      	add	r6, r9
 800aa10:	eba5 0509 	sub.w	r5, r5, r9
 800aa14:	6026      	str	r6, [r4, #0]
 800aa16:	60a5      	str	r5, [r4, #8]
 800aa18:	463e      	mov	r6, r7
 800aa1a:	42be      	cmp	r6, r7
 800aa1c:	d900      	bls.n	800aa20 <__ssputs_r+0x86>
 800aa1e:	463e      	mov	r6, r7
 800aa20:	4632      	mov	r2, r6
 800aa22:	6820      	ldr	r0, [r4, #0]
 800aa24:	4641      	mov	r1, r8
 800aa26:	f000 f958 	bl	800acda <memmove>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	6822      	ldr	r2, [r4, #0]
 800aa2e:	1b9b      	subs	r3, r3, r6
 800aa30:	4432      	add	r2, r6
 800aa32:	60a3      	str	r3, [r4, #8]
 800aa34:	6022      	str	r2, [r4, #0]
 800aa36:	2000      	movs	r0, #0
 800aa38:	e7db      	b.n	800a9f2 <__ssputs_r+0x58>
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	f000 f967 	bl	800ad0e <_realloc_r>
 800aa40:	4606      	mov	r6, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1e1      	bne.n	800aa0a <__ssputs_r+0x70>
 800aa46:	6921      	ldr	r1, [r4, #16]
 800aa48:	4650      	mov	r0, sl
 800aa4a:	f7fe f88b 	bl	8008b64 <_free_r>
 800aa4e:	e7c7      	b.n	800a9e0 <__ssputs_r+0x46>

0800aa50 <_svfiprintf_r>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	4698      	mov	r8, r3
 800aa56:	898b      	ldrh	r3, [r1, #12]
 800aa58:	061b      	lsls	r3, r3, #24
 800aa5a:	b09d      	sub	sp, #116	; 0x74
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	460d      	mov	r5, r1
 800aa60:	4614      	mov	r4, r2
 800aa62:	d50e      	bpl.n	800aa82 <_svfiprintf_r+0x32>
 800aa64:	690b      	ldr	r3, [r1, #16]
 800aa66:	b963      	cbnz	r3, 800aa82 <_svfiprintf_r+0x32>
 800aa68:	2140      	movs	r1, #64	; 0x40
 800aa6a:	f7fe f8cb 	bl	8008c04 <_malloc_r>
 800aa6e:	6028      	str	r0, [r5, #0]
 800aa70:	6128      	str	r0, [r5, #16]
 800aa72:	b920      	cbnz	r0, 800aa7e <_svfiprintf_r+0x2e>
 800aa74:	230c      	movs	r3, #12
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa7c:	e0d1      	b.n	800ac22 <_svfiprintf_r+0x1d2>
 800aa7e:	2340      	movs	r3, #64	; 0x40
 800aa80:	616b      	str	r3, [r5, #20]
 800aa82:	2300      	movs	r3, #0
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	2320      	movs	r3, #32
 800aa88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa90:	2330      	movs	r3, #48	; 0x30
 800aa92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac3c <_svfiprintf_r+0x1ec>
 800aa96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa9a:	f04f 0901 	mov.w	r9, #1
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	469a      	mov	sl, r3
 800aaa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa6:	b10a      	cbz	r2, 800aaac <_svfiprintf_r+0x5c>
 800aaa8:	2a25      	cmp	r2, #37	; 0x25
 800aaaa:	d1f9      	bne.n	800aaa0 <_svfiprintf_r+0x50>
 800aaac:	ebba 0b04 	subs.w	fp, sl, r4
 800aab0:	d00b      	beq.n	800aaca <_svfiprintf_r+0x7a>
 800aab2:	465b      	mov	r3, fp
 800aab4:	4622      	mov	r2, r4
 800aab6:	4629      	mov	r1, r5
 800aab8:	4638      	mov	r0, r7
 800aaba:	f7ff ff6e 	bl	800a99a <__ssputs_r>
 800aabe:	3001      	adds	r0, #1
 800aac0:	f000 80aa 	beq.w	800ac18 <_svfiprintf_r+0x1c8>
 800aac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aac6:	445a      	add	r2, fp
 800aac8:	9209      	str	r2, [sp, #36]	; 0x24
 800aaca:	f89a 3000 	ldrb.w	r3, [sl]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80a2 	beq.w	800ac18 <_svfiprintf_r+0x1c8>
 800aad4:	2300      	movs	r3, #0
 800aad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aade:	f10a 0a01 	add.w	sl, sl, #1
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	9307      	str	r3, [sp, #28]
 800aae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaea:	931a      	str	r3, [sp, #104]	; 0x68
 800aaec:	4654      	mov	r4, sl
 800aaee:	2205      	movs	r2, #5
 800aaf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf4:	4851      	ldr	r0, [pc, #324]	; (800ac3c <_svfiprintf_r+0x1ec>)
 800aaf6:	f7f5 fbfb 	bl	80002f0 <memchr>
 800aafa:	9a04      	ldr	r2, [sp, #16]
 800aafc:	b9d8      	cbnz	r0, 800ab36 <_svfiprintf_r+0xe6>
 800aafe:	06d0      	lsls	r0, r2, #27
 800ab00:	bf44      	itt	mi
 800ab02:	2320      	movmi	r3, #32
 800ab04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab08:	0711      	lsls	r1, r2, #28
 800ab0a:	bf44      	itt	mi
 800ab0c:	232b      	movmi	r3, #43	; 0x2b
 800ab0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b2a      	cmp	r3, #42	; 0x2a
 800ab18:	d015      	beq.n	800ab46 <_svfiprintf_r+0xf6>
 800ab1a:	9a07      	ldr	r2, [sp, #28]
 800ab1c:	4654      	mov	r4, sl
 800ab1e:	2000      	movs	r0, #0
 800ab20:	f04f 0c0a 	mov.w	ip, #10
 800ab24:	4621      	mov	r1, r4
 800ab26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab2a:	3b30      	subs	r3, #48	; 0x30
 800ab2c:	2b09      	cmp	r3, #9
 800ab2e:	d94e      	bls.n	800abce <_svfiprintf_r+0x17e>
 800ab30:	b1b0      	cbz	r0, 800ab60 <_svfiprintf_r+0x110>
 800ab32:	9207      	str	r2, [sp, #28]
 800ab34:	e014      	b.n	800ab60 <_svfiprintf_r+0x110>
 800ab36:	eba0 0308 	sub.w	r3, r0, r8
 800ab3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	46a2      	mov	sl, r4
 800ab44:	e7d2      	b.n	800aaec <_svfiprintf_r+0x9c>
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	1d19      	adds	r1, r3, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	9103      	str	r1, [sp, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	bfbb      	ittet	lt
 800ab52:	425b      	neglt	r3, r3
 800ab54:	f042 0202 	orrlt.w	r2, r2, #2
 800ab58:	9307      	strge	r3, [sp, #28]
 800ab5a:	9307      	strlt	r3, [sp, #28]
 800ab5c:	bfb8      	it	lt
 800ab5e:	9204      	strlt	r2, [sp, #16]
 800ab60:	7823      	ldrb	r3, [r4, #0]
 800ab62:	2b2e      	cmp	r3, #46	; 0x2e
 800ab64:	d10c      	bne.n	800ab80 <_svfiprintf_r+0x130>
 800ab66:	7863      	ldrb	r3, [r4, #1]
 800ab68:	2b2a      	cmp	r3, #42	; 0x2a
 800ab6a:	d135      	bne.n	800abd8 <_svfiprintf_r+0x188>
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	1d1a      	adds	r2, r3, #4
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	9203      	str	r2, [sp, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfb8      	it	lt
 800ab78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab7c:	3402      	adds	r4, #2
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac4c <_svfiprintf_r+0x1fc>
 800ab84:	7821      	ldrb	r1, [r4, #0]
 800ab86:	2203      	movs	r2, #3
 800ab88:	4650      	mov	r0, sl
 800ab8a:	f7f5 fbb1 	bl	80002f0 <memchr>
 800ab8e:	b140      	cbz	r0, 800aba2 <_svfiprintf_r+0x152>
 800ab90:	2340      	movs	r3, #64	; 0x40
 800ab92:	eba0 000a 	sub.w	r0, r0, sl
 800ab96:	fa03 f000 	lsl.w	r0, r3, r0
 800ab9a:	9b04      	ldr	r3, [sp, #16]
 800ab9c:	4303      	orrs	r3, r0
 800ab9e:	3401      	adds	r4, #1
 800aba0:	9304      	str	r3, [sp, #16]
 800aba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba6:	4826      	ldr	r0, [pc, #152]	; (800ac40 <_svfiprintf_r+0x1f0>)
 800aba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abac:	2206      	movs	r2, #6
 800abae:	f7f5 fb9f 	bl	80002f0 <memchr>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d038      	beq.n	800ac28 <_svfiprintf_r+0x1d8>
 800abb6:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <_svfiprintf_r+0x1f4>)
 800abb8:	bb1b      	cbnz	r3, 800ac02 <_svfiprintf_r+0x1b2>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	3307      	adds	r3, #7
 800abbe:	f023 0307 	bic.w	r3, r3, #7
 800abc2:	3308      	adds	r3, #8
 800abc4:	9303      	str	r3, [sp, #12]
 800abc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc8:	4433      	add	r3, r6
 800abca:	9309      	str	r3, [sp, #36]	; 0x24
 800abcc:	e767      	b.n	800aa9e <_svfiprintf_r+0x4e>
 800abce:	fb0c 3202 	mla	r2, ip, r2, r3
 800abd2:	460c      	mov	r4, r1
 800abd4:	2001      	movs	r0, #1
 800abd6:	e7a5      	b.n	800ab24 <_svfiprintf_r+0xd4>
 800abd8:	2300      	movs	r3, #0
 800abda:	3401      	adds	r4, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	4619      	mov	r1, r3
 800abe0:	f04f 0c0a 	mov.w	ip, #10
 800abe4:	4620      	mov	r0, r4
 800abe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abea:	3a30      	subs	r2, #48	; 0x30
 800abec:	2a09      	cmp	r2, #9
 800abee:	d903      	bls.n	800abf8 <_svfiprintf_r+0x1a8>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d0c5      	beq.n	800ab80 <_svfiprintf_r+0x130>
 800abf4:	9105      	str	r1, [sp, #20]
 800abf6:	e7c3      	b.n	800ab80 <_svfiprintf_r+0x130>
 800abf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abfc:	4604      	mov	r4, r0
 800abfe:	2301      	movs	r3, #1
 800ac00:	e7f0      	b.n	800abe4 <_svfiprintf_r+0x194>
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	462a      	mov	r2, r5
 800ac08:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <_svfiprintf_r+0x1f8>)
 800ac0a:	a904      	add	r1, sp, #16
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f7fe f8e3 	bl	8008dd8 <_printf_float>
 800ac12:	1c42      	adds	r2, r0, #1
 800ac14:	4606      	mov	r6, r0
 800ac16:	d1d6      	bne.n	800abc6 <_svfiprintf_r+0x176>
 800ac18:	89ab      	ldrh	r3, [r5, #12]
 800ac1a:	065b      	lsls	r3, r3, #25
 800ac1c:	f53f af2c 	bmi.w	800aa78 <_svfiprintf_r+0x28>
 800ac20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac22:	b01d      	add	sp, #116	; 0x74
 800ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac28:	ab03      	add	r3, sp, #12
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <_svfiprintf_r+0x1f8>)
 800ac30:	a904      	add	r1, sp, #16
 800ac32:	4638      	mov	r0, r7
 800ac34:	f7fe fb5c 	bl	80092f0 <_printf_i>
 800ac38:	e7eb      	b.n	800ac12 <_svfiprintf_r+0x1c2>
 800ac3a:	bf00      	nop
 800ac3c:	0800ba5c 	.word	0x0800ba5c
 800ac40:	0800ba66 	.word	0x0800ba66
 800ac44:	08008dd9 	.word	0x08008dd9
 800ac48:	0800a99b 	.word	0x0800a99b
 800ac4c:	0800ba62 	.word	0x0800ba62

0800ac50 <__assert_func>:
 800ac50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac52:	4614      	mov	r4, r2
 800ac54:	461a      	mov	r2, r3
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <__assert_func+0x2c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	68d8      	ldr	r0, [r3, #12]
 800ac5e:	b14c      	cbz	r4, 800ac74 <__assert_func+0x24>
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <__assert_func+0x30>)
 800ac62:	9100      	str	r1, [sp, #0]
 800ac64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac68:	4906      	ldr	r1, [pc, #24]	; (800ac84 <__assert_func+0x34>)
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f000 f80e 	bl	800ac8c <fiprintf>
 800ac70:	f7fd ff36 	bl	8008ae0 <abort>
 800ac74:	4b04      	ldr	r3, [pc, #16]	; (800ac88 <__assert_func+0x38>)
 800ac76:	461c      	mov	r4, r3
 800ac78:	e7f3      	b.n	800ac62 <__assert_func+0x12>
 800ac7a:	bf00      	nop
 800ac7c:	20000010 	.word	0x20000010
 800ac80:	0800ba6d 	.word	0x0800ba6d
 800ac84:	0800ba7a 	.word	0x0800ba7a
 800ac88:	0800baa8 	.word	0x0800baa8

0800ac8c <fiprintf>:
 800ac8c:	b40e      	push	{r1, r2, r3}
 800ac8e:	b503      	push	{r0, r1, lr}
 800ac90:	4601      	mov	r1, r0
 800ac92:	ab03      	add	r3, sp, #12
 800ac94:	4805      	ldr	r0, [pc, #20]	; (800acac <fiprintf+0x20>)
 800ac96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9a:	6800      	ldr	r0, [r0, #0]
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	f000 f885 	bl	800adac <_vfiprintf_r>
 800aca2:	b002      	add	sp, #8
 800aca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca8:	b003      	add	sp, #12
 800acaa:	4770      	bx	lr
 800acac:	20000010 	.word	0x20000010

0800acb0 <__retarget_lock_init_recursive>:
 800acb0:	4770      	bx	lr

0800acb2 <__retarget_lock_acquire_recursive>:
 800acb2:	4770      	bx	lr

0800acb4 <__retarget_lock_release_recursive>:
 800acb4:	4770      	bx	lr

0800acb6 <__ascii_mbtowc>:
 800acb6:	b082      	sub	sp, #8
 800acb8:	b901      	cbnz	r1, 800acbc <__ascii_mbtowc+0x6>
 800acba:	a901      	add	r1, sp, #4
 800acbc:	b142      	cbz	r2, 800acd0 <__ascii_mbtowc+0x1a>
 800acbe:	b14b      	cbz	r3, 800acd4 <__ascii_mbtowc+0x1e>
 800acc0:	7813      	ldrb	r3, [r2, #0]
 800acc2:	600b      	str	r3, [r1, #0]
 800acc4:	7812      	ldrb	r2, [r2, #0]
 800acc6:	1e10      	subs	r0, r2, #0
 800acc8:	bf18      	it	ne
 800acca:	2001      	movne	r0, #1
 800accc:	b002      	add	sp, #8
 800acce:	4770      	bx	lr
 800acd0:	4610      	mov	r0, r2
 800acd2:	e7fb      	b.n	800accc <__ascii_mbtowc+0x16>
 800acd4:	f06f 0001 	mvn.w	r0, #1
 800acd8:	e7f8      	b.n	800accc <__ascii_mbtowc+0x16>

0800acda <memmove>:
 800acda:	4288      	cmp	r0, r1
 800acdc:	b510      	push	{r4, lr}
 800acde:	eb01 0402 	add.w	r4, r1, r2
 800ace2:	d902      	bls.n	800acea <memmove+0x10>
 800ace4:	4284      	cmp	r4, r0
 800ace6:	4623      	mov	r3, r4
 800ace8:	d807      	bhi.n	800acfa <memmove+0x20>
 800acea:	1e43      	subs	r3, r0, #1
 800acec:	42a1      	cmp	r1, r4
 800acee:	d008      	beq.n	800ad02 <memmove+0x28>
 800acf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf8:	e7f8      	b.n	800acec <memmove+0x12>
 800acfa:	4402      	add	r2, r0
 800acfc:	4601      	mov	r1, r0
 800acfe:	428a      	cmp	r2, r1
 800ad00:	d100      	bne.n	800ad04 <memmove+0x2a>
 800ad02:	bd10      	pop	{r4, pc}
 800ad04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad08:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad0c:	e7f7      	b.n	800acfe <memmove+0x24>

0800ad0e <_realloc_r>:
 800ad0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad10:	4607      	mov	r7, r0
 800ad12:	4614      	mov	r4, r2
 800ad14:	460e      	mov	r6, r1
 800ad16:	b921      	cbnz	r1, 800ad22 <_realloc_r+0x14>
 800ad18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	f7fd bf71 	b.w	8008c04 <_malloc_r>
 800ad22:	b922      	cbnz	r2, 800ad2e <_realloc_r+0x20>
 800ad24:	f7fd ff1e 	bl	8008b64 <_free_r>
 800ad28:	4625      	mov	r5, r4
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad2e:	f000 fc57 	bl	800b5e0 <_malloc_usable_size_r>
 800ad32:	42a0      	cmp	r0, r4
 800ad34:	d20f      	bcs.n	800ad56 <_realloc_r+0x48>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7fd ff63 	bl	8008c04 <_malloc_r>
 800ad3e:	4605      	mov	r5, r0
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d0f2      	beq.n	800ad2a <_realloc_r+0x1c>
 800ad44:	4631      	mov	r1, r6
 800ad46:	4622      	mov	r2, r4
 800ad48:	f7ff fa80 	bl	800a24c <memcpy>
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7fd ff08 	bl	8008b64 <_free_r>
 800ad54:	e7e9      	b.n	800ad2a <_realloc_r+0x1c>
 800ad56:	4635      	mov	r5, r6
 800ad58:	e7e7      	b.n	800ad2a <_realloc_r+0x1c>

0800ad5a <__sfputc_r>:
 800ad5a:	6893      	ldr	r3, [r2, #8]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	b410      	push	{r4}
 800ad62:	6093      	str	r3, [r2, #8]
 800ad64:	da08      	bge.n	800ad78 <__sfputc_r+0x1e>
 800ad66:	6994      	ldr	r4, [r2, #24]
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	db01      	blt.n	800ad70 <__sfputc_r+0x16>
 800ad6c:	290a      	cmp	r1, #10
 800ad6e:	d103      	bne.n	800ad78 <__sfputc_r+0x1e>
 800ad70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad74:	f000 b94a 	b.w	800b00c <__swbuf_r>
 800ad78:	6813      	ldr	r3, [r2, #0]
 800ad7a:	1c58      	adds	r0, r3, #1
 800ad7c:	6010      	str	r0, [r2, #0]
 800ad7e:	7019      	strb	r1, [r3, #0]
 800ad80:	4608      	mov	r0, r1
 800ad82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <__sfputs_r>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	4614      	mov	r4, r2
 800ad90:	18d5      	adds	r5, r2, r3
 800ad92:	42ac      	cmp	r4, r5
 800ad94:	d101      	bne.n	800ad9a <__sfputs_r+0x12>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e007      	b.n	800adaa <__sfputs_r+0x22>
 800ad9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9e:	463a      	mov	r2, r7
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff ffda 	bl	800ad5a <__sfputc_r>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d1f3      	bne.n	800ad92 <__sfputs_r+0xa>
 800adaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adac <_vfiprintf_r>:
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	460d      	mov	r5, r1
 800adb2:	b09d      	sub	sp, #116	; 0x74
 800adb4:	4614      	mov	r4, r2
 800adb6:	4698      	mov	r8, r3
 800adb8:	4606      	mov	r6, r0
 800adba:	b118      	cbz	r0, 800adc4 <_vfiprintf_r+0x18>
 800adbc:	6983      	ldr	r3, [r0, #24]
 800adbe:	b90b      	cbnz	r3, 800adc4 <_vfiprintf_r+0x18>
 800adc0:	f000 fb0c 	bl	800b3dc <__sinit>
 800adc4:	4b89      	ldr	r3, [pc, #548]	; (800afec <_vfiprintf_r+0x240>)
 800adc6:	429d      	cmp	r5, r3
 800adc8:	d11b      	bne.n	800ae02 <_vfiprintf_r+0x56>
 800adca:	6875      	ldr	r5, [r6, #4]
 800adcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adce:	07d9      	lsls	r1, r3, #31
 800add0:	d405      	bmi.n	800adde <_vfiprintf_r+0x32>
 800add2:	89ab      	ldrh	r3, [r5, #12]
 800add4:	059a      	lsls	r2, r3, #22
 800add6:	d402      	bmi.n	800adde <_vfiprintf_r+0x32>
 800add8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adda:	f7ff ff6a 	bl	800acb2 <__retarget_lock_acquire_recursive>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	071b      	lsls	r3, r3, #28
 800ade2:	d501      	bpl.n	800ade8 <_vfiprintf_r+0x3c>
 800ade4:	692b      	ldr	r3, [r5, #16]
 800ade6:	b9eb      	cbnz	r3, 800ae24 <_vfiprintf_r+0x78>
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f000 f96e 	bl	800b0cc <__swsetup_r>
 800adf0:	b1c0      	cbz	r0, 800ae24 <_vfiprintf_r+0x78>
 800adf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf4:	07dc      	lsls	r4, r3, #31
 800adf6:	d50e      	bpl.n	800ae16 <_vfiprintf_r+0x6a>
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adfc:	b01d      	add	sp, #116	; 0x74
 800adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae02:	4b7b      	ldr	r3, [pc, #492]	; (800aff0 <_vfiprintf_r+0x244>)
 800ae04:	429d      	cmp	r5, r3
 800ae06:	d101      	bne.n	800ae0c <_vfiprintf_r+0x60>
 800ae08:	68b5      	ldr	r5, [r6, #8]
 800ae0a:	e7df      	b.n	800adcc <_vfiprintf_r+0x20>
 800ae0c:	4b79      	ldr	r3, [pc, #484]	; (800aff4 <_vfiprintf_r+0x248>)
 800ae0e:	429d      	cmp	r5, r3
 800ae10:	bf08      	it	eq
 800ae12:	68f5      	ldreq	r5, [r6, #12]
 800ae14:	e7da      	b.n	800adcc <_vfiprintf_r+0x20>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	0598      	lsls	r0, r3, #22
 800ae1a:	d4ed      	bmi.n	800adf8 <_vfiprintf_r+0x4c>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae1e:	f7ff ff49 	bl	800acb4 <__retarget_lock_release_recursive>
 800ae22:	e7e9      	b.n	800adf8 <_vfiprintf_r+0x4c>
 800ae24:	2300      	movs	r3, #0
 800ae26:	9309      	str	r3, [sp, #36]	; 0x24
 800ae28:	2320      	movs	r3, #32
 800ae2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae32:	2330      	movs	r3, #48	; 0x30
 800ae34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aff8 <_vfiprintf_r+0x24c>
 800ae38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae3c:	f04f 0901 	mov.w	r9, #1
 800ae40:	4623      	mov	r3, r4
 800ae42:	469a      	mov	sl, r3
 800ae44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae48:	b10a      	cbz	r2, 800ae4e <_vfiprintf_r+0xa2>
 800ae4a:	2a25      	cmp	r2, #37	; 0x25
 800ae4c:	d1f9      	bne.n	800ae42 <_vfiprintf_r+0x96>
 800ae4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae52:	d00b      	beq.n	800ae6c <_vfiprintf_r+0xc0>
 800ae54:	465b      	mov	r3, fp
 800ae56:	4622      	mov	r2, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7ff ff94 	bl	800ad88 <__sfputs_r>
 800ae60:	3001      	adds	r0, #1
 800ae62:	f000 80aa 	beq.w	800afba <_vfiprintf_r+0x20e>
 800ae66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae68:	445a      	add	r2, fp
 800ae6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80a2 	beq.w	800afba <_vfiprintf_r+0x20e>
 800ae76:	2300      	movs	r3, #0
 800ae78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae80:	f10a 0a01 	add.w	sl, sl, #1
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	9307      	str	r3, [sp, #28]
 800ae88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae8e:	4654      	mov	r4, sl
 800ae90:	2205      	movs	r2, #5
 800ae92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae96:	4858      	ldr	r0, [pc, #352]	; (800aff8 <_vfiprintf_r+0x24c>)
 800ae98:	f7f5 fa2a 	bl	80002f0 <memchr>
 800ae9c:	9a04      	ldr	r2, [sp, #16]
 800ae9e:	b9d8      	cbnz	r0, 800aed8 <_vfiprintf_r+0x12c>
 800aea0:	06d1      	lsls	r1, r2, #27
 800aea2:	bf44      	itt	mi
 800aea4:	2320      	movmi	r3, #32
 800aea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeaa:	0713      	lsls	r3, r2, #28
 800aeac:	bf44      	itt	mi
 800aeae:	232b      	movmi	r3, #43	; 0x2b
 800aeb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb4:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeba:	d015      	beq.n	800aee8 <_vfiprintf_r+0x13c>
 800aebc:	9a07      	ldr	r2, [sp, #28]
 800aebe:	4654      	mov	r4, sl
 800aec0:	2000      	movs	r0, #0
 800aec2:	f04f 0c0a 	mov.w	ip, #10
 800aec6:	4621      	mov	r1, r4
 800aec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aecc:	3b30      	subs	r3, #48	; 0x30
 800aece:	2b09      	cmp	r3, #9
 800aed0:	d94e      	bls.n	800af70 <_vfiprintf_r+0x1c4>
 800aed2:	b1b0      	cbz	r0, 800af02 <_vfiprintf_r+0x156>
 800aed4:	9207      	str	r2, [sp, #28]
 800aed6:	e014      	b.n	800af02 <_vfiprintf_r+0x156>
 800aed8:	eba0 0308 	sub.w	r3, r0, r8
 800aedc:	fa09 f303 	lsl.w	r3, r9, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	46a2      	mov	sl, r4
 800aee6:	e7d2      	b.n	800ae8e <_vfiprintf_r+0xe2>
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	1d19      	adds	r1, r3, #4
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	9103      	str	r1, [sp, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	bfbb      	ittet	lt
 800aef4:	425b      	neglt	r3, r3
 800aef6:	f042 0202 	orrlt.w	r2, r2, #2
 800aefa:	9307      	strge	r3, [sp, #28]
 800aefc:	9307      	strlt	r3, [sp, #28]
 800aefe:	bfb8      	it	lt
 800af00:	9204      	strlt	r2, [sp, #16]
 800af02:	7823      	ldrb	r3, [r4, #0]
 800af04:	2b2e      	cmp	r3, #46	; 0x2e
 800af06:	d10c      	bne.n	800af22 <_vfiprintf_r+0x176>
 800af08:	7863      	ldrb	r3, [r4, #1]
 800af0a:	2b2a      	cmp	r3, #42	; 0x2a
 800af0c:	d135      	bne.n	800af7a <_vfiprintf_r+0x1ce>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	1d1a      	adds	r2, r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	9203      	str	r2, [sp, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	bfb8      	it	lt
 800af1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af1e:	3402      	adds	r4, #2
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b008 <_vfiprintf_r+0x25c>
 800af26:	7821      	ldrb	r1, [r4, #0]
 800af28:	2203      	movs	r2, #3
 800af2a:	4650      	mov	r0, sl
 800af2c:	f7f5 f9e0 	bl	80002f0 <memchr>
 800af30:	b140      	cbz	r0, 800af44 <_vfiprintf_r+0x198>
 800af32:	2340      	movs	r3, #64	; 0x40
 800af34:	eba0 000a 	sub.w	r0, r0, sl
 800af38:	fa03 f000 	lsl.w	r0, r3, r0
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	4303      	orrs	r3, r0
 800af40:	3401      	adds	r4, #1
 800af42:	9304      	str	r3, [sp, #16]
 800af44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af48:	482c      	ldr	r0, [pc, #176]	; (800affc <_vfiprintf_r+0x250>)
 800af4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af4e:	2206      	movs	r2, #6
 800af50:	f7f5 f9ce 	bl	80002f0 <memchr>
 800af54:	2800      	cmp	r0, #0
 800af56:	d03f      	beq.n	800afd8 <_vfiprintf_r+0x22c>
 800af58:	4b29      	ldr	r3, [pc, #164]	; (800b000 <_vfiprintf_r+0x254>)
 800af5a:	bb1b      	cbnz	r3, 800afa4 <_vfiprintf_r+0x1f8>
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	3307      	adds	r3, #7
 800af60:	f023 0307 	bic.w	r3, r3, #7
 800af64:	3308      	adds	r3, #8
 800af66:	9303      	str	r3, [sp, #12]
 800af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6a:	443b      	add	r3, r7
 800af6c:	9309      	str	r3, [sp, #36]	; 0x24
 800af6e:	e767      	b.n	800ae40 <_vfiprintf_r+0x94>
 800af70:	fb0c 3202 	mla	r2, ip, r2, r3
 800af74:	460c      	mov	r4, r1
 800af76:	2001      	movs	r0, #1
 800af78:	e7a5      	b.n	800aec6 <_vfiprintf_r+0x11a>
 800af7a:	2300      	movs	r3, #0
 800af7c:	3401      	adds	r4, #1
 800af7e:	9305      	str	r3, [sp, #20]
 800af80:	4619      	mov	r1, r3
 800af82:	f04f 0c0a 	mov.w	ip, #10
 800af86:	4620      	mov	r0, r4
 800af88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8c:	3a30      	subs	r2, #48	; 0x30
 800af8e:	2a09      	cmp	r2, #9
 800af90:	d903      	bls.n	800af9a <_vfiprintf_r+0x1ee>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0c5      	beq.n	800af22 <_vfiprintf_r+0x176>
 800af96:	9105      	str	r1, [sp, #20]
 800af98:	e7c3      	b.n	800af22 <_vfiprintf_r+0x176>
 800af9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9e:	4604      	mov	r4, r0
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f0      	b.n	800af86 <_vfiprintf_r+0x1da>
 800afa4:	ab03      	add	r3, sp, #12
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	462a      	mov	r2, r5
 800afaa:	4b16      	ldr	r3, [pc, #88]	; (800b004 <_vfiprintf_r+0x258>)
 800afac:	a904      	add	r1, sp, #16
 800afae:	4630      	mov	r0, r6
 800afb0:	f7fd ff12 	bl	8008dd8 <_printf_float>
 800afb4:	4607      	mov	r7, r0
 800afb6:	1c78      	adds	r0, r7, #1
 800afb8:	d1d6      	bne.n	800af68 <_vfiprintf_r+0x1bc>
 800afba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afbc:	07d9      	lsls	r1, r3, #31
 800afbe:	d405      	bmi.n	800afcc <_vfiprintf_r+0x220>
 800afc0:	89ab      	ldrh	r3, [r5, #12]
 800afc2:	059a      	lsls	r2, r3, #22
 800afc4:	d402      	bmi.n	800afcc <_vfiprintf_r+0x220>
 800afc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afc8:	f7ff fe74 	bl	800acb4 <__retarget_lock_release_recursive>
 800afcc:	89ab      	ldrh	r3, [r5, #12]
 800afce:	065b      	lsls	r3, r3, #25
 800afd0:	f53f af12 	bmi.w	800adf8 <_vfiprintf_r+0x4c>
 800afd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd6:	e711      	b.n	800adfc <_vfiprintf_r+0x50>
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	462a      	mov	r2, r5
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <_vfiprintf_r+0x258>)
 800afe0:	a904      	add	r1, sp, #16
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7fe f984 	bl	80092f0 <_printf_i>
 800afe8:	e7e4      	b.n	800afb4 <_vfiprintf_r+0x208>
 800afea:	bf00      	nop
 800afec:	0800bbd4 	.word	0x0800bbd4
 800aff0:	0800bbf4 	.word	0x0800bbf4
 800aff4:	0800bbb4 	.word	0x0800bbb4
 800aff8:	0800ba5c 	.word	0x0800ba5c
 800affc:	0800ba66 	.word	0x0800ba66
 800b000:	08008dd9 	.word	0x08008dd9
 800b004:	0800ad89 	.word	0x0800ad89
 800b008:	0800ba62 	.word	0x0800ba62

0800b00c <__swbuf_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	460e      	mov	r6, r1
 800b010:	4614      	mov	r4, r2
 800b012:	4605      	mov	r5, r0
 800b014:	b118      	cbz	r0, 800b01e <__swbuf_r+0x12>
 800b016:	6983      	ldr	r3, [r0, #24]
 800b018:	b90b      	cbnz	r3, 800b01e <__swbuf_r+0x12>
 800b01a:	f000 f9df 	bl	800b3dc <__sinit>
 800b01e:	4b21      	ldr	r3, [pc, #132]	; (800b0a4 <__swbuf_r+0x98>)
 800b020:	429c      	cmp	r4, r3
 800b022:	d12b      	bne.n	800b07c <__swbuf_r+0x70>
 800b024:	686c      	ldr	r4, [r5, #4]
 800b026:	69a3      	ldr	r3, [r4, #24]
 800b028:	60a3      	str	r3, [r4, #8]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	071a      	lsls	r2, r3, #28
 800b02e:	d52f      	bpl.n	800b090 <__swbuf_r+0x84>
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	b36b      	cbz	r3, 800b090 <__swbuf_r+0x84>
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	6820      	ldr	r0, [r4, #0]
 800b038:	1ac0      	subs	r0, r0, r3
 800b03a:	6963      	ldr	r3, [r4, #20]
 800b03c:	b2f6      	uxtb	r6, r6
 800b03e:	4283      	cmp	r3, r0
 800b040:	4637      	mov	r7, r6
 800b042:	dc04      	bgt.n	800b04e <__swbuf_r+0x42>
 800b044:	4621      	mov	r1, r4
 800b046:	4628      	mov	r0, r5
 800b048:	f000 f934 	bl	800b2b4 <_fflush_r>
 800b04c:	bb30      	cbnz	r0, 800b09c <__swbuf_r+0x90>
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	3b01      	subs	r3, #1
 800b052:	60a3      	str	r3, [r4, #8]
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	6022      	str	r2, [r4, #0]
 800b05a:	701e      	strb	r6, [r3, #0]
 800b05c:	6963      	ldr	r3, [r4, #20]
 800b05e:	3001      	adds	r0, #1
 800b060:	4283      	cmp	r3, r0
 800b062:	d004      	beq.n	800b06e <__swbuf_r+0x62>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	07db      	lsls	r3, r3, #31
 800b068:	d506      	bpl.n	800b078 <__swbuf_r+0x6c>
 800b06a:	2e0a      	cmp	r6, #10
 800b06c:	d104      	bne.n	800b078 <__swbuf_r+0x6c>
 800b06e:	4621      	mov	r1, r4
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f91f 	bl	800b2b4 <_fflush_r>
 800b076:	b988      	cbnz	r0, 800b09c <__swbuf_r+0x90>
 800b078:	4638      	mov	r0, r7
 800b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <__swbuf_r+0x9c>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d101      	bne.n	800b086 <__swbuf_r+0x7a>
 800b082:	68ac      	ldr	r4, [r5, #8]
 800b084:	e7cf      	b.n	800b026 <__swbuf_r+0x1a>
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <__swbuf_r+0xa0>)
 800b088:	429c      	cmp	r4, r3
 800b08a:	bf08      	it	eq
 800b08c:	68ec      	ldreq	r4, [r5, #12]
 800b08e:	e7ca      	b.n	800b026 <__swbuf_r+0x1a>
 800b090:	4621      	mov	r1, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f81a 	bl	800b0cc <__swsetup_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d0cb      	beq.n	800b034 <__swbuf_r+0x28>
 800b09c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b0a0:	e7ea      	b.n	800b078 <__swbuf_r+0x6c>
 800b0a2:	bf00      	nop
 800b0a4:	0800bbd4 	.word	0x0800bbd4
 800b0a8:	0800bbf4 	.word	0x0800bbf4
 800b0ac:	0800bbb4 	.word	0x0800bbb4

0800b0b0 <__ascii_wctomb>:
 800b0b0:	b149      	cbz	r1, 800b0c6 <__ascii_wctomb+0x16>
 800b0b2:	2aff      	cmp	r2, #255	; 0xff
 800b0b4:	bf85      	ittet	hi
 800b0b6:	238a      	movhi	r3, #138	; 0x8a
 800b0b8:	6003      	strhi	r3, [r0, #0]
 800b0ba:	700a      	strbls	r2, [r1, #0]
 800b0bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b0c0:	bf98      	it	ls
 800b0c2:	2001      	movls	r0, #1
 800b0c4:	4770      	bx	lr
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4770      	bx	lr
	...

0800b0cc <__swsetup_r>:
 800b0cc:	4b32      	ldr	r3, [pc, #200]	; (800b198 <__swsetup_r+0xcc>)
 800b0ce:	b570      	push	{r4, r5, r6, lr}
 800b0d0:	681d      	ldr	r5, [r3, #0]
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	b125      	cbz	r5, 800b0e2 <__swsetup_r+0x16>
 800b0d8:	69ab      	ldr	r3, [r5, #24]
 800b0da:	b913      	cbnz	r3, 800b0e2 <__swsetup_r+0x16>
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f000 f97d 	bl	800b3dc <__sinit>
 800b0e2:	4b2e      	ldr	r3, [pc, #184]	; (800b19c <__swsetup_r+0xd0>)
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	d10f      	bne.n	800b108 <__swsetup_r+0x3c>
 800b0e8:	686c      	ldr	r4, [r5, #4]
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0f0:	0719      	lsls	r1, r3, #28
 800b0f2:	d42c      	bmi.n	800b14e <__swsetup_r+0x82>
 800b0f4:	06dd      	lsls	r5, r3, #27
 800b0f6:	d411      	bmi.n	800b11c <__swsetup_r+0x50>
 800b0f8:	2309      	movs	r3, #9
 800b0fa:	6033      	str	r3, [r6, #0]
 800b0fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b106:	e03e      	b.n	800b186 <__swsetup_r+0xba>
 800b108:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <__swsetup_r+0xd4>)
 800b10a:	429c      	cmp	r4, r3
 800b10c:	d101      	bne.n	800b112 <__swsetup_r+0x46>
 800b10e:	68ac      	ldr	r4, [r5, #8]
 800b110:	e7eb      	b.n	800b0ea <__swsetup_r+0x1e>
 800b112:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <__swsetup_r+0xd8>)
 800b114:	429c      	cmp	r4, r3
 800b116:	bf08      	it	eq
 800b118:	68ec      	ldreq	r4, [r5, #12]
 800b11a:	e7e6      	b.n	800b0ea <__swsetup_r+0x1e>
 800b11c:	0758      	lsls	r0, r3, #29
 800b11e:	d512      	bpl.n	800b146 <__swsetup_r+0x7a>
 800b120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b122:	b141      	cbz	r1, 800b136 <__swsetup_r+0x6a>
 800b124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b128:	4299      	cmp	r1, r3
 800b12a:	d002      	beq.n	800b132 <__swsetup_r+0x66>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7fd fd19 	bl	8008b64 <_free_r>
 800b132:	2300      	movs	r3, #0
 800b134:	6363      	str	r3, [r4, #52]	; 0x34
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	2300      	movs	r3, #0
 800b140:	6063      	str	r3, [r4, #4]
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	f043 0308 	orr.w	r3, r3, #8
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	b94b      	cbnz	r3, 800b166 <__swsetup_r+0x9a>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b15c:	d003      	beq.n	800b166 <__swsetup_r+0x9a>
 800b15e:	4621      	mov	r1, r4
 800b160:	4630      	mov	r0, r6
 800b162:	f000 f9fd 	bl	800b560 <__smakebuf_r>
 800b166:	89a0      	ldrh	r0, [r4, #12]
 800b168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b16c:	f010 0301 	ands.w	r3, r0, #1
 800b170:	d00a      	beq.n	800b188 <__swsetup_r+0xbc>
 800b172:	2300      	movs	r3, #0
 800b174:	60a3      	str	r3, [r4, #8]
 800b176:	6963      	ldr	r3, [r4, #20]
 800b178:	425b      	negs	r3, r3
 800b17a:	61a3      	str	r3, [r4, #24]
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	b943      	cbnz	r3, 800b192 <__swsetup_r+0xc6>
 800b180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b184:	d1ba      	bne.n	800b0fc <__swsetup_r+0x30>
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	0781      	lsls	r1, r0, #30
 800b18a:	bf58      	it	pl
 800b18c:	6963      	ldrpl	r3, [r4, #20]
 800b18e:	60a3      	str	r3, [r4, #8]
 800b190:	e7f4      	b.n	800b17c <__swsetup_r+0xb0>
 800b192:	2000      	movs	r0, #0
 800b194:	e7f7      	b.n	800b186 <__swsetup_r+0xba>
 800b196:	bf00      	nop
 800b198:	20000010 	.word	0x20000010
 800b19c:	0800bbd4 	.word	0x0800bbd4
 800b1a0:	0800bbf4 	.word	0x0800bbf4
 800b1a4:	0800bbb4 	.word	0x0800bbb4

0800b1a8 <__sflush_r>:
 800b1a8:	898a      	ldrh	r2, [r1, #12]
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	0710      	lsls	r0, r2, #28
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	d458      	bmi.n	800b268 <__sflush_r+0xc0>
 800b1b6:	684b      	ldr	r3, [r1, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dc05      	bgt.n	800b1c8 <__sflush_r+0x20>
 800b1bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dc02      	bgt.n	800b1c8 <__sflush_r+0x20>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	d0f9      	beq.n	800b1c2 <__sflush_r+0x1a>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1d4:	682f      	ldr	r7, [r5, #0]
 800b1d6:	602b      	str	r3, [r5, #0]
 800b1d8:	d032      	beq.n	800b240 <__sflush_r+0x98>
 800b1da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	075a      	lsls	r2, r3, #29
 800b1e0:	d505      	bpl.n	800b1ee <__sflush_r+0x46>
 800b1e2:	6863      	ldr	r3, [r4, #4]
 800b1e4:	1ac0      	subs	r0, r0, r3
 800b1e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1e8:	b10b      	cbz	r3, 800b1ee <__sflush_r+0x46>
 800b1ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ec:	1ac0      	subs	r0, r0, r3
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1f4:	6a21      	ldr	r1, [r4, #32]
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b0      	blx	r6
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	d106      	bne.n	800b20e <__sflush_r+0x66>
 800b200:	6829      	ldr	r1, [r5, #0]
 800b202:	291d      	cmp	r1, #29
 800b204:	d82c      	bhi.n	800b260 <__sflush_r+0xb8>
 800b206:	4a2a      	ldr	r2, [pc, #168]	; (800b2b0 <__sflush_r+0x108>)
 800b208:	40ca      	lsrs	r2, r1
 800b20a:	07d6      	lsls	r6, r2, #31
 800b20c:	d528      	bpl.n	800b260 <__sflush_r+0xb8>
 800b20e:	2200      	movs	r2, #0
 800b210:	6062      	str	r2, [r4, #4]
 800b212:	04d9      	lsls	r1, r3, #19
 800b214:	6922      	ldr	r2, [r4, #16]
 800b216:	6022      	str	r2, [r4, #0]
 800b218:	d504      	bpl.n	800b224 <__sflush_r+0x7c>
 800b21a:	1c42      	adds	r2, r0, #1
 800b21c:	d101      	bne.n	800b222 <__sflush_r+0x7a>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b903      	cbnz	r3, 800b224 <__sflush_r+0x7c>
 800b222:	6560      	str	r0, [r4, #84]	; 0x54
 800b224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b226:	602f      	str	r7, [r5, #0]
 800b228:	2900      	cmp	r1, #0
 800b22a:	d0ca      	beq.n	800b1c2 <__sflush_r+0x1a>
 800b22c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <__sflush_r+0x92>
 800b234:	4628      	mov	r0, r5
 800b236:	f7fd fc95 	bl	8008b64 <_free_r>
 800b23a:	2000      	movs	r0, #0
 800b23c:	6360      	str	r0, [r4, #52]	; 0x34
 800b23e:	e7c1      	b.n	800b1c4 <__sflush_r+0x1c>
 800b240:	6a21      	ldr	r1, [r4, #32]
 800b242:	2301      	movs	r3, #1
 800b244:	4628      	mov	r0, r5
 800b246:	47b0      	blx	r6
 800b248:	1c41      	adds	r1, r0, #1
 800b24a:	d1c7      	bne.n	800b1dc <__sflush_r+0x34>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0c4      	beq.n	800b1dc <__sflush_r+0x34>
 800b252:	2b1d      	cmp	r3, #29
 800b254:	d001      	beq.n	800b25a <__sflush_r+0xb2>
 800b256:	2b16      	cmp	r3, #22
 800b258:	d101      	bne.n	800b25e <__sflush_r+0xb6>
 800b25a:	602f      	str	r7, [r5, #0]
 800b25c:	e7b1      	b.n	800b1c2 <__sflush_r+0x1a>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e7ad      	b.n	800b1c4 <__sflush_r+0x1c>
 800b268:	690f      	ldr	r7, [r1, #16]
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	d0a9      	beq.n	800b1c2 <__sflush_r+0x1a>
 800b26e:	0793      	lsls	r3, r2, #30
 800b270:	680e      	ldr	r6, [r1, #0]
 800b272:	bf08      	it	eq
 800b274:	694b      	ldreq	r3, [r1, #20]
 800b276:	600f      	str	r7, [r1, #0]
 800b278:	bf18      	it	ne
 800b27a:	2300      	movne	r3, #0
 800b27c:	eba6 0807 	sub.w	r8, r6, r7
 800b280:	608b      	str	r3, [r1, #8]
 800b282:	f1b8 0f00 	cmp.w	r8, #0
 800b286:	dd9c      	ble.n	800b1c2 <__sflush_r+0x1a>
 800b288:	6a21      	ldr	r1, [r4, #32]
 800b28a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b28c:	4643      	mov	r3, r8
 800b28e:	463a      	mov	r2, r7
 800b290:	4628      	mov	r0, r5
 800b292:	47b0      	blx	r6
 800b294:	2800      	cmp	r0, #0
 800b296:	dc06      	bgt.n	800b2a6 <__sflush_r+0xfe>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b29e:	81a3      	strh	r3, [r4, #12]
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2a4:	e78e      	b.n	800b1c4 <__sflush_r+0x1c>
 800b2a6:	4407      	add	r7, r0
 800b2a8:	eba8 0800 	sub.w	r8, r8, r0
 800b2ac:	e7e9      	b.n	800b282 <__sflush_r+0xda>
 800b2ae:	bf00      	nop
 800b2b0:	20400001 	.word	0x20400001

0800b2b4 <_fflush_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	690b      	ldr	r3, [r1, #16]
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	b913      	cbnz	r3, 800b2c4 <_fflush_r+0x10>
 800b2be:	2500      	movs	r5, #0
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	b118      	cbz	r0, 800b2ce <_fflush_r+0x1a>
 800b2c6:	6983      	ldr	r3, [r0, #24]
 800b2c8:	b90b      	cbnz	r3, 800b2ce <_fflush_r+0x1a>
 800b2ca:	f000 f887 	bl	800b3dc <__sinit>
 800b2ce:	4b14      	ldr	r3, [pc, #80]	; (800b320 <_fflush_r+0x6c>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	d11b      	bne.n	800b30c <_fflush_r+0x58>
 800b2d4:	686c      	ldr	r4, [r5, #4]
 800b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0ef      	beq.n	800b2be <_fflush_r+0xa>
 800b2de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2e0:	07d0      	lsls	r0, r2, #31
 800b2e2:	d404      	bmi.n	800b2ee <_fflush_r+0x3a>
 800b2e4:	0599      	lsls	r1, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_fflush_r+0x3a>
 800b2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ea:	f7ff fce2 	bl	800acb2 <__retarget_lock_acquire_recursive>
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f7ff ff59 	bl	800b1a8 <__sflush_r>
 800b2f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f8:	07da      	lsls	r2, r3, #31
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	d4e0      	bmi.n	800b2c0 <_fflush_r+0xc>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	059b      	lsls	r3, r3, #22
 800b302:	d4dd      	bmi.n	800b2c0 <_fflush_r+0xc>
 800b304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b306:	f7ff fcd5 	bl	800acb4 <__retarget_lock_release_recursive>
 800b30a:	e7d9      	b.n	800b2c0 <_fflush_r+0xc>
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <_fflush_r+0x70>)
 800b30e:	429c      	cmp	r4, r3
 800b310:	d101      	bne.n	800b316 <_fflush_r+0x62>
 800b312:	68ac      	ldr	r4, [r5, #8]
 800b314:	e7df      	b.n	800b2d6 <_fflush_r+0x22>
 800b316:	4b04      	ldr	r3, [pc, #16]	; (800b328 <_fflush_r+0x74>)
 800b318:	429c      	cmp	r4, r3
 800b31a:	bf08      	it	eq
 800b31c:	68ec      	ldreq	r4, [r5, #12]
 800b31e:	e7da      	b.n	800b2d6 <_fflush_r+0x22>
 800b320:	0800bbd4 	.word	0x0800bbd4
 800b324:	0800bbf4 	.word	0x0800bbf4
 800b328:	0800bbb4 	.word	0x0800bbb4

0800b32c <std>:
 800b32c:	2300      	movs	r3, #0
 800b32e:	b510      	push	{r4, lr}
 800b330:	4604      	mov	r4, r0
 800b332:	e9c0 3300 	strd	r3, r3, [r0]
 800b336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b33a:	6083      	str	r3, [r0, #8]
 800b33c:	8181      	strh	r1, [r0, #12]
 800b33e:	6643      	str	r3, [r0, #100]	; 0x64
 800b340:	81c2      	strh	r2, [r0, #14]
 800b342:	6183      	str	r3, [r0, #24]
 800b344:	4619      	mov	r1, r3
 800b346:	2208      	movs	r2, #8
 800b348:	305c      	adds	r0, #92	; 0x5c
 800b34a:	f7fd fc03 	bl	8008b54 <memset>
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <std+0x38>)
 800b350:	6263      	str	r3, [r4, #36]	; 0x24
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <std+0x3c>)
 800b354:	62a3      	str	r3, [r4, #40]	; 0x28
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <std+0x40>)
 800b358:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <std+0x44>)
 800b35c:	6224      	str	r4, [r4, #32]
 800b35e:	6323      	str	r3, [r4, #48]	; 0x30
 800b360:	bd10      	pop	{r4, pc}
 800b362:	bf00      	nop
 800b364:	0800b5f1 	.word	0x0800b5f1
 800b368:	0800b613 	.word	0x0800b613
 800b36c:	0800b64b 	.word	0x0800b64b
 800b370:	0800b66f 	.word	0x0800b66f

0800b374 <_cleanup_r>:
 800b374:	4901      	ldr	r1, [pc, #4]	; (800b37c <_cleanup_r+0x8>)
 800b376:	f000 b8af 	b.w	800b4d8 <_fwalk_reent>
 800b37a:	bf00      	nop
 800b37c:	0800b2b5 	.word	0x0800b2b5

0800b380 <__sfmoreglue>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	1e4a      	subs	r2, r1, #1
 800b384:	2568      	movs	r5, #104	; 0x68
 800b386:	4355      	muls	r5, r2
 800b388:	460e      	mov	r6, r1
 800b38a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b38e:	f7fd fc39 	bl	8008c04 <_malloc_r>
 800b392:	4604      	mov	r4, r0
 800b394:	b140      	cbz	r0, 800b3a8 <__sfmoreglue+0x28>
 800b396:	2100      	movs	r1, #0
 800b398:	e9c0 1600 	strd	r1, r6, [r0]
 800b39c:	300c      	adds	r0, #12
 800b39e:	60a0      	str	r0, [r4, #8]
 800b3a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3a4:	f7fd fbd6 	bl	8008b54 <memset>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}

0800b3ac <__sfp_lock_acquire>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__sfp_lock_acquire+0x8>)
 800b3ae:	f7ff bc80 	b.w	800acb2 <__retarget_lock_acquire_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	20000938 	.word	0x20000938

0800b3b8 <__sfp_lock_release>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__sfp_lock_release+0x8>)
 800b3ba:	f7ff bc7b 	b.w	800acb4 <__retarget_lock_release_recursive>
 800b3be:	bf00      	nop
 800b3c0:	20000938 	.word	0x20000938

0800b3c4 <__sinit_lock_acquire>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__sinit_lock_acquire+0x8>)
 800b3c6:	f7ff bc74 	b.w	800acb2 <__retarget_lock_acquire_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	20000933 	.word	0x20000933

0800b3d0 <__sinit_lock_release>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__sinit_lock_release+0x8>)
 800b3d2:	f7ff bc6f 	b.w	800acb4 <__retarget_lock_release_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	20000933 	.word	0x20000933

0800b3dc <__sinit>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	f7ff fff0 	bl	800b3c4 <__sinit_lock_acquire>
 800b3e4:	69a3      	ldr	r3, [r4, #24]
 800b3e6:	b11b      	cbz	r3, 800b3f0 <__sinit+0x14>
 800b3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ec:	f7ff bff0 	b.w	800b3d0 <__sinit_lock_release>
 800b3f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b3f6:	4b13      	ldr	r3, [pc, #76]	; (800b444 <__sinit+0x68>)
 800b3f8:	4a13      	ldr	r2, [pc, #76]	; (800b448 <__sinit+0x6c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3fe:	42a3      	cmp	r3, r4
 800b400:	bf04      	itt	eq
 800b402:	2301      	moveq	r3, #1
 800b404:	61a3      	streq	r3, [r4, #24]
 800b406:	4620      	mov	r0, r4
 800b408:	f000 f820 	bl	800b44c <__sfp>
 800b40c:	6060      	str	r0, [r4, #4]
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 f81c 	bl	800b44c <__sfp>
 800b414:	60a0      	str	r0, [r4, #8]
 800b416:	4620      	mov	r0, r4
 800b418:	f000 f818 	bl	800b44c <__sfp>
 800b41c:	2200      	movs	r2, #0
 800b41e:	60e0      	str	r0, [r4, #12]
 800b420:	2104      	movs	r1, #4
 800b422:	6860      	ldr	r0, [r4, #4]
 800b424:	f7ff ff82 	bl	800b32c <std>
 800b428:	68a0      	ldr	r0, [r4, #8]
 800b42a:	2201      	movs	r2, #1
 800b42c:	2109      	movs	r1, #9
 800b42e:	f7ff ff7d 	bl	800b32c <std>
 800b432:	68e0      	ldr	r0, [r4, #12]
 800b434:	2202      	movs	r2, #2
 800b436:	2112      	movs	r1, #18
 800b438:	f7ff ff78 	bl	800b32c <std>
 800b43c:	2301      	movs	r3, #1
 800b43e:	61a3      	str	r3, [r4, #24]
 800b440:	e7d2      	b.n	800b3e8 <__sinit+0xc>
 800b442:	bf00      	nop
 800b444:	0800b834 	.word	0x0800b834
 800b448:	0800b375 	.word	0x0800b375

0800b44c <__sfp>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	4607      	mov	r7, r0
 800b450:	f7ff ffac 	bl	800b3ac <__sfp_lock_acquire>
 800b454:	4b1e      	ldr	r3, [pc, #120]	; (800b4d0 <__sfp+0x84>)
 800b456:	681e      	ldr	r6, [r3, #0]
 800b458:	69b3      	ldr	r3, [r6, #24]
 800b45a:	b913      	cbnz	r3, 800b462 <__sfp+0x16>
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff ffbd 	bl	800b3dc <__sinit>
 800b462:	3648      	adds	r6, #72	; 0x48
 800b464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b468:	3b01      	subs	r3, #1
 800b46a:	d503      	bpl.n	800b474 <__sfp+0x28>
 800b46c:	6833      	ldr	r3, [r6, #0]
 800b46e:	b30b      	cbz	r3, 800b4b4 <__sfp+0x68>
 800b470:	6836      	ldr	r6, [r6, #0]
 800b472:	e7f7      	b.n	800b464 <__sfp+0x18>
 800b474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b478:	b9d5      	cbnz	r5, 800b4b0 <__sfp+0x64>
 800b47a:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <__sfp+0x88>)
 800b47c:	60e3      	str	r3, [r4, #12]
 800b47e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b482:	6665      	str	r5, [r4, #100]	; 0x64
 800b484:	f7ff fc14 	bl	800acb0 <__retarget_lock_init_recursive>
 800b488:	f7ff ff96 	bl	800b3b8 <__sfp_lock_release>
 800b48c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b494:	6025      	str	r5, [r4, #0]
 800b496:	61a5      	str	r5, [r4, #24]
 800b498:	2208      	movs	r2, #8
 800b49a:	4629      	mov	r1, r5
 800b49c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4a0:	f7fd fb58 	bl	8008b54 <memset>
 800b4a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b0:	3468      	adds	r4, #104	; 0x68
 800b4b2:	e7d9      	b.n	800b468 <__sfp+0x1c>
 800b4b4:	2104      	movs	r1, #4
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	f7ff ff62 	bl	800b380 <__sfmoreglue>
 800b4bc:	4604      	mov	r4, r0
 800b4be:	6030      	str	r0, [r6, #0]
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1d5      	bne.n	800b470 <__sfp+0x24>
 800b4c4:	f7ff ff78 	bl	800b3b8 <__sfp_lock_release>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	e7ee      	b.n	800b4ac <__sfp+0x60>
 800b4ce:	bf00      	nop
 800b4d0:	0800b834 	.word	0x0800b834
 800b4d4:	ffff0001 	.word	0xffff0001

0800b4d8 <_fwalk_reent>:
 800b4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	4606      	mov	r6, r0
 800b4de:	4688      	mov	r8, r1
 800b4e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4e4:	2700      	movs	r7, #0
 800b4e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ee:	d505      	bpl.n	800b4fc <_fwalk_reent+0x24>
 800b4f0:	6824      	ldr	r4, [r4, #0]
 800b4f2:	2c00      	cmp	r4, #0
 800b4f4:	d1f7      	bne.n	800b4e6 <_fwalk_reent+0xe>
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fc:	89ab      	ldrh	r3, [r5, #12]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d907      	bls.n	800b512 <_fwalk_reent+0x3a>
 800b502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b506:	3301      	adds	r3, #1
 800b508:	d003      	beq.n	800b512 <_fwalk_reent+0x3a>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4630      	mov	r0, r6
 800b50e:	47c0      	blx	r8
 800b510:	4307      	orrs	r7, r0
 800b512:	3568      	adds	r5, #104	; 0x68
 800b514:	e7e9      	b.n	800b4ea <_fwalk_reent+0x12>

0800b516 <__swhatbuf_r>:
 800b516:	b570      	push	{r4, r5, r6, lr}
 800b518:	460e      	mov	r6, r1
 800b51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51e:	2900      	cmp	r1, #0
 800b520:	b096      	sub	sp, #88	; 0x58
 800b522:	4614      	mov	r4, r2
 800b524:	461d      	mov	r5, r3
 800b526:	da07      	bge.n	800b538 <__swhatbuf_r+0x22>
 800b528:	2300      	movs	r3, #0
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	89b3      	ldrh	r3, [r6, #12]
 800b52e:	061a      	lsls	r2, r3, #24
 800b530:	d410      	bmi.n	800b554 <__swhatbuf_r+0x3e>
 800b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b536:	e00e      	b.n	800b556 <__swhatbuf_r+0x40>
 800b538:	466a      	mov	r2, sp
 800b53a:	f000 f8bf 	bl	800b6bc <_fstat_r>
 800b53e:	2800      	cmp	r0, #0
 800b540:	dbf2      	blt.n	800b528 <__swhatbuf_r+0x12>
 800b542:	9a01      	ldr	r2, [sp, #4]
 800b544:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b548:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b54c:	425a      	negs	r2, r3
 800b54e:	415a      	adcs	r2, r3
 800b550:	602a      	str	r2, [r5, #0]
 800b552:	e7ee      	b.n	800b532 <__swhatbuf_r+0x1c>
 800b554:	2340      	movs	r3, #64	; 0x40
 800b556:	2000      	movs	r0, #0
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	b016      	add	sp, #88	; 0x58
 800b55c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b560 <__smakebuf_r>:
 800b560:	898b      	ldrh	r3, [r1, #12]
 800b562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b564:	079d      	lsls	r5, r3, #30
 800b566:	4606      	mov	r6, r0
 800b568:	460c      	mov	r4, r1
 800b56a:	d507      	bpl.n	800b57c <__smakebuf_r+0x1c>
 800b56c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	6123      	str	r3, [r4, #16]
 800b574:	2301      	movs	r3, #1
 800b576:	6163      	str	r3, [r4, #20]
 800b578:	b002      	add	sp, #8
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	ab01      	add	r3, sp, #4
 800b57e:	466a      	mov	r2, sp
 800b580:	f7ff ffc9 	bl	800b516 <__swhatbuf_r>
 800b584:	9900      	ldr	r1, [sp, #0]
 800b586:	4605      	mov	r5, r0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7fd fb3b 	bl	8008c04 <_malloc_r>
 800b58e:	b948      	cbnz	r0, 800b5a4 <__smakebuf_r+0x44>
 800b590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b594:	059a      	lsls	r2, r3, #22
 800b596:	d4ef      	bmi.n	800b578 <__smakebuf_r+0x18>
 800b598:	f023 0303 	bic.w	r3, r3, #3
 800b59c:	f043 0302 	orr.w	r3, r3, #2
 800b5a0:	81a3      	strh	r3, [r4, #12]
 800b5a2:	e7e3      	b.n	800b56c <__smakebuf_r+0xc>
 800b5a4:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <__smakebuf_r+0x7c>)
 800b5a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	6020      	str	r0, [r4, #0]
 800b5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b0:	81a3      	strh	r3, [r4, #12]
 800b5b2:	9b00      	ldr	r3, [sp, #0]
 800b5b4:	6163      	str	r3, [r4, #20]
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	6120      	str	r0, [r4, #16]
 800b5ba:	b15b      	cbz	r3, 800b5d4 <__smakebuf_r+0x74>
 800b5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 f88d 	bl	800b6e0 <_isatty_r>
 800b5c6:	b128      	cbz	r0, 800b5d4 <__smakebuf_r+0x74>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	f043 0301 	orr.w	r3, r3, #1
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	89a0      	ldrh	r0, [r4, #12]
 800b5d6:	4305      	orrs	r5, r0
 800b5d8:	81a5      	strh	r5, [r4, #12]
 800b5da:	e7cd      	b.n	800b578 <__smakebuf_r+0x18>
 800b5dc:	0800b375 	.word	0x0800b375

0800b5e0 <_malloc_usable_size_r>:
 800b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e4:	1f18      	subs	r0, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfbc      	itt	lt
 800b5ea:	580b      	ldrlt	r3, [r1, r0]
 800b5ec:	18c0      	addlt	r0, r0, r3
 800b5ee:	4770      	bx	lr

0800b5f0 <__sread>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f8:	f000 f894 	bl	800b724 <_read_r>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	bfab      	itete	ge
 800b600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b602:	89a3      	ldrhlt	r3, [r4, #12]
 800b604:	181b      	addge	r3, r3, r0
 800b606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b60a:	bfac      	ite	ge
 800b60c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b60e:	81a3      	strhlt	r3, [r4, #12]
 800b610:	bd10      	pop	{r4, pc}

0800b612 <__swrite>:
 800b612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	461f      	mov	r7, r3
 800b618:	898b      	ldrh	r3, [r1, #12]
 800b61a:	05db      	lsls	r3, r3, #23
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	4616      	mov	r6, r2
 800b622:	d505      	bpl.n	800b630 <__swrite+0x1e>
 800b624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b628:	2302      	movs	r3, #2
 800b62a:	2200      	movs	r2, #0
 800b62c:	f000 f868 	bl	800b700 <_lseek_r>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b63a:	81a3      	strh	r3, [r4, #12]
 800b63c:	4632      	mov	r2, r6
 800b63e:	463b      	mov	r3, r7
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	f000 b817 	b.w	800b678 <_write_r>

0800b64a <__sseek>:
 800b64a:	b510      	push	{r4, lr}
 800b64c:	460c      	mov	r4, r1
 800b64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b652:	f000 f855 	bl	800b700 <_lseek_r>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	bf15      	itete	ne
 800b65c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b65e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b666:	81a3      	strheq	r3, [r4, #12]
 800b668:	bf18      	it	ne
 800b66a:	81a3      	strhne	r3, [r4, #12]
 800b66c:	bd10      	pop	{r4, pc}

0800b66e <__sclose>:
 800b66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b672:	f000 b813 	b.w	800b69c <_close_r>
	...

0800b678 <_write_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_write_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f6 fa95 	bl	8001bb6 <_write>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_write_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_write_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	2000092c 	.word	0x2000092c

0800b69c <_close_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d06      	ldr	r5, [pc, #24]	; (800b6b8 <_close_r+0x1c>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7f6 faa1 	bl	8001bee <_close>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_close_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_close_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	2000092c 	.word	0x2000092c

0800b6bc <_fstat_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d07      	ldr	r5, [pc, #28]	; (800b6dc <_fstat_r+0x20>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	f7f6 fa9c 	bl	8001c06 <_fstat>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d102      	bne.n	800b6d8 <_fstat_r+0x1c>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	b103      	cbz	r3, 800b6d8 <_fstat_r+0x1c>
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	bf00      	nop
 800b6dc:	2000092c 	.word	0x2000092c

0800b6e0 <_isatty_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d06      	ldr	r5, [pc, #24]	; (800b6fc <_isatty_r+0x1c>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	f7f6 fa9b 	bl	8001c26 <_isatty>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d102      	bne.n	800b6fa <_isatty_r+0x1a>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	b103      	cbz	r3, 800b6fa <_isatty_r+0x1a>
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	2000092c 	.word	0x2000092c

0800b700 <_lseek_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	; (800b720 <_lseek_r+0x20>)
 800b704:	4604      	mov	r4, r0
 800b706:	4608      	mov	r0, r1
 800b708:	4611      	mov	r1, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	602a      	str	r2, [r5, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	f7f6 fa94 	bl	8001c3c <_lseek>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_lseek_r+0x1e>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_lseek_r+0x1e>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	2000092c 	.word	0x2000092c

0800b724 <_read_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d07      	ldr	r5, [pc, #28]	; (800b744 <_read_r+0x20>)
 800b728:	4604      	mov	r4, r0
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	2200      	movs	r2, #0
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	f7f6 fa22 	bl	8001b7c <_read>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_read_r+0x1e>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_read_r+0x1e>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	2000092c 	.word	0x2000092c

0800b748 <_init>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr

0800b754 <_fini>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr
