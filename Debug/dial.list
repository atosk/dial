
dial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08008ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  08008b58  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  08008bb8  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000134  08008c18  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008c18  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000378b3  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ef2  00000000  00000000  00057a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0005c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  0005e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d960  00000000  00000000  0005fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4dd  00000000  00000000  0009d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016f021  00000000  00000000  000bc87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022b89e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b4  00000000  00000000  0022b8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000134 	.word	0x20000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008a64 	.word	0x08008a64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000138 	.word	0x20000138
 80002d4:	08008a64 	.word	0x08008a64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80005da:	edd7 7a01 	vldr	s15, [r7, #4]
 80005de:	fef8 7a67 	vrinta.f32	s15, s15
 80005e2:	eeb0 0a67 	vmov.f32	s0, s15
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_ZNSt4DialC1Ev>:
#include "my_definitions.h"

namespace std {


Dial::Dial() : m_dial_location (0), m_next_number(0) {} // Constructor
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	711a      	strb	r2, [r3, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZNSt4Dial14CalculateStepsE9Directionhf>:


int Dial::CalculateSteps(enum Direction direction, uint8_t full_turns, float next_number){
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	460b      	mov	r3, r1
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	4613      	mov	r3, r2
 8000626:	72bb      	strb	r3, [r7, #10]
   m_next_number = next_number;
 8000628:	edd7 7a01 	vldr	s15, [r7, #4]
 800062c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000630:	edc7 7a00 	vstr	s15, [r7]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	711a      	strb	r2, [r3, #4]
   float m_dial_temp = 0; // Temporary location to collect dial displacement
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
    * CW  05->95 should return 10*2*MICROSTEP
    *
    */

   // Measure displacement.
   if (direction == CCW) { m_dial_temp = next_number - m_dial_location; }  // CCW
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d109      	bne.n	800065c <_ZNSt4Dial14CalculateStepsE9Directionhf+0x48>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	edd3 7a00 	vldr	s15, [r3]
 800064e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000656:	edc7 7a05 	vstr	s15, [r7, #20]
 800065a:	e008      	b.n	800066e <_ZNSt4Dial14CalculateStepsE9Directionhf+0x5a>
   else { m_dial_temp = m_dial_location - next_number; } // CW
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	ed93 7a00 	vldr	s14, [r3]
 8000662:	edd7 7a01 	vldr	s15, [r7, #4]
 8000666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800066a:	edc7 7a05 	vstr	s15, [r7, #20]

   // Handle zero crossings
   if (m_dial_temp < 0){ m_dial_temp += 100;}
 800066e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067a:	d507      	bpl.n	800068c <_ZNSt4Dial14CalculateStepsE9Directionhf+0x78>
 800067c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000680:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006cc <_ZNSt4Dial14CalculateStepsE9Directionhf+0xb8>
 8000684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000688:	edc7 7a05 	vstr	s15, [r7, #20]

   // Calculate the number of pulses to send with the next stepper move command.

   int foo = round((full_turns + m_dial_temp) * 2 * MICROSTEP);
 800068c:	7abb      	ldrb	r3, [r7, #10]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000696:	edd7 7a05 	vldr	s15, [r7, #20]
 800069a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006a2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80006a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006aa:	eeb0 0a67 	vmov.f32	s0, s15
 80006ae:	f7ff ff8f 	bl	80005d0 <_ZSt5roundf>
 80006b2:	eef0 7a40 	vmov.f32	s15, s0
 80006b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ba:	ee17 3a90 	vmov	r3, s15
 80006be:	613b      	str	r3, [r7, #16]
   return foo;
 80006c0:	693b      	ldr	r3, [r7, #16]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	42c80000 	.word	0x42c80000

080006d0 <_ZNSt4Dial14UpdatePositionEf>:

void Dial::UpdatePosition(float new_position){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	ed87 0a00 	vstr	s0, [r7]
   m_dial_location = new_position;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>:
#include "my_definitions.h"
#include "string.h"

namespace std {

Encoder::Encoder(I2C_HandleTypeDef *HI2Cx, int hyst_mode) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b08a      	sub	sp, #40	; 0x28
 80006f2:	af04      	add	r7, sp, #16
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3314      	adds	r3, #20
 800070c:	2264      	movs	r2, #100	; 0x64
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f008 f8e3 	bl	80088dc <memset>
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	f04f 0200 	mov.w	r2, #0
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2204      	movs	r2, #4
 8000738:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
   m_hi2cx = HI2Cx;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]

   // Read magnet status
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 800074a:	22c8      	movs	r2, #200	; 0xc8
 800074c:	9202      	str	r2, [sp, #8]
 800074e:	2201      	movs	r2, #1
 8000750:	9201      	str	r2, [sp, #4]
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2301      	movs	r3, #1
 8000756:	220b      	movs	r2, #11
 8000758:	216c      	movs	r1, #108	; 0x6c
 800075a:	f002 fa83 	bl	8002c64 <HAL_I2C_Mem_Read>
 800075e:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 1, 200) != HAL_OK) {
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_STATUS,
 800076a:	2b00      	cmp	r3, #0
 800076c:	d004      	beq.n	8000778 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x8a>
      m_status = Read_Error;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2201      	movs	r2, #1
 8000772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000776:	e003      	b.n	8000780 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x92>
   } else m_status = Ready;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

   // Parse magnet status
   if (m_status == Ready){
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000786:	2b00      	cmp	r3, #0
 8000788:	d12b      	bne.n	80007e2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
      // Mask off unnecessary bits
      char reg_status = (m_i2c_receive_buf[0] & (7UL << 3)); // Only bits [5:3] matter for now
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000792:	75fb      	strb	r3, [r7, #23]
      switch (reg_status) {
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2b30      	cmp	r3, #48	; 0x30
 8000798:	d014      	beq.n	80007c4 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xd6>
 800079a:	2b30      	cmp	r3, #48	; 0x30
 800079c:	dc1c      	bgt.n	80007d8 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 800079e:	2b28      	cmp	r3, #40	; 0x28
 80007a0:	d00b      	beq.n	80007ba <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xcc>
 80007a2:	2b28      	cmp	r3, #40	; 0x28
 80007a4:	dc18      	bgt.n	80007d8 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xc2>
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d00f      	beq.n	80007ce <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xe0>
 80007ae:	e013      	b.n	80007d8 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xea>
         case 0:
            m_mag_status = Magnet_Missing;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2204      	movs	r2, #4
 80007b4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007b8:	e013      	b.n	80007e2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 40:
            m_mag_status = Magnet_Too_Strong;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2205      	movs	r2, #5
 80007be:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007c2:	e00e      	b.n	80007e2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 48:
            m_mag_status = Magnet_Too_Weak;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2206      	movs	r2, #6
 80007c8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007cc:	e009      	b.n	80007e2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         case 32:
            m_mag_status = Magnet_OK;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2207      	movs	r2, #7
 80007d2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007d6:	e004      	b.n	80007e2 <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0xf4>
         default:
            m_mag_status = Other_Error;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2203      	movs	r2, #3
 80007dc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            break;
 80007e0:	bf00      	nop
      }
   } // End configuration write
*/

   // record starting angle.
   if (m_status == Ready) {
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d120      	bne.n	800082e <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x140>
      // Get contents of angle register without converting to degrees.
      // This is to limit rounding error
      if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H, I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK){
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3304      	adds	r3, #4
 80007f4:	22c8      	movs	r2, #200	; 0xc8
 80007f6:	9202      	str	r2, [sp, #8]
 80007f8:	2202      	movs	r2, #2
 80007fa:	9201      	str	r2, [sp, #4]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	220e      	movs	r2, #14
 8000802:	216c      	movs	r1, #108	; 0x6c
 8000804:	f002 fa2e 	bl	8002c64 <HAL_I2C_Mem_Read>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	bf14      	ite	ne
 800080e:	2301      	movne	r3, #1
 8000810:	2300      	moveq	r3, #0
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi+0x12e>
            Error_Handler();
 8000818:	f000 fdc0 	bl	800139c <Error_Handler>
         }
      m_starting_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	7952      	ldrb	r2, [r2, #5]
 8000826:	431a      	orrs	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   } // End starting angle

} // End constructor
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZNSt7Encoder11GetLocationEv>:

enum I2C_Status Encoder::GetStatus(){
   return m_status;
}

float Encoder::GetLocation() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af04      	add	r7, sp, #16
 800083e:	6078      	str	r0, [r7, #4]
   // Read angle register
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6818      	ldr	r0, [r3, #0]
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3304      	adds	r3, #4
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000848:	22c8      	movs	r2, #200	; 0xc8
 800084a:	9202      	str	r2, [sp, #8]
 800084c:	2202      	movs	r2, #2
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	220e      	movs	r2, #14
 8000856:	216c      	movs	r1, #108	; 0x6c
 8000858:	f002 fa04 	bl	8002c64 <HAL_I2C_Mem_Read>
 800085c:	4603      	mov	r3, r0
         I2C_MEMADD_SIZE_8BIT, m_i2c_receive_buf, 2, 200) != HAL_OK) {
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf14      	ite	ne
 8000862:	2301      	movne	r3, #1
 8000864:	2300      	moveq	r3, #0
 8000866:	b2db      	uxtb	r3, r3
   if (HAL_I2C_Mem_Read(m_hi2cx, AS5600_ADDR, AS5600_REG_ANGLE_H,
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00a      	beq.n	8000882 <_ZNSt7Encoder11GetLocationEv+0x4a>
      m_angle = -1;
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <_ZNSt7Encoder11GetLocationEv+0x100>)
 8000874:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
      m_status = Read_Error;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000880:	e00c      	b.n	800089c <_ZNSt7Encoder11GetLocationEv+0x64>
   } else {
      m_angle = (m_i2c_receive_buf[0] << 8) | m_i2c_receive_buf[1]; // Concatenate the two bytes
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7952      	ldrb	r2, [r2, #5]
 800088c:	4313      	orrs	r3, r2
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Subtract starting angle and then convert to degrees.
   m_angle = (m_angle - m_starting_angle) * ENCODER_DEGREES_PER_BIT;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008b4:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000920 <_ZNSt7Encoder11GetLocationEv+0xe8>
 80008b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

   // Corrected angle can be negative if starting>new
   if (m_angle < 0) {
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	d509      	bpl.n	80008e6 <_ZNSt7Encoder11GetLocationEv+0xae>
      m_angle += 360; // -60 degrees becomes +300 degrees
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008d8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000928 <_ZNSt7Encoder11GetLocationEv+0xf0>
 80008dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
   }

   // Convert angle to number on face of the dial
   // rounded to nearest tenth
   return (float)(round(10*m_angle/3.6)/10);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008ec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80008f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008f4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000930 <_ZNSt7Encoder11GetLocationEv+0xf8>
 80008f8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80008fc:	eeb0 0b46 	vmov.f64	d0, d6
 8000900:	f007 ff6c 	bl	80087dc <round>
 8000904:	eeb0 6b40 	vmov.f64	d6, d0
 8000908:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800090c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000910:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000914:	eeb0 0a67 	vmov.f32	s0, s15
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	00000000 	.word	0x00000000
 8000924:	3fb68000 	.word	0x3fb68000
 8000928:	00000000 	.word	0x00000000
 800092c:	40768000 	.word	0x40768000
 8000930:	cccccccd 	.word	0xcccccccd
 8000934:	400ccccc 	.word	0x400ccccc
 8000938:	bff00000 	.word	0xbff00000

0800093c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>:
#include "Stepper.h"
#include "my_definitions.h"

namespace std {
// Constructor
StepperMotor::StepperMotor(TIM_TypeDef *TIMx) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
   m_steps_remaining = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
   m_TIMx = TIMx;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	609a      	str	r2, [r3, #8]
   m_flag_move_complete = TRUE;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	711a      	strb	r2, [r3, #4]

}
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZNSt12StepperMotor10UpdateStepEv>:

void StepperMotor::UpdateStep(void) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
   // Called by timer IRQ. It tracks each pulse that has been sent
   m_steps_remaining--;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]

   if (m_steps_remaining == 0) {
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <_ZNSt12StepperMotor10UpdateStepEv+0x20>
      m_flag_move_complete = TRUE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2201      	movs	r2, #1
 800098a:	715a      	strb	r2, [r3, #5]
   }
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_ZNSt12StepperMotor4StopEv>:

void StepperMotor::Stop(void) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
   m_TIMx->CR1 &= ~(TIM_CR1_CEN);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	f022 0201 	bic.w	r2, r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
   m_TIMx->CNT = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
   m_flag_move_complete = FALSE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	715a      	strb	r2, [r3, #5]
   m_status = Stopped;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]

}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_ZNSt12StepperMotor4MoveEi9Direction>:

void StepperMotor::Move(int steps, enum Direction dir) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	4613      	mov	r3, r2
 80009dc:	71fb      	strb	r3, [r7, #7]
   // Writes the stepper direction bit and starts the timer for specified number of steps
   m_steps_remaining = steps;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	601a      	str	r2, [r3, #0]
   m_flag_move_complete = FALSE;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	715a      	strb	r2, [r3, #5]
   m_status = Running;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2201      	movs	r2, #1
 80009ee:	711a      	strb	r2, [r3, #4]

   // Set Stepper motor direction pin
   GPIO_PinState direction;
   if (dir == CW) {
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <_ZNSt12StepperMotor4MoveEi9Direction+0x2c>
      direction = GPIO_PIN_SET;
 80009f6:	2301      	movs	r3, #1
 80009f8:	75fb      	strb	r3, [r7, #23]
 80009fa:	e001      	b.n	8000a00 <_ZNSt12StepperMotor4MoveEi9Direction+0x30>
   } else
      direction = GPIO_PIN_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	75fb      	strb	r3, [r7, #23]
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, direction);
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	461a      	mov	r2, r3
 8000a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <_ZNSt12StepperMotor4MoveEi9Direction+0x60>)
 8000a0a:	f002 f881 	bl	8002b10 <HAL_GPIO_WritePin>

   // Reset the counter and enable counting.
   m_TIMx->CNT = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
   m_TIMx->CR1 |= TIM_CR1_CEN;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f042 0201 	orr.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	58020800 	.word	0x58020800

08000a34 <_ZNSt12StepperMotor6StatusEv>:

StepperStatus StepperMotor::Status(void){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
   return m_status;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZNSt12StepperMotor12MoveCompleteEv>:
   m_TIMx->ARR = period_ms;       // Change the timer period
   m_TIMx->CR1 |= TIM_CR1_CEN;    // Enable the timer

}

uint8_t StepperMotor::MoveComplete() {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
   return m_flag_move_complete;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a72:	eef0 7ae7 	vabs.f32	s15, s15
 8000a76:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b0a2      	sub	sp, #136	; 0x88
 8000a88:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000a8a:	f001 f895 	bl	8001bb8 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 8000a8e:	f000 f86d 	bl	8000b6c <_Z18SystemClock_Configv>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000a92:	f000 fac5 	bl	8001020 <_ZL12MX_GPIO_Initv>
   MX_ETH_Init();
 8000a96:	f000 f8f7 	bl	8000c88 <_ZL11MX_ETH_Initv>
   MX_USART3_UART_Init();
 8000a9a:	f000 fa2b 	bl	8000ef4 <_ZL19MX_USART3_UART_Initv>
   MX_USB_OTG_FS_PCD_Init();
 8000a9e:	f000 fa89 	bl	8000fb4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
   MX_TIM3_Init();
 8000aa2:	f000 f997 	bl	8000dd4 <_ZL12MX_TIM3_Initv>
   MX_I2C1_Init();
 8000aa6:	f000 f947 	bl	8000d38 <_ZL12MX_I2C1_Initv>
   /* USER CODE BEGIN 2 */

   // Timer3 startup
   HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <main+0xd0>)
 8000aae:	f005 f99b 	bl	8005de8 <HAL_TIM_PWM_Start_IT>
   TIM3->CR1 &= ~(TIM_CR1_CEN); // Disable counter
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <main+0xd4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <main+0xd4>)
 8000ab8:	f023 0301 	bic.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]


   // Character buffers
   char msg[100] = { 0 };
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2260      	movs	r2, #96	; 0x60
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 ff06 	bl	80088dc <memset>

   // Stepper
   int newnum = 90; // Next number to spin the dial to
 8000ad0:	235a      	movs	r3, #90	; 0x5a
 8000ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   enum Direction dir = CW; // Direction of dial rotation.
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

   // Encoder
   Encoder = new std::Encoder(&hi2c1, AS5600_HYSTERESIS_1LSB);
 8000adc:	2088      	movs	r0, #136	; 0x88
 8000ade:	f007 fe63 	bl	80087a8 <_Znwj>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	491c      	ldr	r1, [pc, #112]	; (8000b5c <main+0xd8>)
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff fdff 	bl	80006ee <_ZNSt7EncoderC1EP19__I2C_HandleTypeDefi>
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <main+0xdc>)
 8000af2:	601c      	str	r4, [r3, #0]

#if DEBUG ==1
   uint8_t start_message[] = "\r\n\r\n..... Running .....\r\n";
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0xe0>)
 8000af6:	463c      	mov	r4, r7
 8000af8:	461d      	mov	r5, r3
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b02:	c403      	stmia	r4!, {r0, r1}
 8000b04:	8022      	strh	r2, [r4, #0]
   HAL_UART_Transmit(&huart3, start_message, sizeof(start_message), 10);
 8000b06:	4639      	mov	r1, r7
 8000b08:	230a      	movs	r3, #10
 8000b0a:	221a      	movs	r2, #26
 8000b0c:	4816      	ldr	r0, [pc, #88]	; (8000b68 <main+0xe4>)
 8000b0e:	f006 fb27 	bl	8007160 <HAL_UART_Transmit>


// -------------------------------------------------------------------

      // Routine to demo stepper control
      Move_Stepper(dir, 0, newnum);
 8000b12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000b16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fbbb 	bl	8001298 <_Z12Move_Stepper9Directionii>

      if (newnum > 0) {
 8000b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	dd05      	ble.n	8000b36 <main+0xb2>
         newnum -= 10;
 8000b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b2e:	3b0a      	subs	r3, #10
 8000b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b34:	e7ed      	b.n	8000b12 <main+0x8e>
      } else {
         newnum = 90;
 8000b36:	235a      	movs	r3, #90	; 0x5a
 8000b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         if (dir == CCW) {
 8000b3c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d103      	bne.n	8000b4c <main+0xc8>
            dir = CW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000b4a:	e7e2      	b.n	8000b12 <main+0x8e>
         } else
            (dir = CCW);
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      Move_Stepper(dir, 0, newnum);
 8000b52:	e7de      	b.n	8000b12 <main+0x8e>
 8000b54:	20000258 	.word	0x20000258
 8000b58:	40000400 	.word	0x40000400
 8000b5c:	2000020c 	.word	0x2000020c
 8000b60:	20000744 	.word	0x20000744
 8000b64:	08008a7c 	.word	0x08008a7c
 8000b68:	200002a4 	.word	0x200002a4

08000b6c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09c      	sub	sp, #112	; 0x70
 8000b70:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	224c      	movs	r2, #76	; 0x4c
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 feae 	bl	80088dc <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2220      	movs	r2, #32
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f007 fea8 	bl	80088dc <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f002 fd2b 	bl	80035e8 <HAL_PWREx_ConfigSupply>
   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <_Z18SystemClock_Configv+0x114>)
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <_Z18SystemClock_Configv+0x114>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ba2:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <_Z18SystemClock_Configv+0x114>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <_Z18SystemClock_Configv+0x118>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb4:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <_Z18SystemClock_Configv+0x118>)
 8000bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <_Z18SystemClock_Configv+0x118>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

   while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <_Z18SystemClock_Configv+0x118>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d000      	beq.n	8000be2 <_Z18SystemClock_Configv+0x76>
 8000be0:	e7f2      	b.n	8000bc8 <_Z18SystemClock_Configv+0x5c>
   }
   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000be2:	2303      	movs	r3, #3
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
         | RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 24;
 8000c00:	2318      	movs	r3, #24
 8000c02:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	663b      	str	r3, [r7, #96]	; 0x60
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c10:	230c      	movs	r3, #12
 8000c12:	667b      	str	r3, [r7, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66bb      	str	r3, [r7, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fd2b 	bl	800367c <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf14      	ite	ne
 8000c2c:	2301      	movne	r3, #1
 8000c2e:	2300      	moveq	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <_Z18SystemClock_Configv+0xce>
      Error_Handler();
 8000c36:	f000 fbb1 	bl	800139c <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c3a:	233f      	movs	r3, #63	; 0x3f
 8000c3c:	607b      	str	r3, [r7, #4]
         | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
         | RCC_CLOCKTYPE_D1PCLK1;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f91c 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <_Z18SystemClock_Configv+0x10c>
      Error_Handler();
 8000c74:	f000 fb92 	bl	800139c <Error_Handler>
   }
}
 8000c78:	bf00      	nop
 8000c7a:	3770      	adds	r7, #112	; 0x70
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58000400 	.word	0x58000400
 8000c84:	58024800 	.word	0x58024800

08000c88 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
   /* USER CODE END ETH_Init 0 */

   /* USER CODE BEGIN ETH_Init 1 */

   /* USER CODE END ETH_Init 1 */
   heth.Instance = ETH;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000c8e:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <_ZL11MX_ETH_Initv+0xa0>)
 8000c90:	601a      	str	r2, [r3, #0]
   heth.Init.MACAddr[0] = 0x00;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[1] = 0x80;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[2] = 0xE1;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	22e1      	movs	r2, #225	; 0xe1
 8000cac:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[3] = 0x00;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	3303      	adds	r3, #3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[4] = 0x00;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
   heth.Init.MACAddr[5] = 0x00;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	3305      	adds	r3, #5
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	721a      	strb	r2, [r3, #8]
   heth.Init.TxDesc = DMATxDscrTab;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <_ZL11MX_ETH_Initv+0xa4>)
 8000cd6:	60da      	str	r2, [r3, #12]
   heth.Init.RxDesc = DMARxDscrTab;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <_ZL11MX_ETH_Initv+0xa8>)
 8000cdc:	611a      	str	r2, [r3, #16]
   heth.Init.RxBuffLen = 1524;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000ce0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ce4:	615a      	str	r2, [r3, #20]

   /* USER CODE BEGIN MACADDRESS */

   /* USER CODE END MACADDRESS */

   if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000ce6:	480f      	ldr	r0, [pc, #60]	; (8000d24 <_ZL11MX_ETH_Initv+0x9c>)
 8000ce8:	f001 f94c 	bl	8001f84 <HAL_ETH_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL11MX_ETH_Initv+0x78>
      Error_Handler();
 8000cfc:	f000 fb4e 	bl	800139c <Error_Handler>
   }

   memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000d00:	2234      	movs	r2, #52	; 0x34
 8000d02:	2100      	movs	r1, #0
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <_ZL11MX_ETH_Initv+0xac>)
 8000d06:	f007 fde9 	bl	80088dc <memset>
   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <_ZL11MX_ETH_Initv+0xac>)
 8000d0c:	2221      	movs	r2, #33	; 0x21
 8000d0e:	601a      	str	r2, [r3, #0]
         | ETH_TX_PACKETS_FEATURES_CRCPAD;
   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_ZL11MX_ETH_Initv+0xac>)
 8000d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d16:	615a      	str	r2, [r3, #20]
   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <_ZL11MX_ETH_Initv+0xac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
   /* USER CODE BEGIN ETH_Init 2 */

   /* USER CODE END ETH_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000184 	.word	0x20000184
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	200000d4 	.word	0x200000d4
 8000d30:	20000074 	.word	0x20000074
 8000d34:	20000150 	.word	0x20000150

08000d38 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <_ZL12MX_I2C1_Initv+0x94>)
 8000d40:	601a      	str	r2, [r3, #0]
   hi2c1.Init.Timing = 0x10707DBC;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d44:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <_ZL12MX_I2C1_Initv+0x98>)
 8000d46:	605a      	str	r2, [r3, #4]
   hi2c1.Init.OwnAddress1 = 0;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
   hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d72:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d74:	f001 fee6 	bl	8002b44 <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <_ZL12MX_I2C1_Initv+0x54>
      Error_Handler();
 8000d88:	f000 fb08 	bl	800139c <Error_Handler>
   }
   /** Configure Analogue filter
    */
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000d90:	f002 fa4a 	bl	8003228 <HAL_I2CEx_ConfigAnalogFilter>
 8000d94:	4603      	mov	r3, r0
         != HAL_OK) {
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <_ZL12MX_I2C1_Initv+0x70>
      Error_Handler();
 8000da4:	f000 fafa 	bl	800139c <Error_Handler>
   }
   /** Configure Digital filter
    */
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000da8:	2100      	movs	r1, #0
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <_ZL12MX_I2C1_Initv+0x90>)
 8000dac:	f002 fa87 	bl	80032be <HAL_I2CEx_ConfigDigitalFilter>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <_ZL12MX_I2C1_Initv+0x8c>
      Error_Handler();
 8000dc0:	f000 faec 	bl	800139c <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000020c 	.word	0x2000020c
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	10707dbc 	.word	0x10707dbc

08000dd4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN TIM3_Init 0 */

   /* USER CODE END TIM3_Init 0 */

   TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
   TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
   TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

   /* USER CODE BEGIN TIM3_Init 1 */

   /* USER CODE END TIM3_Init 1 */
   htim3.Instance = TIM3;
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <_ZL12MX_TIM3_Initv+0x11c>)
 8000e0a:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 63;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e0e:	223f      	movs	r2, #63	; 0x3f
 8000e10:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e14:	2210      	movs	r2, #16
 8000e16:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 468;
 8000e18:	4b34      	ldr	r3, [pc, #208]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e1a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000e1e:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
   if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000e2c:	482f      	ldr	r0, [pc, #188]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e2e:	f004 ff23 	bl	8005c78 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <_ZL12MX_TIM3_Initv+0x72>
      Error_Handler();
 8000e42:	f000 faab 	bl	800139c <Error_Handler>
   }
   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4826      	ldr	r0, [pc, #152]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e54:	f005 fb46 	bl	80064e4 <HAL_TIM_ConfigClockSource>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_ZL12MX_TIM3_Initv+0x98>
      Error_Handler();
 8000e68:	f000 fa98 	bl	800139c <Error_Handler>
   }
   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000e6c:	481f      	ldr	r0, [pc, #124]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e6e:	f004 ff5a 	bl	8005d26 <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <_ZL12MX_TIM3_Initv+0xb2>
      Error_Handler();
 8000e82:	f000 fa8b 	bl	800139c <Error_Handler>
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e86:	2320      	movs	r3, #32
 8000e88:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4815      	ldr	r0, [pc, #84]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000e96:	f006 f86d 	bl	8006f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_ZL12MX_TIM3_Initv+0xda>
      Error_Handler();
 8000eaa:	f000 fa77 	bl	800139c <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eae:	2360      	movs	r3, #96	; 0x60
 8000eb0:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 40;
 8000eb2:	2328      	movs	r3, #40	; 0x28
 8000eb4:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000ec6:	f005 f9fd 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <_ZL12MX_TIM3_Initv+0x10a>
      Error_Handler();
 8000eda:	f000 fa5f 	bl	800139c <Error_Handler>
   }
   /* USER CODE BEGIN TIM3_Init 2 */

   /* USER CODE END TIM3_Init 2 */
   HAL_TIM_MspPostInit(&htim3);
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <_ZL12MX_TIM3_Initv+0x118>)
 8000ee0:	f000 fc0c 	bl	80016fc <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000258 	.word	0x20000258
 8000ef0:	40000400 	.word	0x40000400

08000ef4 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000efa:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000efc:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000f3c:	481b      	ldr	r0, [pc, #108]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f3e:	f006 f8bf 	bl	80070c0 <HAL_UART_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <_ZL19MX_USART3_UART_Initv+0x62>
      Error_Handler();
 8000f52:	f000 fa23 	bl	800139c <Error_Handler>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f5a:	f007 f89d 	bl	8008098 <HAL_UARTEx_SetTxFifoThreshold>
 8000f5e:	4603      	mov	r3, r0
         != HAL_OK) {
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <_ZL19MX_USART3_UART_Initv+0x7e>
      Error_Handler();
 8000f6e:	f000 fa15 	bl	800139c <Error_Handler>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000f72:	2100      	movs	r1, #0
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f76:	f007 f8cd 	bl	8008114 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7a:	4603      	mov	r3, r0
         != HAL_OK) {
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <_ZL19MX_USART3_UART_Initv+0x9a>
      Error_Handler();
 8000f8a:	f000 fa07 	bl	800139c <Error_Handler>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f90:	f007 f849 	bl	8008026 <HAL_UARTEx_DisableFifoMode>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf14      	ite	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	2300      	moveq	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <_ZL19MX_USART3_UART_Initv+0xb4>
      Error_Handler();
 8000fa4:	f000 f9fa 	bl	800139c <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002a4 	.word	0x200002a4
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
   /* USER CODE END USB_OTG_FS_Init 0 */

   /* USER CODE BEGIN USB_OTG_FS_Init 1 */

   /* USER CODE END USB_OTG_FS_Init 1 */
   hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
   hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fc0:	2209      	movs	r2, #9
 8000fc2:	605a      	str	r2, [r3, #4]
   hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	60da      	str	r2, [r3, #12]
   hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
   hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	619a      	str	r2, [r3, #24]
   hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	61da      	str	r2, [r3, #28]
   hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
   hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
   hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
   hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
   hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
   if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ffc:	f002 f9ab 	bl	8003356 <HAL_PCD_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
      Error_Handler();
 8001010:	f000 f9c4 	bl	800139c <Error_Handler>
   }
   /* USER CODE BEGIN USB_OTG_FS_Init 2 */

   /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000334 	.word	0x20000334
 800101c:	40080000 	.word	0x40080000

08001020 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a6a      	ldr	r2, [pc, #424]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b68      	ldr	r3, [pc, #416]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8001054:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a63      	ldr	r2, [pc, #396]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a5b      	ldr	r2, [pc, #364]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b4e      	ldr	r3, [pc, #312]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a45      	ldr	r2, [pc, #276]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a3d      	ldr	r2, [pc, #244]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f244 0101 	movw	r1, #16385	; 0x4001
 800110e:	4837      	ldr	r0, [pc, #220]	; (80011ec <_ZL12MX_GPIO_Initv+0x1cc>)
 8001110:	f001 fcfe 	bl	8002b10 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <_ZL12MX_GPIO_Initv+0x1d0>)
 800111c:	f001 fcf8 	bl	8002b10 <HAL_GPIO_WritePin>
         GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(DIR_Pin_GPIO_Port, DIR_Pin_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4833      	ldr	r0, [pc, #204]	; (80011f4 <_ZL12MX_GPIO_Initv+0x1d4>)
 8001128:	f001 fcf2 	bl	8002b10 <HAL_GPIO_WritePin>

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	4831      	ldr	r0, [pc, #196]	; (80011f8 <_ZL12MX_GPIO_Initv+0x1d8>)
 8001132:	f001 fced 	bl	8002b10 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : B1_Pin */
   GPIO_InitStruct.Pin = B1_Pin;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	482a      	ldr	r0, [pc, #168]	; (80011f4 <_ZL12MX_GPIO_Initv+0x1d4>)
 800114c:	f001 fb30 	bl	80027b0 <HAL_GPIO_Init>

   /*Configure GPIO pins : LD1_Pin LD3_Pin */
   GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8001150:	f244 0301 	movw	r3, #16385	; 0x4001
 8001154:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4820      	ldr	r0, [pc, #128]	; (80011ec <_ZL12MX_GPIO_Initv+0x1cc>)
 800116a:	f001 fb21 	bl	80027b0 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001188:	f001 fb12 	bl	80027b0 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
   GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <_ZL12MX_GPIO_Initv+0x1dc>)
 8001192:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <_ZL12MX_GPIO_Initv+0x1e0>)
 80011a0:	f001 fb06 	bl	80027b0 <HAL_GPIO_Init>

   /*Configure GPIO pin : DIR_Pin_Pin */
   GPIO_InitStruct.Pin = DIR_Pin_Pin;
 80011a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a8:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(DIR_Pin_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <_ZL12MX_GPIO_Initv+0x1d4>)
 80011be:	f001 faf7 	bl	80027b0 <HAL_GPIO_Init>

   /*Configure GPIO pin : LD2_Pin */
   GPIO_InitStruct.Pin = LD2_Pin;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <_ZL12MX_GPIO_Initv+0x1d8>)
 80011da:	f001 fae9 	bl	80027b0 <HAL_GPIO_Init>

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58020400 	.word	0x58020400
 80011f0:	58020c00 	.word	0x58020c00
 80011f4:	58020800 	.word	0x58020800
 80011f8:	58021000 	.word	0x58021000
 80011fc:	11110000 	.word	0x11110000
 8001200:	58021800 	.word	0x58021800

08001204 <_Z10Stop_TimerP11TIM_TypeDef>:

/* USER CODE BEGIN 4 */

void Stop_Timer(TIM_TypeDef *TIMx) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
   TIMx->CR1 &= ~(TIM_CR1_CEN);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 0201 	bic.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_Z11Start_TimerP11TIM_TypeDef>:
void Start_Timer(TIM_TypeDef *TIMx) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= TIM_CR1_CEN;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

   // !! Only works now because TIM3 is the only PWM timer.
   // !! The complete solution is to check TIM status bits to see
   // !! who issued the interrupt.

   Stop_Timer(TIM3); // Freeze counter at zero
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800124e:	f7ff ffd9 	bl	8001204 <_Z10Stop_TimerP11TIM_TypeDef>

   Stepper->UpdateStep();
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fb88 	bl	800096c <_ZNSt12StepperMotor10UpdateStepEv>
   if (Stepper->MoveComplete()) {
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fbf3 	bl	8000a4c <_ZNSt12StepperMotor12MoveCompleteEv>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
      Stepper->Stop();
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb8c 	bl	8000998 <_ZNSt12StepperMotor4StopEv>
   } else {
      // TODO acceleration stuff here
      Start_Timer(TIM3); // Keep counting
   }

}
 8001280:	e002      	b.n	8001288 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
      Start_Timer(TIM3); // Keep counting
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001284:	f7ff ffce 	bl	8001224 <_Z11Start_TimerP11TIM_TypeDef>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40000400 	.word	0x40000400
 8001294:	2000073c 	.word	0x2000073c

08001298 <_Z12Move_Stepper9Directionii>:

void Move_Stepper(enum Direction dir, int full_turns, int next_number) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	73fb      	strb	r3, [r7, #15]
    * Then it compares the position measured from the Hall Effect sensor to
    * the position given by the move command. If they match, then the dial's position
    * is updated. If they don't match, then we have an error or an open state.
    */

   Stepper->Move(Dial->CalculateSteps(dir, full_turns, next_number), dir);
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <_Z12Move_Stepper9Directionii+0xf0>)
 80012a8:	681c      	ldr	r4, [r3, #0]
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <_Z12Move_Stepper9Directionii+0xf4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	ee07 1a90 	vmov	s15, r1
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	7bf9      	ldrb	r1, [r7, #15]
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f9a6 	bl	8000614 <_ZNSt4Dial14CalculateStepsE9Directionhf>
 80012c8:	4601      	mov	r1, r0
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff fb7e 	bl	80009d0 <_ZNSt12StepperMotor4MoveEi9Direction>
   while (Stepper->Status() == Running) {
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <_Z12Move_Stepper9Directionii+0xf0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fbab 	bl	8000a34 <_ZNSt12StepperMotor6StatusEv>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <_Z12Move_Stepper9Directionii+0x58>
 80012ee:	e7f1      	b.n	80012d4 <_Z12Move_Stepper9Directionii+0x3c>
   } // Wait for move to finish
   HAL_Delay(DELAY_MS); // Brief delay after move to allow mechanical settling.
 80012f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f4:	f000 fcf2 	bl	8001cdc <HAL_Delay>

   // Get actual location from AS5600
   float encoder_location = Encoder->GetLocation();
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <_Z12Move_Stepper9Directionii+0xf8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fa9b 	bl	8000838 <_ZNSt7Encoder11GetLocationEv>
 8001302:	ed87 0a04 	vstr	s0, [r7, #16]
   float position_error;

   // Get difference between expected and actual locations
   if ((next_number == 0) && (encoder_location > 50)) { // Error between 0 and 99.8 is only 0.2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <_Z12Move_Stepper9Directionii+0x98>
 800130c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001310:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001394 <_Z12Move_Stepper9Directionii+0xfc>
 8001314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	dd08      	ble.n	8001330 <_Z12Move_Stepper9Directionii+0x98>
      position_error = 100 - encoder_location;
 800131e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001398 <_Z12Move_Stepper9Directionii+0x100>
 8001322:	edd7 7a04 	vldr	s15, [r7, #16]
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc7 7a05 	vstr	s15, [r7, #20]
 800132e:	e00a      	b.n	8001346 <_Z12Move_Stepper9Directionii+0xae>
   } else {
      position_error = next_number - encoder_location;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	edc7 7a05 	vstr	s15, [r7, #20]
   }

   // Update dial location.
   if (abs(position_error) < 0.5) { // Expected and measured are in agreement.
 8001346:	ed97 0a05 	vldr	s0, [r7, #20]
 800134a:	f7ff fb8b 	bl	8000a64 <_ZSt3absf>
 800134e:	eef0 7a40 	vmov.f32	s15, s0
 8001352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	bf4c      	ite	mi
 8001360:	2301      	movmi	r3, #1
 8001362:	2300      	movpl	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <_Z12Move_Stepper9Directionii+0xe2>
      Dial->UpdatePosition(encoder_location); // Record error so it doesn't snowball.
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <_Z12Move_Stepper9Directionii+0xf4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f9ac 	bl	80006d0 <_ZNSt4Dial14UpdatePositionEf>
   } else {
      // TODO if testing for open, then do happy dance. Else error.
      Error_Handler();
   }

}
 8001378:	e001      	b.n	800137e <_Z12Move_Stepper9Directionii+0xe6>
      Error_Handler();
 800137a:	f000 f80f 	bl	800139c <Error_Handler>
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	2000073c 	.word	0x2000073c
 800138c:	20000740 	.word	0x20000740
 8001390:	20000744 	.word	0x20000744
 8001394:	42480000 	.word	0x42480000
 8001398:	42c80000 	.word	0x42c80000

0800139c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1) {
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE END Error_Handler_Debug */
}
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d119      	bne.n	80013ec <_Z41__static_initialization_and_destruction_0ii+0x44>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	4293      	cmp	r3, r2
 80013c0:	d114      	bne.n	80013ec <_Z41__static_initialization_and_destruction_0ii+0x44>
std::StepperMotor *Stepper = new std::StepperMotor(TIM3);
 80013c2:	200c      	movs	r0, #12
 80013c4:	f007 f9f0 	bl	80087a8 <_Znwj>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461c      	mov	r4, r3
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fab4 	bl	800093c <_ZNSt12StepperMotorC1EP11TIM_TypeDef>
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80013d6:	601c      	str	r4, [r3, #0]
std::Dial *Dial = new std::Dial();
 80013d8:	2008      	movs	r0, #8
 80013da:	f007 f9e5 	bl	80087a8 <_Znwj>
 80013de:	4603      	mov	r3, r0
 80013e0:	461c      	mov	r4, r3
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff f904 	bl	80005f0 <_ZNSt4DialC1Ev>
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80013ea:	601c      	str	r4, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	40000400 	.word	0x40000400
 80013f8:	2000073c 	.word	0x2000073c
 80013fc:	20000740 	.word	0x20000740

08001400 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
 8001404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ffcd 	bl	80013a8 <_Z41__static_initialization_and_destruction_0ii>
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_MspInit+0x30>)
 8001418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x30>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x30>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	58024400 	.word	0x58024400

08001444 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a59      	ldr	r2, [pc, #356]	; (80015c8 <HAL_ETH_MspInit+0x184>)
 8001462:	4293      	cmp	r3, r2
 8001464:	f040 80ab 	bne.w	80015be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <HAL_ETH_MspInit+0x188>)
 800146a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146e:	4a57      	ldr	r2, [pc, #348]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001478:	4b54      	ldr	r3, [pc, #336]	; (80015cc <HAL_ETH_MspInit+0x188>)
 800147a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001486:	4b51      	ldr	r3, [pc, #324]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_ETH_MspInit+0x188>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001496:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014aa:	4a48      	ldr	r2, [pc, #288]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a40      	ldr	r2, [pc, #256]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a39      	ldr	r2, [pc, #228]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_ETH_MspInit+0x188>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	4a31      	ldr	r2, [pc, #196]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_ETH_MspInit+0x188>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <HAL_ETH_MspInit+0x188>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_ETH_MspInit+0x188>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800153a:	2332      	movs	r3, #50	; 0x32
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154a:	230b      	movs	r3, #11
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	481e      	ldr	r0, [pc, #120]	; (80015d0 <HAL_ETH_MspInit+0x18c>)
 8001556:	f001 f92b 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800155a:	2386      	movs	r3, #134	; 0x86
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156a:	230b      	movs	r3, #11
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4817      	ldr	r0, [pc, #92]	; (80015d4 <HAL_ETH_MspInit+0x190>)
 8001576:	f001 f91b 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158c:	230b      	movs	r3, #11
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4810      	ldr	r0, [pc, #64]	; (80015d8 <HAL_ETH_MspInit+0x194>)
 8001598:	f001 f90a 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800159c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ae:	230b      	movs	r3, #11
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_ETH_MspInit+0x198>)
 80015ba:	f001 f8f9 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	; 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40028000 	.word	0x40028000
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	58020000 	.word	0x58020000
 80015d8:	58020400 	.word	0x58020400
 80015dc:	58021800 	.word	0x58021800

080015e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b8      	sub	sp, #224	; 0xe0
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	22bc      	movs	r2, #188	; 0xbc
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f007 f96b 	bl	80088dc <memset>
  if(hi2c->Instance==I2C1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_I2C_MspInit+0xc0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d142      	bne.n	8001696 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001610:	2308      	movs	r3, #8
 8001612:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4618      	mov	r0, r3
 8001620:	f002 ffc8 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800162a:	f7ff feb7 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001654:	2312      	movs	r3, #18
 8001656:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_I2C_MspInit+0xc8>)
 8001674:	f001 f89c 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 800167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_I2C_MspInit+0xc4>)
 800168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	37e0      	adds	r7, #224	; 0xe0
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40005400 	.word	0x40005400
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58020400 	.word	0x58020400

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_TIM_Base_MspInit+0x48>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d116      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	201d      	movs	r0, #29
 80016e2:	f000 fc1a 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e6:	201d      	movs	r0, #29
 80016e8:	f000 fc31 	bl	8001f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40000400 	.word	0x40000400
 80016f8:	58024400 	.word	0x58024400

080016fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <HAL_TIM_MspPostInit+0x6c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d11f      	bne.n	800175e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_TIM_MspPostInit+0x70>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_TIM_MspPostInit+0x70>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_TIM_MspPostInit+0x70>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin_Pin;
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_Pin_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_TIM_MspPostInit+0x74>)
 800175a:	f001 f829 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40000400 	.word	0x40000400
 800176c:	58024400 	.word	0x58024400
 8001770:	58020800 	.word	0x58020800

08001774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b8      	sub	sp, #224	; 0xe0
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	22bc      	movs	r2, #188	; 0xbc
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f007 f8a1 	bl	80088dc <memset>
  if(huart->Instance==USART3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_UART_MspInit+0xc0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d142      	bne.n	800182a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017a4:	2302      	movs	r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fefe 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017be:	f7ff fded 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_UART_MspInit+0xc4>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_UART_MspInit+0xc8>)
 8001826:	f000 ffc3 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	37e0      	adds	r7, #224	; 0xe0
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40004800 	.word	0x40004800
 8001838:	58024400 	.word	0x58024400
 800183c:	58020c00 	.word	0x58020c00

08001840 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b8      	sub	sp, #224	; 0xe0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	22bc      	movs	r2, #188	; 0xbc
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f007 f83b 	bl	80088dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_PCD_MspInit+0xe8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d156      	bne.n	800191e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001870:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001874:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001876:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800187a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fe96 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800188e:	f7ff fd85 	bl	800139c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001892:	f001 fee3 	bl	800365c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <HAL_PCD_MspInit+0xec>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_PCD_MspInit+0xec>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018b4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80018b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018ce:	230a      	movs	r3, #10
 80018d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d8:	4619      	mov	r1, r3
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018dc:	f000 ff68 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018fc:	f000 ff58 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001908:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800190c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	37e0      	adds	r7, #224	; 0xe0
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40080000 	.word	0x40080000
 800192c:	58024400 	.word	0x58024400
 8001930:	58020000 	.word	0x58020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f98c 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM3_IRQHandler+0x10>)
 800198e:	f004 fb79 	bl	8006084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000258 	.word	0x20000258

0800199c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_kill>:

int _kill(int pid, int sig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019b6:	f006 ff5f 	bl	8008878 <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2216      	movs	r2, #22
 80019be:	601a      	str	r2, [r3, #0]
	return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_exit>:

void _exit (int status)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffe7 	bl	80019ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80019de:	e7fe      	b.n	80019de <_exit+0x12>

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f006 ff32 	bl	8008878 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20020000 	.word	0x20020000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000748 	.word	0x20000748
 8001a48:	20000770 	.word	0x20000770

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <SystemInit+0xec>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <SystemInit+0xec>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <SystemInit+0xf0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d807      	bhi.n	8001a7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <SystemInit+0xf0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 030f 	bic.w	r3, r3, #15
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <SystemInit+0xf0>)
 8001a76:	f043 0307 	orr.w	r3, r3, #7
 8001a7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <SystemInit+0xf4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <SystemInit+0xf4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <SystemInit+0xf4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <SystemInit+0xf4>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	492b      	ldr	r1, [pc, #172]	; (8001b40 <SystemInit+0xf4>)
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <SystemInit+0xf8>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <SystemInit+0xf0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <SystemInit+0xf0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 030f 	bic.w	r3, r3, #15
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <SystemInit+0xf0>)
 8001ab0:	f043 0307 	orr.w	r3, r3, #7
 8001ab4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <SystemInit+0xf4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <SystemInit+0xf4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <SystemInit+0xf4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <SystemInit+0xf4>)
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <SystemInit+0xfc>)
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <SystemInit+0xf4>)
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <SystemInit+0x100>)
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <SystemInit+0xf4>)
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <SystemInit+0x104>)
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <SystemInit+0xf4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <SystemInit+0xf4>)
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <SystemInit+0x104>)
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <SystemInit+0xf4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <SystemInit+0xf4>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <SystemInit+0x104>)
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <SystemInit+0xf4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <SystemInit+0xf4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <SystemInit+0xf4>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <SystemInit+0xf4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <SystemInit+0x108>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0x10c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b16:	d202      	bcs.n	8001b1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <SystemInit+0x110>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <SystemInit+0x114>)
 8001b20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SystemInit+0xec>)
 8001b28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	52002000 	.word	0x52002000
 8001b40:	58024400 	.word	0x58024400
 8001b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b48:	02020200 	.word	0x02020200
 8001b4c:	01ff0000 	.word	0x01ff0000
 8001b50:	01010280 	.word	0x01010280
 8001b54:	5c001000 	.word	0x5c001000
 8001b58:	ffff0000 	.word	0xffff0000
 8001b5c:	51008108 	.word	0x51008108
 8001b60:	52004000 	.word	0x52004000

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b68:	f7ff ff70 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f006 fe77 	bl	8008884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe ff75 	bl	8000a84 <main>
  bx  lr
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ba8:	08008ae4 	.word	0x08008ae4
  ldr r2, =_sbss
 8001bac:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001bb0:	2000076c 	.word	0x2000076c

08001bb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC3_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f000 f9a0 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bc4:	f002 fb20 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_Init+0x68>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	4913      	ldr	r1, [pc, #76]	; (8001c24 <HAL_Init+0x6c>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_Init+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_Init+0x6c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_Init+0x70>)
 8001bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_Init+0x74>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f814 	bl	8001c30 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e002      	b.n	8001c18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c12:	f7ff fbfd 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58024400 	.word	0x58024400
 8001c24:	08008a98 	.word	0x08008a98
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_InitTick+0x60>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e021      	b.n	8001c88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_InitTick+0x64>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_InitTick+0x60>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f985 	bl	8001f6a <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f000 f94f 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x68>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	20000758 	.word	0x20000758

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000758 	.word	0x20000758

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000000c 	.word	0x2000000c

08001d24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetREVID+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	5c001000 	.word	0x5c001000

08001d3c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d4c:	4904      	ldr	r1, [pc, #16]	; (8001d60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	58000400 	.word	0x58000400

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	05fa0000 	.word	0x05fa0000

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff40 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff90 	bl	8001e58 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5f 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff33 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa4 	bl	8001ec0 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0c6      	b.n	8002124 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fa50 	bl	8001444 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2223      	movs	r2, #35	; 0x23
 8001fa8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b60      	ldr	r3, [pc, #384]	; (800212c <HAL_ETH_Init+0x1a8>)
 8001fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb0:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_ETH_Init+0x1a8>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_ETH_Init+0x1a8>)
 8001fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7a1b      	ldrb	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff feb3 	bl	8001d3c <HAL_SYSCFG_ETHInterfaceSelect>
 8001fd6:	e003      	b.n	8001fe0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001fd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001fdc:	f7ff feae 	bl	8001d3c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7ff fe64 	bl	8001cc4 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ffe:	e00f      	b.n	8002020 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002000:	f7ff fe60 	bl	8001cc4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800200e:	d907      	bls.n	8002020 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	22e0      	movs	r2, #224	; 0xe0
 800201a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e081      	b.n	8002124 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e6      	bne.n	8002000 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fac0 	bl	80025b8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002038:	f002 fa60 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800203c:	4603      	mov	r3, r0
 800203e:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <HAL_ETH_Init+0x1ac>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9a      	lsrs	r2, r3, #18
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3a01      	subs	r2, #1
 800204c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fa13 	bl	800247c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800206c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002070:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	22e0      	movs	r2, #224	; 0xe0
 8002088:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e04a      	b.n	8002124 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f241 1308 	movw	r3, #4360	; 0x1108
 8002096:	4413      	add	r3, r2
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_ETH_Init+0x1b0>)
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6952      	ldr	r2, [r2, #20]
 80020a2:	0052      	lsls	r2, r2, #1
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80020ae:	440b      	add	r3, r1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fad8 	bl	8002668 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fb1c 	bl	80026f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	3305      	adds	r3, #5
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	3303      	adds	r3, #3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	061a      	lsls	r2, r3, #24
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	3302      	adds	r3, #2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800210a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800210c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2210      	movs	r2, #16
 800211a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2210      	movs	r2, #16
 8002120:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024400 	.word	0x58024400
 8002130:	431bde83 	.word	0x431bde83
 8002134:	ffff8001 	.word	0xffff8001

08002138 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800214a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002152:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	7b1b      	ldrb	r3, [r3, #12]
 8002158:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800215a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	7b5b      	ldrb	r3, [r3, #13]
 8002160:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002162:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	7b9b      	ldrb	r3, [r3, #14]
 8002168:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800216a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	7bdb      	ldrb	r3, [r3, #15]
 8002170:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002172:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	7c12      	ldrb	r2, [r2, #16]
 8002178:	2a00      	cmp	r2, #0
 800217a:	d102      	bne.n	8002182 <ETH_SetMACConfig+0x4a>
 800217c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002180:	e000      	b.n	8002184 <ETH_SetMACConfig+0x4c>
 8002182:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002184:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	7c52      	ldrb	r2, [r2, #17]
 800218a:	2a00      	cmp	r2, #0
 800218c:	d102      	bne.n	8002194 <ETH_SetMACConfig+0x5c>
 800218e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002192:	e000      	b.n	8002196 <ETH_SetMACConfig+0x5e>
 8002194:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002196:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7c9b      	ldrb	r3, [r3, #18]
 800219c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800219e:	431a      	orrs	r2, r3
                                macconf->Speed |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80021a4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80021aa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80021b2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7f5b      	ldrb	r3, [r3, #29]
 80021b8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80021ba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	7f92      	ldrb	r2, [r2, #30]
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	d102      	bne.n	80021ca <ETH_SetMACConfig+0x92>
 80021c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c8:	e000      	b.n	80021cc <ETH_SetMACConfig+0x94>
 80021ca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80021cc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7fdb      	ldrb	r3, [r3, #31]
 80021d2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80021d4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021dc:	2a00      	cmp	r2, #0
 80021de:	d102      	bne.n	80021e6 <ETH_SetMACConfig+0xae>
 80021e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e4:	e000      	b.n	80021e8 <ETH_SetMACConfig+0xb0>
 80021e6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80021e8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80021ee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021f6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80021f8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <ETH_SetMACConfig+0x22c>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	430b      	orrs	r3, r1
 8002214:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002222:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002224:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800222e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002236:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002238:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002240:	2a00      	cmp	r2, #0
 8002242:	d102      	bne.n	800224a <ETH_SetMACConfig+0x112>
 8002244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002248:	e000      	b.n	800224c <ETH_SetMACConfig+0x114>
 800224a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800224c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <ETH_SetMACConfig+0x230>)
 800225e:	4013      	ands	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	430b      	orrs	r3, r1
 8002268:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002270:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <ETH_SetMACConfig+0x234>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	68f9      	ldr	r1, [r7, #12]
 800228a:	430b      	orrs	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002294:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800229a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d101      	bne.n	80022aa <ETH_SetMACConfig+0x172>
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	e000      	b.n	80022ac <ETH_SetMACConfig+0x174>
 80022aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022ac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80022c2:	4013      	ands	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80022d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f023 0103 	bic.w	r1, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002302:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800231e:	2a00      	cmp	r2, #0
 8002320:	d101      	bne.n	8002326 <ETH_SetMACConfig+0x1ee>
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	e000      	b.n	8002328 <ETH_SetMACConfig+0x1f0>
 8002326:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002328:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002330:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002332:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800233a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002348:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	00048083 	.word	0x00048083
 8002368:	c0f88000 	.word	0xc0f88000
 800236c:	fffffef0 	.word	0xfffffef0

08002370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <ETH_SetDMAConfig+0xf8>)
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	431a      	orrs	r2, r3
 8002392:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002396:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
 80023a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80023b6:	4413      	add	r3, r2
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b2c      	ldr	r3, [pc, #176]	; (800246c <ETH_SetDMAConfig+0xfc>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6811      	ldr	r1, [r2, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <ETH_SetDMAConfig+0x100>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6811      	ldr	r1, [r2, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80023f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002402:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7f5b      	ldrb	r3, [r3, #29]
 8002408:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f241 1304 	movw	r3, #4356	; 0x1104
 8002416:	4413      	add	r3, r2
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <ETH_SetDMAConfig+0x104>)
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6811      	ldr	r1, [r2, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	431a      	orrs	r2, r3
 8002426:	f241 1304 	movw	r3, #4356	; 0x1104
 800242a:	440b      	add	r3, r1
 800242c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f241 1308 	movw	r3, #4360	; 0x1108
 8002444:	4413      	add	r3, r2
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <ETH_SetDMAConfig+0x108>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6811      	ldr	r1, [r2, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	431a      	orrs	r2, r3
 8002454:	f241 1308 	movw	r3, #4360	; 0x1108
 8002458:	440b      	add	r3, r1
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	ffff87fd 	.word	0xffff87fd
 800246c:	ffff2ffe 	.word	0xffff2ffe
 8002470:	fffec000 	.word	0xfffec000
 8002474:	ffc0efef 	.word	0xffc0efef
 8002478:	7fc0ffff 	.word	0x7fc0ffff

0800247c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0a4      	sub	sp, #144	; 0x90
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800248a:	2300      	movs	r3, #0
 800248c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80024d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80024f6:	2300      	movs	r3, #0
 80024f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80024fe:	2300      	movs	r3, #0
 8002500:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002514:	2320      	movs	r3, #32
 8002516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002526:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800252c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002530:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002556:	2300      	movs	r3, #0
 8002558:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fde6 	bl	8002138 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002586:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800258a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800259c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fee1 	bl	8002370 <ETH_SetDMAConfig>
}
 80025ae:	bf00      	nop
 80025b0:	3790      	adds	r7, #144	; 0x90
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025d2:	f001 ff93 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 80025d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d908      	bls.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d804      	bhi.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e027      	b.n	8002642 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4a18      	ldr	r2, [pc, #96]	; (8002658 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d908      	bls.n	800260c <ETH_MAC_MDIO_ClkConfig+0x54>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4a17      	ldr	r2, [pc, #92]	; (800265c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d204      	bcs.n	800260c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e01a      	b.n	8002642 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4a13      	ldr	r2, [pc, #76]	; (800265c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d303      	bcc.n	800261c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d911      	bls.n	8002640 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d908      	bls.n	8002636 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d804      	bhi.n	8002636 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e005      	b.n	8002642 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e000      	b.n	8002642 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002640:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	01312cff 	.word	0x01312cff
 8002658:	02160ebf 	.word	0x02160ebf
 800265c:	03938700 	.word	0x03938700
 8002660:	05f5e0ff 	.word	0x05f5e0ff
 8002664:	08f0d17f 	.word	0x08f0d17f

08002668 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e01d      	b.n	80026b2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68d9      	ldr	r1, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	3206      	adds	r2, #6
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d9de      	bls.n	8002676 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f241 132c 	movw	r3, #4396	; 0x112c
 80026c6:	4413      	add	r3, r2
 80026c8:	2203      	movs	r2, #3
 80026ca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f241 1314 	movw	r3, #4372	; 0x1114
 80026d8:	4413      	add	r3, r2
 80026da:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e024      	b.n	800274e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3310      	adds	r3, #16
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d9d7      	bls.n	8002704 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f241 1330 	movw	r3, #4400	; 0x1130
 800277a:	4413      	add	r3, r2
 800277c:	2203      	movs	r2, #3
 800277e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f241 131c 	movw	r3, #4380	; 0x111c
 800278c:	4413      	add	r3, r2
 800278e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f241 1328 	movw	r3, #4392	; 0x1128
 80027a0:	4413      	add	r3, r2
 80027a2:	6019      	str	r1, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027be:	4b89      	ldr	r3, [pc, #548]	; (80029e4 <HAL_GPIO_Init+0x234>)
 80027c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c2:	e194      	b.n	8002aee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8186 	beq.w	8002ae8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00b      	beq.n	80027fc <HAL_GPIO_Init+0x4c>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d007      	beq.n	80027fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f0:	2b11      	cmp	r3, #17
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002832:	2201      	movs	r2, #1
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0xee>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b12      	cmp	r3, #18
 800289c:	d123      	bne.n	80028e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	08da      	lsrs	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3208      	adds	r2, #8
 80028e0:	69b9      	ldr	r1, [r7, #24]
 80028e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80e0 	beq.w	8002ae8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_GPIO_Init+0x238>)
 800292a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800292e:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_GPIO_Init+0x238>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_GPIO_Init+0x238>)
 800293a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <HAL_GPIO_Init+0x23c>)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_GPIO_Init+0x240>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d052      	beq.n	8002a18 <HAL_GPIO_Init+0x268>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_GPIO_Init+0x244>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_GPIO_Init+0x22e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <HAL_GPIO_Init+0x248>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02b      	beq.n	80029da <HAL_GPIO_Init+0x22a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_GPIO_Init+0x24c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d025      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_GPIO_Init+0x250>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_GPIO_Init+0x254>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d019      	beq.n	80029ce <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_GPIO_Init+0x258>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_GPIO_Init+0x21a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_GPIO_Init+0x25c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00d      	beq.n	80029c6 <HAL_GPIO_Init+0x216>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <HAL_GPIO_Init+0x260>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x212>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <HAL_GPIO_Init+0x264>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_GPIO_Init+0x20e>
 80029ba:	2309      	movs	r3, #9
 80029bc:	e02d      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029be:	230a      	movs	r3, #10
 80029c0:	e02b      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e029      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029c6:	2307      	movs	r3, #7
 80029c8:	e027      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e025      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e023      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e021      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e01f      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029da:	2302      	movs	r3, #2
 80029dc:	e01d      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e01b      	b.n	8002a1a <HAL_GPIO_Init+0x26a>
 80029e2:	bf00      	nop
 80029e4:	58000080 	.word	0x58000080
 80029e8:	58024400 	.word	0x58024400
 80029ec:	58000400 	.word	0x58000400
 80029f0:	58020000 	.word	0x58020000
 80029f4:	58020400 	.word	0x58020400
 80029f8:	58020800 	.word	0x58020800
 80029fc:	58020c00 	.word	0x58020c00
 8002a00:	58021000 	.word	0x58021000
 8002a04:	58021400 	.word	0x58021400
 8002a08:	58021800 	.word	0x58021800
 8002a0c:	58021c00 	.word	0x58021c00
 8002a10:	58022000 	.word	0x58022000
 8002a14:	58022400 	.word	0x58022400
 8002a18:	2300      	movs	r3, #0
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2a:	4938      	ldr	r1, [pc, #224]	; (8002b0c <HAL_GPIO_Init+0x35c>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f ae63 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3724      	adds	r7, #36	; 0x24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	58000400 	.word	0x58000400

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fd38 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	e006      	b.n	8002bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d104      	bne.n	8002bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_I2C_Init+0x11c>)
 8002bea:	430b      	orrs	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	ea42 0103 	orr.w	r1, r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	021a      	lsls	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	02008000 	.word	0x02008000

08002c64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 80fd 	bne.w	8002e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x34>
 8002c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0f1      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Read+0x4e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ea      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cba:	f7ff f803 	bl	8001cc4 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f95b 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d5      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	88f8      	ldrh	r0, [r7, #6]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f8bf 	bl	8002e98 <I2C_RequestMemoryRead>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0ad      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa3d 	bl	80031cc <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa2c 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f902 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07c      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d034      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d130      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f8d3 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04d      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f9dd 	bl	80031cc <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f9cc 	bl	80031cc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d19a      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f920 	bl	8003088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e01a      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2220      	movs	r2, #32
 8002e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_I2C_Mem_Read+0x230>)
 8002e66:	400b      	ands	r3, r1
 8002e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	80002400 	.word	0x80002400
 8002e94:	fe00e800 	.word	0xfe00e800

08002e98 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	8979      	ldrh	r1, [r7, #10]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <I2C_RequestMemoryRead+0xa4>)
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f984 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	69b9      	ldr	r1, [r7, #24]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f89d 	bl	8003008 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e02c      	b.n	8002f32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee8:	e015      	b.n	8002f16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eea:	893b      	ldrh	r3, [r7, #8]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	69b9      	ldr	r1, [r7, #24]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f883 	bl	8003008 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e012      	b.n	8002f32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f831 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	80002000 	.word	0x80002000

08002f40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d103      	bne.n	8002f5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d007      	beq.n	8002f7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	619a      	str	r2, [r3, #24]
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f98:	e022      	b.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa0:	d01e      	beq.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe fe8f 	bl	8001cc4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e00f      	b.n	8003000 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d0cd      	beq.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003014:	e02c      	b.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f870 	bl	8003100 <I2C_IsAcknowledgeFailed>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02a      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d01e      	beq.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fe47 	bl	8001cc4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d1cb      	bne.n	8003016 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e028      	b.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f830 	bl	8003100 <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e026      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fe0b 	bl	8001cc4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d1cf      	bne.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d151      	bne.n	80031be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311a:	e022      	b.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003122:	d01e      	beq.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe fdce 	bl	8001cc4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_IsAcknowledgeFailed+0x3a>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d113      	bne.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02e      	b.n	80031c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d1d5      	bne.n	800311c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2220      	movs	r2, #32
 800317e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff fedd 	bl	8002f40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	fe00e800 	.word	0xfe00e800

080031cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	4613      	mov	r3, r2
 80031dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	0d5b      	lsrs	r3, r3, #21
 80031e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <I2C_TransferConfig+0x58>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	43db      	mvns	r3, r3
 80031f2:	ea02 0103 	and.w	r1, r2, r3
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031fc:	7a7b      	ldrb	r3, [r7, #9]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	03ff63ff 	.word	0x03ff63ff

08003228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	d138      	bne.n	80032b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003248:	2302      	movs	r3, #2
 800324a:	e032      	b.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800327a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d139      	bne.n	8003348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032de:	2302      	movs	r3, #2
 80032e0:	e033      	b.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003358:	b08f      	sub	sp, #60	; 0x3c
 800335a:	af0a      	add	r7, sp, #40	; 0x28
 800335c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e116      	b.n	8003596 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe fa5c 	bl	8001840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2203      	movs	r2, #3
 800338c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 ffae 	bl	8008308 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	687e      	ldr	r6, [r7, #4]
 80033b4:	466d      	mov	r5, sp
 80033b6:	f106 0410 	add.w	r4, r6, #16
 80033ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ca:	1d33      	adds	r3, r6, #4
 80033cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	f004 ff2c 	bl	800822c <USB_CoreInit>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0d7      	b.n	8003596 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 ff9c 	bl	800832a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e04a      	b.n	800348e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	333d      	adds	r3, #61	; 0x3d
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	333c      	adds	r3, #60	; 0x3c
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	b298      	uxth	r0, r3
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3342      	adds	r3, #66	; 0x42
 8003434:	4602      	mov	r2, r0
 8003436:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	333f      	adds	r3, #63	; 0x3f
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3344      	adds	r3, #68	; 0x44
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	3348      	adds	r3, #72	; 0x48
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3350      	adds	r3, #80	; 0x50
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d3af      	bcc.n	80033f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e044      	b.n	8003528 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3301      	adds	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d3b5      	bcc.n	800349e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	687e      	ldr	r6, [r7, #4]
 800353a:	466d      	mov	r5, sp
 800353c:	f106 0410 	add.w	r4, r6, #16
 8003540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800354c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003550:	1d33      	adds	r3, r6, #4
 8003552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f004 ff13 	bl	8008380 <USB_DevInit>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e014      	b.n	8003596 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2b01      	cmp	r3, #1
 8003582:	d102      	bne.n	800358a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f80b 	bl	80035a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 f8b5 	bl	80086fe <USB_DevDisconnect>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	10000003 	.word	0x10000003

080035e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_PWREx_ConfigSupply+0x70>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d00a      	beq.n	8003612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <HAL_PWREx_ConfigSupply+0x70>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01f      	b.n	800364e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e01d      	b.n	800364e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_PWREx_ConfigSupply+0x70>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	490f      	ldr	r1, [pc, #60]	; (8003658 <HAL_PWREx_ConfigSupply+0x70>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003622:	f7fe fb4f 	bl	8001cc4 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003628:	e009      	b.n	800363e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800362a:	f7fe fb4b 	bl	8001cc4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003638:	d901      	bls.n	800363e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_PWREx_ConfigSupply+0x70>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d1ee      	bne.n	800362a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	58024800 	.word	0x58024800

0800365c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	58024800 	.word	0x58024800

0800367c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e3ff      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8087 	beq.w	80037aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369c:	4b99      	ldr	r3, [pc, #612]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036a6:	4b97      	ldr	r3, [pc, #604]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d007      	beq.n	80036c2 <HAL_RCC_OscConfig+0x46>
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2b18      	cmp	r3, #24
 80036b6:	d110      	bne.n	80036da <HAL_RCC_OscConfig+0x5e>
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d10b      	bne.n	80036da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4b90      	ldr	r3, [pc, #576]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d06c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x12c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d168      	bne.n	80037a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e3d9      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x76>
 80036e4:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a86      	ldr	r2, [pc, #536]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e02e      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a81      	ldr	r2, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b7f      	ldr	r3, [pc, #508]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7e      	ldr	r2, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0xbc>
 800371e:	4b79      	ldr	r3, [pc, #484]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a78      	ldr	r2, [pc, #480]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xd4>
 8003738:	4b72      	ldr	r3, [pc, #456]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a71      	ldr	r2, [pc, #452]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b6f      	ldr	r3, [pc, #444]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a6e      	ldr	r2, [pc, #440]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fab4 	bl	8001cc4 <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fab0 	bl	8001cc4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e38d      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003772:	4b64      	ldr	r3, [pc, #400]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xe4>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe faa0 	bl	8001cc4 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fa9c 	bl	8001cc4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e379      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800379a:	4b5a      	ldr	r3, [pc, #360]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x10c>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80ae 	beq.w	8003914 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b8:	4b52      	ldr	r3, [pc, #328]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037c2:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_RCC_OscConfig+0x162>
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	2b18      	cmp	r3, #24
 80037d2:	d13a      	bne.n	800384a <HAL_RCC_OscConfig+0x1ce>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d135      	bne.n	800384a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x17a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e34b      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	f7fe fa95 	bl	8001d24 <HAL_GetREVID>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003800:	4293      	cmp	r3, r2
 8003802:	d817      	bhi.n	8003834 <HAL_RCC_OscConfig+0x1b8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d108      	bne.n	800381e <HAL_RCC_OscConfig+0x1a2>
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003814:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381c:	e07a      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b39      	ldr	r3, [pc, #228]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	031b      	lsls	r3, r3, #12
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003832:	e06f      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	4930      	ldr	r1, [pc, #192]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	e064      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d045      	beq.n	80038de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0219 	bic.w	r2, r3, #25
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4929      	ldr	r1, [pc, #164]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fa2e 	bl	8001cc4 <HAL_GetTick>
 8003868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386c:	f7fe fa2a 	bl	8001cc4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e307      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	f7fe fa4b 	bl	8001d24 <HAL_GetREVID>
 800388e:	4603      	mov	r3, r0
 8003890:	f241 0203 	movw	r2, #4099	; 0x1003
 8003894:	4293      	cmp	r3, r2
 8003896:	d817      	bhi.n	80038c8 <HAL_RCC_OscConfig+0x24c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d108      	bne.n	80038b2 <HAL_RCC_OscConfig+0x236>
 80038a0:	4b18      	ldr	r3, [pc, #96]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	6053      	str	r3, [r2, #4]
 80038b0:	e030      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	031b      	lsls	r3, r3, #12
 80038c0:	4910      	ldr	r1, [pc, #64]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
 80038c6:	e025      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	490b      	ldr	r1, [pc, #44]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e01a      	b.n	8003914 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_RCC_OscConfig+0x288>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe f9eb 	bl	8001cc4 <HAL_GetTick>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe f9e7 	bl	8001cc4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d903      	bls.n	8003908 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e2c4      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
 8003904:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003908:	4ba4      	ldr	r3, [pc, #656]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ee      	bne.n	80038f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a9 	beq.w	8003a74 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003922:	4b9e      	ldr	r3, [pc, #632]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392c:	4b9b      	ldr	r3, [pc, #620]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d007      	beq.n	8003948 <HAL_RCC_OscConfig+0x2cc>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b18      	cmp	r3, #24
 800393c:	d13a      	bne.n	80039b4 <HAL_RCC_OscConfig+0x338>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d135      	bne.n	80039b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003948:	4b94      	ldr	r3, [pc, #592]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x2e4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e296      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003960:	f7fe f9e0 	bl	8001d24 <HAL_GetREVID>
 8003964:	4603      	mov	r3, r0
 8003966:	f241 0203 	movw	r2, #4099	; 0x1003
 800396a:	4293      	cmp	r3, r2
 800396c:	d817      	bhi.n	800399e <HAL_RCC_OscConfig+0x322>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	2b20      	cmp	r3, #32
 8003974:	d108      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800397e:	4a87      	ldr	r2, [pc, #540]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003984:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003986:	e075      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003988:	4b84      	ldr	r3, [pc, #528]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	069b      	lsls	r3, r3, #26
 8003996:	4981      	ldr	r1, [pc, #516]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800399c:	e06a      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800399e:	4b7f      	ldr	r3, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	061b      	lsls	r3, r3, #24
 80039ac:	497b      	ldr	r1, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039b2:	e05f      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d042      	beq.n	8003a42 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039bc:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a76      	ldr	r2, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 80039c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe f97c 	bl	8001cc4 <HAL_GetTick>
 80039cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039d0:	f7fe f978 	bl	8001cc4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e255      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039e2:	4b6e      	ldr	r3, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ee:	f7fe f999 	bl	8001d24 <HAL_GetREVID>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d817      	bhi.n	8003a2c <HAL_RCC_OscConfig+0x3b0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d108      	bne.n	8003a16 <HAL_RCC_OscConfig+0x39a>
 8003a04:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a12:	6053      	str	r3, [r2, #4]
 8003a14:	e02e      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
 8003a16:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	069b      	lsls	r3, r3, #26
 8003a24:	495d      	ldr	r1, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
 8003a2a:	e023      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
 8003a2c:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4958      	ldr	r1, [pc, #352]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
 8003a40:	e018      	b.n	8003a74 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a42:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f939 	bl	8001cc4 <HAL_GetTick>
 8003a52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a56:	f7fe f935 	bl	8001cc4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e212      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d036      	beq.n	8003aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d019      	beq.n	8003abc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a88:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	4a43      	ldr	r2, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fe f916 	bl	8001cc4 <HAL_GetTick>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9c:	f7fe f912 	bl	8001cc4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1ef      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x420>
 8003aba:	e018      	b.n	8003aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	4a36      	ldr	r2, [pc, #216]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f8fc 	bl	8001cc4 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f8f8 	bl	8001cc4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e1d5      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d019      	beq.n	8003b36 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe f8d9 	bl	8001cc4 <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b16:	f7fe f8d5 	bl	8001cc4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1b2      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x49a>
 8003b34:	e018      	b.n	8003b68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b42:	f7fe f8bf 	bl	8001cc4 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b4a:	f7fe f8bb 	bl	8001cc4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e198      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <HAL_RCC_OscConfig+0x520>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8085 	beq.w	8003c80 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_OscConfig+0x524>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x524>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b82:	f7fe f89f 	bl	8001cc4 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b88:	e00c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fe f89b 	bl	8001cc4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	; 0x64
 8003b96:	d905      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e178      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba4:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCC_OscConfig+0x784>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ec      	beq.n	8003b8a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x54a>
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a91      	ldr	r2, [pc, #580]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_OscConfig+0x5a6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x56c>
 8003bce:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a8c      	ldr	r2, [pc, #560]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a89      	ldr	r2, [pc, #548]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x5a6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x58e>
 8003bf0:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a80      	ldr	r2, [pc, #512]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x5a6>
 8003c0a:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a7d      	ldr	r2, [pc, #500]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b7b      	ldr	r3, [pc, #492]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a7a      	ldr	r2, [pc, #488]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe f84b 	bl	8001cc4 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe f847 	bl	8001cc4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e122      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c48:	4b6e      	ldr	r3, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x5b6>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fe f835 	bl	8001cc4 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe f831 	bl	8001cc4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e10c      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c74:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8101 	beq.w	8003e8c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c8a:	4b5e      	ldr	r3, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	f000 80bc 	beq.w	8003e10 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f040 8095 	bne.w	8003dcc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe f809 	bl	8001cc4 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7fe f805 	bl	8001cc4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0e2      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc8:	4b4e      	ldr	r3, [pc, #312]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <HAL_RCC_OscConfig+0x78c>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	4946      	ldr	r1, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	628b      	str	r3, [r1, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	025b      	lsls	r3, r3, #9
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	3b01      	subs	r3, #1
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d1e:	4939      	ldr	r1, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d24:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCC_OscConfig+0x790>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	4931      	ldr	r1, [pc, #196]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f023 020c 	bic.w	r2, r3, #12
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	492c      	ldr	r1, [pc, #176]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f023 0202 	bic.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4928      	ldr	r1, [pc, #160]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d80:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd ff8e 	bl	8001cc4 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd ff8a 	bl	8001cc4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x730>
 8003dca:	e05f      	b.n	8003e8c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd ff74 	bl	8001cc4 <HAL_GetTick>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd ff70 	bl	8001cc4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e04d      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_RCC_OscConfig+0x788>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x764>
 8003dfe:	e045      	b.n	8003e8c <HAL_RCC_OscConfig+0x810>
 8003e00:	58024800 	.word	0x58024800
 8003e04:	58024400 	.word	0x58024400
 8003e08:	fffffc0c 	.word	0xfffffc0c
 8003e0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCC_OscConfig+0x81c>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_OscConfig+0x81c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d031      	beq.n	8003e88 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0203 	and.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d12a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d122      	bne.n	8003e88 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d11a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	0a5b      	lsrs	r3, r3, #9
 8003e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d111      	bne.n	8003e88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	0e1b      	lsrs	r3, r3, #24
 8003e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3730      	adds	r7, #48	; 0x30
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400

08003e9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e19c      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4985      	ldr	r1, [pc, #532]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b83      	ldr	r3, [pc, #524]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e184      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d908      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4975      	ldr	r1, [pc, #468]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b70      	ldr	r3, [pc, #448]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	496a      	ldr	r1, [pc, #424]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b64      	ldr	r3, [pc, #400]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d908      	bls.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	495e      	ldr	r1, [pc, #376]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d908      	bls.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f86:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4953      	ldr	r1, [pc, #332]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d908      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f023 020f 	bic.w	r2, r3, #15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4947      	ldr	r1, [pc, #284]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d055      	beq.n	800407e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4940      	ldr	r1, [pc, #256]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0f6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d115      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ea      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0de      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4925      	ldr	r1, [pc, #148]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fd fe39 	bl	8001cc4 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e00a      	b.n	800406c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd fe35 	bl	8001cc4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0be      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	429a      	cmp	r2, r3
 800407c:	d1eb      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	490e      	ldr	r1, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d214      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e086      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
 80040dc:	52002000 	.word	0x52002000
 80040e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d208      	bcs.n	8004112 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004100:	4b3c      	ldr	r3, [pc, #240]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4939      	ldr	r1, [pc, #228]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	4313      	orrs	r3, r2
 8004110:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d208      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492e      	ldr	r1, [pc, #184]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004158:	429a      	cmp	r2, r3
 800415a:	d208      	bcs.n	800416e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4922      	ldr	r1, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d208      	bcs.n	800419c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4917      	ldr	r1, [pc, #92]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800419c:	f000 f834 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	4912      	ldr	r1, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x360>)
 80041d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x364>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x368>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd fd26 	bl	8001c30 <HAL_InitTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	08008a98 	.word	0x08008a98
 80041fc:	20000004 	.word	0x20000004
 8004200:	20000000 	.word	0x20000000
 8004204:	20000008 	.word	0x20000008

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420e:	4bb3      	ldr	r3, [pc, #716]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	2b18      	cmp	r3, #24
 8004218:	f200 8155 	bhi.w	80044c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004289 	.word	0x08004289
 8004228:	080044c7 	.word	0x080044c7
 800422c:	080044c7 	.word	0x080044c7
 8004230:	080044c7 	.word	0x080044c7
 8004234:	080044c7 	.word	0x080044c7
 8004238:	080044c7 	.word	0x080044c7
 800423c:	080044c7 	.word	0x080044c7
 8004240:	080044c7 	.word	0x080044c7
 8004244:	080042af 	.word	0x080042af
 8004248:	080044c7 	.word	0x080044c7
 800424c:	080044c7 	.word	0x080044c7
 8004250:	080044c7 	.word	0x080044c7
 8004254:	080044c7 	.word	0x080044c7
 8004258:	080044c7 	.word	0x080044c7
 800425c:	080044c7 	.word	0x080044c7
 8004260:	080044c7 	.word	0x080044c7
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080044c7 	.word	0x080044c7
 800426c:	080044c7 	.word	0x080044c7
 8004270:	080044c7 	.word	0x080044c7
 8004274:	080044c7 	.word	0x080044c7
 8004278:	080044c7 	.word	0x080044c7
 800427c:	080044c7 	.word	0x080044c7
 8004280:	080044c7 	.word	0x080044c7
 8004284:	080042bb 	.word	0x080042bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b94      	ldr	r3, [pc, #592]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004294:	4b91      	ldr	r3, [pc, #580]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a90      	ldr	r2, [pc, #576]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042a6:	e111      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a8:	4b8d      	ldr	r3, [pc, #564]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042aa:	61bb      	str	r3, [r7, #24]
    break;
 80042ac:	e10e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042ae:	4b8d      	ldr	r3, [pc, #564]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042b0:	61bb      	str	r3, [r7, #24]
    break;
 80042b2:	e10b      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042b4:	4b8c      	ldr	r3, [pc, #560]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042b6:	61bb      	str	r3, [r7, #24]
    break;
 80042b8:	e108      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042c4:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042d0:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042da:	4b80      	ldr	r3, [pc, #512]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80e1 	beq.w	80044c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_GetSysClockFreq+0x204>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x248>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x114>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800431a:	e099      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b6f      	ldr	r3, [pc, #444]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004328:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a02 	vldr	s12, [r7, #8]
 8004366:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004382:	e087      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b51      	ldr	r3, [pc, #324]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e065      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	e043      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004432:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	e021      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a02 	vldr	s12, [r7, #8]
 8004476:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449e:	3301      	adds	r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b8:	ee17 3a90 	vmov	r3, s15
 80044bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044be:	e005      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
    break;
 80044c4:	e002      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c8:	61bb      	str	r3, [r7, #24]
    break;
 80044ca:	bf00      	nop
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	; 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
 80044e0:	03d09000 	.word	0x03d09000
 80044e4:	003d0900 	.word	0x003d0900
 80044e8:	007a1200 	.word	0x007a1200
 80044ec:	46000000 	.word	0x46000000
 80044f0:	4c742400 	.word	0x4c742400
 80044f4:	4a742400 	.word	0x4a742400
 80044f8:	4af42400 	.word	0x4af42400

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004502:	f7ff fe81 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490f      	ldr	r1, [pc, #60]	; (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_RCC_GetHCLKFreq+0x50>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <HAL_RCC_GetHCLKFreq+0x54>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <HAL_RCC_GetHCLKFreq+0x5c>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCC_GetHCLKFreq+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	08008a98 	.word	0x08008a98
 8004554:	20000004 	.word	0x20000004
 8004558:	20000000 	.word	0x20000000

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004560:	f7ff ffcc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4904      	ldr	r1, [pc, #16]	; (8004584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58024400 	.word	0x58024400
 8004584:	08008a98 	.word	0x08008a98

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800458c:	f7ff ffb6 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4904      	ldr	r1, [pc, #16]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	58024400 	.word	0x58024400
 80045b0:	08008a98 	.word	0x08008a98

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045bc:	2300      	movs	r3, #0
 80045be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03f      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d8:	d02a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045de:	d824      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e4:	d018      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ea:	d81e      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045f6:	e018      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4bab      	ldr	r3, [pc, #684]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4aaa      	ldr	r2, [pc, #680]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004604:	e015      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f9cf 	bl	80059b0 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004616:	e00c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fa78 	bl	8005b14 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004638:	4b9b      	ldr	r3, [pc, #620]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004644:	4998      	ldr	r1, [pc, #608]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	650b      	str	r3, [r1, #80]	; 0x50
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d03d      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	2b04      	cmp	r3, #4
 8004662:	d826      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004681 	.word	0x08004681
 8004670:	0800468f 	.word	0x0800468f
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	4a88      	ldr	r2, [pc, #544]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800468c:	e015      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f001 f98b 	bl	80059b0 <RCCEx_PLL2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800469e:	e00c      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3324      	adds	r3, #36	; 0x24
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fa34 	bl	8005b14 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
      break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c0:	4b79      	ldr	r3, [pc, #484]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c4:	f023 0207 	bic.w	r2, r3, #7
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	4976      	ldr	r1, [pc, #472]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	650b      	str	r3, [r1, #80]	; 0x50
 80046d2:	e001      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d042      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d02b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f2:	d825      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046f4:	2bc0      	cmp	r3, #192	; 0xc0
 80046f6:	d028      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046f8:	2bc0      	cmp	r3, #192	; 0xc0
 80046fa:	d821      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d016      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d81d      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d007      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800470c:	e018      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	4a65      	ldr	r2, [pc, #404]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004718:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800471a:	e017      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f944 	bl	80059b0 <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800472c:	e00e      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f9ed 	bl	8005b14 <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800473e:	e005      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
      break;
 8004744:	e002      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800474a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004752:	4b55      	ldr	r3, [pc, #340]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4952      	ldr	r1, [pc, #328]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	650b      	str	r3, [r1, #80]	; 0x50
 8004764:	e001      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	2b00      	cmp	r3, #0
 8004774:	d049      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800477c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004780:	d030      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004786:	d82a      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004788:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800478c:	d02c      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800478e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004792:	d824      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d018      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800479a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479e:	d81e      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a8:	d007      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047aa:	e018      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4a3d      	ldr	r2, [pc, #244]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b8:	e017      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 f8f5 	bl	80059b0 <RCCEx_PLL2_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047ca:	e00e      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3324      	adds	r3, #36	; 0x24
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f99e 	bl	8005b14 <RCCEx_PLL3_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
      break;
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047f0:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047fe:	492a      	ldr	r1, [pc, #168]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	658b      	str	r3, [r1, #88]	; 0x58
 8004804:	e001      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04c      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800481c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004820:	d030      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004826:	d82a      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004828:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800482c:	d02c      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800482e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004832:	d824      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004838:	d018      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800483a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800483e:	d81e      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004848:	d007      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800484a:	e018      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004858:	e017      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f8a5 	bl	80059b0 <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800486a:	e00e      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f94e 	bl	8005b14 <RCCEx_PLL3_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800487c:	e005      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
      break;
 8004882:	e002      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800489e:	4902      	ldr	r1, [pc, #8]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	658b      	str	r3, [r1, #88]	; 0x58
 80048a4:	e004      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d032      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d01c      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048c4:	2b30      	cmp	r3, #48	; 0x30
 80048c6:	d817      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d00c      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d813      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d016      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d10f      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d8:	4baf      	ldr	r3, [pc, #700]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4aae      	ldr	r2, [pc, #696]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048e4:	e00e      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 f85f 	bl	80059b0 <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048f6:	e005      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	e002      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800490a:	4ba3      	ldr	r3, [pc, #652]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	49a0      	ldr	r1, [pc, #640]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800491c:	e001      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d047      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004936:	d030      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493c:	d82a      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800493e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004942:	d02c      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004948:	d824      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d018      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d81e      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d007      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004960:	e018      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004962:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4a8c      	ldr	r2, [pc, #560]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800496e:	e017      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f81a 	bl	80059b0 <RCCEx_PLL2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004980:	e00e      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3324      	adds	r3, #36	; 0x24
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f8c3 	bl	8005b14 <RCCEx_PLL3_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
      break;
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800499e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049a6:	4b7c      	ldr	r3, [pc, #496]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	4979      	ldr	r1, [pc, #484]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	650b      	str	r3, [r1, #80]	; 0x50
 80049b8:	e001      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d049      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d2:	d02e      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80049d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d8:	d828      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049de:	d02a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80049e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049e4:	d822      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ea:	d026      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80049ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049f0:	d81c      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	d010      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80049f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049fc:	d816      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01d      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d111      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 ffce 	bl	80059b0 <RCCEx_PLL2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a18:	e012      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3324      	adds	r3, #36	; 0x24
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f877 	bl	8005b14 <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a2a:	e009      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a32:	bf00      	nop
 8004a34:	e004      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a46:	4b54      	ldr	r3, [pc, #336]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	4951      	ldr	r1, [pc, #324]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	650b      	str	r3, [r1, #80]	; 0x50
 8004a58:	e001      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04b      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a74:	d02e      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7a:	d828      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d02a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a86:	d822      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a8c:	d026      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004a8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a92:	d81c      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a98:	d010      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d816      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa8:	d111      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ff7d 	bl	80059b0 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004aba:	e012      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 f826 	bl	8005b14 <RCCEx_PLL3_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004acc:	e009      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad2:	e006      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ad4:	bf00      	nop
 8004ad6:	e004      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ad8:	bf00      	nop
 8004ada:	e002      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004af6:	4928      	ldr	r1, [pc, #160]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	658b      	str	r3, [r1, #88]	; 0x58
 8004afc:	e001      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02f      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d00e      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d814      	bhi.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b26:	d10f      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b34:	e00c      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 ff37 	bl	80059b0 <RCCEx_PLL2_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b46:	e003      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b62:	490d      	ldr	r1, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	650b      	str	r3, [r1, #80]	; 0x50
 8004b68:	e001      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d033      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d81c      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bc3 	.word	0x08004bc3
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004bab 	.word	0x08004bab
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9c:	4bb8      	ldr	r3, [pc, #736]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	4ab7      	ldr	r2, [pc, #732]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fefd 	bl	80059b0 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bca:	4bad      	ldr	r3, [pc, #692]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	f023 0203 	bic.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	49aa      	ldr	r1, [pc, #680]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bdc:	e001      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8086 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf0:	4ba4      	ldr	r3, [pc, #656]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4aa3      	ldr	r2, [pc, #652]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfc:	f7fd f862 	bl	8001cc4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c02:	e009      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd f85e 	bl	8001cc4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d902      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	75fb      	strb	r3, [r7, #23]
        break;
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c18:	4b9a      	ldr	r3, [pc, #616]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d166      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c2a:	4b95      	ldr	r3, [pc, #596]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c34:	4053      	eors	r3, r2
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c3e:	4b90      	ldr	r3, [pc, #576]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c48:	4b8d      	ldr	r3, [pc, #564]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a8c      	ldr	r2, [pc, #560]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c54:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a89      	ldr	r2, [pc, #548]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c60:	4a87      	ldr	r2, [pc, #540]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d115      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fd f827 	bl	8001cc4 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c78:	e00b      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fd f823 	bl	8001cc4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d902      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c90:	e005      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c92:	4b7b      	ldr	r3, [pc, #492]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ed      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d126      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004cb4:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cc2:	0919      	lsrs	r1, r3, #4
 8004cc4:	4b70      	ldr	r3, [pc, #448]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	496d      	ldr	r1, [pc, #436]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	610b      	str	r3, [r1, #16]
 8004cce:	e005      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004cd0:	4b6b      	ldr	r3, [pc, #428]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	4a6a      	ldr	r2, [pc, #424]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cda:	6113      	str	r3, [r2, #16]
 8004cdc:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cea:	4965      	ldr	r1, [pc, #404]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	670b      	str	r3, [r1, #112]	; 0x70
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	75bb      	strb	r3, [r7, #22]
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d07e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0c:	2b28      	cmp	r3, #40	; 0x28
 8004d0e:	d867      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004de7 	.word	0x08004de7
 8004d1c:	08004de1 	.word	0x08004de1
 8004d20:	08004de1 	.word	0x08004de1
 8004d24:	08004de1 	.word	0x08004de1
 8004d28:	08004de1 	.word	0x08004de1
 8004d2c:	08004de1 	.word	0x08004de1
 8004d30:	08004de1 	.word	0x08004de1
 8004d34:	08004de1 	.word	0x08004de1
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004de1 	.word	0x08004de1
 8004d40:	08004de1 	.word	0x08004de1
 8004d44:	08004de1 	.word	0x08004de1
 8004d48:	08004de1 	.word	0x08004de1
 8004d4c:	08004de1 	.word	0x08004de1
 8004d50:	08004de1 	.word	0x08004de1
 8004d54:	08004de1 	.word	0x08004de1
 8004d58:	08004dcf 	.word	0x08004dcf
 8004d5c:	08004de1 	.word	0x08004de1
 8004d60:	08004de1 	.word	0x08004de1
 8004d64:	08004de1 	.word	0x08004de1
 8004d68:	08004de1 	.word	0x08004de1
 8004d6c:	08004de1 	.word	0x08004de1
 8004d70:	08004de1 	.word	0x08004de1
 8004d74:	08004de1 	.word	0x08004de1
 8004d78:	08004de7 	.word	0x08004de7
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	08004de1 	.word	0x08004de1
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	08004de1 	.word	0x08004de1
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004de1 	.word	0x08004de1
 8004da0:	08004de1 	.word	0x08004de1
 8004da4:	08004de1 	.word	0x08004de1
 8004da8:	08004de1 	.word	0x08004de1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004de1 	.word	0x08004de1
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004de7 	.word	0x08004de7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fdf4 	bl	80059b0 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dcc:	e00c      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3324      	adds	r3, #36	; 0x24
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fe9d 	bl	8005b14 <RCCEx_PLL3_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dde:	e003      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
      break;
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dfa:	4921      	ldr	r1, [pc, #132]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8004e00:	e001      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d03e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d820      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e63 	.word	0x08004e63
 8004e24:	08004e39 	.word	0x08004e39
 8004e28:	08004e4b 	.word	0x08004e4b
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fdb6 	bl	80059b0 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e48:	e00c      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fe5f 	bl	8005b14 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e003      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e60:	e000      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d110      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f023 0207 	bic.w	r2, r3, #7
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e76:	4902      	ldr	r1, [pc, #8]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004e7e:	bf00      	nop
 8004e80:	58024400 	.word	0x58024400
 8004e84:	58024800 	.word	0x58024800
 8004e88:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d039      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d820      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004eef 	.word	0x08004eef
 8004eb0:	08004ec5 	.word	0x08004ec5
 8004eb4:	08004ed7 	.word	0x08004ed7
 8004eb8:	08004eef 	.word	0x08004eef
 8004ebc:	08004eef 	.word	0x08004eef
 8004ec0:	08004eef 	.word	0x08004eef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fd70 	bl	80059b0 <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ed4:	e00c      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3324      	adds	r3, #36	; 0x24
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fe19 	bl	8005b14 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ef6:	4bb7      	ldr	r3, [pc, #732]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f023 0207 	bic.w	r2, r3, #7
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	49b3      	ldr	r1, [pc, #716]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	658b      	str	r3, [r1, #88]	; 0x58
 8004f0a:	e001      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d04b      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f26:	d02e      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f2c:	d828      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d02a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d822      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f3e:	d026      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f44:	d81c      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f50:	d816      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01d      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f5a:	d111      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd24 	bl	80059b0 <RCCEx_PLL2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f6c:	e012      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3324      	adds	r3, #36	; 0x24
 8004f72:	2102      	movs	r1, #2
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fdcd 	bl	8005b14 <RCCEx_PLL3_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f7e:	e009      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
      break;
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f86:	bf00      	nop
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f9a:	4b8e      	ldr	r3, [pc, #568]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa8:	498a      	ldr	r1, [pc, #552]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	654b      	str	r3, [r1, #84]	; 0x54
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d04b      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fca:	d02e      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004fcc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fd0:	d828      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d02a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fdc:	d822      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe2:	d026      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe8:	d81c      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fee:	d010      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff4:	d816      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01d      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d111      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fcd2 	bl	80059b0 <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005010:	e012      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fd7b 	bl	8005b14 <RCCEx_PLL3_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005022:	e009      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
      break;
 8005028:	e006      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800502a:	bf00      	nop
 800502c:	e004      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800503e:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800504c:	4961      	ldr	r1, [pc, #388]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800504e:	4313      	orrs	r3, r2
 8005050:	658b      	str	r3, [r1, #88]	; 0x58
 8005052:	e001      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d04b      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800506e:	d02e      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005070:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005074:	d828      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507a:	d02a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	d822      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005086:	d026      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005088:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800508c:	d81c      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800508e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005092:	d010      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005098:	d816      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01d      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	d111      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fc80 	bl	80059b0 <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050b4:	e012      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3324      	adds	r3, #36	; 0x24
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd29 	bl	8005b14 <RCCEx_PLL3_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050c6:	e009      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
      break;
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050ce:	bf00      	nop
 80050d0:	e004      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050e2:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050f0:	4938      	ldr	r1, [pc, #224]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	658b      	str	r3, [r1, #88]	; 0x58
 80050f6:	e001      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d10a      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3324      	adds	r3, #36	; 0x24
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fcfa 	bl	8005b14 <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800512a:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005138:	4926      	ldr	r1, [pc, #152]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800513a:	4313      	orrs	r3, r2
 800513c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005154:	d10a      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	2102      	movs	r1, #2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fcd9 	bl	8005b14 <RCCEx_PLL3_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517a:	4916      	ldr	r1, [pc, #88]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800517c:	4313      	orrs	r3, r2
 800517e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d036      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005196:	d01f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800519c:	d817      	bhi.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d009      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80051a8:	e011      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3304      	adds	r3, #4
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fbfd 	bl	80059b0 <RCCEx_PLL2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051ba:	e00e      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3324      	adds	r3, #36	; 0x24
 80051c0:	2102      	movs	r1, #2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fca6 	bl	8005b14 <RCCEx_PLL3_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051cc:	e005      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	75fb      	strb	r3, [r7, #23]
      break;
 80051d2:	e002      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80051d4:	58024400 	.word	0x58024400
      break;
 80051d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051e0:	4b93      	ldr	r3, [pc, #588]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051ee:	4990      	ldr	r1, [pc, #576]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	658b      	str	r3, [r1, #88]	; 0x58
 80051f4:	e001      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
 80051f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d033      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005210:	d01c      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005212:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005216:	d816      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d003      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005222:	d007      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005224:	e00f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005226:	4b82      	ldr	r3, [pc, #520]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	4a81      	ldr	r2, [pc, #516]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fc6a 	bl	8005b14 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
      break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005254:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	4973      	ldr	r1, [pc, #460]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	654b      	str	r3, [r1, #84]	; 0x54
 8005268:	e001      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d029      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005286:	d007      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005288:	e00f      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528a:	4b69      	ldr	r3, [pc, #420]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	4a68      	ldr	r2, [pc, #416]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	2102      	movs	r1, #2
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fb86 	bl	80059b0 <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
      break;
 80052ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052b6:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	495b      	ldr	r1, [pc, #364]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052c8:	e001      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fc17 	bl	8005b14 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d030      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005304:	d017      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530a:	d811      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800530c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005310:	d013      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005316:	d80b      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800531c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005320:	d106      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005322:	4b43      	ldr	r3, [pc, #268]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	4a42      	ldr	r2, [pc, #264]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800532e:	e007      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	e004      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800533e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005352:	4937      	ldr	r1, [pc, #220]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	654b      	str	r3, [r1, #84]	; 0x54
 8005358:	e001      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800536c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	492e      	ldr	r1, [pc, #184]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005388:	4b29      	ldr	r3, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005396:	4926      	ldr	r1, [pc, #152]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005398:	4313      	orrs	r3, r2
 800539a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b4:	491e      	ldr	r1, [pc, #120]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	4a19      	ldr	r2, [pc, #100]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d0:	6113      	str	r3, [r2, #16]
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053dc:	4914      	ldr	r1, [pc, #80]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da08      	bge.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	490e      	ldr	r1, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	4906      	ldr	r1, [pc, #24]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800541c:	7dbb      	ldrb	r3, [r7, #22]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	58024400 	.word	0x58024400

08005434 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005438:	f7ff f860 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4904      	ldr	r1, [pc, #16]	; (800545c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	58024400 	.word	0x58024400
 800545c:	08008a98 	.word	0x08008a98

08005460 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005468:	4ba1      	ldr	r3, [pc, #644]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005472:	4b9f      	ldr	r3, [pc, #636]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	0b1b      	lsrs	r3, r3, #12
 8005478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800547c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800547e:	4b9c      	ldr	r3, [pc, #624]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800548a:	4b99      	ldr	r3, [pc, #612]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8111 	beq.w	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f200 80a1 	bhi.w	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d056      	beq.n	8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054ca:	e099      	b.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054cc:	4b88      	ldr	r3, [pc, #544]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02d      	beq.n	8005534 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054d8:	4b85      	ldr	r3, [pc, #532]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	4a84      	ldr	r2, [pc, #528]	; (80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005502:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a03 	vldr	s12, [r7, #12]
 8005516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005532:	e087      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005546:	4b6a      	ldr	r3, [pc, #424]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005556:	ed97 6a03 	vldr	s12, [r7, #12]
 800555a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005576:	e065      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558a:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	ed97 6a03 	vldr	s12, [r7, #12]
 800559e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ba:	e043      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b48      	ldr	r3, [pc, #288]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055fe:	e021      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a03 	vldr	s12, [r7, #12]
 8005626:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005642:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005644:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	0a5b      	lsrs	r3, r3, #9
 800564a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800565a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800565e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566a:	ee17 2a90 	vmov	r2, s15
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005672:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005698:	ee17 2a90 	vmov	r2, s15
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80056be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c6:	ee17 2a90 	vmov	r2, s15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
}
 80056e2:	bf00      	nop
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
 80056f4:	03d09000 	.word	0x03d09000
 80056f8:	46000000 	.word	0x46000000
 80056fc:	4c742400 	.word	0x4c742400
 8005700:	4a742400 	.word	0x4a742400
 8005704:	4af42400 	.word	0x4af42400

08005708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005710:	4ba1      	ldr	r3, [pc, #644]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800571a:	4b9f      	ldr	r3, [pc, #636]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	0d1b      	lsrs	r3, r3, #20
 8005720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005726:	4b9c      	ldr	r3, [pc, #624]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005732:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8111 	beq.w	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f000 8083 	beq.w	8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b02      	cmp	r3, #2
 8005762:	f200 80a1 	bhi.w	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d056      	beq.n	8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005772:	e099      	b.n	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005774:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02d      	beq.n	80057dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005780:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	4a84      	ldr	r2, [pc, #528]	; (800599c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80057be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057da:	e087      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005802:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800581e:	e065      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b59      	ldr	r3, [pc, #356]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a03 	vldr	s12, [r7, #12]
 8005846:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005862:	e043      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b48      	ldr	r3, [pc, #288]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a6:	e021      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b37      	ldr	r3, [pc, #220]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058ec:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	0a5b      	lsrs	r3, r3, #9
 80058f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005906:	edd7 6a07 	vldr	s13, [r7, #28]
 800590a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005912:	ee17 2a90 	vmov	r2, s15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005934:	edd7 6a07 	vldr	s13, [r7, #28]
 8005938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005940:	ee17 2a90 	vmov	r2, s15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005962:	edd7 6a07 	vldr	s13, [r7, #28]
 8005966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	ee17 2a90 	vmov	r2, s15
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005976:	e008      	b.n	800598a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
}
 800598a:	bf00      	nop
 800598c:	3724      	adds	r7, #36	; 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
 800599c:	03d09000 	.word	0x03d09000
 80059a0:	46000000 	.word	0x46000000
 80059a4:	4c742400 	.word	0x4c742400
 80059a8:	4a742400 	.word	0x4a742400
 80059ac:	4af42400 	.word	0x4af42400

080059b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059be:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d101      	bne.n	80059ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e099      	b.n	8005b02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059ce:	4b4f      	ldr	r3, [pc, #316]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4e      	ldr	r2, [pc, #312]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 80059d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059da:	f7fc f973 	bl	8001cc4 <HAL_GetTick>
 80059de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059e0:	e008      	b.n	80059f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059e2:	f7fc f96f 	bl	8001cc4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e086      	b.n	8005b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059f4:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a00:	4b42      	ldr	r3, [pc, #264]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	031b      	lsls	r3, r3, #12
 8005a0e:	493f      	ldr	r1, [pc, #252]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	628b      	str	r3, [r1, #40]	; 0x28
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	025b      	lsls	r3, r3, #9
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a44:	4931      	ldr	r1, [pc, #196]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a4a:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	492d      	ldr	r1, [pc, #180]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f023 0220 	bic.w	r2, r3, #32
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	4928      	ldr	r1, [pc, #160]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <RCCEx_PLL2_Config+0x160>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	69d2      	ldr	r2, [r2, #28]
 8005a86:	00d2      	lsls	r2, r2, #3
 8005a88:	4920      	ldr	r1, [pc, #128]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a8e:	4b1f      	ldr	r3, [pc, #124]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005a94:	f043 0310 	orr.w	r3, r3, #16
 8005a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aac:	e00f      	b.n	8005ace <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac0:	e005      	b.n	8005ace <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005acc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ada:	f7fc f8f3 	bl	8001cc4 <HAL_GetTick>
 8005ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ae0:	e008      	b.n	8005af4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ae2:	f7fc f8ef 	bl	8001cc4 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e006      	b.n	8005b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <RCCEx_PLL2_Config+0x15c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	ffff0007 	.word	0xffff0007

08005b14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b22:	4b53      	ldr	r3, [pc, #332]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d101      	bne.n	8005b32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e099      	b.n	8005c66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b32:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a4e      	ldr	r2, [pc, #312]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b3e:	f7fc f8c1 	bl	8001cc4 <HAL_GetTick>
 8005b42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b44:	e008      	b.n	8005b58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b46:	f7fc f8bd 	bl	8001cc4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e086      	b.n	8005c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b58:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f0      	bne.n	8005b46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	051b      	lsls	r3, r3, #20
 8005b72:	493f      	ldr	r1, [pc, #252]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	628b      	str	r3, [r1, #40]	; 0x28
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	025b      	lsls	r3, r3, #9
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	061b      	lsls	r3, r3, #24
 8005ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ba8:	4931      	ldr	r1, [pc, #196]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	492d      	ldr	r1, [pc, #180]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	4928      	ldr	r1, [pc, #160]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be2:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <RCCEx_PLL3_Config+0x160>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	69d2      	ldr	r2, [r2, #28]
 8005bea:	00d2      	lsls	r2, r2, #3
 8005bec:	4920      	ldr	r1, [pc, #128]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bf2:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c10:	e00f      	b.n	8005c32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d106      	bne.n	8005c26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c24:	e005      	b.n	8005c32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c32:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3e:	f7fc f841 	bl	8001cc4 <HAL_GetTick>
 8005c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c44:	e008      	b.n	8005c58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c46:	f7fc f83d 	bl	8001cc4 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e006      	b.n	8005c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400
 8005c74:	ffff0007 	.word	0xffff0007

08005c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e049      	b.n	8005d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb fd04 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fd30 	bl	800671c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e049      	b.n	8005dcc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f841 	bl	8005dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 fcd9 	bl	800671c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d109      	bne.n	8005e0c <HAL_TIM_PWM_Start_IT+0x24>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e03c      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x9e>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d109      	bne.n	8005e26 <HAL_TIM_PWM_Start_IT+0x3e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	e02f      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x9e>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d109      	bne.n	8005e40 <HAL_TIM_PWM_Start_IT+0x58>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e022      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x9e>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d109      	bne.n	8005e5a <HAL_TIM_PWM_Start_IT+0x72>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	bf14      	ite	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	2300      	moveq	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	e015      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x9e>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d109      	bne.n	8005e74 <HAL_TIM_PWM_Start_IT+0x8c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e008      	b.n	8005e86 <HAL_TIM_PWM_Start_IT+0x9e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e0e2      	b.n	8006054 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_PWM_Start_IT+0xb6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e9c:	e023      	b.n	8005ee6 <HAL_TIM_PWM_Start_IT+0xfe>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_PWM_Start_IT+0xc6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eac:	e01b      	b.n	8005ee6 <HAL_TIM_PWM_Start_IT+0xfe>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_PWM_Start_IT+0xd6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ebc:	e013      	b.n	8005ee6 <HAL_TIM_PWM_Start_IT+0xfe>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_PWM_Start_IT+0xe6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ecc:	e00b      	b.n	8005ee6 <HAL_TIM_PWM_Start_IT+0xfe>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_PWM_Start_IT+0xf6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005edc:	e003      	b.n	8005ee6 <HAL_TIM_PWM_Start_IT+0xfe>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d841      	bhi.n	8005f70 <HAL_TIM_PWM_Start_IT+0x188>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f71 	.word	0x08005f71
 8005efc:	08005f71 	.word	0x08005f71
 8005f00:	08005f71 	.word	0x08005f71
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f71 	.word	0x08005f71
 8005f0c:	08005f71 	.word	0x08005f71
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f5f 	.word	0x08005f5f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0202 	orr.w	r2, r2, #2
 8005f36:	60da      	str	r2, [r3, #12]
      break;
 8005f38:	e01b      	b.n	8005f72 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0204 	orr.w	r2, r2, #4
 8005f48:	60da      	str	r2, [r3, #12]
      break;
 8005f4a:	e012      	b.n	8005f72 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0208 	orr.w	r2, r2, #8
 8005f5a:	60da      	str	r2, [r3, #12]
      break;
 8005f5c:	e009      	b.n	8005f72 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0210 	orr.w	r2, r2, #16
 8005f6c:	60da      	str	r2, [r3, #12]
      break;
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8005f70:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2201      	movs	r2, #1
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 ffd4 	bl	8006f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a35      	ldr	r2, [pc, #212]	; (800605c <HAL_TIM_PWM_Start_IT+0x274>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a34      	ldr	r2, [pc, #208]	; (8006060 <HAL_TIM_PWM_Start_IT+0x278>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a32      	ldr	r2, [pc, #200]	; (8006064 <HAL_TIM_PWM_Start_IT+0x27c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a31      	ldr	r2, [pc, #196]	; (8006068 <HAL_TIM_PWM_Start_IT+0x280>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x1ca>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <HAL_TIM_PWM_Start_IT+0x284>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_PWM_Start_IT+0x1ce>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <HAL_TIM_PWM_Start_IT+0x274>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_TIM_PWM_Start_IT+0x288>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIM_PWM_Start_IT+0x290>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a17      	ldr	r2, [pc, #92]	; (8006060 <HAL_TIM_PWM_Start_IT+0x278>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_PWM_Start_IT+0x22a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_TIM_PWM_Start_IT+0x294>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d115      	bne.n	800603e <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_TIM_PWM_Start_IT+0x298>)
 800601a:	4013      	ands	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d015      	beq.n	8006050 <HAL_TIM_PWM_Start_IT+0x268>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d011      	beq.n	8006050 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	e008      	b.n	8006050 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e000      	b.n	8006052 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40001800 	.word	0x40001800
 8006080:	00010007 	.word	0x00010007

08006084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0202 	mvn.w	r2, #2
 80060b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb14 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fb06 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fb f8b5 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d122      	bne.n	8006134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d11b      	bne.n	8006134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0204 	mvn.w	r2, #4
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 faea 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fadc 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb f88b 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b08      	cmp	r3, #8
 8006140:	d122      	bne.n	8006188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b08      	cmp	r3, #8
 800614e:	d11b      	bne.n	8006188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0208 	mvn.w	r2, #8
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2204      	movs	r2, #4
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fac0 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fab2 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fb f861 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	2b10      	cmp	r3, #16
 8006194:	d122      	bne.n	80061dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d11b      	bne.n	80061dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0210 	mvn.w	r2, #16
 80061ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2208      	movs	r2, #8
 80061b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa96 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa88 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fb f837 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d10e      	bne.n	8006208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d107      	bne.n	8006208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0201 	mvn.w	r2, #1
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa62 	bl	80066cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d10e      	bne.n	8006234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b80      	cmp	r3, #128	; 0x80
 8006222:	d107      	bne.n	8006234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ff32 	bl	8007098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d10e      	bne.n	8006262 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b80      	cmp	r3, #128	; 0x80
 8006250:	d107      	bne.n	8006262 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800625a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ff25 	bl	80070ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d10e      	bne.n	800628e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d107      	bne.n	800628e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa3d 	bl	8006708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b20      	cmp	r3, #32
 800629a:	d10e      	bne.n	80062ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d107      	bne.n	80062ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f06f 0220 	mvn.w	r2, #32
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fee5 	bl	8007084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062da:	2302      	movs	r3, #2
 80062dc:	e0fd      	b.n	80064da <HAL_TIM_PWM_ConfigChannel+0x216>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b14      	cmp	r3, #20
 80062ea:	f200 80f0 	bhi.w	80064ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080064cf 	.word	0x080064cf
 80062fc:	080064cf 	.word	0x080064cf
 8006300:	080064cf 	.word	0x080064cf
 8006304:	08006389 	.word	0x08006389
 8006308:	080064cf 	.word	0x080064cf
 800630c:	080064cf 	.word	0x080064cf
 8006310:	080064cf 	.word	0x080064cf
 8006314:	080063cb 	.word	0x080063cb
 8006318:	080064cf 	.word	0x080064cf
 800631c:	080064cf 	.word	0x080064cf
 8006320:	080064cf 	.word	0x080064cf
 8006324:	0800640b 	.word	0x0800640b
 8006328:	080064cf 	.word	0x080064cf
 800632c:	080064cf 	.word	0x080064cf
 8006330:	080064cf 	.word	0x080064cf
 8006334:	0800644d 	.word	0x0800644d
 8006338:	080064cf 	.word	0x080064cf
 800633c:	080064cf 	.word	0x080064cf
 8006340:	080064cf 	.word	0x080064cf
 8006344:	0800648d 	.word	0x0800648d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fa7e 	bl	8006850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0208 	orr.w	r2, r2, #8
 8006362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0204 	bic.w	r2, r2, #4
 8006372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6999      	ldr	r1, [r3, #24]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	619a      	str	r2, [r3, #24]
      break;
 8006386:	e0a3      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 faee 	bl	8006970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6999      	ldr	r1, [r3, #24]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	619a      	str	r2, [r3, #24]
      break;
 80063c8:	e082      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb57 	bl	8006a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0208 	orr.w	r2, r2, #8
 80063e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0204 	bic.w	r2, r2, #4
 80063f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69d9      	ldr	r1, [r3, #28]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	61da      	str	r2, [r3, #28]
      break;
 8006408:	e062      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fbbd 	bl	8006b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69d9      	ldr	r1, [r3, #28]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	021a      	lsls	r2, r3, #8
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	61da      	str	r2, [r3, #28]
      break;
 800644a:	e041      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fc04 	bl	8006c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0208 	orr.w	r2, r2, #8
 8006466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0204 	bic.w	r2, r2, #4
 8006476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800648a:	e021      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fc46 	bl	8006d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	021a      	lsls	r2, r3, #8
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064cc:	e000      	b.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80064ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop

080064e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_TIM_ConfigClockSource+0x18>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e0db      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4b69      	ldr	r3, [pc, #420]	; (80066bc <HAL_TIM_ConfigClockSource+0x1d8>)
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a63      	ldr	r2, [pc, #396]	; (80066c0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	f000 80a9 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 8006538:	4a61      	ldr	r2, [pc, #388]	; (80066c0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	f200 80ae 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 8006540:	4a60      	ldr	r2, [pc, #384]	; (80066c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	f000 80a1 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 8006548:	4a5e      	ldr	r2, [pc, #376]	; (80066c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	f200 80a6 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 8006550:	4a5d      	ldr	r2, [pc, #372]	; (80066c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	f000 8099 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 8006558:	4a5b      	ldr	r2, [pc, #364]	; (80066c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	f200 809e 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 8006560:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006564:	f000 8091 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 8006568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800656c:	f200 8096 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 8006570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006574:	f000 8089 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 8006578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657c:	f200 808e 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 8006580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006584:	d03e      	beq.n	8006604 <HAL_TIM_ConfigClockSource+0x120>
 8006586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658a:	f200 8087 	bhi.w	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	f000 8085 	beq.w	80066a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d87f      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 800659c:	2b70      	cmp	r3, #112	; 0x70
 800659e:	d01a      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0xf2>
 80065a0:	2b70      	cmp	r3, #112	; 0x70
 80065a2:	d87b      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065a4:	2b60      	cmp	r3, #96	; 0x60
 80065a6:	d050      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x166>
 80065a8:	2b60      	cmp	r3, #96	; 0x60
 80065aa:	d877      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065ac:	2b50      	cmp	r3, #80	; 0x50
 80065ae:	d03c      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x146>
 80065b0:	2b50      	cmp	r3, #80	; 0x50
 80065b2:	d873      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d058      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x186>
 80065b8:	2b40      	cmp	r3, #64	; 0x40
 80065ba:	d86f      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065bc:	2b30      	cmp	r3, #48	; 0x30
 80065be:	d064      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 80065c0:	2b30      	cmp	r3, #48	; 0x30
 80065c2:	d86b      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d060      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d867      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d05c      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x1a6>
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d05a      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065d4:	e062      	b.n	800669c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6899      	ldr	r1, [r3, #8]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f000 fc7f 	bl	8006ee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	609a      	str	r2, [r3, #8]
      break;
 8006602:	e04e      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6899      	ldr	r1, [r3, #8]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f000 fc68 	bl	8006ee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006626:	609a      	str	r2, [r3, #8]
      break;
 8006628:	e03b      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6859      	ldr	r1, [r3, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	461a      	mov	r2, r3
 8006638:	f000 fbd8 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2150      	movs	r1, #80	; 0x50
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fc32 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006648:	e02b      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	461a      	mov	r2, r3
 8006658:	f000 fbf7 	bl	8006e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2160      	movs	r1, #96	; 0x60
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fc22 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006668:	e01b      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6859      	ldr	r1, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	461a      	mov	r2, r3
 8006678:	f000 fbb8 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2140      	movs	r1, #64	; 0x40
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fc12 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006688:	e00b      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f000 fc09 	bl	8006eac <TIM_ITRx_SetConfig>
        break;
 800669a:	e002      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80066a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	ffceff88 	.word	0xffceff88
 80066c0:	00100040 	.word	0x00100040
 80066c4:	00100030 	.word	0x00100030
 80066c8:	00100020 	.word	0x00100020

080066cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a40      	ldr	r2, [pc, #256]	; (8006830 <TIM_Base_SetConfig+0x114>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d013      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673a:	d00f      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3d      	ldr	r2, [pc, #244]	; (8006834 <TIM_Base_SetConfig+0x118>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00b      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <TIM_Base_SetConfig+0x11c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a3b      	ldr	r2, [pc, #236]	; (800683c <TIM_Base_SetConfig+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a3a      	ldr	r2, [pc, #232]	; (8006840 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d108      	bne.n	800676e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2f      	ldr	r2, [pc, #188]	; (8006830 <TIM_Base_SetConfig+0x114>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01f      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	d01b      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <TIM_Base_SetConfig+0x118>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d017      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <TIM_Base_SetConfig+0x11c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2a      	ldr	r2, [pc, #168]	; (800683c <TIM_Base_SetConfig+0x120>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <TIM_Base_SetConfig+0x124>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a28      	ldr	r2, [pc, #160]	; (8006844 <TIM_Base_SetConfig+0x128>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <TIM_Base_SetConfig+0x12c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <TIM_Base_SetConfig+0x130>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d108      	bne.n	80067c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a10      	ldr	r2, [pc, #64]	; (8006830 <TIM_Base_SetConfig+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00f      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <TIM_Base_SetConfig+0x124>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00b      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <TIM_Base_SetConfig+0x128>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <TIM_Base_SetConfig+0x12c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a0f      	ldr	r2, [pc, #60]	; (800684c <TIM_Base_SetConfig+0x130>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40010400 	.word	0x40010400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4b37      	ldr	r3, [pc, #220]	; (8006958 <TIM_OC1_SetConfig+0x108>)
 800687c:	4013      	ands	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f023 0302 	bic.w	r3, r3, #2
 8006898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2d      	ldr	r2, [pc, #180]	; (800695c <TIM_OC1_SetConfig+0x10c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_OC1_SetConfig+0x7c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a2c      	ldr	r2, [pc, #176]	; (8006960 <TIM_OC1_SetConfig+0x110>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_OC1_SetConfig+0x7c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <TIM_OC1_SetConfig+0x114>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_OC1_SetConfig+0x7c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <TIM_OC1_SetConfig+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC1_SetConfig+0x7c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a29      	ldr	r2, [pc, #164]	; (800696c <TIM_OC1_SetConfig+0x11c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10c      	bne.n	80068e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 0308 	bic.w	r3, r3, #8
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <TIM_OC1_SetConfig+0x10c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00f      	beq.n	800690e <TIM_OC1_SetConfig+0xbe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <TIM_OC1_SetConfig+0x110>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_OC1_SetConfig+0xbe>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <TIM_OC1_SetConfig+0x114>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_OC1_SetConfig+0xbe>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a19      	ldr	r2, [pc, #100]	; (8006968 <TIM_OC1_SetConfig+0x118>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC1_SetConfig+0xbe>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <TIM_OC1_SetConfig+0x11c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d111      	bne.n	8006932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	fffeff8f 	.word	0xfffeff8f
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0210 	bic.w	r2, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <TIM_OC2_SetConfig+0xfc>)
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0320 	bic.w	r3, r3, #32
 80069ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <TIM_OC2_SetConfig+0x100>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC2_SetConfig+0x68>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a28      	ldr	r2, [pc, #160]	; (8006a74 <TIM_OC2_SetConfig+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <TIM_OC2_SetConfig+0x100>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_OC2_SetConfig+0xac>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <TIM_OC2_SetConfig+0x104>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_OC2_SetConfig+0xac>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <TIM_OC2_SetConfig+0x108>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC2_SetConfig+0xac>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	; (8006a7c <TIM_OC2_SetConfig+0x10c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC2_SetConfig+0xac>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <TIM_OC2_SetConfig+0x110>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d113      	bne.n	8006a44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	feff8fff 	.word	0xfeff8fff
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40010400 	.word	0x40010400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <TIM_OC3_SetConfig+0xf8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <TIM_OC3_SetConfig+0xfc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d10d      	bne.n	8006b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a1c      	ldr	r2, [pc, #112]	; (8006b7c <TIM_OC3_SetConfig+0xf8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00f      	beq.n	8006b2e <TIM_OC3_SetConfig+0xaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <TIM_OC3_SetConfig+0xfc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_OC3_SetConfig+0xaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <TIM_OC3_SetConfig+0x100>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_OC3_SetConfig+0xaa>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <TIM_OC3_SetConfig+0x104>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_OC3_SetConfig+0xaa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <TIM_OC3_SetConfig+0x108>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d113      	bne.n	8006b56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <TIM_OC4_SetConfig+0xbc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00f      	beq.n	8006c10 <TIM_OC4_SetConfig+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <TIM_OC4_SetConfig+0xc0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_OC4_SetConfig+0x80>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <TIM_OC4_SetConfig+0xc4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_OC4_SetConfig+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <TIM_OC4_SetConfig+0xc8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC4_SetConfig+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <TIM_OC4_SetConfig+0xcc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d109      	bne.n	8006c24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	019b      	lsls	r3, r3, #6
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800

08006c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <TIM_OC5_SetConfig+0xb0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00f      	beq.n	8006cd6 <TIM_OC5_SetConfig+0x76>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <TIM_OC5_SetConfig+0xb4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00b      	beq.n	8006cd6 <TIM_OC5_SetConfig+0x76>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <TIM_OC5_SetConfig+0xb8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d007      	beq.n	8006cd6 <TIM_OC5_SetConfig+0x76>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a14      	ldr	r2, [pc, #80]	; (8006d1c <TIM_OC5_SetConfig+0xbc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d003      	beq.n	8006cd6 <TIM_OC5_SetConfig+0x76>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <TIM_OC5_SetConfig+0xc0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d109      	bne.n	8006cea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40010400 	.word	0x40010400
 8006d18:	40014000 	.word	0x40014000
 8006d1c:	40014400 	.word	0x40014400
 8006d20:	40014800 	.word	0x40014800

08006d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	051b      	lsls	r3, r3, #20
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a18      	ldr	r2, [pc, #96]	; (8006dd8 <TIM_OC6_SetConfig+0xb4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00f      	beq.n	8006d9c <TIM_OC6_SetConfig+0x78>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a17      	ldr	r2, [pc, #92]	; (8006ddc <TIM_OC6_SetConfig+0xb8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00b      	beq.n	8006d9c <TIM_OC6_SetConfig+0x78>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <TIM_OC6_SetConfig+0xbc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d007      	beq.n	8006d9c <TIM_OC6_SetConfig+0x78>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <TIM_OC6_SetConfig+0xc0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC6_SetConfig+0x78>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <TIM_OC6_SetConfig+0xc4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d109      	bne.n	8006db0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006da2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 030a 	bic.w	r3, r3, #10
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0210 	bic.w	r2, r3, #16
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <TIM_ITRx_SetConfig+0x38>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f043 0307 	orr.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	ffcfff8f 	.word	0xffcfff8f

08006ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	021a      	lsls	r2, r3, #8
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	609a      	str	r2, [r3, #8]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	401a      	ands	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1a      	ldr	r2, [r3, #32]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f60:	431a      	orrs	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e068      	b.n	800705e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2e      	ldr	r2, [pc, #184]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2d      	ldr	r2, [pc, #180]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1e      	ldr	r2, [pc, #120]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d018      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d10c      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	4313      	orrs	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40001800 	.word	0x40001800

08007084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e042      	b.n	8007158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fa fb45 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2224      	movs	r2, #36	; 0x24
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f8c2 	bl	800728c <UART_SetConfig>
 8007108:	4603      	mov	r3, r0
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e022      	b.n	8007158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fe16 	bl	8007d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fe9d 	bl	8007e90 <UART_CheckIdleState>
 8007156:	4603      	mov	r3, r0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007176:	2b20      	cmp	r3, #32
 8007178:	f040 8083 	bne.w	8007282 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Transmit+0x28>
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e07b      	b.n	8007284 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_UART_Transmit+0x3a>
 8007196:	2302      	movs	r3, #2
 8007198:	e074      	b.n	8007284 <HAL_UART_Transmit+0x124>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2221      	movs	r2, #33	; 0x21
 80071ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071b2:	f7fa fd87 	bl	8001cc4 <HAL_GetTick>
 80071b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d0:	d108      	bne.n	80071e4 <HAL_UART_Transmit+0x84>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e003      	b.n	80071ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071f4:	e02c      	b.n	8007250 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fe90 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e039      	b.n	8007284 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3302      	adds	r3, #2
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e007      	b.n	800723e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3301      	adds	r3, #1
 800723c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1cc      	bne.n	80071f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	2140      	movs	r1, #64	; 0x40
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fe5d 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e000      	b.n	8007284 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007282:	2302      	movs	r3, #2
  }
}
 8007284:	4618      	mov	r0, r3
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800728c:	b5b0      	push	{r4, r5, r7, lr}
 800728e:	b08e      	sub	sp, #56	; 0x38
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	4bbf      	ldr	r3, [pc, #764]	; (80075b8 <UART_SetConfig+0x32c>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072c2:	430b      	orrs	r3, r1
 80072c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4ab5      	ldr	r2, [pc, #724]	; (80075bc <UART_SetConfig+0x330>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f2:	4313      	orrs	r3, r2
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	4bb0      	ldr	r3, [pc, #704]	; (80075c0 <UART_SetConfig+0x334>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007306:	430b      	orrs	r3, r1
 8007308:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f023 010f 	bic.w	r1, r3, #15
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4aa7      	ldr	r2, [pc, #668]	; (80075c4 <UART_SetConfig+0x338>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d176      	bne.n	8007418 <UART_SetConfig+0x18c>
 800732a:	4ba7      	ldr	r3, [pc, #668]	; (80075c8 <UART_SetConfig+0x33c>)
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007332:	2b28      	cmp	r3, #40	; 0x28
 8007334:	d86c      	bhi.n	8007410 <UART_SetConfig+0x184>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0xb0>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	080073e1 	.word	0x080073e1
 8007340:	08007411 	.word	0x08007411
 8007344:	08007411 	.word	0x08007411
 8007348:	08007411 	.word	0x08007411
 800734c:	08007411 	.word	0x08007411
 8007350:	08007411 	.word	0x08007411
 8007354:	08007411 	.word	0x08007411
 8007358:	08007411 	.word	0x08007411
 800735c:	080073e9 	.word	0x080073e9
 8007360:	08007411 	.word	0x08007411
 8007364:	08007411 	.word	0x08007411
 8007368:	08007411 	.word	0x08007411
 800736c:	08007411 	.word	0x08007411
 8007370:	08007411 	.word	0x08007411
 8007374:	08007411 	.word	0x08007411
 8007378:	08007411 	.word	0x08007411
 800737c:	080073f1 	.word	0x080073f1
 8007380:	08007411 	.word	0x08007411
 8007384:	08007411 	.word	0x08007411
 8007388:	08007411 	.word	0x08007411
 800738c:	08007411 	.word	0x08007411
 8007390:	08007411 	.word	0x08007411
 8007394:	08007411 	.word	0x08007411
 8007398:	08007411 	.word	0x08007411
 800739c:	080073f9 	.word	0x080073f9
 80073a0:	08007411 	.word	0x08007411
 80073a4:	08007411 	.word	0x08007411
 80073a8:	08007411 	.word	0x08007411
 80073ac:	08007411 	.word	0x08007411
 80073b0:	08007411 	.word	0x08007411
 80073b4:	08007411 	.word	0x08007411
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007401 	.word	0x08007401
 80073c0:	08007411 	.word	0x08007411
 80073c4:	08007411 	.word	0x08007411
 80073c8:	08007411 	.word	0x08007411
 80073cc:	08007411 	.word	0x08007411
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007411 	.word	0x08007411
 80073d8:	08007411 	.word	0x08007411
 80073dc:	08007409 	.word	0x08007409
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e6:	e222      	b.n	800782e <UART_SetConfig+0x5a2>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ee:	e21e      	b.n	800782e <UART_SetConfig+0x5a2>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f6:	e21a      	b.n	800782e <UART_SetConfig+0x5a2>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e216      	b.n	800782e <UART_SetConfig+0x5a2>
 8007400:	2320      	movs	r3, #32
 8007402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007406:	e212      	b.n	800782e <UART_SetConfig+0x5a2>
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740e:	e20e      	b.n	800782e <UART_SetConfig+0x5a2>
 8007410:	2380      	movs	r3, #128	; 0x80
 8007412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007416:	e20a      	b.n	800782e <UART_SetConfig+0x5a2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a6b      	ldr	r2, [pc, #428]	; (80075cc <UART_SetConfig+0x340>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d130      	bne.n	8007484 <UART_SetConfig+0x1f8>
 8007422:	4b69      	ldr	r3, [pc, #420]	; (80075c8 <UART_SetConfig+0x33c>)
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b05      	cmp	r3, #5
 800742c:	d826      	bhi.n	800747c <UART_SetConfig+0x1f0>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0x1a8>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	0800744d 	.word	0x0800744d
 8007438:	08007455 	.word	0x08007455
 800743c:	0800745d 	.word	0x0800745d
 8007440:	08007465 	.word	0x08007465
 8007444:	0800746d 	.word	0x0800746d
 8007448:	08007475 	.word	0x08007475
 800744c:	2300      	movs	r3, #0
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e1ec      	b.n	800782e <UART_SetConfig+0x5a2>
 8007454:	2304      	movs	r3, #4
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e1e8      	b.n	800782e <UART_SetConfig+0x5a2>
 800745c:	2308      	movs	r3, #8
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e1e4      	b.n	800782e <UART_SetConfig+0x5a2>
 8007464:	2310      	movs	r3, #16
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e1e0      	b.n	800782e <UART_SetConfig+0x5a2>
 800746c:	2320      	movs	r3, #32
 800746e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007472:	e1dc      	b.n	800782e <UART_SetConfig+0x5a2>
 8007474:	2340      	movs	r3, #64	; 0x40
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e1d8      	b.n	800782e <UART_SetConfig+0x5a2>
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e1d4      	b.n	800782e <UART_SetConfig+0x5a2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a51      	ldr	r2, [pc, #324]	; (80075d0 <UART_SetConfig+0x344>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d130      	bne.n	80074f0 <UART_SetConfig+0x264>
 800748e:	4b4e      	ldr	r3, [pc, #312]	; (80075c8 <UART_SetConfig+0x33c>)
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b05      	cmp	r3, #5
 8007498:	d826      	bhi.n	80074e8 <UART_SetConfig+0x25c>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <UART_SetConfig+0x214>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b9 	.word	0x080074b9
 80074a4:	080074c1 	.word	0x080074c1
 80074a8:	080074c9 	.word	0x080074c9
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074be:	e1b6      	b.n	800782e <UART_SetConfig+0x5a2>
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e1b2      	b.n	800782e <UART_SetConfig+0x5a2>
 80074c8:	2308      	movs	r3, #8
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e1ae      	b.n	800782e <UART_SetConfig+0x5a2>
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e1aa      	b.n	800782e <UART_SetConfig+0x5a2>
 80074d8:	2320      	movs	r3, #32
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074de:	e1a6      	b.n	800782e <UART_SetConfig+0x5a2>
 80074e0:	2340      	movs	r3, #64	; 0x40
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e1a2      	b.n	800782e <UART_SetConfig+0x5a2>
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e19e      	b.n	800782e <UART_SetConfig+0x5a2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a37      	ldr	r2, [pc, #220]	; (80075d4 <UART_SetConfig+0x348>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d130      	bne.n	800755c <UART_SetConfig+0x2d0>
 80074fa:	4b33      	ldr	r3, [pc, #204]	; (80075c8 <UART_SetConfig+0x33c>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b05      	cmp	r3, #5
 8007504:	d826      	bhi.n	8007554 <UART_SetConfig+0x2c8>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x280>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007525 	.word	0x08007525
 8007510:	0800752d 	.word	0x0800752d
 8007514:	08007535 	.word	0x08007535
 8007518:	0800753d 	.word	0x0800753d
 800751c:	08007545 	.word	0x08007545
 8007520:	0800754d 	.word	0x0800754d
 8007524:	2300      	movs	r3, #0
 8007526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752a:	e180      	b.n	800782e <UART_SetConfig+0x5a2>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007532:	e17c      	b.n	800782e <UART_SetConfig+0x5a2>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e178      	b.n	800782e <UART_SetConfig+0x5a2>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	e174      	b.n	800782e <UART_SetConfig+0x5a2>
 8007544:	2320      	movs	r3, #32
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754a:	e170      	b.n	800782e <UART_SetConfig+0x5a2>
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e16c      	b.n	800782e <UART_SetConfig+0x5a2>
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e168      	b.n	800782e <UART_SetConfig+0x5a2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <UART_SetConfig+0x34c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d142      	bne.n	80075ec <UART_SetConfig+0x360>
 8007566:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <UART_SetConfig+0x33c>)
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b05      	cmp	r3, #5
 8007570:	d838      	bhi.n	80075e4 <UART_SetConfig+0x358>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x2ec>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007591 	.word	0x08007591
 800757c:	08007599 	.word	0x08007599
 8007580:	080075a1 	.word	0x080075a1
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075dd 	.word	0x080075dd
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007596:	e14a      	b.n	800782e <UART_SetConfig+0x5a2>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759e:	e146      	b.n	800782e <UART_SetConfig+0x5a2>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e142      	b.n	800782e <UART_SetConfig+0x5a2>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	e13e      	b.n	800782e <UART_SetConfig+0x5a2>
 80075b0:	2320      	movs	r3, #32
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b6:	e13a      	b.n	800782e <UART_SetConfig+0x5a2>
 80075b8:	cfff69f3 	.word	0xcfff69f3
 80075bc:	58000c00 	.word	0x58000c00
 80075c0:	11fff4ff 	.word	0x11fff4ff
 80075c4:	40011000 	.word	0x40011000
 80075c8:	58024400 	.word	0x58024400
 80075cc:	40004400 	.word	0x40004400
 80075d0:	40004800 	.word	0x40004800
 80075d4:	40004c00 	.word	0x40004c00
 80075d8:	40005000 	.word	0x40005000
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075e2:	e124      	b.n	800782e <UART_SetConfig+0x5a2>
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ea:	e120      	b.n	800782e <UART_SetConfig+0x5a2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4acc      	ldr	r2, [pc, #816]	; (8007924 <UART_SetConfig+0x698>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d176      	bne.n	80076e4 <UART_SetConfig+0x458>
 80075f6:	4bcc      	ldr	r3, [pc, #816]	; (8007928 <UART_SetConfig+0x69c>)
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075fe:	2b28      	cmp	r3, #40	; 0x28
 8007600:	d86c      	bhi.n	80076dc <UART_SetConfig+0x450>
 8007602:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <UART_SetConfig+0x37c>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	080076ad 	.word	0x080076ad
 800760c:	080076dd 	.word	0x080076dd
 8007610:	080076dd 	.word	0x080076dd
 8007614:	080076dd 	.word	0x080076dd
 8007618:	080076dd 	.word	0x080076dd
 800761c:	080076dd 	.word	0x080076dd
 8007620:	080076dd 	.word	0x080076dd
 8007624:	080076dd 	.word	0x080076dd
 8007628:	080076b5 	.word	0x080076b5
 800762c:	080076dd 	.word	0x080076dd
 8007630:	080076dd 	.word	0x080076dd
 8007634:	080076dd 	.word	0x080076dd
 8007638:	080076dd 	.word	0x080076dd
 800763c:	080076dd 	.word	0x080076dd
 8007640:	080076dd 	.word	0x080076dd
 8007644:	080076dd 	.word	0x080076dd
 8007648:	080076bd 	.word	0x080076bd
 800764c:	080076dd 	.word	0x080076dd
 8007650:	080076dd 	.word	0x080076dd
 8007654:	080076dd 	.word	0x080076dd
 8007658:	080076dd 	.word	0x080076dd
 800765c:	080076dd 	.word	0x080076dd
 8007660:	080076dd 	.word	0x080076dd
 8007664:	080076dd 	.word	0x080076dd
 8007668:	080076c5 	.word	0x080076c5
 800766c:	080076dd 	.word	0x080076dd
 8007670:	080076dd 	.word	0x080076dd
 8007674:	080076dd 	.word	0x080076dd
 8007678:	080076dd 	.word	0x080076dd
 800767c:	080076dd 	.word	0x080076dd
 8007680:	080076dd 	.word	0x080076dd
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076cd 	.word	0x080076cd
 800768c:	080076dd 	.word	0x080076dd
 8007690:	080076dd 	.word	0x080076dd
 8007694:	080076dd 	.word	0x080076dd
 8007698:	080076dd 	.word	0x080076dd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076dd 	.word	0x080076dd
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076b2:	e0bc      	b.n	800782e <UART_SetConfig+0x5a2>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ba:	e0b8      	b.n	800782e <UART_SetConfig+0x5a2>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c2:	e0b4      	b.n	800782e <UART_SetConfig+0x5a2>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ca:	e0b0      	b.n	800782e <UART_SetConfig+0x5a2>
 80076cc:	2320      	movs	r3, #32
 80076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d2:	e0ac      	b.n	800782e <UART_SetConfig+0x5a2>
 80076d4:	2340      	movs	r3, #64	; 0x40
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076da:	e0a8      	b.n	800782e <UART_SetConfig+0x5a2>
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076e2:	e0a4      	b.n	800782e <UART_SetConfig+0x5a2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a90      	ldr	r2, [pc, #576]	; (800792c <UART_SetConfig+0x6a0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d130      	bne.n	8007750 <UART_SetConfig+0x4c4>
 80076ee:	4b8e      	ldr	r3, [pc, #568]	; (8007928 <UART_SetConfig+0x69c>)
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d826      	bhi.n	8007748 <UART_SetConfig+0x4bc>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x474>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007719 	.word	0x08007719
 8007704:	08007721 	.word	0x08007721
 8007708:	08007729 	.word	0x08007729
 800770c:	08007731 	.word	0x08007731
 8007710:	08007739 	.word	0x08007739
 8007714:	08007741 	.word	0x08007741
 8007718:	2300      	movs	r3, #0
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	e086      	b.n	800782e <UART_SetConfig+0x5a2>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e082      	b.n	800782e <UART_SetConfig+0x5a2>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e07e      	b.n	800782e <UART_SetConfig+0x5a2>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e07a      	b.n	800782e <UART_SetConfig+0x5a2>
 8007738:	2320      	movs	r3, #32
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e076      	b.n	800782e <UART_SetConfig+0x5a2>
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e072      	b.n	800782e <UART_SetConfig+0x5a2>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e06e      	b.n	800782e <UART_SetConfig+0x5a2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a76      	ldr	r2, [pc, #472]	; (8007930 <UART_SetConfig+0x6a4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d130      	bne.n	80077bc <UART_SetConfig+0x530>
 800775a:	4b73      	ldr	r3, [pc, #460]	; (8007928 <UART_SetConfig+0x69c>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b05      	cmp	r3, #5
 8007764:	d826      	bhi.n	80077b4 <UART_SetConfig+0x528>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <UART_SetConfig+0x4e0>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	08007785 	.word	0x08007785
 8007770:	0800778d 	.word	0x0800778d
 8007774:	08007795 	.word	0x08007795
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	2300      	movs	r3, #0
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778a:	e050      	b.n	800782e <UART_SetConfig+0x5a2>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e04c      	b.n	800782e <UART_SetConfig+0x5a2>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e048      	b.n	800782e <UART_SetConfig+0x5a2>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e044      	b.n	800782e <UART_SetConfig+0x5a2>
 80077a4:	2320      	movs	r3, #32
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e040      	b.n	800782e <UART_SetConfig+0x5a2>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e03c      	b.n	800782e <UART_SetConfig+0x5a2>
 80077b4:	2380      	movs	r3, #128	; 0x80
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e038      	b.n	800782e <UART_SetConfig+0x5a2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a5c      	ldr	r2, [pc, #368]	; (8007934 <UART_SetConfig+0x6a8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d130      	bne.n	8007828 <UART_SetConfig+0x59c>
 80077c6:	4b58      	ldr	r3, [pc, #352]	; (8007928 <UART_SetConfig+0x69c>)
 80077c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d826      	bhi.n	8007820 <UART_SetConfig+0x594>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x54c>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077f1 	.word	0x080077f1
 80077dc:	080077f9 	.word	0x080077f9
 80077e0:	08007801 	.word	0x08007801
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	2302      	movs	r3, #2
 80077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f6:	e01a      	b.n	800782e <UART_SetConfig+0x5a2>
 80077f8:	2304      	movs	r3, #4
 80077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fe:	e016      	b.n	800782e <UART_SetConfig+0x5a2>
 8007800:	2308      	movs	r3, #8
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e012      	b.n	800782e <UART_SetConfig+0x5a2>
 8007808:	2310      	movs	r3, #16
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e00e      	b.n	800782e <UART_SetConfig+0x5a2>
 8007810:	2320      	movs	r3, #32
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e00a      	b.n	800782e <UART_SetConfig+0x5a2>
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e006      	b.n	800782e <UART_SetConfig+0x5a2>
 8007820:	2380      	movs	r3, #128	; 0x80
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e002      	b.n	800782e <UART_SetConfig+0x5a2>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a40      	ldr	r2, [pc, #256]	; (8007934 <UART_SetConfig+0x6a8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	f040 80ef 	bne.w	8007a18 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800783a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800783e:	2b20      	cmp	r3, #32
 8007840:	dc46      	bgt.n	80078d0 <UART_SetConfig+0x644>
 8007842:	2b02      	cmp	r3, #2
 8007844:	f2c0 8081 	blt.w	800794a <UART_SetConfig+0x6be>
 8007848:	3b02      	subs	r3, #2
 800784a:	2b1e      	cmp	r3, #30
 800784c:	d87d      	bhi.n	800794a <UART_SetConfig+0x6be>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <UART_SetConfig+0x5c8>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078d7 	.word	0x080078d7
 8007858:	0800794b 	.word	0x0800794b
 800785c:	080078df 	.word	0x080078df
 8007860:	0800794b 	.word	0x0800794b
 8007864:	0800794b 	.word	0x0800794b
 8007868:	0800794b 	.word	0x0800794b
 800786c:	080078ef 	.word	0x080078ef
 8007870:	0800794b 	.word	0x0800794b
 8007874:	0800794b 	.word	0x0800794b
 8007878:	0800794b 	.word	0x0800794b
 800787c:	0800794b 	.word	0x0800794b
 8007880:	0800794b 	.word	0x0800794b
 8007884:	0800794b 	.word	0x0800794b
 8007888:	0800794b 	.word	0x0800794b
 800788c:	080078ff 	.word	0x080078ff
 8007890:	0800794b 	.word	0x0800794b
 8007894:	0800794b 	.word	0x0800794b
 8007898:	0800794b 	.word	0x0800794b
 800789c:	0800794b 	.word	0x0800794b
 80078a0:	0800794b 	.word	0x0800794b
 80078a4:	0800794b 	.word	0x0800794b
 80078a8:	0800794b 	.word	0x0800794b
 80078ac:	0800794b 	.word	0x0800794b
 80078b0:	0800794b 	.word	0x0800794b
 80078b4:	0800794b 	.word	0x0800794b
 80078b8:	0800794b 	.word	0x0800794b
 80078bc:	0800794b 	.word	0x0800794b
 80078c0:	0800794b 	.word	0x0800794b
 80078c4:	0800794b 	.word	0x0800794b
 80078c8:	0800794b 	.word	0x0800794b
 80078cc:	0800793d 	.word	0x0800793d
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d036      	beq.n	8007942 <UART_SetConfig+0x6b6>
 80078d4:	e039      	b.n	800794a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078d6:	f7fd fdad 	bl	8005434 <HAL_RCCEx_GetD3PCLK1Freq>
 80078da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80078dc:	e03b      	b.n	8007956 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078de:	f107 0314 	add.w	r3, r7, #20
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fd fdbc 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ec:	e033      	b.n	8007956 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ee:	f107 0308 	add.w	r3, r7, #8
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fd ff08 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078fc:	e02b      	b.n	8007956 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <UART_SetConfig+0x69c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800790a:	4b07      	ldr	r3, [pc, #28]	; (8007928 <UART_SetConfig+0x69c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	08db      	lsrs	r3, r3, #3
 8007910:	f003 0303 	and.w	r3, r3, #3
 8007914:	4a08      	ldr	r2, [pc, #32]	; (8007938 <UART_SetConfig+0x6ac>)
 8007916:	fa22 f303 	lsr.w	r3, r2, r3
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800791c:	e01b      	b.n	8007956 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <UART_SetConfig+0x6ac>)
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007922:	e018      	b.n	8007956 <UART_SetConfig+0x6ca>
 8007924:	40011400 	.word	0x40011400
 8007928:	58024400 	.word	0x58024400
 800792c:	40007800 	.word	0x40007800
 8007930:	40007c00 	.word	0x40007c00
 8007934:	58000c00 	.word	0x58000c00
 8007938:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800793c:	4bc4      	ldr	r3, [pc, #784]	; (8007c50 <UART_SetConfig+0x9c4>)
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007948:	e005      	b.n	8007956 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 81da 	beq.w	8007d12 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	4abc      	ldr	r2, [pc, #752]	; (8007c54 <UART_SetConfig+0x9c8>)
 8007964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007968:	461a      	mov	r2, r3
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007970:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4413      	add	r3, r2
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	429a      	cmp	r2, r3
 8007980:	d305      	bcc.n	800798e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	429a      	cmp	r2, r3
 800798c:	d903      	bls.n	8007996 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007994:	e1bd      	b.n	8007d12 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	4618      	mov	r0, r3
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	4aac      	ldr	r2, [pc, #688]	; (8007c54 <UART_SetConfig+0x9c8>)
 80079a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	f7f8 fc93 	bl	80002d8 <__aeabi_uldivmod>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	020b      	lsls	r3, r1, #8
 80079c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079c8:	0202      	lsls	r2, r0, #8
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	6849      	ldr	r1, [r1, #4]
 80079ce:	0849      	lsrs	r1, r1, #1
 80079d0:	4608      	mov	r0, r1
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	1814      	adds	r4, r2, r0
 80079d8:	eb43 0501 	adc.w	r5, r3, r1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	461a      	mov	r2, r3
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fc75 	bl	80002d8 <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4613      	mov	r3, r2
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fc:	d308      	bcc.n	8007a10 <UART_SetConfig+0x784>
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a04:	d204      	bcs.n	8007a10 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	e180      	b.n	8007d12 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a16:	e17c      	b.n	8007d12 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	f040 80bf 	bne.w	8007ba2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	dc49      	bgt.n	8007ac0 <UART_SetConfig+0x834>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	db7c      	blt.n	8007b2a <UART_SetConfig+0x89e>
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d87a      	bhi.n	8007b2a <UART_SetConfig+0x89e>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <UART_SetConfig+0x7b0>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007ac7 	.word	0x08007ac7
 8007a40:	08007acf 	.word	0x08007acf
 8007a44:	08007b2b 	.word	0x08007b2b
 8007a48:	08007b2b 	.word	0x08007b2b
 8007a4c:	08007ad7 	.word	0x08007ad7
 8007a50:	08007b2b 	.word	0x08007b2b
 8007a54:	08007b2b 	.word	0x08007b2b
 8007a58:	08007b2b 	.word	0x08007b2b
 8007a5c:	08007ae7 	.word	0x08007ae7
 8007a60:	08007b2b 	.word	0x08007b2b
 8007a64:	08007b2b 	.word	0x08007b2b
 8007a68:	08007b2b 	.word	0x08007b2b
 8007a6c:	08007b2b 	.word	0x08007b2b
 8007a70:	08007b2b 	.word	0x08007b2b
 8007a74:	08007b2b 	.word	0x08007b2b
 8007a78:	08007b2b 	.word	0x08007b2b
 8007a7c:	08007af7 	.word	0x08007af7
 8007a80:	08007b2b 	.word	0x08007b2b
 8007a84:	08007b2b 	.word	0x08007b2b
 8007a88:	08007b2b 	.word	0x08007b2b
 8007a8c:	08007b2b 	.word	0x08007b2b
 8007a90:	08007b2b 	.word	0x08007b2b
 8007a94:	08007b2b 	.word	0x08007b2b
 8007a98:	08007b2b 	.word	0x08007b2b
 8007a9c:	08007b2b 	.word	0x08007b2b
 8007aa0:	08007b2b 	.word	0x08007b2b
 8007aa4:	08007b2b 	.word	0x08007b2b
 8007aa8:	08007b2b 	.word	0x08007b2b
 8007aac:	08007b2b 	.word	0x08007b2b
 8007ab0:	08007b2b 	.word	0x08007b2b
 8007ab4:	08007b2b 	.word	0x08007b2b
 8007ab8:	08007b2b 	.word	0x08007b2b
 8007abc:	08007b1d 	.word	0x08007b1d
 8007ac0:	2b40      	cmp	r3, #64	; 0x40
 8007ac2:	d02e      	beq.n	8007b22 <UART_SetConfig+0x896>
 8007ac4:	e031      	b.n	8007b2a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac6:	f7fc fd49 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8007aca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007acc:	e033      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ace:	f7fc fd5b 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8007ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ad4:	e02f      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad6:	f107 0314 	add.w	r3, r7, #20
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fcc0 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae4:	e027      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fe0c 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007af4:	e01f      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af6:	4b58      	ldr	r3, [pc, #352]	; (8007c58 <UART_SetConfig+0x9cc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b02:	4b55      	ldr	r3, [pc, #340]	; (8007c58 <UART_SetConfig+0x9cc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	08db      	lsrs	r3, r3, #3
 8007b08:	f003 0303 	and.w	r3, r3, #3
 8007b0c:	4a53      	ldr	r2, [pc, #332]	; (8007c5c <UART_SetConfig+0x9d0>)
 8007b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b14:	e00f      	b.n	8007b36 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007b16:	4b51      	ldr	r3, [pc, #324]	; (8007c5c <UART_SetConfig+0x9d0>)
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1a:	e00c      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b1c:	4b4c      	ldr	r3, [pc, #304]	; (8007c50 <UART_SetConfig+0x9c4>)
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b20:	e009      	b.n	8007b36 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b28:	e005      	b.n	8007b36 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80ea 	beq.w	8007d12 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	4a44      	ldr	r2, [pc, #272]	; (8007c54 <UART_SetConfig+0x9c8>)
 8007b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b50:	005a      	lsls	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	085b      	lsrs	r3, r3, #1
 8007b58:	441a      	add	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	2b0f      	cmp	r3, #15
 8007b6a:	d916      	bls.n	8007b9a <UART_SetConfig+0x90e>
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b72:	d212      	bcs.n	8007b9a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f023 030f 	bic.w	r3, r3, #15
 8007b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b96:	60da      	str	r2, [r3, #12]
 8007b98:	e0bb      	b.n	8007d12 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ba0:	e0b7      	b.n	8007d12 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	dc4a      	bgt.n	8007c40 <UART_SetConfig+0x9b4>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f2c0 8086 	blt.w	8007cbc <UART_SetConfig+0xa30>
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	f200 8083 	bhi.w	8007cbc <UART_SetConfig+0xa30>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x930>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007c47 	.word	0x08007c47
 8007bc0:	08007c61 	.word	0x08007c61
 8007bc4:	08007cbd 	.word	0x08007cbd
 8007bc8:	08007cbd 	.word	0x08007cbd
 8007bcc:	08007c69 	.word	0x08007c69
 8007bd0:	08007cbd 	.word	0x08007cbd
 8007bd4:	08007cbd 	.word	0x08007cbd
 8007bd8:	08007cbd 	.word	0x08007cbd
 8007bdc:	08007c79 	.word	0x08007c79
 8007be0:	08007cbd 	.word	0x08007cbd
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cbd 	.word	0x08007cbd
 8007bec:	08007cbd 	.word	0x08007cbd
 8007bf0:	08007cbd 	.word	0x08007cbd
 8007bf4:	08007cbd 	.word	0x08007cbd
 8007bf8:	08007cbd 	.word	0x08007cbd
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007cbd 	.word	0x08007cbd
 8007c04:	08007cbd 	.word	0x08007cbd
 8007c08:	08007cbd 	.word	0x08007cbd
 8007c0c:	08007cbd 	.word	0x08007cbd
 8007c10:	08007cbd 	.word	0x08007cbd
 8007c14:	08007cbd 	.word	0x08007cbd
 8007c18:	08007cbd 	.word	0x08007cbd
 8007c1c:	08007cbd 	.word	0x08007cbd
 8007c20:	08007cbd 	.word	0x08007cbd
 8007c24:	08007cbd 	.word	0x08007cbd
 8007c28:	08007cbd 	.word	0x08007cbd
 8007c2c:	08007cbd 	.word	0x08007cbd
 8007c30:	08007cbd 	.word	0x08007cbd
 8007c34:	08007cbd 	.word	0x08007cbd
 8007c38:	08007cbd 	.word	0x08007cbd
 8007c3c:	08007caf 	.word	0x08007caf
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d037      	beq.n	8007cb4 <UART_SetConfig+0xa28>
 8007c44:	e03a      	b.n	8007cbc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c46:	f7fc fc89 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8007c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c4c:	e03c      	b.n	8007cc8 <UART_SetConfig+0xa3c>
 8007c4e:	bf00      	nop
 8007c50:	003d0900 	.word	0x003d0900
 8007c54:	08008aa8 	.word	0x08008aa8
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c60:	f7fc fc92 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8007c64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c66:	e02f      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c68:	f107 0314 	add.w	r3, r7, #20
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fd fbf7 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c76:	e027      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c78:	f107 0308 	add.w	r3, r7, #8
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fd43 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c86:	e01f      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c88:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <UART_SetConfig+0xab0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c94:	4b29      	ldr	r3, [pc, #164]	; (8007d3c <UART_SetConfig+0xab0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	08db      	lsrs	r3, r3, #3
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	4a28      	ldr	r2, [pc, #160]	; (8007d40 <UART_SetConfig+0xab4>)
 8007ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ca6:	e00f      	b.n	8007cc8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007ca8:	4b25      	ldr	r3, [pc, #148]	; (8007d40 <UART_SetConfig+0xab4>)
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cac:	e00c      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cae:	4b25      	ldr	r3, [pc, #148]	; (8007d44 <UART_SetConfig+0xab8>)
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cb2:	e009      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cba:	e005      	b.n	8007cc8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d021      	beq.n	8007d12 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	; (8007d48 <UART_SetConfig+0xabc>)
 8007cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	441a      	add	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d908      	bls.n	8007d0c <UART_SetConfig+0xa80>
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d00:	d204      	bcs.n	8007d0c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d08:	60da      	str	r2, [r3, #12]
 8007d0a:	e002      	b.n	8007d12 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3738      	adds	r7, #56	; 0x38
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bdb0      	pop	{r4, r5, r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	03d09000 	.word	0x03d09000
 8007d44:	003d0900 	.word	0x003d0900
 8007d48:	08008aa8 	.word	0x08008aa8

08007d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00a      	beq.n	8007dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01a      	beq.n	8007e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e4a:	d10a      	bne.n	8007e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	605a      	str	r2, [r3, #4]
  }
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea0:	f7f9 ff10 	bl	8001cc4 <HAL_GetTick>
 8007ea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d10e      	bne.n	8007ed2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f82f 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e025      	b.n	8007f1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d10e      	bne.n	8007efe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f819 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e00f      	b.n	8007f1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f36:	e062      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3e:	d05e      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7f9 fec0 	bl	8001cc4 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d11d      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e045      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02e      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fae:	d126      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0201 	bic.w	r2, r2, #1
 8007fd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e00f      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	bf0c      	ite	eq
 800800e:	2301      	moveq	r3, #1
 8008010:	2300      	movne	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	429a      	cmp	r2, r3
 800801a:	d08d      	beq.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_UARTEx_DisableFifoMode+0x16>
 8008038:	2302      	movs	r3, #2
 800803a:	e027      	b.n	800808c <HAL_UARTEx_DisableFifoMode+0x66>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2224      	movs	r2, #36	; 0x24
 8008048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800806a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e02d      	b.n	800810c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	; 0x24
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f84f 	bl	8008190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008128:	2302      	movs	r3, #2
 800812a:	e02d      	b.n	8008188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	; 0x24
 8008138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0201 	bic.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f811 	bl	8008190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081b0:	e031      	b.n	8008216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081b2:	2310      	movs	r3, #16
 80081b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081b6:	2310      	movs	r3, #16
 80081b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	0e5b      	lsrs	r3, r3, #25
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0f5b      	lsrs	r3, r3, #29
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	7b3a      	ldrb	r2, [r7, #12]
 80081de:	4911      	ldr	r1, [pc, #68]	; (8008224 <UARTEx_SetNbDataToProcess+0x94>)
 80081e0:	5c8a      	ldrb	r2, [r1, r2]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081e6:	7b3a      	ldrb	r2, [r7, #12]
 80081e8:	490f      	ldr	r1, [pc, #60]	; (8008228 <UARTEx_SetNbDataToProcess+0x98>)
 80081ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	7b7a      	ldrb	r2, [r7, #13]
 80081fc:	4909      	ldr	r1, [pc, #36]	; (8008224 <UARTEx_SetNbDataToProcess+0x94>)
 80081fe:	5c8a      	ldrb	r2, [r1, r2]
 8008200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008204:	7b7a      	ldrb	r2, [r7, #13]
 8008206:	4908      	ldr	r1, [pc, #32]	; (8008228 <UARTEx_SetNbDataToProcess+0x98>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800820a:	fb93 f3f2 	sdiv	r3, r3, r2
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	08008ac0 	.word	0x08008ac0
 8008228:	08008ac8 	.word	0x08008ac8

0800822c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800822c:	b084      	sub	sp, #16
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	f107 001c 	add.w	r0, r7, #28
 800823a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2b01      	cmp	r3, #1
 8008242:	d120      	bne.n	8008286 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	4b2a      	ldr	r3, [pc, #168]	; (8008300 <USB_CoreInit+0xd4>)
 8008256:	4013      	ands	r3, r2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826a:	2b01      	cmp	r3, #1
 800826c:	d105      	bne.n	800827a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa60 	bl	8008740 <USB_CoreReset>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e01a      	b.n	80082bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa54 	bl	8008740 <USB_CoreReset>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800829c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
 80082ae:	e005      	b.n	80082bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d116      	bne.n	80082f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <USB_CoreInit+0xd8>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f043 0206 	orr.w	r2, r3, #6
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f043 0220 	orr.w	r2, r3, #32
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082fc:	b004      	add	sp, #16
 80082fe:	4770      	bx	lr
 8008300:	ffbdffbf 	.word	0xffbdffbf
 8008304:	03ee0000 	.word	0x03ee0000

08008308 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f023 0201 	bic.w	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d106      	bne.n	8008356 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
 8008354:	e00b      	b.n	800836e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	e001      	b.n	800836e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e003      	b.n	8008376 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800836e:	2032      	movs	r0, #50	; 0x32
 8008370:	f7f9 fcb4 	bl	8001cdc <HAL_Delay>

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008380:	b084      	sub	sp, #16
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800838e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	e009      	b.n	80083b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3340      	adds	r3, #64	; 0x40
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3301      	adds	r3, #1
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b0e      	cmp	r3, #14
 80083b8:	d9f2      	bls.n	80083a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11c      	bne.n	80083fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ce:	f043 0302 	orr.w	r3, r3, #2
 80083d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	e005      	b.n	8008406 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008418:	4619      	mov	r1, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008420:	461a      	mov	r2, r3
 8008422:	680b      	ldr	r3, [r1, #0]
 8008424:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	2b01      	cmp	r3, #1
 800842a:	d10c      	bne.n	8008446 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f949 	bl	80086cc <USB_SetDevSpeed>
 800843a:	e008      	b.n	800844e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800843c:	2101      	movs	r1, #1
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f944 	bl	80086cc <USB_SetDevSpeed>
 8008444:	e003      	b.n	800844e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008446:	2103      	movs	r1, #3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f93f 	bl	80086cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800844e:	2110      	movs	r1, #16
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f8f3 	bl	800863c <USB_FlushTxFifo>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f911 	bl	8008688 <USB_FlushRxFifo>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	461a      	mov	r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	461a      	mov	r2, r3
 8008490:	2300      	movs	r3, #0
 8008492:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	e043      	b.n	8008522 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084b0:	d118      	bne.n	80084e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	461a      	mov	r2, r3
 80084c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e013      	b.n	80084f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084da:	461a      	mov	r2, r3
 80084dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e008      	b.n	80084f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	461a      	mov	r2, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	461a      	mov	r2, r3
 8008504:	2300      	movs	r3, #0
 8008506:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	461a      	mov	r2, r3
 8008516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800851a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	3301      	adds	r3, #1
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	429a      	cmp	r2, r3
 8008528:	d3b7      	bcc.n	800849a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852a:	2300      	movs	r3, #0
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	e043      	b.n	80085b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008546:	d118      	bne.n	800857a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	461a      	mov	r2, r3
 800855c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e013      	b.n	800858c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008570:	461a      	mov	r2, r3
 8008572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	e008      	b.n	800858c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	2300      	movs	r3, #0
 800858a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	461a      	mov	r2, r3
 800859a:	2300      	movs	r3, #0
 800859c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3301      	adds	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d3b7      	bcc.n	8008530 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f043 0210 	orr.w	r2, r3, #16
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <USB_DevInit+0x2b4>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f043 0208 	orr.w	r2, r3, #8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d105      	bne.n	8008624 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <USB_DevInit+0x2b8>)
 800861e:	4313      	orrs	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008630:	b004      	add	sp, #16
 8008632:	4770      	bx	lr
 8008634:	803c3800 	.word	0x803c3800
 8008638:	40000004 	.word	0x40000004

0800863c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	019b      	lsls	r3, r3, #6
 800864e:	f043 0220 	orr.w	r2, r3, #32
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <USB_FlushTxFifo+0x48>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b20      	cmp	r3, #32
 8008672:	d0f0      	beq.n	8008656 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	00030d40 	.word	0x00030d40

08008688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2210      	movs	r2, #16
 8008698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <USB_FlushRxFifo+0x40>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d901      	bls.n	80086ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e006      	b.n	80086ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d0f0      	beq.n	800869a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	00030d40 	.word	0x00030d40

080086cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086ec:	4313      	orrs	r3, r2
 80086ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008718:	f023 0303 	bic.w	r3, r3, #3
 800871c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872c:	f043 0302 	orr.w	r3, r3, #2
 8008730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <USB_CoreReset+0x64>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e01b      	b.n	8008796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	daf2      	bge.n	800874c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f043 0201 	orr.w	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <USB_CoreReset+0x64>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e006      	b.n	8008796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	d0f0      	beq.n	8008776 <USB_CoreReset+0x36>

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <_Znwj>:
 80087a8:	2801      	cmp	r0, #1
 80087aa:	bf38      	it	cc
 80087ac:	2001      	movcc	r0, #1
 80087ae:	b510      	push	{r4, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f88a 	bl	80088cc <malloc>
 80087b8:	b930      	cbnz	r0, 80087c8 <_Znwj+0x20>
 80087ba:	f000 f807 	bl	80087cc <_ZSt15get_new_handlerv>
 80087be:	b908      	cbnz	r0, 80087c4 <_Znwj+0x1c>
 80087c0:	f000 f852 	bl	8008868 <abort>
 80087c4:	4780      	blx	r0
 80087c6:	e7f4      	b.n	80087b2 <_Znwj+0xa>
 80087c8:	bd10      	pop	{r4, pc}
	...

080087cc <_ZSt15get_new_handlerv>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <_ZSt15get_new_handlerv+0xc>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	f3bf 8f5b 	dmb	ish
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	2000074c 	.word	0x2000074c

080087dc <round>:
 80087dc:	ee10 1a90 	vmov	r1, s1
 80087e0:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80087e4:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80087e8:	2a13      	cmp	r2, #19
 80087ea:	b510      	push	{r4, lr}
 80087ec:	ee10 3a10 	vmov	r3, s0
 80087f0:	dc19      	bgt.n	8008826 <round+0x4a>
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	da09      	bge.n	800880a <round+0x2e>
 80087f6:	3201      	adds	r2, #1
 80087f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087fc:	d103      	bne.n	8008806 <round+0x2a>
 80087fe:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008802:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008806:	2000      	movs	r0, #0
 8008808:	e027      	b.n	800885a <round+0x7e>
 800880a:	4816      	ldr	r0, [pc, #88]	; (8008864 <round+0x88>)
 800880c:	4110      	asrs	r0, r2
 800880e:	ea01 0400 	and.w	r4, r1, r0
 8008812:	4323      	orrs	r3, r4
 8008814:	d00e      	beq.n	8008834 <round+0x58>
 8008816:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800881a:	fa43 f202 	asr.w	r2, r3, r2
 800881e:	4411      	add	r1, r2
 8008820:	ea21 0100 	bic.w	r1, r1, r0
 8008824:	e7ef      	b.n	8008806 <round+0x2a>
 8008826:	2a33      	cmp	r2, #51	; 0x33
 8008828:	dd05      	ble.n	8008836 <round+0x5a>
 800882a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800882e:	d101      	bne.n	8008834 <round+0x58>
 8008830:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008834:	bd10      	pop	{r4, pc}
 8008836:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800883a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800883e:	fa20 f404 	lsr.w	r4, r0, r4
 8008842:	4223      	tst	r3, r4
 8008844:	d0f6      	beq.n	8008834 <round+0x58>
 8008846:	2001      	movs	r0, #1
 8008848:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800884c:	fa00 f202 	lsl.w	r2, r0, r2
 8008850:	189b      	adds	r3, r3, r2
 8008852:	bf28      	it	cs
 8008854:	1809      	addcs	r1, r1, r0
 8008856:	ea23 0004 	bic.w	r0, r3, r4
 800885a:	460b      	mov	r3, r1
 800885c:	4602      	mov	r2, r0
 800885e:	ec43 2b10 	vmov	d0, r2, r3
 8008862:	e7e7      	b.n	8008834 <round+0x58>
 8008864:	000fffff 	.word	0x000fffff

08008868 <abort>:
 8008868:	b508      	push	{r3, lr}
 800886a:	2006      	movs	r0, #6
 800886c:	f000 f8d0 	bl	8008a10 <raise>
 8008870:	2001      	movs	r0, #1
 8008872:	f7f9 f8ab 	bl	80019cc <_exit>
	...

08008878 <__errno>:
 8008878:	4b01      	ldr	r3, [pc, #4]	; (8008880 <__errno+0x8>)
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000010 	.word	0x20000010

08008884 <__libc_init_array>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4d0d      	ldr	r5, [pc, #52]	; (80088bc <__libc_init_array+0x38>)
 8008888:	4c0d      	ldr	r4, [pc, #52]	; (80088c0 <__libc_init_array+0x3c>)
 800888a:	1b64      	subs	r4, r4, r5
 800888c:	10a4      	asrs	r4, r4, #2
 800888e:	2600      	movs	r6, #0
 8008890:	42a6      	cmp	r6, r4
 8008892:	d109      	bne.n	80088a8 <__libc_init_array+0x24>
 8008894:	4d0b      	ldr	r5, [pc, #44]	; (80088c4 <__libc_init_array+0x40>)
 8008896:	4c0c      	ldr	r4, [pc, #48]	; (80088c8 <__libc_init_array+0x44>)
 8008898:	f000 f8e4 	bl	8008a64 <_init>
 800889c:	1b64      	subs	r4, r4, r5
 800889e:	10a4      	asrs	r4, r4, #2
 80088a0:	2600      	movs	r6, #0
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	d105      	bne.n	80088b2 <__libc_init_array+0x2e>
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ac:	4798      	blx	r3
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7ee      	b.n	8008890 <__libc_init_array+0xc>
 80088b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b6:	4798      	blx	r3
 80088b8:	3601      	adds	r6, #1
 80088ba:	e7f2      	b.n	80088a2 <__libc_init_array+0x1e>
 80088bc:	08008ad8 	.word	0x08008ad8
 80088c0:	08008ad8 	.word	0x08008ad8
 80088c4:	08008ad8 	.word	0x08008ad8
 80088c8:	08008ae0 	.word	0x08008ae0

080088cc <malloc>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <malloc+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b80b 	b.w	80088ec <_malloc_r>
 80088d6:	bf00      	nop
 80088d8:	20000010 	.word	0x20000010

080088dc <memset>:
 80088dc:	4402      	add	r2, r0
 80088de:	4603      	mov	r3, r0
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d100      	bne.n	80088e6 <memset+0xa>
 80088e4:	4770      	bx	lr
 80088e6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ea:	e7f9      	b.n	80088e0 <memset+0x4>

080088ec <_malloc_r>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	1ccd      	adds	r5, r1, #3
 80088f0:	f025 0503 	bic.w	r5, r5, #3
 80088f4:	3508      	adds	r5, #8
 80088f6:	2d0c      	cmp	r5, #12
 80088f8:	bf38      	it	cc
 80088fa:	250c      	movcc	r5, #12
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	4606      	mov	r6, r0
 8008900:	db01      	blt.n	8008906 <_malloc_r+0x1a>
 8008902:	42a9      	cmp	r1, r5
 8008904:	d903      	bls.n	800890e <_malloc_r+0x22>
 8008906:	230c      	movs	r3, #12
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	2000      	movs	r0, #0
 800890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890e:	f000 f89b 	bl	8008a48 <__malloc_lock>
 8008912:	4921      	ldr	r1, [pc, #132]	; (8008998 <_malloc_r+0xac>)
 8008914:	680a      	ldr	r2, [r1, #0]
 8008916:	4614      	mov	r4, r2
 8008918:	b99c      	cbnz	r4, 8008942 <_malloc_r+0x56>
 800891a:	4f20      	ldr	r7, [pc, #128]	; (800899c <_malloc_r+0xb0>)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	b923      	cbnz	r3, 800892a <_malloc_r+0x3e>
 8008920:	4621      	mov	r1, r4
 8008922:	4630      	mov	r0, r6
 8008924:	f000 f83c 	bl	80089a0 <_sbrk_r>
 8008928:	6038      	str	r0, [r7, #0]
 800892a:	4629      	mov	r1, r5
 800892c:	4630      	mov	r0, r6
 800892e:	f000 f837 	bl	80089a0 <_sbrk_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d123      	bne.n	800897e <_malloc_r+0x92>
 8008936:	230c      	movs	r3, #12
 8008938:	6033      	str	r3, [r6, #0]
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f88a 	bl	8008a54 <__malloc_unlock>
 8008940:	e7e3      	b.n	800890a <_malloc_r+0x1e>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	1b5b      	subs	r3, r3, r5
 8008946:	d417      	bmi.n	8008978 <_malloc_r+0x8c>
 8008948:	2b0b      	cmp	r3, #11
 800894a:	d903      	bls.n	8008954 <_malloc_r+0x68>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	441c      	add	r4, r3
 8008950:	6025      	str	r5, [r4, #0]
 8008952:	e004      	b.n	800895e <_malloc_r+0x72>
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	42a2      	cmp	r2, r4
 8008958:	bf0c      	ite	eq
 800895a:	600b      	streq	r3, [r1, #0]
 800895c:	6053      	strne	r3, [r2, #4]
 800895e:	4630      	mov	r0, r6
 8008960:	f000 f878 	bl	8008a54 <__malloc_unlock>
 8008964:	f104 000b 	add.w	r0, r4, #11
 8008968:	1d23      	adds	r3, r4, #4
 800896a:	f020 0007 	bic.w	r0, r0, #7
 800896e:	1ac2      	subs	r2, r0, r3
 8008970:	d0cc      	beq.n	800890c <_malloc_r+0x20>
 8008972:	1a1b      	subs	r3, r3, r0
 8008974:	50a3      	str	r3, [r4, r2]
 8008976:	e7c9      	b.n	800890c <_malloc_r+0x20>
 8008978:	4622      	mov	r2, r4
 800897a:	6864      	ldr	r4, [r4, #4]
 800897c:	e7cc      	b.n	8008918 <_malloc_r+0x2c>
 800897e:	1cc4      	adds	r4, r0, #3
 8008980:	f024 0403 	bic.w	r4, r4, #3
 8008984:	42a0      	cmp	r0, r4
 8008986:	d0e3      	beq.n	8008950 <_malloc_r+0x64>
 8008988:	1a21      	subs	r1, r4, r0
 800898a:	4630      	mov	r0, r6
 800898c:	f000 f808 	bl	80089a0 <_sbrk_r>
 8008990:	3001      	adds	r0, #1
 8008992:	d1dd      	bne.n	8008950 <_malloc_r+0x64>
 8008994:	e7cf      	b.n	8008936 <_malloc_r+0x4a>
 8008996:	bf00      	nop
 8008998:	20000750 	.word	0x20000750
 800899c:	20000754 	.word	0x20000754

080089a0 <_sbrk_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d06      	ldr	r5, [pc, #24]	; (80089bc <_sbrk_r+0x1c>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	f7f9 f818 	bl	80019e0 <_sbrk>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_sbrk_r+0x1a>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_sbrk_r+0x1a>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	2000075c 	.word	0x2000075c

080089c0 <_raise_r>:
 80089c0:	291f      	cmp	r1, #31
 80089c2:	b538      	push	{r3, r4, r5, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	d904      	bls.n	80089d4 <_raise_r+0x14>
 80089ca:	2316      	movs	r3, #22
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089d6:	b112      	cbz	r2, 80089de <_raise_r+0x1e>
 80089d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089dc:	b94b      	cbnz	r3, 80089f2 <_raise_r+0x32>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f830 	bl	8008a44 <_getpid_r>
 80089e4:	462a      	mov	r2, r5
 80089e6:	4601      	mov	r1, r0
 80089e8:	4620      	mov	r0, r4
 80089ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ee:	f000 b817 	b.w	8008a20 <_kill_r>
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d00a      	beq.n	8008a0c <_raise_r+0x4c>
 80089f6:	1c59      	adds	r1, r3, #1
 80089f8:	d103      	bne.n	8008a02 <_raise_r+0x42>
 80089fa:	2316      	movs	r3, #22
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7e7      	b.n	80089d2 <_raise_r+0x12>
 8008a02:	2400      	movs	r4, #0
 8008a04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a08:	4628      	mov	r0, r5
 8008a0a:	4798      	blx	r3
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7e0      	b.n	80089d2 <_raise_r+0x12>

08008a10 <raise>:
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <raise+0xc>)
 8008a12:	4601      	mov	r1, r0
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	f7ff bfd3 	b.w	80089c0 <_raise_r>
 8008a1a:	bf00      	nop
 8008a1c:	20000010 	.word	0x20000010

08008a20 <_kill_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	; (8008a40 <_kill_r+0x20>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	f7f8 ffbd 	bl	80019ac <_kill>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d102      	bne.n	8008a3c <_kill_r+0x1c>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b103      	cbz	r3, 8008a3c <_kill_r+0x1c>
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	bd38      	pop	{r3, r4, r5, pc}
 8008a3e:	bf00      	nop
 8008a40:	2000075c 	.word	0x2000075c

08008a44 <_getpid_r>:
 8008a44:	f7f8 bfaa 	b.w	800199c <_getpid>

08008a48 <__malloc_lock>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__malloc_lock+0x8>)
 8008a4a:	f000 b809 	b.w	8008a60 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20000764 	.word	0x20000764

08008a54 <__malloc_unlock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__malloc_unlock+0x8>)
 8008a56:	f000 b804 	b.w	8008a62 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20000764 	.word	0x20000764

08008a60 <__retarget_lock_acquire_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <__retarget_lock_release_recursive>:
 8008a62:	4770      	bx	lr

08008a64 <_init>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr

08008a70 <_fini>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr
